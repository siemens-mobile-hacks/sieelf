##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    13/Feb/2012  22:49:41 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\TalkPhoneND\main.c              #
#    Command line    =  D:\SVN\SieELF\SieELF\TalkPhoneND\main.c -lC          #
#                       D:\SVN\SieELF\SieELF\TalkPhoneND\Release_SGOLD\List\ #
#                        -o D:\SVN\SieELF\SieELF\TalkPhoneND\Release_SGOLD\O #
#                       bj\ -s9 --no_unroll --no_clustering --cpu_mode arm   #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config "D:\Program  #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "D:\Program     #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  D:\SVN\SieELF\SieELF\TalkPhoneND\Release_SGOLD\List\ #
#                       main.lst                                             #
#    Object file     =  D:\SVN\SieELF\SieELF\TalkPhoneND\Release_SGOLD\Obj\m #
#                       ain.r79                                              #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\TalkPhoneND\main.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\playsound.h"
      3          #include "..\inc\cfg_items.h"
      4          #include "conf_loader.h"
      5          #include "TalkPhone.h"
      6          
      7          extern void kill_data(void *p, void (*func_p)(void *));
      8          

   \                                 In segment DATA_C, align 4, align-sorted
      9          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     10          
     11          typedef struct
     12          {
     13            CSM_RAM csm;
     14          }MAIN_CSM;
     15          

   \                                 In segment DATA_I, align 4, align-sorted
     16          int IDLECSM_ID=-1;
   \                     IDLECSM_ID:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for IDLECSM_ID>`
     17          

   \                                 In segment DATA_Z, align 4, align-sorted
     18          unsigned int vibra_count1;
   \                     vibra_count1:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     19          int MAINCSM_ID;
   \                     MAINCSM_ID:
   \   00000000                      DS8 4
     20          

   \                                 In segment DATA_Z, align 4, align-sorted
     21          TTime CurTime;
   \                     CurTime:
   \   00000000                      DS8 8

   \                                 In segment DATA_Z, align 4, align-sorted
     22          TDate date;
   \                     `date`:
   \   00000000                      DS8 8
     23          
     24          //=============================Проигрывание звука===============================

   \                                 In segment DATA_Z, align 4, align-sorted
     25          int PLAY_ID=0;
   \                     PLAY_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     26          unsigned int NEXT_PLAY_FUNK=0;
   \                     NEXT_PLAY_FUNK:
   \   00000000                      DS8 4
     27          /*
     28          0 - ничего
     29          //1 - SayTime
     30          1 - SayHourDig
     31          2 - SayHourVoice
     32          3 - SayMinAllDig
     33          4 - SayMinDig
     34          5 - SayMinVoice
     35          */
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          void Play(const char *fpath, const char *fname)
     38          {
   \                     Play:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
     39                WSHDR* sndPath=AllocWS(128);
   \   00000010   8000A0E3           MOV      R0,#+128
   \   00000014   250100EF           SWI      +293
   \   00000018   0040A0E1           MOV      R4,R0
     40                WSHDR* sndFName=AllocWS(128);
   \   0000001C   8000A0E3           MOV      R0,#+128
   \   00000020   250100EF           SWI      +293
   \   00000024   0050A0E1           MOV      R5,R0
     41          
     42                wsprintf(sndPath, fpath);
   \   00000028   0610A0E1           MOV      R1,R6
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   240100EF           SWI      +292
     43                wsprintf(sndFName, fname);
   \   00000034   0710A0E1           MOV      R1,R7
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   240100EF           SWI      +292
     44            
     45          
     46                PLAYFILE_OPT _sfo1;
     47                zeromem(&_sfo1,sizeof(PLAYFILE_OPT));
   \   00000040   1810A0E3           MOV      R1,#+24
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   1D0100EF           SWI      +285
     48                _sfo1.repeat_num=1;
     49                _sfo1.time_between_play=0;
     50                _sfo1.play_first=0;
     51                _sfo1.volume=volume;
   \   0000004C   68209FE5           LDR      R2,??Play_0      ;; volume
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   B000CDE1           STRH     R0,[SP, #+0]
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   04108DE5           STR      R1,[SP, #+4]
   \   00000060   08108DE5           STR      R1,[SP, #+8]
   \   00000064   002092E5           LDR      R2,[R2, #+0]
     52              
     53                #ifdef NEWSGOLD
     54                  _sfo1.unk6=1;
     55                  _sfo1.unk7=1;
     56                  _sfo1.unk9=2;
     57                  PLAY_ID=PlayFile(0x10, sndPath, sndFName, MMI_CEPID, MSG_PLAYFILE_REPORT, &_sfo1);
     58                #else
     59                    #ifdef X75
     60                      _sfo1.unk4=0x80000000;
     61                      _sfo1.unk5=1;
     62                      PLAY_ID=PlayFile(0xC, sndPath, sndFName, 0, MMI_CEPID, MSG_PLAYFILE_REPORT, &_sfo1);
     63                    #else
     64                      _sfo1.unk5=1;
     65                      PLAY_ID=PlayFile(0xC, sndPath, sndFName, MMI_CEPID, MSG_PLAYFILE_REPORT, &_sfo1);
   \   00000068   0930A0E3           MOV      R3,#+9
   \   0000006C   0C208DE5           STR      R2,[SP, #+12]
   \   00000070   10008DE5           STR      R0,[SP, #+16]
   \   00000074   0D00A0E1           MOV      R0,SP
   \   00000078   01002DE9           PUSH     {R0}
   \   0000007C   423C83E3           ORR      R3,R3,#0x4200
   \   00000080   0520A0E1           MOV      R2,R5
   \   00000084   0410A0E1           MOV      R1,R4
   \   00000088   6700A0E3           MOV      R0,#+103
   \   0000008C   400F80E3           ORR      R0,R0,#0x100
   \   00000090   01002DE9           PUSH     {R0}
   \   00000094   0C00A0E3           MOV      R0,#+12
   \   00000098   4A0000EF           SWI      +74
   \   0000009C   ........           LDR      R1,??DataTable26  ;; PLAY_ID
   \   000000A0   000081E5           STR      R0,[R1, #+0]
     66                    #endif
     67                #endif 
     68          
     69                FreeWS(sndPath);
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   290100EF           SWI      +297
     70                FreeWS(sndFName);
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   290100EF           SWI      +297
     71          }
   \   000000B4   20D08DE2           ADD      SP,SP,#+32
   \   000000B8   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??Play_0:
   \   000000BC   ........           DC32     volume
     72          
     73          //++++++++++++++++++++++++++++++Проговаривание времени+++++++++++++++++++++++++++++++++
     74          
     75          //-----------------------------------------------------------

   \                                 In segment DATA_Z, align 4, align-sorted
     76          GBSTMR tmr_vibra;
   \                     tmr_vibra:
   \   00000000                      DS8 16
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          void start_vibra(void)
     79          {
     80            void stop_vibra(void);
     81            if ((Is_Vibra_Enabled)&&(!IsCalling()))
   \                     start_vibra:
   \   00000000   38009FE5           LDR      R0,??start_vibra_0  ;; Is_Vibra_Enabled
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD08           POPEQ    {PC}
   \   00000014   6E0000EF           SWI      +110
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0080BD18           POPNE    {PC}
     82            {
     83              SetVibration(vibra_power);
   \   00000020   1C009FE5           LDR      R0,??start_vibra_0+0x4  ;; vibra_power
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   7C0000EF           SWI      +124
     84              GBS_StartTimerProc(&tmr_vibra,216>>1,stop_vibra);
   \   0000002C   14209FE5           LDR      R2,??start_vibra_0+0x8  ;; stop_vibra
   \   00000030   ........           LDR      R0,??DataTable30  ;; tmr_vibra
   \   00000034   6C10A0E3           MOV      R1,#+108
   \   00000038   4D0000EF           SWI      +77
     85            }  
     86          }
   \   0000003C   0080BDE8           POP      {PC}             ;; return
   \                     ??start_vibra_0:
   \   00000040   ........           DC32     Is_Vibra_Enabled
   \   00000044   ........           DC32     vibra_power
   \   00000048   ........           DC32     stop_vibra
     87          

   \                                 In segment CODE, align 4, keep-with-next
     88          void stop_vibra(void)
     89          {
   \                     stop_vibra:
   \   00000000   00402DE9           PUSH     {LR}
     90            SetVibration(0);
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   7C0000EF           SWI      +124
     91            if (--vibra_count1)
   \   0000000C   ........           LDR      R0,??DataTable23  ;; vibra_count1
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   011051E2           SUBS     R1,R1,#+1
   \   00000018   001080E5           STR      R1,[R0, #+0]
   \   0000001C   0080BD08           POPEQ    {PC}
     92            {
     93              GBS_StartTimerProc(&tmr_vibra,216>>1,start_vibra);
   \   00000020   0C209FE5           LDR      R2,??stop_vibra_0  ;; start_vibra
   \   00000024   ........           LDR      R0,??DataTable30  ;; tmr_vibra
   \   00000028   6C10A0E3           MOV      R1,#+108
   \   0000002C   4D0000EF           SWI      +77
     94            }
     95          }
   \   00000030   0080BDE8           POP      {PC}             ;; return
   \                     ??stop_vibra_0:
   \   00000034   ........           DC32     start_vibra
     96          //----------------------------------------------------------
     97          
     98          

   \                                 In segment CODE, align 4, keep-with-next
     99          void SayMinVoice()
    100          {
   \                     SayMinVoice:
   \   00000000   ........           LDR      R0,??DataTable8  ;; CurTime + 1
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000000C   ........           LDR      R0,??DataTable24  ;; folder_path
   \   00000010   0A0051E3           CMP      R1,#+10
   \   00000014   0300003A           BCC      ??SayMinVoice_1
   \   00000018   140051E3           CMP      R1,#+20
   \   0000001C   0100002A           BCS      ??SayMinVoice_1
    101              if (CurTime.min>=10 && CurTime.min<=19) Play(folder_path, "min3.wav");
   \                     ??SayMinVoice_2:
   \   00000020   58109FE5           LDR      R1,??SayMinVoice_3  ;; `?<Constant "min3.wav">`
   \   00000024   100000EA           B        ??SayMinVoice_4
    102                else
    103                  {
    104                    switch (CurTime.min%10)
   \                     ??SayMinVoice_1:
   \   00000028   ........           LDR      R2,??DataTable10  ;; 0x66666667
   \   0000002C   9132CCE0           SMULL    R3,R12,R1,R2
   \   00000030   0A30A0E3           MOV      R3,#+10
   \   00000034   4CC1A0E1           ASR      R12,R12,#+2
   \   00000038   930C0CE0           MUL      R12,R3,R12
   \   0000003C   0C1041E0           SUB      R1,R1,R12
   \   00000040   090051E3           CMP      R1,#+9
   \   00000044   0900008A           BHI      ??SayMinVoice_5
   \   00000048   012F8FE2           ADR      R2,??SayMinVoice_0
   \   0000004C   D12092E1           LDRSB    R2,[R2, R1]
   \   00000050   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??SayMinVoice_0:
   \   00000054   F2020404           DC8      +242,+2,+4,+4
   \   00000058   04F2F2F2           DC8      +4,+242,+242,+242
   \   0000005C   F2F20000           DC8      +242,+242,+0,+0
    105                      {
    106                        case 1:
    107                          Play(folder_path, "min2.wav");
   \                     ??SayMinVoice_6:
   \   00000060   1C109FE5           LDR      R1,??SayMinVoice_3+0x4  ;; `?<Constant "min2.wav">`
   \   00000064   000000EA           B        ??SayMinVoice_4
    108                        break;
    109                        case 2: case 3: case 4:
    110                          Play(folder_path, "min1.wav");
   \                     ??SayMinVoice_7:
   \   00000068   18109FE5           LDR      R1,??SayMinVoice_3+0x8  ;; `?<Constant "min1.wav">`
   \                     ??SayMinVoice_4:
   \   0000006C   ........           BL       Play
    111                        break;
    112                        case 0: case 5: case 6: case 7: case 8: case 9: 
    113                          Play(folder_path, "min3.wav");
    114                        break;  
    115                      }
    116                  }
    117              NEXT_PLAY_FUNK=0;
   \                     ??SayMinVoice_5:
   \   00000070   ........           LDR      R0,??DataTable27  ;; NEXT_PLAY_FUNK
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   001080E5           STR      R1,[R0, #+0]
    118          }
   \   0000007C   0080BDE8           POP      {PC}             ;; return
   \                     ??SayMinVoice_3:
   \   00000080   ........           DC32     `?<Constant "min3.wav">`
   \   00000084   ........           DC32     `?<Constant "min2.wav">`
   \   00000088   ........           DC32     `?<Constant "min1.wav">`
    119          
    120          //-------------------------------- Минуты -------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    121          void SayMinDig()
    122          {
   \                     SayMinDig:
   \   00000000   ........           LDR      R0,??DataTable8  ;; CurTime + 1
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   ........           LDR      R4,??DataTable24  ;; folder_path
   \   0000000C   08D04DE2           SUB      SP,SP,#+8
   \   00000010   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1600000A           BEQ      ??SayMinDig_0
    123              if (CurTime.min!=0)
    124                {
    125                  if (CurTime.min%10==1) 
   \   0000001C   ........           LDR      R1,??DataTable10  ;; 0x66666667
   \   00000020   9021C3E0           SMULL    R2,R3,R0,R1
   \   00000024   0A20A0E3           MOV      R2,#+10
   \   00000028   4331A0E1           ASR      R3,R3,#+2
   \   0000002C   920303E0           MUL      R3,R2,R3
   \   00000030   032040E0           SUB      R2,R0,R3
   \   00000034   010052E3           CMP      R2,#+1
   \   00000038   0100001A           BNE      ??SayMinDig_1
    126                    {
    127                      Play(folder_path, "1_2.wav");
   \   0000003C   50109FE5           LDR      R1,??SayMinDig_2  ;; `?<Constant "1_2.wav">`
   \                     ??SayMinDig_3:
   \   00000040   060000EA           B        ??SayMinDig_4
    128                      NEXT_PLAY_FUNK=5;
    129                    }
    130                    else
    131                  if (CurTime.min%10==2) 
   \                     ??SayMinDig_1:
   \   00000044   020052E3           CMP      R2,#+2
    132                    {
    133                      Play(folder_path, "2_1.wav");          
   \   00000048   48109F05           LDREQ    R1,??SayMinDig_2+0x4  ;; `?<Constant "2_1.wav">`
   \   0000004C   0300000A           BEQ      ??SayMinDig_4
    134                      NEXT_PLAY_FUNK=5;
    135                    }
    136                    else
    137                      {
    138                        char s[5];
    139                        sprintf(s, "%d.wav", CurTime.min%10);            
   \   00000050   ........           LDR      R1,??DataTable21  ;; `?<Constant "%d.wav">`
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   160000EF           SWI      +22
    140                        Play(folder_path, s);  
   \   0000005C   0D10A0E1           MOV      R1,SP
   \                     ??SayMinDig_4:
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       Play
    141                        NEXT_PLAY_FUNK=5;
   \   00000068   ........           LDR      R1,??DataTable27  ;; NEXT_PLAY_FUNK
   \   0000006C   0500A0E3           MOV      R0,#+5
   \   00000070   000081E5           STR      R0,[R1, #+0]
   \   00000074   1380BDE8           POP      {R0,R1,R4,PC}
    142                      }
    143                }
    144              else
    145                {
    146                  Play(folder_path, "xxx.wav");
   \                     ??SayMinDig_0:
   \   00000078   1C109FE5           LDR      R1,??SayMinDig_2+0x8  ;; `?<Constant "xxx.wav">`
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       Play
    147                  NEXT_PLAY_FUNK=0;
   \   00000084   ........           LDR      R1,??DataTable27  ;; NEXT_PLAY_FUNK
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   000081E5           STR      R0,[R1, #+0]
    148                }
    149          }
   \   00000090   1380BDE8           POP      {R0,R1,R4,PC}    ;; return
   \                     ??SayMinDig_2:
   \   00000094   ........           DC32     `?<Constant "1_2.wav">`
   \   00000098   ........           DC32     `?<Constant "2_1.wav">`
   \   0000009C   ........           DC32     `?<Constant "xxx.wav">`
    150          
    151          //////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    152          void SayMinAllDig()
    153          {
   \                     SayMinAllDig:
   \   00000000   CC009FE5           LDR      R0,??SayMinAllDig_1  ;; CurTime + 1
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   ........           LDR      R4,??DataTable27  ;; NEXT_PLAY_FUNK
   \   0000000C   ........           LDR      R6,??DataTable24  ;; folder_path
   \   00000010   08D04DE2           SUB      SP,SP,#+8
   \   00000014   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000018   0450A0E3           MOV      R5,#+4
   \   0000001C   0200A0E1           MOV      R0,R2
   \   00000020   3B0050E3           CMP      R0,#+59
   \   00000024   7380BD88           POPHI    {R0,R1,R4-R6,PC}
   \   00000028   011F8FE2           ADR      R1,??SayMinAllDig_0
   \   0000002C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000030   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??SayMinAllDig_0:
   \   00000034   0E0E0E0E           DC8      +14,+14,+14,+14
   \   00000038   0E0E0E0E           DC8      +14,+14,+14,+14
   \   0000003C   0E0E1010           DC8      +14,+14,+16,+16
   \   00000040   10101010           DC8      +16,+16,+16,+16
   \   00000044   10101010           DC8      +16,+16,+16,+16
   \   00000048   10191919           DC8      +16,+25,+25,+25
   \   0000004C   19191919           DC8      +25,+25,+25,+25
   \   00000050   1919101B           DC8      +25,+25,+16,+27
   \   00000054   1B1B1B1B           DC8      +27,+27,+27,+27
   \   00000058   1B1B1B1B           DC8      +27,+27,+27,+27
   \   0000005C   10202020           DC8      +16,+32,+32,+32
   \   00000060   20202020           DC8      +32,+32,+32,+32
   \   00000064   20201022           DC8      +32,+32,+16,+34
   \   00000068   22222222           DC8      +34,+34,+34,+34
   \   0000006C   22222222           DC8      +34,+34,+34,+34
    154                switch (CurTime.min)
    155                  {
    156                    case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9:
    157                      SayMinDig();
   \                     ??SayMinAllDig_2:
   \   00000070   ........           BL       SayMinDig
   \   00000074   7380BDE8           POP      {R0,R1,R4-R6,PC}
    158                    break;
    159                    
    160                    case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19:
    161                    case 20: case 30: case 40: case 50:   
    162                      { 
    163                        char s[6];
    164                        sprintf(s, "%d.wav", CurTime.min);            
   \                     ??SayMinAllDig_3:
   \   00000078   ........           LDR      R1,??DataTable21  ;; `?<Constant "%d.wav">`
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   160000EF           SWI      +22
    165                        Play(folder_path, s);
   \   00000084   0D10A0E1           MOV      R1,SP
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   ........           BL       Play
    166                        NEXT_PLAY_FUNK=5;
   \   00000090   0500A0E3           MOV      R0,#+5
   \   00000094   000084E5           STR      R0,[R4, #+0]
   \   00000098   7380BDE8           POP      {R0,R1,R4-R6,PC}
    167                      }
    168                    break;  
    169                    
    170                    case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29:
    171                      Play(folder_path, "20.wav");
   \                     ??SayMinAllDig_4:
   \   0000009C   34109FE5           LDR      R1,??SayMinAllDig_1+0x4  ;; `?<Constant "20.wav">`
   \   000000A0   000000EA           B        ??SayMinAllDig_5
    172                      NEXT_PLAY_FUNK=4;
    173                    break;
    174          
    175                    case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39:
    176                      Play(folder_path, "30.wav");
   \                     ??SayMinAllDig_6:
   \   000000A4   30109FE5           LDR      R1,??SayMinAllDig_1+0x8  ;; `?<Constant "30.wav">`
   \                     ??SayMinAllDig_5:
   \   000000A8   0600A0E1           MOV      R0,R6
   \   000000AC   ........           BL       Play
    177                      NEXT_PLAY_FUNK=4;
   \   000000B0   005084E5           STR      R5,[R4, #+0]
   \   000000B4   7380BDE8           POP      {R0,R1,R4-R6,PC}
    178                    break;
    179          
    180                    case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: 
    181                      Play(folder_path, "40.wav");
   \                     ??SayMinAllDig_7:
   \   000000B8   20109FE5           LDR      R1,??SayMinAllDig_1+0xC  ;; `?<Constant "40.wav">`
   \   000000BC   F9FFFFEA           B        ??SayMinAllDig_5
    182                      NEXT_PLAY_FUNK=4;
    183                    break;
    184          
    185                    case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: 
    186                      Play(folder_path, "50.wav");
   \                     ??SayMinAllDig_8:
   \   000000C0   1C109FE5           LDR      R1,??SayMinAllDig_1+0x10  ;; `?<Constant "50.wav">`
   \   000000C4   0600A0E1           MOV      R0,R6
   \   000000C8   ........           BL       Play
    187                      NEXT_PLAY_FUNK=4;
   \   000000CC   005084E5           STR      R5,[R4, #+0]
    188                    break;
    189                  }      
    190          }
   \                     ??SayMinAllDig_9:
   \   000000D0   7380BDE8           POP      {R0,R1,R4-R6,PC}  ;; return
   \                     ??SayMinAllDig_1:
   \   000000D4   ........           DC32     CurTime + 1
   \   000000D8   ........           DC32     `?<Constant "20.wav">`
   \   000000DC   ........           DC32     `?<Constant "30.wav">`
   \   000000E0   ........           DC32     `?<Constant "40.wav">`
   \   000000E4   ........           DC32     `?<Constant "50.wav">`
    191          //------------------------------ /*Минуты*/ -----------------------------------
    192          

   \                                 In segment CODE, align 4, keep-with-next
    193          void SayHourVoice()
    194          {
    195                  switch (CurTime.hour)
   \                     SayHourVoice:
   \   00000000   ........           LDR      R1,??DataTable29  ;; CurTime
   \   00000004   ........           LDR      R0,??DataTable24  ;; folder_path
   \   00000008   30402DE9           PUSH     {R4,R5,LR}
   \   0000000C   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000010   ........           LDR      R4,??DataTable27  ;; NEXT_PLAY_FUNK
   \   00000014   0350A0E3           MOV      R5,#+3
   \   00000018   170051E3           CMP      R1,#+23
   \   0000001C   3080BD88           POPHI    {R4,R5,PC}
   \   00000020   012F8FE2           ADR      R2,??SayHourVoice_0
   \   00000024   0120D2E7           LDRB     R2,[R2, R1]
   \   00000028   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??SayHourVoice_0:
   \   0000002C   0D050909           DC8      +13,+5,+9,+9
   \   00000030   090D0D0D           DC8      +9,+13,+13,+13
   \   00000034   0D0D0D0D           DC8      +13,+13,+13,+13
   \   00000038   0D0D0D0D           DC8      +13,+13,+13,+13
   \   0000003C   0D0D0D0D           DC8      +13,+13,+13,+13
   \   00000040   0D050909           DC8      +13,+5,+9,+9
    196                    {
    197                      case 1: case 21:
    198                        Play(folder_path, "hour2.wav");
   \                     ??SayHourVoice_1:
   \   00000044   28109FE5           LDR      R1,??SayHourVoice_2  ;; `?<Constant "hour2.wav">`
   \   00000048   ........           BL       Play
   \   0000004C   005084E5           STR      R5,[R4, #+0]
   \   00000050   3080BDE8           POP      {R4,R5,PC}
    199                        NEXT_PLAY_FUNK=3;
    200                      break;
    201                    
    202                      case 2: case 3: case 4: case 22: case 23:
    203                        Play(folder_path, "hour3.wav");
   \                     ??SayHourVoice_3:
   \   00000054   1C109FE5           LDR      R1,??SayHourVoice_2+0x4  ;; `?<Constant "hour3.wav">`
   \   00000058   ........           BL       Play
    204                        NEXT_PLAY_FUNK=3;
   \   0000005C   005084E5           STR      R5,[R4, #+0]
   \   00000060   3080BDE8           POP      {R4,R5,PC}
    205                      break;
    206                    
    207                      case 0: case 5: case 6: case 7: case 8: case 9: case 10: 
    208                      case 11: case 12: case 13: case 14: case 15: case 16: 
    209                      case 17: case 18: case 19: case 20:
    210                        Play(folder_path, "hour1.wav");
   \                     ??SayHourVoice_4:
   \   00000064   10109FE5           LDR      R1,??SayHourVoice_2+0x8  ;; `?<Constant "hour1.wav">`
   \   00000068   ........           BL       Play
    211                        NEXT_PLAY_FUNK=3;
   \   0000006C   005084E5           STR      R5,[R4, #+0]
    212                      break;  
    213                    }    
    214          }
   \                     ??SayHourVoice_5:
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??SayHourVoice_2:
   \   00000074   ........           DC32     `?<Constant "hour2.wav">`
   \   00000078   ........           DC32     `?<Constant "hour3.wav">`
   \   0000007C   ........           DC32     `?<Constant "hour1.wav">`
    215          

   \                                 In segment CODE, align 4, keep-with-next
    216          void SayHourDig()
    217          {
    218                if (CurTime.hour==1) 
   \                     SayHourDig:
   \   00000000   4C009FE5           LDR      R0,??SayHourDig_0  ;; CurTime
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   ........           LDR      R4,??DataTable24  ;; folder_path
   \   0000000C   08D04DE2           SUB      SP,SP,#+8
   \   00000010   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000014   010052E3           CMP      R2,#+1
    219                  {
    220                    Play(folder_path, "1_1.wav");
   \   00000018   38109F05           LDREQ    R1,??SayHourDig_0+0x4  ;; `?<Constant "1_1.wav">`
   \   0000001C   0600000A           BEQ      ??SayHourDig_1
    221                    NEXT_PLAY_FUNK=2;
    222                  }
    223                  else
    224                if (CurTime.hour==2) 
   \   00000020   020052E3           CMP      R2,#+2
    225                  {
    226                    Play(folder_path, "2_2.wav");          
   \   00000024   30109F05           LDREQ    R1,??SayHourDig_0+0x8  ;; `?<Constant "2_2.wav">`
   \   00000028   0300000A           BEQ      ??SayHourDig_1
    227                    NEXT_PLAY_FUNK=2;
    228                  }
    229                  else
    230                    {
    231                      char s[6];
    232                      sprintf(s, "%d.wav", CurTime.hour);            
   \   0000002C   ........           LDR      R1,??DataTable21  ;; `?<Constant "%d.wav">`
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   160000EF           SWI      +22
    233                      Play(folder_path, s);
   \   00000038   0D10A0E1           MOV      R1,SP
   \                     ??SayHourDig_1:
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       Play
    234                      NEXT_PLAY_FUNK=2;
   \   00000044   ........           LDR      R0,??DataTable27  ;; NEXT_PLAY_FUNK
   \   00000048   0210A0E3           MOV      R1,#+2
   \   0000004C   001080E5           STR      R1,[R0, #+0]
    235                    }
    236          }
   \   00000050   1380BDE8           POP      {R0,R1,R4,PC}    ;; return
   \                     ??SayHourDig_0:
   \   00000054   ........           DC32     CurTime
   \   00000058   ........           DC32     `?<Constant "1_1.wav">`
   \   0000005C   ........           DC32     `?<Constant "2_2.wav">`
    237          
    238          

   \                                 In segment CODE, align 4, keep-with-next
    239          void SayTime(int param)
    240          {
   \                     SayTime:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   80D04DE2           SUB      SP,SP,#+128
   \   00000008   0040A0E1           MOV      R4,R0
    241            //param==0 Куранты
    242            //param==1 Всё
    243            start_vibra();
   \   0000000C   ........           BL       start_vibra
    244            vibra_count1=vibra_count;
   \   00000010   6C109FE5           LDR      R1,??SayTime_0   ;; vibra_count
   \   00000014   ........           LDR      R0,??DataTable23  ;; vibra_count1
   \   00000018   001091E5           LDR      R1,[R1, #+0]
    245            
    246            if (param) 
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   001080E5           STR      R1,[R0, #+0]
   \   00000024   0300000A           BEQ      ??SayTime_1
    247                {
    248                  Play(folder_path, "x.wav");
   \   00000028   58109FE5           LDR      R1,??SayTime_0+0x4  ;; `?<Constant "x.wav">`
   \   0000002C   ........           LDR      R0,??DataTable24  ;; folder_path
    249                  NEXT_PLAY_FUNK=1;
   \   00000030   0140A0E3           MOV      R4,#+1
   \   00000034   0D0000EA           B        ??SayTime_2
    250                }
    251                else
    252                  {
    253                    char s[128];
    254                    const char *p=strrchr(kurant_path,'\\')+1;
   \                     ??SayTime_1:
   \   00000038   4C409FE5           LDR      R4,??SayTime_0+0x8  ;; kurant_path
   \   0000003C   5C10A0E3           MOV      R1,#+92
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   170100EF           SWI      +279
   \   00000048   015080E2           ADD      R5,R0,#+1
    255                    strncpy(s,kurant_path,p-kurant_path);
   \   0000004C   046045E0           SUB      R6,R5,R4
   \   00000050   0620A0E1           MOV      R2,R6
   \   00000054   0410A0E1           MOV      R1,R4
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   160100EF           SWI      +278
    256                    s[p-kurant_path]='\0';
   \   00000060   0040A0E3           MOV      R4,#+0
   \   00000064   0D00A0E1           MOV      R0,SP
   \   00000068   0040C6E7           STRB     R4,[R6, +R0]
    257                    
    258                    Play(s, p);
   \   0000006C   0510A0E1           MOV      R1,R5
   \                     ??SayTime_2:
   \   00000070   ........           BL       Play
    259                    NEXT_PLAY_FUNK=0;
   \   00000074   ........           LDR      R0,??DataTable27  ;; NEXT_PLAY_FUNK
   \   00000078   004080E5           STR      R4,[R0, #+0]
    260                  }
    261          }
   \   0000007C   80D08DE2           ADD      SP,SP,#+128
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??SayTime_0:
   \   00000084   ........           DC32     vibra_count
   \   00000088   ........           DC32     `?<Constant "x.wav">`
   \   0000008C   ........           DC32     kurant_path
    262          
    263          //++++++++++++++++++++++++++++++/*Проговаривание времени*/+++++++++++++++++++++++++++++++++
    264          

   \                                 In segment CODE, align 4, keep-with-next
    265          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
    266          {
   \                     maincsm_onmessage:
   \   00000000   00402DE9           PUSH     {LR}
    267            if (msg->msg==MSG_PLAYFILE_REPORT)
   \   00000004   F200D1E1           LDRSH    R0,[R1, #+2]
   \   00000008   6720A0E3           MOV      R2,#+103
   \   0000000C   402F82E3           ORR      R2,R2,#0x100
   \   00000010   020050E1           CMP      R0,R2
   \   00000014   2300001A           BNE      ??maincsm_onmessage_1
    268            {
    269              GBS_PSOUND_MSG *pmsg=(GBS_PSOUND_MSG *)msg;
    270              if (pmsg->handler==PLAY_ID)
   \   00000018   ........           LDR      R2,??DataTable26  ;; PLAY_ID
   \   0000001C   F630D1E1           LDRSH    R3,[R1, #+6]
   \   00000020   00C092E5           LDR      R12,[R2, #+0]
   \   00000024   0000E0E3           MVN      R0,#+0
   \   00000028   0C0053E1           CMP      R3,R12
   \   0000002C   1C00001A           BNE      ??maincsm_onmessage_2
    271              {
    272                if (pmsg->cmd==M_SAE_PLAYBACK_ERROR || pmsg->cmd==M_SAE_PLAYBACK_DONE)
   \   00000030   B410D1E1           LDRH     R1,[R1, #+4]
   \   00000034   050051E3           CMP      R1,#+5
   \   00000038   07005113           CMPNE    R1,#+7
   \   0000003C   1900001A           BNE      ??maincsm_onmessage_1
    273                {
    274                      switch (NEXT_PLAY_FUNK)
   \   00000040   ........           LDR      R1,??DataTable27  ;; NEXT_PLAY_FUNK
   \   00000044   001091E5           LDR      R1,[R1, #+0]
   \   00000048   050051E3           CMP      R1,#+5
   \   0000004C   1500008A           BHI      ??maincsm_onmessage_1
   \   00000050   013F8FE2           ADR      R3,??maincsm_onmessage_0
   \   00000054   0130D3E7           LDRB     R3,[R3, R1]
   \   00000058   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??maincsm_onmessage_0:
   \   0000005C   0106090B           DC8      +1,+6,+9,+11
   \   00000060   0D0F0000           DC8      +13,+15,+0,+0
    275                        {
    276                          case 0:
    277                            PLAY_ID=-1;
   \                     ??maincsm_onmessage_3:
   \   00000064   000082E5           STR      R0,[R2, #+0]
    278                            CloseCSM(MAINCSM_ID);
   \   00000068   ........           LDR      R0,??DataTable31  ;; MAINCSM_ID
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   FC0100EF           SWI      +508
   \   00000074   000000EA           B        ??maincsm_onmessage_4
    279                          break;
    280            
    281                          case 1:
    282                            SayHourDig();
   \                     ??maincsm_onmessage_5:
   \   00000078   ........           BL       SayHourDig
   \                     ??maincsm_onmessage_4:
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   0080BDE8           POP      {PC}
    283                          break;
    284          
    285                          case 2:
    286                            SayHourVoice();
   \                     ??maincsm_onmessage_6:
   \   00000084   ........           BL       SayHourVoice
   \   00000088   FBFFFFEA           B        ??maincsm_onmessage_4
    287                          break;
    288          
    289                          case 3:
    290                            SayMinAllDig();
   \                     ??maincsm_onmessage_7:
   \   0000008C   ........           BL       SayMinAllDig
   \   00000090   F9FFFFEA           B        ??maincsm_onmessage_4
    291                          break;
    292          
    293                          case 4:
    294                            SayMinDig();
   \                     ??maincsm_onmessage_8:
   \   00000094   ........           BL       SayMinDig
   \   00000098   F7FFFFEA           B        ??maincsm_onmessage_4
    295                          break;
    296                          
    297                          case 5:
    298                            SayMinVoice();
   \                     ??maincsm_onmessage_9:
   \   0000009C   ........           BL       SayMinVoice
   \   000000A0   F5FFFFEA           B        ??maincsm_onmessage_4
    299                          break;
    300                  }
    301                }
    302              }
    303                  else
    304                    PLAY_ID=-1;    
   \                     ??maincsm_onmessage_2:
   \   000000A4   000082E5           STR      R0,[R2, #+0]
    305            }
    306            
    307            return(1);
   \                     ??maincsm_onmessage_1:
   \   000000A8   0100A0E3           MOV      R0,#+1
   \   000000AC   0080BDE8           POP      {PC}             ;; return
    308          }
    309          

   \                                 In segment CODE, align 4, keep-with-next
    310          static void maincsm_oncreate(CSM_RAM *data)
    311          {
    312            GetDateTime(&date,&CurTime);
   \                     maincsm_oncreate:
   \   00000000   ........           LDR      R1,??DataTable29  ;; CurTime
   \   00000004   18009FE5           LDR      R0,??maincsm_oncreate_0  ;; `date`
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   B40000EF           SWI      +180
    313            SUBPROC((void*)SayTime, PLAY_PARAM);
   \   00000010   10009FE5           LDR      R0,??maincsm_oncreate_0+0x4  ;; PLAY_PARAM
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0C009FE5           LDR      R0,??maincsm_oncreate_0+0x8  ;; SayTime
   \   0000001C   710100EF           SWI      +369
    314          }
   \   00000020   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_oncreate_0:
   \   00000024   ........           DC32     `date`
   \   00000028   ........           DC32     PLAY_PARAM
   \   0000002C   ........           DC32     SayTime
    315          

   \                                 In segment CODE, align 4, keep-with-next
    316          static void Killer(void)
    317          {
    318            extern void *ELF_BEGIN;
    319            GBS_DelTimer(&tmr_vibra);
   \                     Killer:
   \   00000000   ........           LDR      R0,??DataTable30  ;; tmr_vibra
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   8C0100EF           SWI      +396
    320            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   0000000C   158000EF           SWI      +32789
   \   00000010   0010A0E1           MOV      R1,R0
   \   00000014   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000018   0040BDE8           POP      {LR}             ;; Pop
   \   0000001C   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000020   ........           DC32     ELF_BEGIN
    321          }
    322          

   \                                 In segment CODE, align 4, keep-with-next
    323          static void maincsm_onclose(CSM_RAM *csm)
    324          {
    325            SUBPROC((void *)Killer);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; Killer
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
    326          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     Killer
    327          

   \                                 In segment DATA_Z, align 4, align-sorted
    328          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    329          
    330          static const struct
    331          {
    332            CSM_DESC maincsm;
    333            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    334          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 40, 1
   \              ............
   \              280000000100
   \              0000        
   \   00000014   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              ....CCCCAA55
   \              55AA33330000
   \              0000        
   \   00000028   8B00               DC16 139
   \   0000002A   0000               DC8 0, 0
    335          {
    336            {
    337            maincsm_onmessage,
    338            maincsm_oncreate,
    339          #ifdef NEWSGOLD
    340            0,
    341            0,
    342            0,
    343            0,
    344          #endif
    345            maincsm_onclose,
    346            sizeof(MAIN_CSM),
    347            1,
    348            &minus11
    349            },
    350            {
    351              maincsm_name_body,
    352              NAMECSM_MAGIC1,
    353              NAMECSM_MAGIC2,
    354              0x0,
    355              139
    356            }
    357          };
    358          
    359          static void UpdateCSMname(void)
    360          {
    361            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"TalkPhoneND");
    362          }
    363          

   \                                 In segment CODE, align 4, keep-with-next
    364          int main(void)
    365          {
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    366            CSM_RAM *save_cmpc;
    367            char dummy[sizeof(MAIN_CSM)];
    368            InitConfig();
    369            UpdateCSMname();
   \   00000004   70409FE5           LDR      R4,??main_0      ;; MAINCSM
   \   00000008   28D04DE2           SUB      SP,SP,#+40
   \   0000000C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000010   68109FE5           LDR      R1,??main_0+0x4  ;; `?<Constant "TalkPhoneND">`
   \   00000014   180084E2           ADD      R0,R4,#+24
   \   00000018   240100EF           SWI      +292
    370          
    371            LockSched();
   \   0000001C   460100EF           SWI      +326
    372            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000020   068100EF           SWI      +33030
   \   00000024   080090E5           LDR      R0,[R0, #+8]
   \   00000028   045090E5           LDR      R5,[R0, #+4]
    373            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   0000002C   068100EF           SWI      +33030
   \   00000030   0060A0E1           MOV      R6,R0
   \   00000034   068100EF           SWI      +33030
   \   00000038   080090E5           LDR      R0,[R0, #+8]
   \   0000003C   081096E5           LDR      R1,[R6, #+8]
   \   00000040   080090E5           LDR      R0,[R0, #+8]
    374            MAINCSM_ID=CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   040081E5           STR      R0,[R1, #+4]
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   070100EF           SWI      +263
   \   00000058   ........           LDR      R1,??DataTable31  ;; MAINCSM_ID
   \   0000005C   000081E5           STR      R0,[R1, #+0]
    375            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000060   068100EF           SWI      +33030
   \   00000064   080090E5           LDR      R0,[R0, #+8]
   \   00000068   045080E5           STR      R5,[R0, #+4]
    376            UnlockSched();
   \   0000006C   470100EF           SWI      +327
    377            
    378            return 0;
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   28D08DE2           ADD      SP,SP,#+40
   \   00000078   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   0000007C   ........           DC32     MAINCSM
   \   00000080   ........           DC32     `?<Constant "TalkPhoneND">`
    379          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     CurTime + 1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   67666666           DC32     0x66666667

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     `?<Constant "%d.wav">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     vibra_count1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     folder_path

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     PLAY_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     NEXT_PLAY_FUNK

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     CurTime

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     tmr_vibra

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     MAINCSM_ID

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for IDLECSM_ID>`:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "min3.wav">`:
   \   00000000   6D696E332E77       DC8 "min3.wav"
   \              617600      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "min2.wav">`:
   \   00000000   6D696E322E77       DC8 "min2.wav"
   \              617600      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "min1.wav">`:
   \   00000000   6D696E312E77       DC8 "min1.wav"
   \              617600      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "1_2.wav">`:
   \   00000000   315F322E7761       DC8 "1_2.wav"
   \              7600        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "2_1.wav">`:
   \   00000000   325F312E7761       DC8 "2_1.wav"
   \              7600        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%d.wav">`:
   \   00000000   25642E776176       DC8 "%d.wav"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "xxx.wav">`:
   \   00000000   7878782E7761       DC8 "xxx.wav"
   \              7600        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "20.wav">`:
   \   00000000   32302E776176       DC8 "20.wav"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "30.wav">`:
   \   00000000   33302E776176       DC8 "30.wav"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "40.wav">`:
   \   00000000   34302E776176       DC8 "40.wav"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "50.wav">`:
   \   00000000   35302E776176       DC8 "50.wav"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "hour2.wav">`:
   \   00000000   686F7572322E       DC8 "hour2.wav"
   \              77617600    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "hour3.wav">`:
   \   00000000   686F7572332E       DC8 "hour3.wav"
   \              77617600    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "hour1.wav">`:
   \   00000000   686F7572312E       DC8 "hour1.wav"
   \              77617600    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "1_1.wav">`:
   \   00000000   315F312E7761       DC8 "1_1.wav"
   \              7600        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "2_2.wav">`:
   \   00000000   325F322E7761       DC8 "2_2.wav"
   \              7600        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "x.wav">`:
   \   00000000   782E77617600       DC8 "x.wav"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TalkPhoneND">`:
   \   00000000   54616C6B5068       DC8 "TalkPhoneND"
   \              6F6E654E4400

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     Killer                4
     Play                 52
     SayHourDig           16
     SayHourVoice         12
     SayMinAllDig         24
     SayMinDig            16
     SayMinVoice           4
     SayTime             144
     main                 56
     maincsm_onclose       4
     maincsm_oncreate      4
     maincsm_onmessage     4
     start_vibra           4
     stop_vibra            4


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     minus11                          4
     IDLECSM_ID                       4
     vibra_count1                     4
     MAINCSM_ID                       4
     CurTime                          8
     date                             8
     PLAY_ID                          4
     NEXT_PLAY_FUNK                   4
     Play                           192
     tmr_vibra                       16
     start_vibra                     76
     stop_vibra                      56
     SayMinVoice                    140
     SayMinDig                      160
     SayMinAllDig                   232
     SayHourVoice                   128
     SayHourDig                      96
     SayTime                        144
     maincsm_onmessage              176
     maincsm_oncreate                48
     Killer                          36
     maincsm_onclose                 20
     maincsm_name_body              280
     MAINCSM                         44
     main                           132
     ??DataTable8                     4
     ??DataTable10                    4
     ??DataTable21                    4
     ??DataTable23                    4
     ??DataTable24                    4
     ??DataTable26                    4
     ??DataTable27                    4
     ??DataTable29                    4
     ??DataTable30                    4
     ??DataTable31                    4
     ?<Initializer for IDLECSM_ID>    4
     ?<Constant "min3.wav">          12
     ?<Constant "min2.wav">          12
     ?<Constant "min1.wav">          12
     ?<Constant "1_2.wav">            8
     ?<Constant "2_1.wav">            8
     ?<Constant "%d.wav">             8
     ?<Constant "xxx.wav">            8
     ?<Constant "20.wav">             8
     ?<Constant "30.wav">             8
     ?<Constant "40.wav">             8
     ?<Constant "50.wav">             8
     ?<Constant "hour2.wav">         12
     ?<Constant "hour3.wav">         12
     ?<Constant "hour1.wav">         12
     ?<Constant "1_1.wav">            8
     ?<Constant "2_2.wav">            8
     ?<Constant "x.wav">              8
     ?<Constant "TalkPhoneND">       12
      Others                        104

 
 1 756 bytes in segment CODE
   220 bytes in segment DATA_C
     4 bytes in segment DATA_I
     4 bytes in segment DATA_ID
   328 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 1 676 bytes of CODE  memory (+ 104 bytes shared)
   224 bytes of CONST memory
   332 bytes of DATA  memory

Errors: none
Warnings: none
