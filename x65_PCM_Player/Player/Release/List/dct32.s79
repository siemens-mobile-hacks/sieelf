//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   14/Feb/2012  15:39:36 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\MP3\mp3d /
//                       ec\dct32.c                                          /
//    Command line    =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\MP3\mp3d /
//                       ec\dct32.c -D NDEBUG -lC                            /
//                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Playe /
//                       r\Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Pla /
//                       yer\Player\Release\Obj\ -s9 --cpu_mode arm          /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "D:\Program Files\IAR\Embedded Workbench 4.0        /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude      /
//                       swilib.h -I "D:\Program Files\IAR\Embedded          /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=16                               /
//    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\dct32.s79                                      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME dct32

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??MULSHIFT32??rA
        MULTWEAK ??xmp3_FDCT32??rT
        PUBLIC xmp3_FDCT32
        FUNCTION xmp3_FDCT32,0203H
        LOCFRAME CSTACK, 76, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
MULSHIFT32          SYMBOL "MULSHIFT32"
??MULSHIFT32??rA    SYMBOL "??rA", MULSHIFT32
xmp3_FDCT32         SYMBOL "xmp3_FDCT32"
??xmp3_FDCT32??rT   SYMBOL "??rT", xmp3_FDCT32

        EXTERN MULSHIFT32
        FUNCTION MULSHIFT32,0202H

// D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\MP3\mp3dec\dct32.c
//    1 /* ***** BEGIN LICENSE BLOCK ***** 
//    2  * Version: RCSL 1.0/RPSL 1.0 
//    3  *  
//    4  * Portions Copyright (c) 1995-2002 RealNetworks, Inc. All Rights Reserved. 
//    5  *      
//    6  * The contents of this file, and the files included with this file, are 
//    7  * subject to the current version of the RealNetworks Public Source License 
//    8  * Version 1.0 (the "RPSL") available at 
//    9  * http://www.helixcommunity.org/content/rpsl unless you have licensed 
//   10  * the file under the RealNetworks Community Source License Version 1.0 
//   11  * (the "RCSL") available at http://www.helixcommunity.org/content/rcsl, 
//   12  * in which case the RCSL will apply. You may also obtain the license terms 
//   13  * directly from RealNetworks.  You may not use this file except in 
//   14  * compliance with the RPSL or, if you have a valid RCSL with RealNetworks 
//   15  * applicable to this file, the RCSL.  Please see the applicable RPSL or 
//   16  * RCSL for the rights, obligations and limitations governing use of the 
//   17  * contents of the file.  
//   18  *  
//   19  * This file is part of the Helix DNA Technology. RealNetworks is the 
//   20  * developer of the Original Code and owns the copyrights in the portions 
//   21  * it created. 
//   22  *  
//   23  * This file, and the files included with this file, is distributed and made 
//   24  * available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER 
//   25  * EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS ALL SUCH WARRANTIES, 
//   26  * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS 
//   27  * FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. 
//   28  * 
//   29  * Technology Compatibility Kit Test Suite(s) Location: 
//   30  *    http://www.helixcommunity.org/content/tck 
//   31  * 
//   32  * Contributor(s): 
//   33  *  
//   34  * ***** END LICENSE BLOCK ***** */ 
//   35 
//   36 /**************************************************************************************
//   37  * Fixed-point MP3 decoder
//   38  * Jon Recker (jrecker@real.com), Ken Cooke (kenc@real.com)
//   39  * June 2003
//   40  *
//   41  * dct32.c - optimized implementations of 32-point DCT for matrixing stage of 
//   42  *             polyphase filter
//   43  **************************************************************************************/
//   44 
//   45 #include "coder.h"
//   46 #include "assembly.h"
//   47 
//   48 #define COS0_0  0x4013c251	/* Q31 */
//   49 #define COS0_1  0x40b345bd	/* Q31 */
//   50 #define COS0_2  0x41fa2d6d	/* Q31 */
//   51 #define COS0_3  0x43f93421	/* Q31 */
//   52 #define COS0_4  0x46cc1bc4	/* Q31 */
//   53 #define COS0_5  0x4a9d9cf0	/* Q31 */
//   54 #define COS0_6  0x4fae3711	/* Q31 */
//   55 #define COS0_7  0x56601ea7	/* Q31 */
//   56 #define COS0_8  0x5f4cf6eb	/* Q31 */
//   57 #define COS0_9  0x6b6fcf26	/* Q31 */
//   58 #define COS0_10 0x7c7d1db3	/* Q31 */
//   59 #define COS0_11 0x4ad81a97	/* Q30 */
//   60 #define COS0_12 0x5efc8d96	/* Q30 */
//   61 #define COS0_13 0x41d95790	/* Q29 */
//   62 #define COS0_14 0x6d0b20cf	/* Q29 */
//   63 #define COS0_15 0x518522fb	/* Q27 */
//   64 
//   65 #define COS1_0  0x404f4672	/* Q31 */
//   66 #define COS1_1  0x42e13c10	/* Q31 */
//   67 #define COS1_2  0x48919f44	/* Q31 */
//   68 #define COS1_3  0x52cb0e63	/* Q31 */
//   69 #define COS1_4  0x64e2402e	/* Q31 */
//   70 #define COS1_5  0x43e224a9	/* Q30 */
//   71 #define COS1_6  0x6e3c92c1	/* Q30 */
//   72 #define COS1_7  0x519e4e04	/* Q28 */
//   73 
//   74 #define COS2_0  0x4140fb46	/* Q31 */
//   75 #define COS2_1  0x4cf8de88	/* Q31 */
//   76 #define COS2_2  0x73326bbf	/* Q31 */
//   77 #define COS2_3  0x52036742	/* Q29 */
//   78 
//   79 #define COS3_0  0x4545e9ef	/* Q31 */
//   80 #define COS3_1  0x539eba45	/* Q30 */
//   81 
//   82 #define COS4_0  0x5a82799a	/* Q31 */
//   83 

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//   84 static const int dcttab[48] = {
dcttab:
        DATA
        DC32 1075036753, 1367679739, 1078937202, 1085490621, 1829445839
        DC32 1122057232, 1106914669, 1104762768, 1217503044, 1140405281
        DC32 1593609622, 1389039203, 1187781572, 1255676567, 1692549166
        DC32 1251843312, 2088574387, 1138893993, 1336817425, 1802489638
        DC32 1849463489, 1449139879, 1598879467, 1369329156, 1094777670
        DC32 1375954754, 1162209775, 1291378312, 1932684223, 1402911301
        DC32 -1094777670, -1375954754, 1162209775, -1291378312, -1932684223
        DC32 1402911301, 1094777670, 1375954754, 1162209775, 1291378312
        DC32 1932684223, 1402911301, -1094777670, -1375954754, 1162209775
        DC32 -1291378312, -1932684223, 1402911301

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??xmp3_FDCT32??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE xmp3_FDCT32
//   85 	/* first pass */
//   86 	COS0_0, COS0_15, COS1_0,	/* 31, 27, 31 */
//   87 	COS0_1, COS0_14, COS1_1,	/* 31, 29, 31 */
//   88 	COS0_2, COS0_13, COS1_2,	/* 31, 29, 31 */
//   89 	COS0_3, COS0_12, COS1_3,	/* 31, 30, 31 */
//   90 	COS0_4, COS0_11, COS1_4,	/* 31, 30, 31 */
//   91 	COS0_5, COS0_10, COS1_5,	/* 31, 31, 30 */
//   92 	COS0_6, COS0_9,  COS1_6,	/* 31, 31, 30 */
//   93 	COS0_7, COS0_8,  COS1_7,	/* 31, 31, 28 */
//   94 	/* second pass */
//   95 	 COS2_0,  COS2_3, COS3_0,	/* 31, 29, 31 */
//   96 	 COS2_1,  COS2_2, COS3_1,	/* 31, 31, 30 */
//   97 	-COS2_0, -COS2_3, COS3_0, 	/* 31, 29, 31 */
//   98 	-COS2_1, -COS2_2, COS3_1, 	/* 31, 31, 30 */
//   99 	 COS2_0,  COS2_3, COS3_0, 	/* 31, 29, 31 */
//  100 	 COS2_1,  COS2_2, COS3_1, 	/* 31, 31, 30 */
//  101 	-COS2_0, -COS2_3, COS3_0, 	/* 31, 29, 31 */
//  102 	-COS2_1, -COS2_2, COS3_1, 	/* 31, 31, 30 */
//  103 };
//  104 
//  105 #define D32FP(i, s0, s1, s2) { \ 
//  106     a0 = buf[i];			a3 = buf[31-i]; \ 
//  107 	a1 = buf[15-i];			a2 = buf[16+i]; \ 
//  108     b0 = a0 + a3;			b3 = MULSHIFT32(*cptr++, a0 - a3) << (s0);	\ 
//  109 	b1 = a1 + a2;			b2 = MULSHIFT32(*cptr++, a1 - a2) << (s1);	\ 
//  110 	buf[i] = b0 + b1;		buf[15-i] = MULSHIFT32(*cptr,   b0 - b1) << (s2); \ 
//  111 	buf[16+i] = b2 + b3;    buf[31-i] = MULSHIFT32(*cptr++, b3 - b2) << (s2); \ 
//  112 }
//  113 
//  114 /**************************************************************************************
//  115  * Function:    FDCT32
//  116  *
//  117  * Description: Ken's highly-optimized 32-point DCT (radix-4 + radix-8) 
//  118  *
//  119  * Inputs:      input buffer, length = 32 samples
//  120  *              require at least 6 guard bits in input vector x to avoid possibility
//  121  *                of overflow in internal calculations (see bbtest_imdct test app)
//  122  *              buffer offset and oddblock flag for polyphase filter input buffer
//  123  *              number of guard bits in input
//  124  *
//  125  * Outputs:     output buffer, data copied and interleaved for polyphase filter
//  126  *              no guarantees about number of guard bits in output
//  127  *
//  128  * Return:      none
//  129  *
//  130  * Notes:       number of muls = 4*8 + 12*4 = 80
//  131  *              final stage of DCT is hardcoded to shuffle data into the proper order
//  132  *                for the polyphase filterbank
//  133  *              fully unrolled stage 1, for max precision (scale the 1/cos() factors
//  134  *                differently, depending on magnitude)
//  135  *              guard bit analysis verified by exhaustive testing of all 2^32 
//  136  *                combinations of max pos/max neg values in x[]
//  137  *
//  138  * TODO:        code organization and optimization for ARM
//  139  *              possibly interleave stereo (cut # of coef loads in half - may not have
//  140  *                enough registers)
//  141  **************************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function xmp3_FDCT32
        ARM
//  142 void FDCT32(int *buf, int *dest, int offset, int oddBlock, int gb)
//  143 {
xmp3_FDCT32:
        PUSH     {R1-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+48
        SUB      SP,SP,#+28
        CFI CFA R13+76
        MOV      R4,R0
        LDR      R0,[SP, #+76]
//  144     int i, s, tmp, es;
//  145     const int *cptr = dcttab;
//  146     int a0, a1, a2, a3, a4, a5, a6, a7;
//  147     int b0, b1, b2, b3, b4, b5, b6, b7;
//  148 	int *d;
//  149 
//  150 	/* scaling - ensure at least 6 guard bits for DCT 
//  151 	 * (in practice this is already true 99% of time, so this code is
//  152 	 *  almost never triggered)
//  153 	 */
//  154 	es = 0;
        MOV      R2,#+0
        STR      R2,[SP, #+0]
//  155 	if (gb < 6) {
        CMP      R0,#+6
        BGE      ??xmp3_FDCT32_0
//  156 		es = 6 - gb;
        RSB      R0,R0,#+6
        STR      R0,[SP, #+0]
//  157 		for (i = 0; i < 32; i++)
        MOV      R0,#+0
//  158 			buf[i] >>= es;
??xmp3_FDCT32_1:
        LDR      R1,[R4, +R0, LSL #+2]
        LDR      R2,[SP, #+0]
        ASR      R1,R1,R2
        STR      R1,[R4, +R0, LSL #+2]
        ADD      R0,R0,#+1
        CMP      R0,#+32
        BLT      ??xmp3_FDCT32_1
//  159 	}
//  160 
//  161 	/* first pass */    
//  162 	D32FP(0, 1, 5, 1);
??xmp3_FDCT32_0:
        LDR      R0,[R4, #+0]
        LDR      R1,[R4, #+124]
        LDR      R8,[R4, #+60]
        LDR      R9,[R4, #+64]
        ADD      R5,R1,R0
        SUB      R1,R0,R1
        LDR      R0,??xmp3_FDCT32_2  ;; 0x4013c251
        ADD      R7,R9,R8
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R6,R0,#+1
        LDR      R0,??xmp3_FDCT32_2+0x4  ;; 0x518522fb
        SUB      R1,R8,R9
        LDR      R9,??xmp3_FDCT32_2+0x8  ;; 0x404f4672
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R8,R0,#+5
        ADD      R0,R7,R5
        STR      R0,[R4, #+0]
        SUB      R1,R5,R7
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+1
        STR      R0,[R4, #+60]
        ADD      R0,R6,R8
        STR      R0,[R4, #+64]
        SUB      R1,R6,R8
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+1
        STR      R0,[R4, #+124]
//  163 	D32FP(1, 1, 3, 1);
        LDR      R0,[R4, #+4]
        LDR      R1,[R4, #+120]
        LDR      R8,[R4, #+56]
        LDR      R9,[R4, #+68]
        ADD      R5,R1,R0
        SUB      R1,R0,R1
        LDR      R0,??xmp3_FDCT32_2+0xC  ;; 0x40b345bd
        ADD      R7,R9,R8
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R6,R0,#+1
        LDR      R0,??xmp3_FDCT32_2+0x10  ;; 0x6d0b20cf
        SUB      R1,R8,R9
        LDR      R9,??xmp3_FDCT32_2+0x14  ;; 0x42e13c10
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R8,R0,#+3
        ADD      R0,R7,R5
        STR      R0,[R4, #+4]
        SUB      R1,R5,R7
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+1
        STR      R0,[R4, #+56]
        ADD      R0,R6,R8
        STR      R0,[R4, #+68]
        SUB      R1,R6,R8
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+1
        STR      R0,[R4, #+120]
//  164 	D32FP(2, 1, 3, 1);
        LDR      R0,[R4, #+8]
        LDR      R1,[R4, #+116]
        LDR      R8,[R4, #+52]
        LDR      R9,[R4, #+72]
        ADD      R5,R1,R0
        SUB      R1,R0,R1
        LDR      R0,??xmp3_FDCT32_2+0x18  ;; 0x41fa2d6d
        ADD      R7,R9,R8
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R6,R0,#+1
        LDR      R0,??xmp3_FDCT32_2+0x1C  ;; 0x41d95790
        SUB      R1,R8,R9
        LDR      R9,??xmp3_FDCT32_2+0x20  ;; 0x48919f44
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R8,R0,#+3
        ADD      R0,R7,R5
        STR      R0,[R4, #+8]
        SUB      R1,R5,R7
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+1
        STR      R0,[R4, #+52]
        ADD      R0,R6,R8
        STR      R0,[R4, #+72]
        SUB      R1,R6,R8
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+1
        STR      R0,[R4, #+116]
//  165 	D32FP(3, 1, 2, 1);
        LDR      R0,[R4, #+12]
        LDR      R1,[R4, #+112]
        LDR      R8,[R4, #+48]
        LDR      R9,[R4, #+76]
        ADD      R5,R1,R0
        SUB      R1,R0,R1
        LDR      R0,??xmp3_FDCT32_2+0x24  ;; 0x43f93421
        ADD      R7,R9,R8
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R6,R0,#+1
        LDR      R0,??xmp3_FDCT32_2+0x28  ;; 0x5efc8d96
        SUB      R1,R8,R9
        LDR      R9,??xmp3_FDCT32_2+0x2C  ;; 0x52cb0e63
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R8,R0,#+2
        ADD      R0,R7,R5
        STR      R0,[R4, #+12]
        SUB      R1,R5,R7
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+1
        STR      R0,[R4, #+48]
        ADD      R0,R6,R8
        STR      R0,[R4, #+76]
        SUB      R1,R6,R8
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+1
        STR      R0,[R4, #+112]
//  166 	D32FP(4, 1, 2, 1);
        LDR      R0,[R4, #+16]
        LDR      R1,[R4, #+108]
        LDR      R8,[R4, #+44]
        LDR      R9,[R4, #+80]
        ADD      R5,R1,R0
        SUB      R1,R0,R1
        LDR      R0,??xmp3_FDCT32_2+0x30  ;; 0x46cc1bc4
        ADD      R7,R9,R8
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R6,R0,#+1
        LDR      R0,??xmp3_FDCT32_2+0x34  ;; 0x4ad81a97
        SUB      R1,R8,R9
        LDR      R9,??xmp3_FDCT32_2+0x38  ;; 0x64e2402e
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R8,R0,#+2
        ADD      R0,R7,R5
        STR      R0,[R4, #+16]
        SUB      R1,R5,R7
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+1
        STR      R0,[R4, #+44]
        ADD      R0,R6,R8
        STR      R0,[R4, #+80]
        SUB      R1,R6,R8
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+1
        STR      R0,[R4, #+108]
//  167 	D32FP(5, 1, 1, 2);
        LDR      R0,[R4, #+20]
        LDR      R1,[R4, #+104]
        LDR      R8,[R4, #+40]
        LDR      R9,[R4, #+84]
        ADD      R5,R1,R0
        SUB      R1,R0,R1
        LDR      R0,??xmp3_FDCT32_2+0x3C  ;; 0x4a9d9cf0
        ADD      R7,R9,R8
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R6,R0,#+1
        LDR      R0,??xmp3_FDCT32_2+0x40  ;; 0x7c7d1db3
        SUB      R1,R8,R9
        LDR      R9,??xmp3_FDCT32_2+0x44  ;; 0x43e224a9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R8,R0,#+1
        ADD      R0,R7,R5
        STR      R0,[R4, #+20]
        SUB      R1,R5,R7
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+2
        STR      R0,[R4, #+40]
        ADD      R0,R6,R8
        STR      R0,[R4, #+84]
        SUB      R1,R6,R8
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+2
        STR      R0,[R4, #+104]
//  168 	D32FP(6, 1, 1, 2);
        LDR      R0,[R4, #+24]
        LDR      R1,[R4, #+100]
        LDR      R8,[R4, #+36]
        LDR      R9,[R4, #+88]
        ADD      R5,R1,R0
        SUB      R1,R0,R1
        LDR      R0,??xmp3_FDCT32_2+0x48  ;; 0x4fae3711
        ADD      R7,R9,R8
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R6,R0,#+1
        LDR      R0,??xmp3_FDCT32_2+0x4C  ;; 0x6b6fcf26
        SUB      R1,R8,R9
        LDR      R9,??xmp3_FDCT32_2+0x50  ;; 0x6e3c92c1
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R8,R0,#+1
        ADD      R0,R7,R5
        STR      R0,[R4, #+24]
        SUB      R1,R5,R7
        MOV      R0,R9
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+2
        STR      R0,[R4, #+36]
        ADD      R0,R6,R8
        STR      R0,[R4, #+88]
        SUB      R1,R6,R8
        MOV      R0,R9
//  169 	D32FP(7, 1, 1, 4);
        LDR      R9,??xmp3_FDCT32_2+0x54  ;; dcttab + 96
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+2
        STR      R0,[R4, #+100]
        LDR      R1,[R4, #+28]
//  170 
//  171 	/* second pass */
//  172 	for (i = 4; i > 0; i--) {
        MOV      R10,#+4
        STR      R1,[SP, #+4]
        LDR      R1,[R4, #+32]
        LDR      R5,[R4, #+96]
        STR      R1,[SP, #+8]
        LDR      R0,[SP, #+4]
        ADD      R6,R5,R0
        LDR      R11,[R4, #+92]
        SUB      R1,R0,R5
        LDR      R0,??xmp3_FDCT32_2+0x58  ;; 0x56601ea7
        LDR      R5,??xmp3_FDCT32_2+0x5C  ;; 0x519e4e04
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R7,R0,#+1
        LDR      R0,[SP, #+8]
        ADD      R8,R11,R0
        SUB      R1,R0,R11
        LDR      R0,??xmp3_FDCT32_2+0x60  ;; 0x5f4cf6eb
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R11,R0,#+1
        ADD      R0,R8,R6
        STR      R0,[R4, #+28]
        SUB      R1,R6,R8
        MOV      R0,R5
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+4
        STR      R0,[R4, #+32]
        ADD      R0,R7,R11
        STR      R0,[R4, #+92]
        SUB      R1,R7,R11
        MOV      R0,R5
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+4
        STR      R0,[R4, #+96]
//  173 		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
??xmp3_FDCT32_3:
        LDR      R0,[R4], #+28
        LDR      R1,[R4], #-16
        LDR      R8,[R4], #+4
        LDR      R11,[R4], #-12
//  174 		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
        ADD      R6,R1,R0
        SUB      R1,R0,R1
        LDR      R0,[R9], #+4
//  175 		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
        ADD      R5,R11,R8
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R7,R0,#+1
        LDR      R0,[R9], #+4
        SUB      R1,R8,R11
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R8,R0,#+3
//  176 		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
        ADD      R1,R5,R6
        STR      R1,[SP, #+4]
        LDR      R0,[R9, #+0]
        SUB      R1,R6,R5
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R5,R0,#+1
//  177 		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
        ADD      R1,R7,R8
        STR      R1,[SP, #+16]
        LDR      R0,[R9], #+4
        SUB      R1,R7,R8
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+1
        STR      R0,[SP, #+20]
//  178 
//  179 		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
        LDR      R0,[R4], #+20
        LDR      R1,[R4], #-16
        LDR      R7,[R4], #+12
        LDR      R8,[R4], #-20
//  180 		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
        ADD      R3,R1,R0
        STR      R3,[SP, #+12]
        SUB      R1,R0,R1
        LDR      R0,[R9], #+4
//  181 		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
        ADD      R11,R8,R7
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R6,R0,#+1
        LDR      R0,[R9], #+4
        SUB      R1,R7,R8
        _BLF     MULSHIFT32,??MULSHIFT32??rA
//  182 		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
        LDR      R1,[SP, #+12]
        LSL      R7,R0,#+1
        ADD      R1,R11,R1
        STR      R1,[SP, #+8]
        LDR      R0,[SP, #+12]
//  183 		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
//  184 
//  185 		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
//  186 		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
//  187 		buf[0] = b0;	    buf[1] = b1;
//  188 		buf[2] = b2 + b3;	buf[3] = b3;
//  189 
//  190 		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
//  191 		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
//  192 		b6 += b7;
//  193 		buf[4] = b4 + b6;	buf[5] = b5 + b7;
//  194 		buf[6] = b5 + b6;	buf[7] = b7;
//  195 
//  196 		buf += 8;
//  197 	}
        SUB      R10,R10,#+1
        SUB      R1,R0,R11
        LDR      R0,[R9, #+0]
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R11,R0,#+2
        ADD      R1,R6,R7
        STR      R1,[SP, #+12]
        LDR      R0,[R9], #+4
        SUB      R1,R6,R7
        LDR      R6,??xmp3_FDCT32_2+0x64  ;; 0x5a82799a
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R0,R0,#+2
        STR      R0,[SP, #+24]
        LDR      R0,[SP, #+4]
        LDR      R1,[SP, #+8]
        SUB      R1,R0,R1
        MOV      R0,R6
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LSL      R8,R0,#+1
        SUB      R1,R5,R11
        MOV      R0,R6
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LDR      R1,[SP, #+8]
        LSL      R7,R0,#+1
        LDR      R0,[SP, #+4]
        ADD      R0,R1,R0
        STR      R0,[R4], #+4
        STR      R8,[R4], #+4
        ADD      R0,R5,R11
        ADD      R0,R7,R0
        STR      R0,[R4], #+4
        STR      R7,[R4], #+4
        LDR      R0,[SP, #+16]
        LDR      R1,[SP, #+12]
        SUB      R1,R0,R1
        MOV      R0,R6
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LDR      R1,[SP, #+24]
        LSL      R5,R0,#+1
        LDR      R0,[SP, #+20]
        SUB      R1,R0,R1
        MOV      R0,R6
        _BLF     MULSHIFT32,??MULSHIFT32??rA
        LDR      R1,[SP, #+24]
        LDR      R2,[SP, #+20]
        LDR      R3,[SP, #+12]
        ADD      R1,R2,R1
        LDR      R2,[SP, #+16]
        LSL      R0,R0,#+1
        ADD      R1,R0,R1
        ADD      R2,R3,R2
        ADD      R2,R1,R2
        STR      R2,[R4], #+4
        ADD      R2,R0,R5
        STR      R2,[R4], #+4
        ADD      R1,R1,R5
        STR      R1,[R4], #+4
        STR      R0,[R4], #+4
        CMP      R10,#+1
        BGE      ??xmp3_FDCT32_3
//  198 	buf -= 32;	/* reset */
//  199 
//  200 	/* sample 0 - always delayed one block */
//  201 	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
        LDR      R3,[SP, #+36]
        MVN      R0,#+127
        ADD      R2,R0,R4
        LDR      R0,[SP, #+36]
//  202 	s = buf[ 0];				d[0] = d[8] = s;
        LDR      R4,[R2, #+0]
        CMP      R0,#+0
        LDR      R0,[SP, #+32]
        MOVNE    R1,#+0
        SUB      R0,R0,R3
        LDR      R3,[SP, #+28]
        MOVEQ    R1,#+1088
        AND      R0,R0,#0x7
        ADD      R0,R3,R0, LSL #+2
        MOV      R3,#+4096
        ADD      R1,R0,R1, LSL #+2
        ADD      R1,R3,R1
        STR      R4,[R1, #+32]
        STR      R4,[R1, #+0]
//  203     
//  204 	/* samples 16 to 31 */
//  205 	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
        LDR      R1,[SP, #+36]
        LDR      R5,[SP, #+28]
        CMP      R1,#+0
        LDR      R1,[SP, #+32]
        MOVNE    R4,#+1088
        ADD      R1,R5,R1, LSL #+2
//  206 
//  207 	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
        LDR      R5,[R2, #+4]
        MOVEQ    R4,#+0
        ADD      R4,R1,R4, LSL #+2
        STR      R5,[R4, #+32]
        STR      R5,[R4], #+256
//  208 
//  209 	tmp = buf[25] + buf[29];
        LDR      R5,[R2, #+100]
        LDR      R6,[R2, #+116]
        ADD      R5,R6,R5
//  210 	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+68]
        ADD      R6,R5,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  211 	s = buf[ 9] + buf[13];		d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+36]
        LDR      R7,[R2, #+52]
        ADD      R6,R7,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  212 	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+84]
        ADD      R5,R5,R6
        STR      R5,[R4, #+32]
        STR      R5,[R4], #+256
//  213 
//  214 	tmp = buf[29] + buf[27];
        LDR      R5,[R2, #+116]
        LDR      R6,[R2, #+108]
        ADD      R5,R6,R5
//  215 	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+20]
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  216 	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+84]
        ADD      R6,R5,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  217 	s = buf[13] + buf[11];		d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+52]
        LDR      R7,[R2, #+44]
        ADD      R6,R7,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  218 	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+76]
        ADD      R5,R5,R6
        STR      R5,[R4, #+32]
        STR      R5,[R4], #+256
//  219 
//  220 	tmp = buf[27] + buf[31];
        LDR      R5,[R2, #+108]
        LDR      R6,[R2, #+124]
        ADD      R5,R6,R5
//  221 	s = buf[ 3];				d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+12]
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  222 	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+76]
        ADD      R6,R5,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  223 	s = buf[11] + buf[15];		d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+44]
        LDR      R7,[R2, #+60]
        ADD      R6,R7,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  224 	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+92]
        ADD      R5,R5,R6
        STR      R5,[R4, #+32]
        STR      R5,[R4], #+256
//  225 
//  226 	tmp = buf[31];
//  227 	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+28]
        LDR      R5,[R2, #+124]
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  228 	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+92]
        ADD      R6,R5,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  229 	s = buf[15];				d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+60]
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  230 	s = tmp;					d[0] = d[8] = s;
        STR      R5,[R4, #+32]
        STR      R5,[R4, #+0]
//  231 
//  232 	/* samples 16 to 1 (sample 16 used again) */
//  233 	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
        LDR      R4,[SP, #+36]
//  234 
//  235 	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
        LDR      R5,[R2, #+4]
        CMP      R4,#+0
        MOVNE    R4,#+0
        MOVEQ    R4,#+1088
        ADD      R4,R0,R4, LSL #+2
        ADD      R4,R4,#+64
        STR      R5,[R4, #+32]
        STR      R5,[R4], #+256
//  236 
//  237 	tmp = buf[30] + buf[25];
        LDR      R5,[R2, #+120]
        LDR      R6,[R2, #+100]
        ADD      R5,R6,R5
//  238 	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+68]
        ADD      R6,R5,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  239 	s = buf[14] + buf[ 9];		d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+56]
        LDR      R7,[R2, #+36]
        ADD      R6,R7,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  240 	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+88]
        ADD      R5,R5,R6
        STR      R5,[R4, #+32]
        STR      R5,[R4], #+256
//  241 	s = buf[ 6];				d[0] = d[8] = s;	d += 64;
        LDR      R5,[R2, #+24]
        STR      R5,[R4, #+32]
        STR      R5,[R4], #+256
//  242 
//  243 	tmp = buf[26] + buf[30];
        LDR      R5,[R2, #+104]
        LDR      R6,[R2, #+120]
        ADD      R5,R6,R5
//  244 	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+88]
        ADD      R6,R5,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  245 	s = buf[10] + buf[14];		d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+40]
        LDR      R7,[R2, #+56]
        ADD      R6,R7,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  246 	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+72]
        ADD      R5,R5,R6
        STR      R5,[R4, #+32]
        STR      R5,[R4], #+256
//  247 	s = buf[ 2];				d[0] = d[8] = s;	d += 64;
        LDR      R5,[R2, #+8]
        STR      R5,[R4, #+32]
        STR      R5,[R4], #+256
//  248 
//  249 	tmp = buf[28] + buf[26];
        LDR      R5,[R2, #+112]
        LDR      R6,[R2, #+104]
        ADD      R5,R6,R5
//  250 	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+72]
        ADD      R6,R5,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  251 	s = buf[12] + buf[10];		d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+48]
        LDR      R7,[R2, #+40]
        ADD      R6,R7,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  252 	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+80]
        ADD      R5,R5,R6
        STR      R5,[R4, #+32]
        STR      R5,[R4], #+256
//  253 	s = buf[ 4];				d[0] = d[8] = s;	d += 64;
        LDR      R5,[R2, #+16]
        STR      R5,[R4, #+32]
        STR      R5,[R4], #+256
//  254 
//  255 	tmp = buf[24] + buf[28];
        LDR      R5,[R2, #+96]
        LDR      R6,[R2, #+112]
        ADD      R5,R6,R5
//  256 	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+80]
        ADD      R6,R5,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  257 	s = buf[ 8] + buf[12];		d[0] = d[8] = s;	d += 64;
        LDR      R6,[R2, #+32]
        LDR      R7,[R2, #+48]
        ADD      R6,R7,R6
        STR      R6,[R4, #+32]
        STR      R6,[R4], #+256
//  258 	s = buf[16] + tmp;			d[0] = d[8] = s;
        LDR      R2,[R2, #+64]
        ADD      R2,R5,R2
        STR      R2,[R4, #+32]
        STR      R2,[R4, #+0]
//  259 
//  260 	/* this is so rarely invoked that it's not worth making two versions of the output
//  261 	 *   shuffle code (one for no shift, one for clip + variable shift) like in IMDCT
//  262 	 * here we just load, clip, shift, and store on the rare instances that es != 0
//  263 	 */
//  264 	if (es) {
        LDR      R2,[SP, #+0]
        CMP      R2,#+0
        BEQ      ??xmp3_FDCT32_4
//  265 		d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
        LDR      R2,[SP, #+36]
        CMP      R2,#+0
        MOVNE    R2,#+0
        MOVEQ    R2,#+1088
        ADD      R2,R0,R2, LSL #+2
        ADD      R4,R3,R2
//  266 		s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);
        LDR      R5,[R4, #+0]
        LDR      R2,[SP, #+0]
        ASR      R6,R5,#+31
        RSB      R2,R2,#+31
        MOV      R3,#+1
        LSL      R3,R3,R2
        SUB      R3,R3,#+1
        CMP      R6,R5, ASR R2
        EORNE    R5,R3,R6
        LDR      R6,[SP, #+0]
        LSL      R5,R5,R6
        STR      R5,[R4, #+32]
        STR      R5,[R4, #+0]
//  267 	
//  268 		d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
        LDR      R4,[SP, #+36]
        CMP      R4,#+0
        MOVNE    R4,#+1088
        ADD      R1,R1,R4, LSL #+2
//  269 		for (i = 16; i <= 31; i++) {
        MOV      R4,#+16
//  270 			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
??xmp3_FDCT32_5:
        LDR      R5,[R1, #+0]
//  271 		}
        ADD      R4,R4,#+1
        ASR      R6,R5,#+31
        CMP      R6,R5, ASR R2
        EORNE    R5,R3,R6
        LDR      R6,[SP, #+0]
        CMP      R4,#+32
        LSL      R5,R5,R6
        STR      R5,[R1, #+32]
        STR      R5,[R1], #+256
        BLT      ??xmp3_FDCT32_5
//  272 
//  273 		d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
        LDR      R1,[SP, #+36]
//  274 		for (i = 15; i >= 0; i--) {
        MOV      R10,#+15
        CMP      R1,#+0
        MOVNE    R1,#+0
        MOVEQ    R1,#+1088
        ADD      R0,R0,R1, LSL #+2
        ADD      R4,R0,#+64
//  275 			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
??xmp3_FDCT32_6:
        LDR      R5,[R4, #+0]
        ASR      R0,R5,#+31
        CMP      R0,R5, ASR R2
        EORNE    R5,R3,R0
        LDR      R0,[SP, #+0]
//  276 		}
        SUBS     R10,R10,#+1
        LSL      R0,R5,R0
        STR      R0,[R4, #+32]
        STR      R0,[R4], #+256
        BPL      ??xmp3_FDCT32_6
//  277 	}
//  278 }
??xmp3_FDCT32_4:
        ADD      SP,SP,#+40       ;; stack cleaning
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??xmp3_FDCT32_2:
        DC32     0x4013c251
        DC32     0x518522fb
        DC32     0x404f4672
        DC32     0x40b345bd
        DC32     0x6d0b20cf
        DC32     0x42e13c10
        DC32     0x41fa2d6d
        DC32     0x41d95790
        DC32     0x48919f44
        DC32     0x43f93421
        DC32     0x5efc8d96
        DC32     0x52cb0e63
        DC32     0x46cc1bc4
        DC32     0x4ad81a97
        DC32     0x64e2402e
        DC32     0x4a9d9cf0
        DC32     0x7c7d1db3
        DC32     0x43e224a9
        DC32     0x4fae3711
        DC32     0x6b6fcf26
        DC32     0x6e3c92c1
        DC32     dcttab + 96
        DC32     0x56601ea7
        DC32     0x519e4e04
        DC32     0x5f4cf6eb
        DC32     0x5a82799a
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon1
        CFI NoFunction
        ARM
??MULSHIFT32??rA:
        LDR      R12,??Subroutine1_0  ;; MULSHIFT32
        BX       R12
        DATA
??Subroutine1_0:
        DC32     MULSHIFT32
        CFI EndBlock cfiBlock2

        END
// 
// 2 508 bytes in segment CODE
//   192 bytes in segment DATA_C
// 
// 2 492 bytes of CODE  memory (+ 16 bytes shared)
//   192 bytes of CONST memory
//
//Errors: none
//Warnings: 1
