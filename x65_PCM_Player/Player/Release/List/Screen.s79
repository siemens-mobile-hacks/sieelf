//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   14/Feb/2012  15:39:33 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Screen.c /
//    Command line    =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Screen.c /
//                        -D NDEBUG -lC D:\SVN\SieELF\SieELF\x65_PCM_Player\ /
//                       Player\Release\List\ -lA                            /
//                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player\Player /
//                       \Release\Obj\ -s9 --cpu_mode arm --endian little    /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --dlib_config "D:\Program                /
//                       Files\IAR\Embedded Workbench 4.0                    /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude      /
//                       swilib.h -I "D:\Program Files\IAR\Embedded          /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=16                               /
//    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\Screen.s79                                     /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME Screen

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
        MULTWEAK ??DrawBitmap??rT
        MULTWEAK ??DrawScreen??rT
        MULTWEAK ??ScreenFree??rT
        MULTWEAK ??ScreenInit??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC DrawBitmap
        FUNCTION DrawBitmap,0203H
        LOCFRAME CSTACK, 28, STACK
        PUBLIC DrawScreen
        FUNCTION DrawScreen,0201H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC ScreenFree
        FUNCTION ScreenFree,0201H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC ScreenInit
        FUNCTION ScreenInit,0201H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC color
        PUBLIC drwobj
        PUBLIC img
        PUBLIC rc
        PUBLIC screen
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
DrawBitmap          SYMBOL "DrawBitmap"
??DrawBitmap??rT    SYMBOL "??rT", DrawBitmap
DrawScreen          SYMBOL "DrawScreen"
??DrawScreen??rT    SYMBOL "??rT", DrawScreen
ScreenFree          SYMBOL "ScreenFree"
??ScreenFree??rT    SYMBOL "??rT", ScreenFree
ScreenInit          SYMBOL "ScreenInit"
??ScreenInit??rT    SYMBOL "??rT", ScreenInit

// D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Screen.c
//    1 
//    2 //#include "jpg.c"
//    3 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//    4 unsigned short * screen;
//    5 IMGHDR img =
img:
        DS8 8
        REQUIRE `?<Initializer for img>`
screen:
        DS8 4
        REQUIRE `?<Initializer for screen>`
//    6 {
//    7   16, 16, 0x8, 0
//    8 };
//    9 RECT rc;
rc:
        DS8 8
        REQUIRE `?<Initializer for rc>`
//   10 DRWOBJ drwobj;
drwobj:
        DS8 36
        REQUIRE `?<Initializer for drwobj>`

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   11 int color = 0;
color:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??ScreenInit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ScreenInit
//   12 
//   13 #define RGB16(R,G,B) ((B>31?31:B)+((G>63?63:G)<<5)+((R>31?31:R)<<11));
//   14 #define ClearScreen() zeromem(&screen,sizeof(screen));
//   15 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ScreenInit
        ARM
//   16 void ScreenInit()
//   17 {
ScreenInit:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   18   img.w = ScreenW();
        LDR      R4,??ScreenInit_0  ;; img
        SWI      +33160
        STRB     R0,[R4, #+0]
//   19   img.h = ScreenH();
        SWI      +33161
        STRB     R0,[R4, #+1]
//   20   screen = malloc( 132 * 176 * 2 );
        MOV      R0,#+128
        ORR      R0,R0,#0xB500
        SWI      +20
        STR      R0,[R4, #+8]
//   21   img.bitmap = ( void * ) screen;
        STR      R0,[R4, #+4]
//   22   StoreXYWHtoRECT( & rc, 0, 0, img.w, img.h );
        LDRB     R0,[R4, #+1]
        MOV      R2,#+0
        MOV      R1,#+0
        PUSH     {R0}
        CFI CFA R13+16
        LDRB     R3,[R4, #+0]
        ADD      R0,R4,#+12
        SWI      +307
//   23   SetPropTo_Obj5( & drwobj, & rc, 0, ( IMGHDR * ) & img );
        MOV      R3,R4
        MOV      R2,#+0
        ADD      R1,R4,#+12
        ADD      R0,R4,#+20
        SWI      +337
//   24   SetColor( & drwobj, GetPaletteAdrByColorIndex( 0 ), GetPaletteAdrByColorIndex( 1 ) );
        MOV      R0,#+1
        SWI      +302
        MOV      R5,R0
        MOV      R0,#+0
        SWI      +302
        MOV      R2,R5
        MOV      R1,R0
        ADD      R0,R4,#+20
        SWI      +331
//   25 }
        POP      {R0,R4,R5,PC}    ;; return
        DATA
??ScreenInit_0:
        DC32     img
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??ScreenFree??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ScreenFree
//   26 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ScreenFree
        ARM
//   27 void ScreenFree()
//   28 {
//   29   mfree( screen );
ScreenFree:
        LDR      R0,??DataTable1  ;; img + 8
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R0, #+0]
        SWI      +21
//   30 };
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??DrawScreen??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE DrawScreen
//   31 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function DrawScreen
        ARM
//   32 void DrawScreen()
//   33 {
//   34   DrawObject( & drwobj );
DrawScreen:
        LDR      R0,??DrawScreen_0  ;; img + 20
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +298
//   35 }
        POP      {PC}             ;; return
        DATA
??DrawScreen_0:
        DC32     img + 20
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??DrawBitmap??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE DrawBitmap
//   36 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function DrawBitmap
        ARM
//   37 void DrawBitmap( unsigned char x, unsigned char y, unsigned char w, unsigned char h, short * Bitmap )
//   38 {
DrawBitmap:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R5,R0
        LDR      R8,[SP, #+28]
        MOV      R6,R1
        MOVS     R7,R2
//   39   short yy;
//   40   if ( ( !w ) || ( !h ) ) return;
        CMPNE    R3,#+0
        POPEQ    {R4-R9,PC}
//   41   yy = 0;
        MOV      R9,#+0
        MOV      R4,R3
        B        ??DrawBitmap_0
//   42   while ( yy < h )
//   43   {
//   44     memcpy( & screen[x + ScreenW() * ( yy + y )], & Bitmap[yy * w], w * 2 );
??DrawBitmap_1:
        SWI      +33160
        MUL      R3,R7,R9
        ADD      R12,R6,R9
        ADD      R1,R8,R3, LSL #+1
        LDR      R3,??DataTable1  ;; img + 8
        MLA      R0,R12,R0,R5
        LDR      R3,[R3, #+0]
        LSL      R2,R7,#+1
        ADD      R0,R3,R0, LSL #+1
        SWI      +286
//   45     yy++;
        ADD      R9,R9,#+1
        MOV      R9,R9, LSL #+16
        MOV      R9,R9, ASR #+16
//   46   }
??DrawBitmap_0:
        CMP      R9,R4
        BLT      ??DrawBitmap_1
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock7
//   47 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     img + 8

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for img>`:
        DATA
        DC8 16, 16
        DC16 8
        DC32 0H
`?<Initializer for screen>`:
        DC8 0, 0, 0, 0
`?<Initializer for rc>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for drwobj>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
//   48 
// 
// 300 bytes in segment CODE
//  56 bytes in segment DATA_I
//  56 bytes in segment DATA_ID
//   4 bytes in segment DATA_Z
//  24 bytes in segment INITTAB
// 
// 284 bytes of CODE  memory (+ 40 bytes shared)
//  56 bytes of CONST memory
//  60 bytes of DATA  memory
//
//Errors: none
//Warnings: none
