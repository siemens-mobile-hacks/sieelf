##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Feb/2012  15:39:51 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\MP3\mp3de #
#                       c\subband.c                                          #
#    Command line    =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\MP3\mp3de #
#                       c\subband.c -D NDEBUG -lC                            #
#                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\ #
#                       Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player #
#                       \Player\Release\Obj\ -s9 --cpu_mode arm --endian     #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Program              #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude       #
#                       swilib.h -I "D:\Program Files\IAR\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=16                                #
#    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\subband.lst                                      #
#    Object file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\subband.r79                                       #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\MP3\mp3dec\subband.c
      1          /* ***** BEGIN LICENSE BLOCK ***** 
      2           * Version: RCSL 1.0/RPSL 1.0 
      3           *  
      4           * Portions Copyright (c) 1995-2002 RealNetworks, Inc. All Rights Reserved. 
      5           *      
      6           * The contents of this file, and the files included with this file, are 
      7           * subject to the current version of the RealNetworks Public Source License 
      8           * Version 1.0 (the "RPSL") available at 
      9           * http://www.helixcommunity.org/content/rpsl unless you have licensed 
     10           * the file under the RealNetworks Community Source License Version 1.0 
     11           * (the "RCSL") available at http://www.helixcommunity.org/content/rcsl, 
     12           * in which case the RCSL will apply. You may also obtain the license terms 
     13           * directly from RealNetworks.  You may not use this file except in 
     14           * compliance with the RPSL or, if you have a valid RCSL with RealNetworks 
     15           * applicable to this file, the RCSL.  Please see the applicable RPSL or 
     16           * RCSL for the rights, obligations and limitations governing use of the 
     17           * contents of the file.  
     18           *  
     19           * This file is part of the Helix DNA Technology. RealNetworks is the 
     20           * developer of the Original Code and owns the copyrights in the portions 
     21           * it created. 
     22           *  
     23           * This file, and the files included with this file, is distributed and made 
     24           * available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER 
     25           * EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS ALL SUCH WARRANTIES, 
     26           * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS 
     27           * FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. 
     28           * 
     29           * Technology Compatibility Kit Test Suite(s) Location: 
     30           *    http://www.helixcommunity.org/content/tck 
     31           * 
     32           * Contributor(s): 
     33           *  
     34           * ***** END LICENSE BLOCK ***** */ 
     35          
     36          /**************************************************************************************
     37           * Fixed-point MP3 decoder
     38           * Jon Recker (jrecker@real.com), Ken Cooke (kenc@real.com)
     39           * June 2003
     40           *
     41           * subband.c - subband transform (synthesis filterbank implemented via 32-point DCT
     42           *               followed by polyphase filter)
     43           **************************************************************************************/
     44          
     45          #include "coder.h"

  /* ***** BEGIN LICENSE BLOCK ***** 
                                    ^
"D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\MP3\mp3dec\coder.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
     46          #include "assembly.h"
     47          
     48          /**************************************************************************************
     49           * Function:    Subband
     50           *
     51           * Description: do subband transform on all the blocks in one granule, all channels
     52           *
     53           * Inputs:      filled MP3DecInfo structure, after calling IMDCT for all channels
     54           *              vbuf[ch] and vindex[ch] must be preserved between calls
     55           *
     56           * Outputs:     decoded PCM data, interleaved LRLRLR... if stereo
     57           *
     58           * Return:      0 on success,  -1 if null input pointers
     59           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
     60          int Subband(MP3DecInfo *mp3DecInfo, short *pcmBuf)
     61          {
   \                     xmp3_Subband:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0140A0E1           MOV      R4,R1
     62          	int b;
     63          	HuffmanInfo *hi;
                 	             ^
Warning[Pe550]: variable "hi" was set but never used
     64          	IMDCTInfo *mi;
     65          	SubbandInfo *sbi;
     66          
     67          	/* validate pointers */
     68          	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0C109015           LDRNE    R1,[R0, #+12]
   \   00000010   00005113           CMPNE    R1,#+0
   \   00000014   14709015           LDRNE    R7,[R0, #+20]
   \   00000018   00005713           CMPNE    R7,#+0
   \   0000001C   18809015           LDRNE    R8,[R0, #+24]
   \   00000020   00005813           CMPNE    R8,#+0
     69          		return -1;
   \   00000024   0000E003           MVNEQ    R0,#+0
   \   00000028   F08FBD08           POPEQ    {R4-R11,PC}
     70          
     71          	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
     72          	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
     73          	sbi = (SubbandInfo*)(mp3DecInfo->SubbandInfoPS);
   \   0000002C   BC0790E5           LDR      R0,[R0, #+1980]
   \   00000030   885DA0E3           MOV      R5,#+8704
   \   00000034   1860A0E3           MOV      R6,#+24
   \   00000038   6C6D86E3           ORR      R6,R6,#0x1B00
   \   0000003C   020050E3           CMP      R0,#+2
   \   00000040   0090A0E3           MOV      R9,#+0
   \   00000044   2300001A           BNE      ??xmp3_Subband_0
     74          
     75          	if (mp3DecInfo->nChans == 2) {
     76          		/* stereo */
     77          		for (b = 0; b < BLOCK_SIZE; b++) {
     78          			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
   \                     ??xmp3_Subband_1:
   \   00000048   07B086E0           ADD      R11,R6,R7
   \   0000004C   00009BE5           LDR      R0,[R11, #+0]
   \   00000050   08A085E0           ADD      R10,R5,R8
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   00209AE5           LDR      R2,[R10, #+0]
   \   0000005C   013009E2           AND      R3,R9,#0x1
   \   00000060   0810A0E1           MOV      R1,R8
   \   00000064   890387E0           ADD      R0,R7,R9, LSL #+7
   \   00000068   ........           _BLF     xmp3_FDCT32,??xmp3_FDCT32??rA
     79          			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
   \   0000006C   04009BE5           LDR      R0,[R11, #+4]
   \   00000070   013009E2           AND      R3,R9,#0x1
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   00209AE5           LDR      R2,[R10, #+0]
   \   0000007C   801088E2           ADD      R1,R8,#+128
   \   00000080   890387E0           ADD      R0,R7,R9, LSL #+7
   \   00000084   900E80E2           ADD      R0,R0,#+2304
   \   00000088   ........           _BLF     xmp3_FDCT32,??xmp3_FDCT32??rA
     80          			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
   \   0000008C   00109AE5           LDR      R1,[R10, #+0]
   \   00000090   B0209FE5           LDR      R2,??xmp3_Subband_2  ;; xmp3_polyCoef
   \   00000094   010009E2           AND      R0,R9,#0x1
   \   00000098   443DA0E3           MOV      R3,#+4352
   \   0000009C   011188E0           ADD      R1,R8,R1, LSL #+2
   \   000000A0   931021E0           MLA      R1,R3,R0,R1
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           _BLF     xmp3_PolyphaseStereo,??xmp3_PolyphaseStereo??rA
     81          			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
   \   000000AC   00009AE5           LDR      R0,[R10, #+0]
   \   000000B0   011009E2           AND      R1,R9,#0x1
   \   000000B4   010040E0           SUB      R0,R0,R1
   \   000000B8   070000E2           AND      R0,R0,#0x7
   \   000000BC   00008AE5           STR      R0,[R10, #+0]
     82          			pcmBuf += (2 * NBANDS);
   \   000000C0   804084E2           ADD      R4,R4,#+128
     83          		}
   \   000000C4   019089E2           ADD      R9,R9,#+1
   \   000000C8   120059E3           CMP      R9,#+18
   \   000000CC   08D08DE2           ADD      SP,SP,#+8
   \   000000D0   1A0000AA           BGE      ??xmp3_Subband_3
   \   000000D4   DBFFFFEA           B        ??xmp3_Subband_1
     84          	} else {
     85          		/* mono */
     86          		for (b = 0; b < BLOCK_SIZE; b++) {
     87          			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
   \                     ??xmp3_Subband_0:
   \   000000D8   070096E7           LDR      R0,[R6, +R7]
   \   000000DC   08A085E0           ADD      R10,R5,R8
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   00209AE5           LDR      R2,[R10, #+0]
   \   000000E8   013009E2           AND      R3,R9,#0x1
   \   000000EC   0810A0E1           MOV      R1,R8
   \   000000F0   890387E0           ADD      R0,R7,R9, LSL #+7
   \   000000F4   ........           _BLF     xmp3_FDCT32,??xmp3_FDCT32??rA
     88          			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
   \   000000F8   00109AE5           LDR      R1,[R10, #+0]
   \   000000FC   44209FE5           LDR      R2,??xmp3_Subband_2  ;; xmp3_polyCoef
   \   00000100   010009E2           AND      R0,R9,#0x1
   \   00000104   443DA0E3           MOV      R3,#+4352
   \   00000108   011188E0           ADD      R1,R8,R1, LSL #+2
   \   0000010C   931021E0           MLA      R1,R3,R0,R1
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           _BLF     xmp3_PolyphaseMono,??xmp3_PolyphaseMono??rA
     89          			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
   \   00000118   00009AE5           LDR      R0,[R10, #+0]
   \   0000011C   011009E2           AND      R1,R9,#0x1
   \   00000120   010040E0           SUB      R0,R0,R1
   \   00000124   070000E2           AND      R0,R0,#0x7
   \   00000128   00008AE5           STR      R0,[R10, #+0]
     90          			pcmBuf += NBANDS;
   \   0000012C   404084E2           ADD      R4,R4,#+64
     91          		}
   \   00000130   019089E2           ADD      R9,R9,#+1
   \   00000134   120059E3           CMP      R9,#+18
   \   00000138   04D08DE2           ADD      SP,SP,#+4
   \   0000013C   E5FFFFBA           BLT      ??xmp3_Subband_0
     92          	}
     93          
     94          	return 0;
   \                     ??xmp3_Subband_3:
   \   00000140   0000A0E3           MOV      R0,#+0
   \   00000144   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??xmp3_Subband_2:
   \   00000148   ........           DC32     xmp3_polyCoef
     95          }
     96          

   Maximum stack usage in bytes:

     Function     CSTACK
     --------     ------
     xmp3_Subband    44


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     xmp3_Subband    332
      Others          40

 
 372 bytes in segment CODE
 
 332 bytes of CODE memory (+ 40 bytes shared)

Errors: none
Warnings: 2
