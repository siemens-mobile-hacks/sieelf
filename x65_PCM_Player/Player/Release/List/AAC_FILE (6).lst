##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Feb/2012  15:39:28 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDE #
#                       C\AAC_FILE (6).c                                     #
#    Command line    =  "D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACD #
#                       EC\AAC_FILE (6).c" -D NDEBUG -lC                     #
#                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\ #
#                       Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player #
#                       \Player\Release\Obj\ -s9 --cpu_mode arm --endian     #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Program              #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude       #
#                       swilib.h -I "D:\Program Files\IAR\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=16                                #
#    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\AAC_FILE (6).lst                                 #
#    Object file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\AAC_FILE (6).r79                                  #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDEC\AAC_FILE (6).c
      1          /* ***** BEGIN LICENSE BLOCK *****  
      2           * Source last modified: $Id: sbrmath.c,v 1.1 2005/02/26 01:47:35 jrecker Exp $ 
      3           *   
      4           * Portions Copyright (c) 1995-2005 RealNetworks, Inc. All Rights Reserved.  
      5           *       
      6           * The contents of this file, and the files included with this file, 
      7           * are subject to the current version of the RealNetworks Public 
      8           * Source License (the "RPSL") available at 
      9           * http://www.helixcommunity.org/content/rpsl unless you have licensed 
     10           * the file under the current version of the RealNetworks Community 
     11           * Source License (the "RCSL") available at 
     12           * http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
     13           * will apply. You may also obtain the license terms directly from 
     14           * RealNetworks.  You may not use this file except in compliance with 
     15           * the RPSL or, if you have a valid RCSL with RealNetworks applicable 
     16           * to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
     17           * the rights, obligations and limitations governing use of the 
     18           * contents of the file. 
     19           *   
     20           * This file is part of the Helix DNA Technology. RealNetworks is the 
     21           * developer of the Original Code and owns the copyrights in the 
     22           * portions it created. 
     23           *   
     24           * This file, and the files included with this file, is distributed 
     25           * and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY 
     26           * KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS 
     27           * ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES 
     28           * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET 
     29           * ENJOYMENT OR NON-INFRINGEMENT. 
     30           *  
     31           * Technology Compatibility Kit Test Suite(s) Location:  
     32           *    http://www.helixcommunity.org/content/tck  
     33           *  
     34           * Contributor(s):  
     35           *   
     36           * ***** END LICENSE BLOCK ***** */  
     37          
     38          /**************************************************************************************
     39           * Fixed-point HE-AAC decoder
     40           * Jon Recker (jrecker@real.com)
     41           * February 2005
     42           *
     43           * sbrmath.c - fixed-point math functions for SBR
     44           **************************************************************************************/
     45          
     46          #include "sbr_aac.h"
     47          #include "assembly_aac.h"
     48          
     49          #define Q28_2	0x20000000	/* Q28: 2.0 */
     50          #define Q28_15	0x30000000	/* Q28: 1.5 */
     51          
     52          #define NUM_ITER_IRN		5
     53          
     54          /**************************************************************************************
     55           * Function:    InvRNormalized
     56           *
     57           * Description: use Newton's method to solve for x = 1/r
     58           *
     59           * Inputs:      r = Q31, range = [0.5, 1) (normalize your inputs to this range)
     60           *
     61           * Outputs:     none
     62           *
     63           * Return:      x = Q29, range ~= [1.0, 2.0]
     64           *
     65           * Notes:       guaranteed to converge and not overflow for any r in [0.5, 1)
     66           * 
     67           *              xn+1  = xn - f(xn)/f'(xn)
     68           *              f(x)  = 1/r - x = 0 (find root)
     69           *                    = 1/x - r
     70           *              f'(x) = -1/x^2
     71           *
     72           *              so xn+1 = xn - (1/xn - r) / (-1/xn^2)
     73           *                      = xn * (2 - r*xn)
     74           *
     75           *              NUM_ITER_IRN = 2, maxDiff = 6.2500e-02 (precision of about 4 bits)
     76           *              NUM_ITER_IRN = 3, maxDiff = 3.9063e-03 (precision of about 8 bits)
     77           *              NUM_ITER_IRN = 4, maxDiff = 1.5288e-05 (precision of about 16 bits)
     78           *              NUM_ITER_IRN = 5, maxDiff = 3.0034e-08 (precision of about 24 bits)
     79           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
     80          int InvRNormalized(int r)
     81          {
   \                     raac_InvRNormalized:
   \   00000000   70002DE9           PUSH     {R4-R6}
   \   00000004   00C0A0E1           MOV      R12,R0
     82          	int i, xn, t;
     83          
     84          	/* r =   [0.5, 1.0) 
     85          	 * 1/r = (1.0, 2.0] 
     86          	 *   so use 1.5 as initial guess 
     87          	 */
     88          	xn = Q28_15;
   \   00000008   C025A0E3           MOV      R2,#+805306368
     89          
     90          	/* xn = xn*(2.0 - r*xn) */
     91          	for (i = NUM_ITER_IRN; i != 0; i--) {
   \   0000000C   0560A0E3           MOV      R6,#+5
     92          		t = MULSHIFT32(r, xn);			/* Q31*Q29 = Q28 */
     93          		t = Q28_2 - t;					/* Q28 */
     94          		xn = MULSHIFT32(xn, t) << 4;	/* Q29*Q28 << 4 = Q29 */
   \                     ??raac_InvRNormalized_0:
   \   00000010   C23FA0E1           ASR      R3,R2,#+31
   \   00000014   0C40A0E1           MOV      R4,R12
   \   00000018   C45FA0E1           ASR      R5,R4,#+31
   \   0000001C   940281E0           UMULL    R0,R1,R4,R2
     95          	}
   \   00000020   016056E2           SUBS     R6,R6,#+1
   \   00000024   941321E0           MLA      R1,R4,R3,R1
   \   00000028   951221E0           MLA      R1,R5,R2,R1
   \   0000002C   0100A0E1           MOV      R0,R1
   \   00000030   800560E2           RSB      R0,R0,#+536870912
   \   00000034   C01FA0E1           ASR      R1,R0,#+31
   \   00000038   924085E0           UMULL    R4,R5,R2,R0
   \   0000003C   925125E0           MLA      R5,R2,R1,R5
   \   00000040   935025E0           MLA      R5,R3,R0,R5
   \   00000044   0522A0E1           LSL      R2,R5,#+4
   \   00000048   F0FFFF1A           BNE      ??raac_InvRNormalized_0
     96          
     97          	return xn;
   \   0000004C   7000BDE8           POP      {R4-R6}
   \   00000050   0200A0E1           MOV      R0,R2
   \   00000054   1EFF2FE1           BX       LR               ;; return
     98          }
     99          
    100          #define NUM_TERMS_RPI	5
    101          #define LOG2_EXP_INV	0x58b90bfc	/* 1/log2(e), Q31 */
    102          
    103          /* invTab[x] = 1/(x+1), format = Q30 */

   \                                 In segment DATA_C, align 4, align-sorted
    104          static const int invTab[NUM_TERMS_RPI] = {0x40000000, 0x20000000, 0x15555555, 0x10000000, 0x0ccccccd};
   \                     invTab:
   \   00000000   000000400000       DC32 1073741824, 536870912, 357913941, 268435456, 214748365
   \              002055555515
   \              00000010CDCC
   \              CC0C        
    105          
    106          /**************************************************************************************
    107           * Function:    RatioPowInv
    108           *
    109           * Description: use Taylor (MacLaurin) series expansion to calculate (a/b) ^ (1/c)
    110           *
    111           * Inputs:      a = [1, 64], b = [1, 64], c = [1, 64], a >= b
    112           *
    113           * Outputs:     none
    114           *
    115           * Return:      y = Q24, range ~= [0.015625, 64]
    116           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    117          int RatioPowInv(int a, int b, int c)
    118          {
   \                     raac_RatioPowInv:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0130A0E1           MOV      R3,R1
   \   00000008   0210A0E1           MOV      R1,R2
    119          	int lna, lnb, i, p, t, y;
    120          
    121          	if (a < 1 || b < 1 || c < 1 || a > 64 || b > 64 || c > 64 || a < b)
   \   0000000C   010050E3           CMP      R0,#+1
   \   00000010   010053A3           CMPGE    R3,#+1
   \   00000014   010051A3           CMPGE    R1,#+1
   \   00000018   050000BA           BLT      ??raac_RatioPowInv_0
   \   0000001C   410050E3           CMP      R0,#+65
   \   00000020   410053B3           CMPLT    R3,#+65
   \   00000024   410051B3           CMPLT    R1,#+65
   \   00000028   010000AA           BGE      ??raac_RatioPowInv_0
   \   0000002C   030050E1           CMP      R0,R3
   \   00000030   010000AA           BGE      ??raac_RatioPowInv_1
    122          		return 0;
   \                     ??raac_RatioPowInv_0:
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   F081BDE8           POP      {R4-R8,PC}
    123          
    124          	lna = MULSHIFT32(log2Tab[a], LOG2_EXP_INV) << 1;	/* ln(a), Q28 */
    125          	lnb = MULSHIFT32(log2Tab[b], LOG2_EXP_INV) << 1;	/* ln(b), Q28 */
    126          	p = (lna - lnb) / c;	/* Q28 */
   \                     ??raac_RatioPowInv_1:
   \   0000003C   70209FE5           LDR      R2,??raac_RatioPowInv_2  ;; raac_log2Tab
   \   00000040   70809FE5           LDR      R8,??raac_RatioPowInv_2+0x4  ;; 0x58b90bfc
   \   00000044   006192E7           LDR      R6,[R2, +R0, LSL #+2]
   \   00000048   C67FA0E1           ASR      R7,R6,#+31
   \   0000004C   964885E0           UMULL    R4,R5,R6,R8
   \   00000050   036192E7           LDR      R6,[R2, +R3, LSL #+2]
   \   00000054   975825E0           MLA      R5,R7,R8,R5
   \   00000058   C67FA0E1           ASR      R7,R6,#+31
   \   0000005C   962883E0           UMULL    R2,R3,R6,R8
    127          
    128          	/* sum in Q24 */
    129          	y = (1 << 24);
    130          	t = p >> 4;		/* t = p^1 * 1/1! (Q24)*/
    131          	y += t;
    132          
    133          	for (i = 2; i <= NUM_TERMS_RPI; i++) {
   \   00000060   0260A0E3           MOV      R6,#+2
   \   00000064   973823E0           MLA      R3,R7,R8,R3
   \   00000068   030045E0           SUB      R0,R5,R3
   \   0000006C   8000A0E1           LSL      R0,R0,#+1
   \   00000070   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000074   0130A0E1           MOV      R3,R1
   \   00000078   4342A0E1           ASR      R4,R3,#+4
   \   0000007C   402784E2           ADD      R2,R4,#+16777216
    134          		t = MULSHIFT32(invTab[i-1], t) << 2;
    135          		t = MULSHIFT32(p, t) << 4;	/* t = p^i * 1/i! (Q24) */
   \                     ??raac_RatioPowInv_3:
   \   00000080   34009FE5           LDR      R0,??raac_RatioPowInv_2+0x8  ;; invTab
   \   00000084   060180E0           ADD      R0,R0,R6, LSL #+2
   \   00000088   04C010E5           LDR      R12,[R0, #-4]
    136          		y += t;
    137          	}
   \   0000008C   016086E2           ADD      R6,R6,#+1
   \   00000090   9C04C1E0           SMULL    R0,R1,R12,R4
   \   00000094   060056E3           CMP      R6,#+6
   \   00000098   0141A0E1           LSL      R4,R1,#+2
   \   0000009C   9304C1E0           SMULL    R0,R1,R3,R4
   \   000000A0   0142A0E1           LSL      R4,R1,#+4
   \   000000A4   022084E0           ADD      R2,R4,R2
   \   000000A8   F4FFFFBA           BLT      ??raac_RatioPowInv_3
    138          
    139          	return y;
   \   000000AC   0200A0E1           MOV      R0,R2
   \   000000B0   F081BDE8           POP      {R4-R8,PC}
   \                     ??raac_RatioPowInv_2:
   \   000000B4   ........           DC32     raac_log2Tab
   \   000000B8   FC0BB958           DC32     0x58b90bfc
   \   000000BC   ........           DC32     invTab
    140          }
    141          
    142          /**************************************************************************************
    143           * Function:    SqrtFix
    144           *
    145           * Description: use binary search to calculate sqrt(q)
    146           *
    147           * Inputs:      q = Q30
    148           *              number of fraction bits in input
    149           *
    150           * Outputs:     number of fraction bits in output
    151           *
    152           * Return:      lo = Q(fBitsOut)
    153           *
    154           * Notes:       absolute precision varies depending on fBitsIn
    155           *              normalizes input to range [0x200000000, 0x7fffffff] and takes 
    156           *                floor(sqrt(input)), and sets fBitsOut appropriately
    157           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    158          int SqrtFix(int q, int fBitsIn, int *fBitsOut)
    159          {
   \                     raac_SqrtFix:
   \   00000000   70002DE9           PUSH     {R4-R6}
    160          	int z, lo, hi, mid;
    161          
    162          	if (q <= 0) {
   \   00000004   010050E3           CMP      R0,#+1
    163          		*fBitsOut = fBitsIn;
   \   00000008   001082B5           STRLT    R1,[R2, #+0]
    164          		return 0;
   \   0000000C   0000A0B3           MOVLT    R0,#+0
   \   00000010   290000BA           BLT      ??raac_SqrtFix_0
    165          	}
    166          
    167          	/* force even fBitsIn */
    168          	z = fBitsIn & 0x01;
   \   00000014   013001E2           AND      R3,R1,#0x1
    169          	q >>= z;
   \   00000018   5003A0E1           ASR      R0,R0,R3
    170          	fBitsIn -= z;
   \   0000001C   031041E0           SUB      R1,R1,R3
    171          
    172          	/* for max precision, normalize to [0x20000000, 0x7fffffff] */
    173          	z = (CLZ(q) - 1);
   \   00000020   0030B0E1           MOVS     R3,R0
   \   00000024   2030A003           MOVEQ    R3,#+32
   \   00000028   0D00000A           BEQ      ??raac_SqrtFix_1
   \   0000002C   01C0A0E3           MOV      R12,#+1
   \   00000030   2348B0E1           LSRS     R4,R3,#+16
   \   00000034   11C0A003           MOVEQ    R12,#+17
   \   00000038   0338A001           LSLEQ    R3,R3,#+16
   \   0000003C   234CB0E1           LSRS     R4,R3,#+24
   \   00000040   08C08C02           ADDEQ    R12,R12,#+8
   \   00000044   0334A001           LSLEQ    R3,R3,#+8
   \   00000048   234EB0E1           LSRS     R4,R3,#+28
   \   0000004C   04C08C02           ADDEQ    R12,R12,#+4
   \   00000050   0332A001           LSLEQ    R3,R3,#+4
   \   00000054   234FB0E1           LSRS     R4,R3,#+30
   \   00000058   02C08C02           ADDEQ    R12,R12,#+2
   \   0000005C   0331A001           LSLEQ    R3,R3,#+2
   \   00000060   A33F4CE0           SUB      R3,R12,R3, LSR #+31
   \                     ??raac_SqrtFix_1:
   \   00000064   013043E2           SUB      R3,R3,#+1
    174          	z >>= 1;
   \   00000068   C330A0E1           ASR      R3,R3,#+1
    175          	q <<= (2*z);
   \   0000006C   0340A0E1           MOV      R4,R3
   \   00000070   8440A0E1           LSL      R4,R4,#+1
   \   00000074   1004A0E1           LSL      R0,R0,R4
    176          
    177          	/* choose initial bounds */
    178          	lo = 1;
   \   00000078   01C0A0E3           MOV      R12,#+1
    179          	if (q >= 0x10000000)
   \   0000007C   400550E3           CMP      R0,#+268435456
    180          		lo = 16384;	/* (int)sqrt(0x10000000) */
   \   00000080   40CCA0A3           MOVGE    R12,#+16384
    181          	hi = 46340;		/* (int)sqrt(0x7fffffff) */
   \   00000084   0440A0E3           MOV      R4,#+4
   \   00000088   B54C84E3           ORR      R4,R4,#0xB500
    182          
    183          	/* do binary search with 32x32->32 multiply test */
    184          	do {
    185          		mid = (lo + hi) >> 1;
   \                     ??raac_SqrtFix_2:
   \   0000008C   0C5084E0           ADD      R5,R4,R12
   \   00000090   C550A0E1           ASR      R5,R5,#+1
    186          		if (mid*mid > q)
   \   00000094   950506E0           MUL      R6,R5,R5
   \   00000098   060050E1           CMP      R0,R6
    187          			hi = mid - 1;
   \   0000009C   014045B2           SUBLT    R4,R5,#+1
    188          		else
    189          			lo = mid + 1;
   \   000000A0   01C085A2           ADDGE    R12,R5,#+1
    190          	} while (hi >= lo);
   \   000000A4   0C0054E1           CMP      R4,R12
   \   000000A8   F7FFFFAA           BGE      ??raac_SqrtFix_2
    191          	lo--;
    192          
    193          	*fBitsOut = ((fBitsIn + 2*z) >> 1);
   \   000000AC   830081E0           ADD      R0,R1,R3, LSL #+1
   \   000000B0   C000A0E1           ASR      R0,R0,#+1
   \   000000B4   000082E5           STR      R0,[R2, #+0]
    194          	return lo;
   \   000000B8   01004CE2           SUB      R0,R12,#+1
   \                     ??raac_SqrtFix_0:
   \   000000BC   7000BDE8           POP      {R4-R6}
   \   000000C0   1EFF2FE1           BX       LR               ;; return
    195          }

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     raac_InvRNormalized    12
     raac_RatioPowInv       28
     raac_SqrtFix           12


   Segment part sizes:

     Function/Label      Bytes
     --------------      -----
     raac_InvRNormalized   88
     invTab                20
     raac_RatioPowInv     192
     raac_SqrtFix         196
      Others               24

 
 500 bytes in segment CODE
  20 bytes in segment DATA_C
 
 476 bytes of CODE  memory (+ 24 bytes shared)
  20 bytes of CONST memory

Errors: none
Warnings: none
