##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Feb/2012  15:39:21 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDE #
#                       C\AAC_FILE (20).c                                    #
#    Command line    =  "D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACD #
#                       EC\AAC_FILE (20).c" -D NDEBUG -lC                    #
#                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\ #
#                       Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player #
#                       \Player\Release\Obj\ -s9 --cpu_mode arm --endian     #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Program              #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude       #
#                       swilib.h -I "D:\Program Files\IAR\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=16                                #
#    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\AAC_FILE (20).lst                                #
#    Object file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\AAC_FILE (20).r79                                 #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDEC\AAC_FILE (20).c
      1          /* ***** BEGIN LICENSE BLOCK *****  
      2           * Source last modified: $Id: huffman.c,v 1.1 2005/02/26 01:47:34 jrecker Exp $ 
      3           *   
      4           * Portions Copyright (c) 1995-2005 RealNetworks, Inc. All Rights Reserved.  
      5           *       
      6           * The contents of this file, and the files included with this file, 
      7           * are subject to the current version of the RealNetworks Public 
      8           * Source License (the "RPSL") available at 
      9           * http://www.helixcommunity.org/content/rpsl unless you have licensed 
     10           * the file under the current version of the RealNetworks Community 
     11           * Source License (the "RCSL") available at 
     12           * http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
     13           * will apply. You may also obtain the license terms directly from 
     14           * RealNetworks.  You may not use this file except in compliance with 
     15           * the RPSL or, if you have a valid RCSL with RealNetworks applicable 
     16           * to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
     17           * the rights, obligations and limitations governing use of the 
     18           * contents of the file. 
     19           *   
     20           * This file is part of the Helix DNA Technology. RealNetworks is the 
     21           * developer of the Original Code and owns the copyrights in the 
     22           * portions it created. 
     23           *   
     24           * This file, and the files included with this file, is distributed 
     25           * and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY 
     26           * KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS 
     27           * ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES 
     28           * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET 
     29           * ENJOYMENT OR NON-INFRINGEMENT. 
     30           *  
     31           * Technology Compatibility Kit Test Suite(s) Location:  
     32           *    http://www.helixcommunity.org/content/tck  
     33           *  
     34           * Contributor(s):  
     35           *   
     36           * ***** END LICENSE BLOCK ***** */  
     37          
     38          /**************************************************************************************
     39           * Fixed-point HE-AAC decoder
     40           * Jon Recker (jrecker@real.com)
     41           * February 2005
     42           *
     43           * huffman.c - Huffman decoding
     44           **************************************************************************************/
     45          
     46          #include "coder_aac.h"
     47          
     48          /**************************************************************************************
     49           * Function:    DecodeHuffmanScalar
     50           *
     51           * Description: decode one Huffman symbol from bitstream
     52           *
     53           * Inputs:      pointers to Huffman table and info struct
     54           *              left-aligned bit buffer with >= huffTabInfo->maxBits bits
     55           *
     56           * Outputs:     decoded symbol in *val
     57           *
     58           * Return:      number of bits in symbol
     59           *
     60           * Notes:       assumes canonical Huffman codes:
     61           *                first CW always 0, we have "count" CW's of length "nBits" bits
     62           *                starting CW for codes of length nBits+1 = 
     63           *                  (startCW[nBits] + count[nBits]) << 1
     64           *                if there are no codes at nBits, then we just keep << 1 each time 
     65           *                  (since count[nBits] = 0)
     66           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
     67          int DecodeHuffmanScalar(const signed short *huffTab, const HuffInfo *huffTabInfo, unsigned int bitBuf, signed int *val)
     68          {
   \                     raac_DecodeHuffmanScalar:
   \   00000000   F0002DE9           PUSH     {R4-R7}
     69              unsigned int count, start, shift, t;
     70          	const unsigned char *countPtr;
     71          	const signed short *map;
     72          
     73          	map = huffTab + huffTabInfo->offset;
   \   00000004   184091E5           LDR      R4,[R1, #+24]
     74          	countPtr = huffTabInfo->count;
   \   00000008   04C081E2           ADD      R12,R1,#+4
   \   0000000C   840080E0           ADD      R0,R0,R4, LSL #+1
     75          
     76          	start = 0;
   \   00000010   0040A0E3           MOV      R4,#+0
     77          	count = 0;
   \   00000014   0050A0E3           MOV      R5,#+0
     78          	shift = 32;
   \   00000018   2060A0E3           MOV      R6,#+32
     79          	do {
     80          		start += count;
     81          		start <<= 1;
   \                     ??raac_DecodeHuffmanScalar_0:
   \   0000001C   044085E0           ADD      R4,R5,R4
     82          		map += count;
   \   00000020   850080E0           ADD      R0,R0,R5, LSL #+1
     83          		count = *countPtr++;
   \   00000024   ........           LDRB     R5,[R12], #+1
   \   00000028   8440A0E1           LSL      R4,R4,#+1
     84          		shift--;
   \   0000002C   016046E2           SUB      R6,R6,#+1
     85          		t = (bitBuf >> shift) - start;
   \   00000030   327664E0           RSB      R7,R4,R2, LSR R6
     86          	} while (t >= count);
   \   00000034   050057E1           CMP      R7,R5
   \   00000038   F7FFFF2A           BCS      ??raac_DecodeHuffmanScalar_0
     87          	
     88          	*val = (signed int)map[t];
   \   0000003C   870080E0           ADD      R0,R0,R7, LSL #+1
   \   00000040   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000044   000083E5           STR      R0,[R3, #+0]
     89          	return (countPtr - huffTabInfo->count);
   \   00000048   F000BDE8           POP      {R4-R7}
   \   0000004C   040081E2           ADD      R0,R1,#+4
   \   00000050   00004CE0           SUB      R0,R12,R0
   \   00000054   1EFF2FE1           BX       LR               ;; return
     90          }
     91          
     92          #define APPLY_SIGN(v, s)		{(v) ^= ((signed int)(s) >> 31); (v) -= ((signed int)(s) >> 31);}
     93          
     94          #define GET_QUAD_SIGNBITS(v)	(((unsigned int)(v) << 17) >> 29)	/* bits 14-12, unsigned */
     95          #define GET_QUAD_W(v)			(((signed int)(v) << 20) >>   29)	/* bits 11-9, sign-extend */
     96          #define GET_QUAD_X(v)			(((signed int)(v) << 23) >>   29)	/* bits  8-6, sign-extend */
     97          #define GET_QUAD_Y(v)			(((signed int)(v) << 26) >>   29)	/* bits  5-3, sign-extend */
     98          #define GET_QUAD_Z(v)			(((signed int)(v) << 29) >>   29)	/* bits  2-0, sign-extend */
     99          
    100          #define GET_PAIR_SIGNBITS(v)	(((unsigned int)(v) << 20) >> 30)	/* bits 11-10, unsigned */
    101          #define GET_PAIR_Y(v)			(((signed int)(v) << 22) >>   27)	/* bits  9-5, sign-extend */
    102          #define GET_PAIR_Z(v)			(((signed int)(v) << 27) >>   27)	/* bits  4-0, sign-extend */
    103          
    104          #define GET_ESC_SIGNBITS(v)		(((unsigned int)(v) << 18) >> 30)	/* bits 13-12, unsigned */
    105          #define GET_ESC_Y(v)			(((signed int)(v) << 20) >>   26)	/* bits 11-6, sign-extend */
    106          #define GET_ESC_Z(v)			(((signed int)(v) << 26) >>   26)	/* bits  5-0, sign-extend */
    107          
    108          /**************************************************************************************
    109           * Function:    UnpackZeros
    110           *
    111           * Description: fill a section of coefficients with zeros
    112           *
    113           * Inputs:      number of coefficients
    114           *
    115           * Outputs:     nVals zeros, starting at coef
    116           *
    117           * Return:      none
    118           *
    119           * Notes:       assumes nVals is always a multiple of 4 because all scalefactor bands
    120           *                are a multiple of 4 coefficients long
    121           **************************************************************************************/
    122          static void UnpackZeros(int nVals, int *coef)
    123          {
    124          	while (nVals > 0) {
    125          		*coef++ = 0;
    126          		*coef++ = 0;
    127          		*coef++ = 0;
    128          		*coef++ = 0;
    129          		nVals -= 4;
    130          	}
    131          }
    132          
    133          /**************************************************************************************
    134           * Function:    UnpackQuads
    135           *
    136           * Description: decode a section of 4-way vector Huffman coded coefficients
    137           *
    138           * Inputs       BitStreamInfo struct pointing to start of codewords for this section
    139           *              index of Huffman codebook
    140           *              number of coefficients
    141           *
    142           * Outputs:     nVals coefficients, starting at coef
    143           *
    144           * Return:      none
    145           *
    146           * Notes:       assumes nVals is always a multiple of 4 because all scalefactor bands
    147           *                are a multiple of 4 coefficients long
    148           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    149          static void UnpackQuads(BitStreamInfo *bsi, int cb, int nVals, int *coef)
    150          {
   \                     UnpackQuads:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   0240A0E1           MOV      R4,R2
   \   00000008   0350A0E1           MOV      R5,R3
    151          	int w, x, y, z, maxBits, nCodeBits, nSignBits, val;
    152          	unsigned int bitBuf;
    153          
    154          	maxBits = huffTabSpecInfo[cb - HUFFTAB_SPEC_OFFSET].maxBits + 4;
   \   0000000C   ........           LDR      R3,??DataTable4  ;; raac_huffTabSpecInfo
   \   00000010   1C20A0E3           MOV      R2,#+28
   \   00000014   923121E0           MLA      R1,R2,R1,R3
   \   00000018   0CD04DE2           SUB      SP,SP,#+12
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   1C1011E5           LDR      R1,[R1, #-28]
   \   00000024   010054E3           CMP      R4,#+1
   \   00000028   041081E2           ADD      R1,R1,#+4
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
   \   00000030   FF8FBDB8           POPLT    {R0-R11,PC}
   \   00000034   201061E2           RSB      R1,R1,#+32
   \   00000038   0810CDE5           STRB     R1,[SP, #+8]
    155          	while (nVals > 0) {
    156          		/* decode quad */
    157          		bitBuf = GetBitsNoAdvance(bsi, maxBits) << (32 - maxBits);
   \                     ??UnpackQuads_0:
   \   0000003C   04109DE5           LDR      R1,[SP, #+4]
   \   00000040   0C009DE5           LDR      R0,[SP, #+12]
    158          		nCodeBits = DecodeHuffmanScalar(huffTabSpec, &huffTabSpecInfo[cb - HUFFTAB_SPEC_OFFSET], bitBuf, &val);
   \   00000044   0060A0E3           MOV      R6,#+0
   \   00000048   ........           _BLF     raac_GetBitsNoAdvance,??raac_GetBitsNoAdvance??rA
   \   0000004C   0810DDE5           LDRB     R1,[SP, #+8]
   \   00000050   ........           LDR      R3,??DataTable5  ;; raac_huffTabSpec
   \   00000054   0070A0E3           MOV      R7,#+0
   \   00000058   1001A0E1           LSL      R0,R0,R1
   \   0000005C   00109DE5           LDR      R1,[SP, #+0]
   \   00000060   2080A0E3           MOV      R8,#+32
   \   00000064   1C1041E2           SUB      R1,R1,#+28
   \   00000068   182091E5           LDR      R2,[R1, #+24]
   \   0000006C   822083E0           ADD      R2,R3,R2, LSL #+1
   \   00000070   043081E2           ADD      R3,R1,#+4
   \                     ??UnpackQuads_1:
   \   00000074   077086E0           ADD      R7,R6,R7
   \   00000078   862082E0           ADD      R2,R2,R6, LSL #+1
   \   0000007C   ........           LDRB     R6,[R3], #+1
   \   00000080   8770A0E1           LSL      R7,R7,#+1
   \   00000084   018048E2           SUB      R8,R8,#+1
   \   00000088   309867E0           RSB      R9,R7,R0, LSR R8
   \   0000008C   060059E1           CMP      R9,R6
   \   00000090   F7FFFF2A           BCS      ??UnpackQuads_1
   \   00000094   892082E0           ADD      R2,R2,R9, LSL #+1
   \   00000098   F020D2E1           LDRSH    R2,[R2, #+0]
   \   0000009C   041081E2           ADD      R1,R1,#+4
   \   000000A0   011043E0           SUB      R1,R3,R1
    159          
    160          		w = GET_QUAD_W(val);
   \   000000A4   023AA0E1           LSL      R3,R2,#+20
   \   000000A8   C36EA0E1           ASR      R6,R3,#+29
    161          		x = GET_QUAD_X(val);
   \   000000AC   823BA0E1           LSL      R3,R2,#+23
   \   000000B0   C37EA0E1           ASR      R7,R3,#+29
    162          		y = GET_QUAD_Y(val);
   \   000000B4   023DA0E1           LSL      R3,R2,#+26
   \   000000B8   C38EA0E1           ASR      R8,R3,#+29
    163          		z = GET_QUAD_Z(val);
   \   000000BC   823EA0E1           LSL      R3,R2,#+29
   \   000000C0   C39EA0E1           ASR      R9,R3,#+29
    164          
    165          		bitBuf <<= nCodeBits;
   \   000000C4   10A1A0E1           LSL      R10,R0,R1
    166          		nSignBits = (int)GET_QUAD_SIGNBITS(val);
   \   000000C8   8208A0E1           LSL      R0,R2,#+17
   \   000000CC   A0BEA0E1           LSR      R11,R0,#+29
    167          		AdvanceBitstream(bsi, nCodeBits + nSignBits);
   \   000000D0   0C009DE5           LDR      R0,[SP, #+12]
   \   000000D4   01108BE0           ADD      R1,R11,R1
   \   000000D8   ........           _BLF     raac_AdvanceBitstream,??raac_AdvanceBitstream??rA
    168          		if (nSignBits) {
   \   000000DC   00005BE3           CMP      R11,#+0
   \   000000E0   1500000A           BEQ      ??UnpackQuads_2
    169          			if (w)	{APPLY_SIGN(w, bitBuf); bitBuf <<= 1;}
   \   000000E4   000056E3           CMP      R6,#+0
   \   000000E8   0300000A           BEQ      ??UnpackQuads_3
   \   000000EC   CA0FA0E1           ASR      R0,R10,#+31
   \   000000F0   061020E0           EOR      R1,R0,R6
   \   000000F4   006041E0           SUB      R6,R1,R0
   \   000000F8   8AA0A0E1           LSL      R10,R10,#+1
    170          			if (x)	{APPLY_SIGN(x, bitBuf); bitBuf <<= 1;}
   \                     ??UnpackQuads_3:
   \   000000FC   000057E3           CMP      R7,#+0
   \   00000100   0300000A           BEQ      ??UnpackQuads_4
   \   00000104   CA0FA0E1           ASR      R0,R10,#+31
   \   00000108   071020E0           EOR      R1,R0,R7
   \   0000010C   007041E0           SUB      R7,R1,R0
   \   00000110   8AA0A0E1           LSL      R10,R10,#+1
    171          			if (y)	{APPLY_SIGN(y, bitBuf); bitBuf <<= 1;}
   \                     ??UnpackQuads_4:
   \   00000114   000058E3           CMP      R8,#+0
   \   00000118   0300000A           BEQ      ??UnpackQuads_5
   \   0000011C   CA0FA0E1           ASR      R0,R10,#+31
   \   00000120   081020E0           EOR      R1,R0,R8
   \   00000124   008041E0           SUB      R8,R1,R0
   \   00000128   8AA0A0E1           LSL      R10,R10,#+1
    172          			if (z)	{APPLY_SIGN(z, bitBuf); bitBuf <<= 1;}
   \                     ??UnpackQuads_5:
   \   0000012C   000059E3           CMP      R9,#+0
   \   00000130   CA0FA011           ASRNE    R0,R10,#+31
   \   00000134   09102010           EORNE    R1,R0,R9
   \   00000138   00904110           SUBNE    R9,R1,R0
    173          		}
    174          		*coef++ = w; *coef++ = x; *coef++ = y; *coef++ = z;
   \                     ??UnpackQuads_2:
   \   0000013C   ........           STR      R6,[R5], #+4
   \   00000140   ........           STR      R7,[R5], #+4
   \   00000144   ........           STR      R8,[R5], #+4
   \   00000148   ........           STR      R9,[R5], #+4
    175          		nVals -= 4;
   \   0000014C   044044E2           SUB      R4,R4,#+4
    176          	}
   \   00000150   010054E3           CMP      R4,#+1
   \   00000154   B8FFFFAA           BGE      ??UnpackQuads_0
    177          }
   \   00000158   FF8FBDE8           POP      {R0-R11,PC}      ;; return
    178          
    179          /**************************************************************************************
    180           * Function:    UnpackPairsNoEsc
    181           *
    182           * Description: decode a section of 2-way vector Huffman coded coefficients,
    183           *                using non-esc tables (5 through 10)
    184           *
    185           * Inputs       BitStreamInfo struct pointing to start of codewords for this section
    186           *              index of Huffman codebook (must not be the escape codebook)
    187           *              number of coefficients
    188           *
    189           * Outputs:     nVals coefficients, starting at coef
    190           *
    191           * Return:      none
    192           *
    193           * Notes:       assumes nVals is always a multiple of 2 because all scalefactor bands
    194           *                are a multiple of 4 coefficients long
    195           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    196          static void UnpackPairsNoEsc(BitStreamInfo *bsi, int cb, int nVals, int *coef)
    197          {
   \                     UnpackPairsNoEsc:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   0240A0E1           MOV      R4,R2
   \   00000008   0350A0E1           MOV      R5,R3
    198          	int y, z, maxBits, nCodeBits, nSignBits, val;
    199          	unsigned int bitBuf;
    200          
    201          	maxBits = huffTabSpecInfo[cb - HUFFTAB_SPEC_OFFSET].maxBits + 2;
   \   0000000C   ........           LDR      R3,??DataTable4  ;; raac_huffTabSpecInfo
   \   00000010   1C20A0E3           MOV      R2,#+28
   \   00000014   923121E0           MLA      R1,R2,R1,R3
   \   00000018   08D04DE2           SUB      SP,SP,#+8
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   006062E2           RSB      R6,R2,#+0
   \   00000024   010096E7           LDR      R0,[R6, +R1]
   \   00000028   010054E3           CMP      R4,#+1
   \   0000002C   027080E2           ADD      R7,R0,#+2
   \   00000030   F78FBDB8           POPLT    {R0-R2,R4-R11,PC}
   \   00000034   0710A0E1           MOV      R1,R7
   \   00000038   201061E2           RSB      R1,R1,#+32
   \   0000003C   0410CDE5           STRB     R1,[SP, #+4]
    202          	while (nVals > 0) {
    203          		/* decode pair */
    204          		bitBuf = GetBitsNoAdvance(bsi, maxBits) << (32 - maxBits);
   \                     ??UnpackPairsNoEsc_0:
   \   00000040   08009DE5           LDR      R0,[SP, #+8]
   \   00000044   0710A0E1           MOV      R1,R7
   \   00000048   ........           _BLF     raac_GetBitsNoAdvance,??raac_GetBitsNoAdvance??rA
   \   0000004C   0410DDE5           LDRB     R1,[SP, #+4]
    205          		nCodeBits = DecodeHuffmanScalar(huffTabSpec, &huffTabSpecInfo[cb-HUFFTAB_SPEC_OFFSET], bitBuf, &val);
   \   00000050   ........           LDR      R3,??DataTable5  ;; raac_huffTabSpec
   \   00000054   0080A0E3           MOV      R8,#+0
   \   00000058   1001A0E1           LSL      R0,R0,R1
   \   0000005C   00109DE5           LDR      R1,[SP, #+0]
   \   00000060   0090A0E3           MOV      R9,#+0
   \   00000064   011086E0           ADD      R1,R6,R1
   \   00000068   182091E5           LDR      R2,[R1, #+24]
   \   0000006C   20A0A0E3           MOV      R10,#+32
   \   00000070   823083E0           ADD      R3,R3,R2, LSL #+1
   \   00000074   042081E2           ADD      R2,R1,#+4
   \                     ??UnpackPairsNoEsc_1:
   \   00000078   099088E0           ADD      R9,R8,R9
   \   0000007C   883083E0           ADD      R3,R3,R8, LSL #+1
   \   00000080   ........           LDRB     R8,[R2], #+1
   \   00000084   8990A0E1           LSL      R9,R9,#+1
   \   00000088   01A04AE2           SUB      R10,R10,#+1
   \   0000008C   30BA69E0           RSB      R11,R9,R0, LSR R10
   \   00000090   08005BE1           CMP      R11,R8
   \   00000094   F7FFFF2A           BCS      ??UnpackPairsNoEsc_1
   \   00000098   8B3083E0           ADD      R3,R3,R11, LSL #+1
   \   0000009C   F030D3E1           LDRSH    R3,[R3, #+0]
   \   000000A0   041081E2           ADD      R1,R1,#+4
   \   000000A4   011042E0           SUB      R1,R2,R1
    206          
    207          		y = GET_PAIR_Y(val);
   \   000000A8   032BA0E1           LSL      R2,R3,#+22
   \   000000AC   C28DA0E1           ASR      R8,R2,#+27
    208          		z = GET_PAIR_Z(val);
   \   000000B0   832DA0E1           LSL      R2,R3,#+27
   \   000000B4   C29DA0E1           ASR      R9,R2,#+27
    209          
    210          		bitBuf <<= nCodeBits;
   \   000000B8   10A1A0E1           LSL      R10,R0,R1
    211          		nSignBits = GET_PAIR_SIGNBITS(val);
   \   000000BC   030AA0E1           LSL      R0,R3,#+20
   \   000000C0   20BFA0E1           LSR      R11,R0,#+30
    212          		AdvanceBitstream(bsi, nCodeBits + nSignBits);
   \   000000C4   08009DE5           LDR      R0,[SP, #+8]
   \   000000C8   01108BE0           ADD      R1,R11,R1
   \   000000CC   ........           _BLF     raac_AdvanceBitstream,??raac_AdvanceBitstream??rA
    213          		if (nSignBits) {
   \   000000D0   00005BE3           CMP      R11,#+0
   \   000000D4   0900000A           BEQ      ??UnpackPairsNoEsc_2
    214          			if (y)	{APPLY_SIGN(y, bitBuf); bitBuf <<= 1;}
   \   000000D8   000058E3           CMP      R8,#+0
   \   000000DC   0300000A           BEQ      ??UnpackPairsNoEsc_3
   \   000000E0   CA0FA0E1           ASR      R0,R10,#+31
   \   000000E4   081020E0           EOR      R1,R0,R8
   \   000000E8   008041E0           SUB      R8,R1,R0
   \   000000EC   8AA0A0E1           LSL      R10,R10,#+1
    215          			if (z)	{APPLY_SIGN(z, bitBuf); bitBuf <<= 1;}
   \                     ??UnpackPairsNoEsc_3:
   \   000000F0   000059E3           CMP      R9,#+0
   \   000000F4   CA0FA011           ASRNE    R0,R10,#+31
   \   000000F8   09102010           EORNE    R1,R0,R9
   \   000000FC   00904110           SUBNE    R9,R1,R0
    216          		}
    217          		*coef++ = y; *coef++ = z;
   \                     ??UnpackPairsNoEsc_2:
   \   00000100   ........           STR      R8,[R5], #+4
   \   00000104   ........           STR      R9,[R5], #+4
    218          		nVals -= 2;
   \   00000108   024044E2           SUB      R4,R4,#+2
    219          	}
   \   0000010C   010054E3           CMP      R4,#+1
   \   00000110   CAFFFFAA           BGE      ??UnpackPairsNoEsc_0
    220          }
   \   00000114   F78FBDE8           POP      {R0-R2,R4-R11,PC}  ;; return
    221          
    222          /**************************************************************************************
    223           * Function:    UnpackPairsEsc
    224           *
    225           * Description: decode a section of 2-way vector Huffman coded coefficients,
    226           *                using esc table (11)
    227           *
    228           * Inputs       BitStreamInfo struct pointing to start of codewords for this section
    229           *              index of Huffman codebook (must be the escape codebook)
    230           *              number of coefficients
    231           *
    232           * Outputs:     nVals coefficients, starting at coef
    233           *
    234           * Return:      none
    235           *
    236           * Notes:       assumes nVals is always a multiple of 2 because all scalefactor bands
    237           *                are a multiple of 4 coefficients long
    238           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    239          static void UnpackPairsEsc(BitStreamInfo *bsi, int cb, int nVals, int *coef)
    240          {
   \                     UnpackPairsEsc:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0250A0E1           MOV      R5,R2
   \   00000008   0360A0E1           MOV      R6,R3
    241          	int y, z, maxBits, nCodeBits, nSignBits, n, val;
    242          	unsigned int bitBuf;
    243          
    244          	maxBits = huffTabSpecInfo[cb - HUFFTAB_SPEC_OFFSET].maxBits + 2;
   \   0000000C   ........           LDR      R3,??DataTable4  ;; raac_huffTabSpecInfo
   \   00000010   1C20A0E3           MOV      R2,#+28
   \   00000014   923121E0           MLA      R1,R2,R1,R3
   \   00000018   10D04DE2           SUB      SP,SP,#+16
   \   0000001C   04108DE5           STR      R1,[SP, #+4]
   \   00000020   1C1011E5           LDR      R1,[R1, #-28]
   \   00000024   0040A0E1           MOV      R4,R0
   \   00000028   021081E2           ADD      R1,R1,#+2
   \   0000002C   08108DE5           STR      R1,[SP, #+8]
   \   00000030   010055E3           CMP      R5,#+1
   \   00000034   FF8FBDB8           POPLT    {R0-R11,PC}
   \   00000038   201061E2           RSB      R1,R1,#+32
   \   0000003C   0C10CDE5           STRB     R1,[SP, #+12]
   \   00000040   01A0A0E3           MOV      R10,#+1
    245          	while (nVals > 0) {
    246          		/* decode pair with escape value */
    247          		bitBuf = GetBitsNoAdvance(bsi, maxBits) << (32 - maxBits);
   \                     ??UnpackPairsEsc_0:
   \   00000044   08109DE5           LDR      R1,[SP, #+8]
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           _BLF     raac_GetBitsNoAdvance,??raac_GetBitsNoAdvance??rA
   \   00000050   0C10DDE5           LDRB     R1,[SP, #+12]
    248          		nCodeBits = DecodeHuffmanScalar(huffTabSpec, &huffTabSpecInfo[cb-HUFFTAB_SPEC_OFFSET], bitBuf, &val);
   \   00000054   ........           LDR      R3,??DataTable5  ;; raac_huffTabSpec
   \   00000058   0070A0E3           MOV      R7,#+0
   \   0000005C   1001A0E1           LSL      R0,R0,R1
   \   00000060   04109DE5           LDR      R1,[SP, #+4]
   \   00000064   0080A0E3           MOV      R8,#+0
   \   00000068   1C1041E2           SUB      R1,R1,#+28
   \   0000006C   182091E5           LDR      R2,[R1, #+24]
   \   00000070   2090A0E3           MOV      R9,#+32
   \   00000074   823083E0           ADD      R3,R3,R2, LSL #+1
   \   00000078   042081E2           ADD      R2,R1,#+4
   \                     ??UnpackPairsEsc_1:
   \   0000007C   088087E0           ADD      R8,R7,R8
   \   00000080   873083E0           ADD      R3,R3,R7, LSL #+1
   \   00000084   ........           LDRB     R7,[R2], #+1
   \   00000088   8880A0E1           LSL      R8,R8,#+1
   \   0000008C   019049E2           SUB      R9,R9,#+1
   \   00000090   30C968E0           RSB      R12,R8,R0, LSR R9
   \   00000094   07005CE1           CMP      R12,R7
   \   00000098   F7FFFF2A           BCS      ??UnpackPairsEsc_1
   \   0000009C   8C3083E0           ADD      R3,R3,R12, LSL #+1
   \   000000A0   F030D3E1           LDRSH    R3,[R3, #+0]
   \   000000A4   041081E2           ADD      R1,R1,#+4
   \   000000A8   011042E0           SUB      R1,R2,R1
    249          
    250          		y = GET_ESC_Y(val);
   \   000000AC   032AA0E1           LSL      R2,R3,#+20
   \   000000B0   427DA0E1           ASR      R7,R2,#+26
    251          		z = GET_ESC_Z(val);
   \   000000B4   032DA0E1           LSL      R2,R3,#+26
   \   000000B8   428DA0E1           ASR      R8,R2,#+26
    252          
    253          		bitBuf <<= nCodeBits;
   \   000000BC   1091A0E1           LSL      R9,R0,R1
    254          		nSignBits = GET_ESC_SIGNBITS(val);
   \   000000C0   0329A0E1           LSL      R2,R3,#+18
   \   000000C4   222FA0E1           LSR      R2,R2,#+30
   \   000000C8   00208DE5           STR      R2,[SP, #+0]
    255          		AdvanceBitstream(bsi, nCodeBits + nSignBits);
   \   000000CC   011082E0           ADD      R1,R2,R1
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     raac_AdvanceBitstream,??raac_AdvanceBitstream??rA
    256          	
    257          		if (y == 16) {
   \   000000D8   100057E3           CMP      R7,#+16
   \   000000DC   0B00001A           BNE      ??UnpackPairsEsc_2
    258          			n = 4;
   \   000000E0   04B0A0E3           MOV      R11,#+4
   \   000000E4   000000EA           B        ??UnpackPairsEsc_3
    259          			while (GetBits(bsi, 1) == 1)
    260          				n++;
   \                     ??UnpackPairsEsc_4:
   \   000000E8   01B08BE2           ADD      R11,R11,#+1
   \                     ??UnpackPairsEsc_3:
   \   000000EC   0110A0E3           MOV      R1,#+1
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   000000F8   010050E3           CMP      R0,#+1
   \   000000FC   F9FFFF0A           BEQ      ??UnpackPairsEsc_4
    261          			y = (1 << n) + GetBits(bsi, n);
   \   00000100   0B10A0E1           MOV      R1,R11
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   0000010C   1A7B80E0           ADD      R7,R0,R10, LSL R11
    262          		}
    263          		if (z == 16) {
   \                     ??UnpackPairsEsc_2:
   \   00000110   100058E3           CMP      R8,#+16
   \   00000114   0B00001A           BNE      ??UnpackPairsEsc_5
    264          			n = 4;
   \   00000118   04B0A0E3           MOV      R11,#+4
   \   0000011C   000000EA           B        ??UnpackPairsEsc_6
    265          			while (GetBits(bsi, 1) == 1)
    266          				n++;
   \                     ??UnpackPairsEsc_7:
   \   00000120   01B08BE2           ADD      R11,R11,#+1
   \                     ??UnpackPairsEsc_6:
   \   00000124   0110A0E3           MOV      R1,#+1
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000130   010050E3           CMP      R0,#+1
   \   00000134   F9FFFF0A           BEQ      ??UnpackPairsEsc_7
    267          			z = (1 << n) + GetBits(bsi, n);
   \   00000138   0B10A0E1           MOV      R1,R11
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000144   1A8B80E0           ADD      R8,R0,R10, LSL R11
    268          		}
    269          
    270          		if (nSignBits) {
   \                     ??UnpackPairsEsc_5:
   \   00000148   00009DE5           LDR      R0,[SP, #+0]
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   0900000A           BEQ      ??UnpackPairsEsc_8
    271          			if (y)	{APPLY_SIGN(y, bitBuf); bitBuf <<= 1;}
   \   00000154   000057E3           CMP      R7,#+0
   \   00000158   0300000A           BEQ      ??UnpackPairsEsc_9
   \   0000015C   C90FA0E1           ASR      R0,R9,#+31
   \   00000160   071020E0           EOR      R1,R0,R7
   \   00000164   007041E0           SUB      R7,R1,R0
   \   00000168   8990A0E1           LSL      R9,R9,#+1
    272          			if (z)	{APPLY_SIGN(z, bitBuf); bitBuf <<= 1;}
   \                     ??UnpackPairsEsc_9:
   \   0000016C   000058E3           CMP      R8,#+0
   \   00000170   C90FA011           ASRNE    R0,R9,#+31
   \   00000174   08102010           EORNE    R1,R0,R8
   \   00000178   00804110           SUBNE    R8,R1,R0
    273          		}
    274          
    275          		*coef++ = y; *coef++ = z;
   \                     ??UnpackPairsEsc_8:
   \   0000017C   ........           STR      R7,[R6], #+4
   \   00000180   ........           STR      R8,[R6], #+4
    276          		nVals -= 2;
   \   00000184   025045E2           SUB      R5,R5,#+2
    277          	}
   \   00000188   010055E3           CMP      R5,#+1
   \   0000018C   ACFFFFAA           BGE      ??UnpackPairsEsc_0
    278          }
   \   00000190   FF8FBDE8           POP      {R0-R11,PC}      ;; return
    279          
    280          /**************************************************************************************
    281           * Function:    DecodeSpectrumLong
    282           *
    283           * Description: decode transform coefficients for frame with one long block
    284           *
    285           * Inputs:      platform specific info struct
    286           *              BitStreamInfo struct pointing to start of spectral data
    287           *                (14496-3, table 4.4.29) 
    288           *              index of current channel
    289           *
    290           * Outputs:     decoded, quantized coefficients for this channel
    291           *
    292           * Return:      none
    293           *
    294           * Notes:       adds in pulse data if present
    295           *              fills coefficient buffer with zeros in any region not coded with
    296           *                codebook in range [1, 11] (including sfb's above sfbMax)
    297           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    298          void DecodeSpectrumLong(PSInfoBase *psi, BitStreamInfo *bsi, int ch)
    299          {
   \                     raac_DecodeSpectrumLong:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0180A0E1           MOV      R8,R1
    300          	int i, sfb, cb, nVals, offset;
    301          	const short *sfbTab;
    302          	unsigned char *sfbCodeBook;
    303          	int *coef;
    304          	ICSInfo *icsInfo;
    305          	PulseInfo *pi;
    306          
    307          	coef = psi->coef[ch];
   \   00000010   4810A0E3           MOV      R1,#+72
   \   00000014   401D81E3           ORR      R1,R1,#0x1000
   \   00000018   022685E0           ADD      R2,R5,R2, LSL #+12
   \   0000001C   021081E0           ADD      R1,R1,R2
   \   00000020   04108DE5           STR      R1,[SP, #+4]
   \   00000024   0140A0E1           MOV      R4,R1
    308          	icsInfo = (ch == 1 && psi->commonWin == 1) ? &(psi->icsInfo[0]) : &(psi->icsInfo[ch]);
   \   00000028   08109DE5           LDR      R1,[SP, #+8]
   \   0000002C   7C00A0E3           MOV      R0,#+124
   \   00000030   010051E3           CMP      R1,#+1
   \   00000034   F0189505           LDREQ    R1,[R5, #+2288]
   \   00000038   800E80E3           ORR      R0,R0,#0x800
   \   0000003C   01005103           CMPEQ    R1,#+1
   \   00000040   05908000           ADDEQ    R9,R0,R5
   \   00000044   0300000A           BEQ      ??raac_DecodeSpectrumLong_0
   \   00000048   08109DE5           LDR      R1,[SP, #+8]
   \   0000004C   3A20A0E3           MOV      R2,#+58
   \   00000050   925121E0           MLA      R1,R2,R1,R5
   \   00000054   019080E0           ADD      R9,R0,R1
    309          
    310          	/* decode long block */
    311          	sfbTab = sfBandTabLong + sfBandTabLongOffset[psi->sampRateIdx];
   \                     ??raac_DecodeSpectrumLong_0:
   \   00000058   781895E5           LDR      R1,[R5, #+2168]
   \   0000005C   D8219FE5           LDR      R2,??raac_DecodeSpectrumLong_1  ;; raac_sfBandTabLongOffset
    312          	sfbCodeBook = psi->sfbCodeBook[ch];
   \   00000060   960F80E2           ADD      R0,R0,#+600
   \   00000064   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   00000068   D0219FE5           LDR      R2,??raac_DecodeSpectrumLong_1+0x4  ;; raac_sfBandTabLong
    313          	for (sfb = 0; sfb < icsInfo->maxSFB; sfb++) {
   \   0000006C   0060A0E3           MOV      R6,#+0
   \   00000070   811082E0           ADD      R1,R2,R1, LSL #+1
   \   00000074   00108DE5           STR      R1,[SP, #+0]
   \   00000078   08109DE5           LDR      R1,[SP, #+8]
   \   0000007C   7820A0E3           MOV      R2,#+120
   \   00000080   925121E0           MLA      R1,R2,R1,R5
   \   00000084   0070A0E3           MOV      R7,#+0
   \   00000088   01A080E0           ADD      R10,R0,R1
   \   0000008C   0300D9E5           LDRB     R0,[R9, #+3]
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   2C00001A           BNE      ??raac_DecodeSpectrumLong_2
    314          		cb = *sfbCodeBook++;
    315          		nVals = sfbTab[sfb+1] - sfbTab[sfb];
    316          		
    317          		if (cb == 0)
    318          			UnpackZeros(nVals, coef);
    319          		else if (cb <= 4)
    320          			UnpackQuads(bsi, cb, nVals, coef);
    321          		else if (cb <= 10)
    322          			UnpackPairsNoEsc(bsi, cb, nVals, coef);
    323          		else if (cb == 11)
    324          			UnpackPairsEsc(bsi, cb, nVals, coef);
    325          		else
    326          			UnpackZeros(nVals, coef);
    327          
    328          		coef += nVals;
    329          	}
    330          
    331          	/* fill with zeros above maxSFB */
    332          	nVals = NSAMPS_LONG - sfbTab[sfb];
    333          	UnpackZeros(nVals, coef);
   \                     ??raac_DecodeSpectrumLong_3:
   \   00000098   00009DE5           LDR      R0,[SP, #+0]
   \   0000009C   860080E0           ADD      R0,R0,R6, LSL #+1
   \   000000A0   F000D0E1           LDRSH    R0,[R0, #+0]
   \   000000A4   400E60E2           RSB      R0,R0,#+1024
   \   000000A8   010050E3           CMP      R0,#+1
   \   000000AC   060000BA           BLT      ??raac_DecodeSpectrumLong_4
   \                     ??raac_DecodeSpectrumLong_5:
   \   000000B0   ........           STR      R7,[R4], #+4
   \   000000B4   ........           STR      R7,[R4], #+4
   \   000000B8   ........           STR      R7,[R4], #+4
   \   000000BC   ........           STR      R7,[R4], #+4
   \   000000C0   040040E2           SUB      R0,R0,#+4
   \   000000C4   010050E3           CMP      R0,#+1
   \   000000C8   F8FFFFAA           BGE      ??raac_DecodeSpectrumLong_5
    334          
    335          	/* add pulse data, if present */
    336          	pi = &psi->pulseInfo[ch];
   \                     ??raac_DecodeSpectrumLong_4:
   \   000000CC   08109DE5           LDR      R1,[SP, #+8]
   \   000000D0   0B20A0E3           MOV      R2,#+11
   \   000000D4   925121E0           MLA      R1,R2,R1,R5
   \   000000D8   EC00A0E3           MOV      R0,#+236
   \   000000DC   B00E80E3           ORR      R0,R0,#0xB00
   \   000000E0   010080E0           ADD      R0,R0,R1
    337          	if (pi->pulseDataPresent) {
   \   000000E4   0010D0E5           LDRB     R1,[R0, #+0]
   \   000000E8   000051E3           CMP      R1,#+0
   \   000000EC   F78FBD08           POPEQ    {R0-R2,R4-R11,PC}
    338          		coef = psi->coef[ch];
    339          		offset = sfbTab[pi->startSFB];
   \   000000F0   0210D0E5           LDRB     R1,[R0, #+2]
    340          		for (i = 0; i < pi->numPulse; i++) {
   \   000000F4   0130D0E5           LDRB     R3,[R0, #+1]
   \   000000F8   00209DE5           LDR      R2,[SP, #+0]
   \   000000FC   04409DE5           LDR      R4,[SP, #+4]
   \   00000100   811082E0           ADD      R1,R2,R1, LSL #+1
   \   00000104   F020D1E1           LDRSH    R2,[R1, #+0]
   \   00000108   0010A0E3           MOV      R1,#+0
   \   0000010C   000053E3           CMP      R3,#+0
   \   00000110   3B00001A           BNE      ??raac_DecodeSpectrumLong_6
    341          			offset += pi->offset[i];
    342          			if (coef[offset] > 0)
    343          				coef[offset] += pi->amp[i];
    344          			else
    345          				coef[offset] -= pi->amp[i];
    346          		}
    347          		ASSERT(offset < NSAMPS_LONG);
    348          	}
    349          }
   \   00000114   F78FBDE8           POP      {R0-R2,R4-R11,PC}  ;; return
   \                     ??raac_DecodeSpectrumLong_7:
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   0B10A0E1           MOV      R1,R11
   \   00000120   010051E3           CMP      R1,#+1
   \   00000124   060000BA           BLT      ??raac_DecodeSpectrumLong_8
   \                     ??raac_DecodeSpectrumLong_9:
   \   00000128   ........           STR      R7,[R0], #+4
   \   0000012C   ........           STR      R7,[R0], #+4
   \   00000130   ........           STR      R7,[R0], #+4
   \   00000134   ........           STR      R7,[R0], #+4
   \   00000138   041041E2           SUB      R1,R1,#+4
   \   0000013C   010051E3           CMP      R1,#+1
   \   00000140   F8FFFFAA           BGE      ??raac_DecodeSpectrumLong_9
   \                     ??raac_DecodeSpectrumLong_8:
   \   00000144   0B4184E0           ADD      R4,R4,R11, LSL #+2
   \   00000148   016086E2           ADD      R6,R6,#+1
   \                     ??raac_DecodeSpectrumLong_2:
   \   0000014C   0300D9E5           LDRB     R0,[R9, #+3]
   \   00000150   000056E1           CMP      R6,R0
   \   00000154   CFFFFFAA           BGE      ??raac_DecodeSpectrumLong_3
   \   00000158   00009DE5           LDR      R0,[SP, #+0]
   \   0000015C   ........           LDRB     R1,[R10], #+1
   \   00000160   860080E0           ADD      R0,R0,R6, LSL #+1
   \   00000164   F220D0E1           LDRSH    R2,[R0, #+2]
   \   00000168   F000D0E1           LDRSH    R0,[R0, #+0]
   \   0000016C   000051E3           CMP      R1,#+0
   \   00000170   00B042E0           SUB      R11,R2,R0
   \   00000174   0B00001A           BNE      ??raac_DecodeSpectrumLong_10
   \   00000178   0400A0E1           MOV      R0,R4
   \   0000017C   0B10A0E1           MOV      R1,R11
   \   00000180   010051E3           CMP      R1,#+1
   \   00000184   EEFFFFBA           BLT      ??raac_DecodeSpectrumLong_8
   \                     ??raac_DecodeSpectrumLong_11:
   \   00000188   ........           STR      R7,[R0], #+4
   \   0000018C   ........           STR      R7,[R0], #+4
   \   00000190   ........           STR      R7,[R0], #+4
   \   00000194   ........           STR      R7,[R0], #+4
   \   00000198   041041E2           SUB      R1,R1,#+4
   \   0000019C   010051E3           CMP      R1,#+1
   \   000001A0   E7FFFFBA           BLT      ??raac_DecodeSpectrumLong_8
   \   000001A4   F7FFFFEA           B        ??raac_DecodeSpectrumLong_11
   \                     ??raac_DecodeSpectrumLong_10:
   \   000001A8   050051E3           CMP      R1,#+5
   \   000001AC   040000AA           BGE      ??raac_DecodeSpectrumLong_12
   \   000001B0   0430A0E1           MOV      R3,R4
   \   000001B4   0B20A0E1           MOV      R2,R11
   \   000001B8   0800A0E1           MOV      R0,R8
   \   000001BC   ........           BL       UnpackQuads
   \   000001C0   DFFFFFEA           B        ??raac_DecodeSpectrumLong_8
   \                     ??raac_DecodeSpectrumLong_12:
   \   000001C4   0B0051E3           CMP      R1,#+11
   \   000001C8   040000AA           BGE      ??raac_DecodeSpectrumLong_13
   \   000001CC   0430A0E1           MOV      R3,R4
   \   000001D0   0B20A0E1           MOV      R2,R11
   \   000001D4   0800A0E1           MOV      R0,R8
   \   000001D8   ........           BL       UnpackPairsNoEsc
   \   000001DC   D8FFFFEA           B        ??raac_DecodeSpectrumLong_8
   \                     ??raac_DecodeSpectrumLong_13:
   \   000001E0   CCFFFF1A           BNE      ??raac_DecodeSpectrumLong_7
   \   000001E4   0430A0E1           MOV      R3,R4
   \   000001E8   0B20A0E1           MOV      R2,R11
   \   000001EC   0B10A0E3           MOV      R1,#+11
   \   000001F0   0800A0E1           MOV      R0,R8
   \   000001F4   ........           BL       UnpackPairsEsc
   \   000001F8   D1FFFFEA           B        ??raac_DecodeSpectrumLong_8
   \                     ??raac_DecodeSpectrumLong_14:
   \   000001FC   005083E5           STR      R5,[R3, #+0]
   \   00000200   011081E2           ADD      R1,R1,#+1
   \                     ??raac_DecodeSpectrumLong_6:
   \   00000204   0130D0E5           LDRB     R3,[R0, #+1]
   \   00000208   030051E1           CMP      R1,R3
   \   0000020C   F78FBDA8           POPGE    {R0-R2,R4-R11,PC}
   \   00000210   003081E0           ADD      R3,R1,R0
   \   00000214   0330D3E5           LDRB     R3,[R3, #+3]
   \   00000218   006081E0           ADD      R6,R1,R0
   \   0000021C   0760D6E5           LDRB     R6,[R6, #+7]
   \   00000220   022083E0           ADD      R2,R3,R2
   \   00000224   023184E0           ADD      R3,R4,R2, LSL #+2
   \   00000228   005093E5           LDR      R5,[R3, #+0]
   \   0000022C   010055E3           CMP      R5,#+1
   \   00000230   065045B0           SUBLT    R5,R5,R6
   \   00000234   055086A0           ADDGE    R5,R6,R5
   \   00000238   EFFFFFEA           B        ??raac_DecodeSpectrumLong_14
   \                     ??raac_DecodeSpectrumLong_1:
   \   0000023C   ........           DC32     raac_sfBandTabLongOffset
   \   00000240   ........           DC32     raac_sfBandTabLong
    350          
    351          /**************************************************************************************
    352           * Function:    DecodeSpectrumShort
    353           *
    354           * Description: decode transform coefficients for frame with eight short blocks
    355           *
    356           * Inputs:      platform specific info struct
    357           *              BitStreamInfo struct pointing to start of spectral data
    358           *                (14496-3, table 4.4.29) 
    359           *              index of current channel
    360           *
    361           * Outputs:     decoded, quantized coefficients for this channel
    362           *
    363           * Return:      none
    364           *
    365           * Notes:       fills coefficient buffer with zeros in any region not coded with
    366           *                codebook in range [1, 11] (including sfb's above sfbMax)
    367           *              deinterleaves window groups into 8 windows
    368           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    369          void DecodeSpectrumShort(PSInfoBase *psi, BitStreamInfo *bsi, int ch)
    370          {
   \                     raac_DecodeSpectrumShort:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
    371          	int gp, cb, nVals, win, offset, sfb;
    372          	const short *sfbTab;
    373          	unsigned char *sfbCodeBook;
    374          	int *coef;
    375          	ICSInfo *icsInfo;
    376          
    377          	coef = psi->coef[ch];
   \   00000008   4810A0E3           MOV      R1,#+72
   \   0000000C   401D81E3           ORR      R1,R1,#0x1000
   \   00000010   023680E0           ADD      R3,R0,R2, LSL #+12
   \   00000014   035081E0           ADD      R5,R1,R3
    378          	icsInfo = (ch == 1 && psi->commonWin == 1) ? &(psi->icsInfo[0]) : &(psi->icsInfo[ch]);
    379          
    380          	/* decode short blocks, deinterleaving in-place */
    381          	sfbTab = sfBandTabShort + sfBandTabShortOffset[psi->sampRateIdx];
   \   00000018   1C729FE5           LDR      R7,??raac_DecodeSpectrumShort_0  ;; raac_sfBandTabShortOffset
   \   0000001C   010052E3           CMP      R2,#+1
   \   00000020   F0389005           LDREQ    R3,[R0, #+2288]
   \   00000024   7C10A0E3           MOV      R1,#+124
   \   00000028   01005303           CMPEQ    R3,#+1
   \   0000002C   3A30A013           MOVNE    R3,#+58
   \   00000030   93022410           MLANE    R4,R3,R2,R0
   \   00000034   783890E5           LDR      R3,[R0, #+2168]
   \   00000038   801E81E3           ORR      R1,R1,#0x800
   \   0000003C   033197E7           LDR      R3,[R7, +R3, LSL #+2]
   \   00000040   F8719FE5           LDR      R7,??raac_DecodeSpectrumShort_0+0x4  ;; raac_sfBandTabShort
   \   00000044   00408100           ADDEQ    R4,R1,R0
   \   00000048   833087E0           ADD      R3,R7,R3, LSL #+1
    382          	sfbCodeBook = psi->sfbCodeBook[ch];
   \   0000004C   7870A0E3           MOV      R7,#+120
   \   00000050   970220E0           MLA      R0,R7,R2,R0
   \   00000054   04408110           ADDNE    R4,R1,R4
   \   00000058   00308DE5           STR      R3,[SP, #+0]
   \   0000005C   963F81E2           ADD      R3,R1,#+600
   \   00000060   000083E0           ADD      R0,R3,R0
   \   00000064   04008DE5           STR      R0,[SP, #+4]
    383          	for (gp = 0; gp < icsInfo->numWinGroup; gp++) {
   \   00000068   3100D4E5           LDRB     R0,[R4, #+49]
   \   0000006C   0070A0E3           MOV      R7,#+0
   \   00000070   00A0A0E3           MOV      R10,#+0
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   1C00001A           BNE      ??raac_DecodeSpectrumShort_1
    384          		for (sfb = 0; sfb < icsInfo->maxSFB; sfb++) {
    385          			nVals = sfbTab[sfb+1] - sfbTab[sfb];
    386          			cb = *sfbCodeBook++;
    387          
    388          			for (win = 0; win < icsInfo->winGroupLen[gp]; win++) {
    389          				offset = win*NSAMPS_SHORT;
    390          				if (cb == 0)
    391          					UnpackZeros(nVals, coef + offset);
    392          				else if (cb <= 4)
    393          					UnpackQuads(bsi, cb, nVals, coef + offset);
    394          				else if (cb <= 10)
    395          					UnpackPairsNoEsc(bsi, cb, nVals, coef + offset);
    396          				else if (cb == 11)
    397          					UnpackPairsEsc(bsi, cb, nVals, coef + offset);
    398          				else 
    399          					UnpackZeros(nVals, coef + offset);
    400          			}
    401          			coef += nVals;
    402          		}
    403          
    404          		/* fill with zeros above maxSFB */
    405          		for (win = 0; win < icsInfo->winGroupLen[gp]; win++) {
    406          			offset = win*NSAMPS_SHORT;
    407          			nVals = NSAMPS_SHORT - sfbTab[sfb];
    408          			UnpackZeros(nVals, coef + offset);
    409          		}
    410          		coef += nVals;
    411          		coef += (icsInfo->winGroupLen[gp] - 1)*NSAMPS_SHORT;
    412          	}
    413          
    414          	ASSERT(coef == psi->coef[ch] + NSAMPS_LONG);
    415          }
   \   0000007C   F78FBDE8           POP      {R0-R2,R4-R11,PC}  ;; return
   \                     ??raac_DecodeSpectrumShort_2:
   \   00000080   00009DE5           LDR      R0,[SP, #+0]
   \   00000084   880080E0           ADD      R0,R0,R8, LSL #+1
   \   00000088   F000D0E1           LDRSH    R0,[R0, #+0]
   \   0000008C   806060E2           RSB      R6,R0,#+128
   \   00000090   890485E0           ADD      R0,R5,R9, LSL #+9
   \   00000094   0610A0E1           MOV      R1,R6
   \   00000098   010051E3           CMP      R1,#+1
   \   0000009C   060000BA           BLT      ??raac_DecodeSpectrumShort_3
   \                     ??raac_DecodeSpectrumShort_4:
   \   000000A0   ........           STR      R10,[R0], #+4
   \   000000A4   ........           STR      R10,[R0], #+4
   \   000000A8   ........           STR      R10,[R0], #+4
   \   000000AC   ........           STR      R10,[R0], #+4
   \   000000B0   041041E2           SUB      R1,R1,#+4
   \   000000B4   010051E3           CMP      R1,#+1
   \   000000B8   F8FFFFAA           BGE      ??raac_DecodeSpectrumShort_4
   \                     ??raac_DecodeSpectrumShort_3:
   \   000000BC   019089E2           ADD      R9,R9,#+1
   \                     ??raac_DecodeSpectrumShort_5:
   \   000000C0   040087E0           ADD      R0,R7,R4
   \   000000C4   3200D0E5           LDRB     R0,[R0, #+50]
   \   000000C8   000059E1           CMP      R9,R0
   \   000000CC   EBFFFFBA           BLT      ??raac_DecodeSpectrumShort_2
   \                     ??raac_DecodeSpectrumShort_6:
   \   000000D0   041087E0           ADD      R1,R7,R4
   \   000000D4   3210D1E5           LDRB     R1,[R1, #+50]
   \   000000D8   FF00E0E3           MVN      R0,#+255
   \   000000DC   400FC0E3           BIC      R0,R0,#0x100
   \   000000E0   811485E0           ADD      R1,R5,R1, LSL #+9
   \   000000E4   061181E0           ADD      R1,R1,R6, LSL #+2
   \   000000E8   015080E0           ADD      R5,R0,R1
   \   000000EC   017087E2           ADD      R7,R7,#+1
   \                     ??raac_DecodeSpectrumShort_1:
   \   000000F0   3100D4E5           LDRB     R0,[R4, #+49]
   \   000000F4   000057E1           CMP      R7,R0
   \   000000F8   F78FBDA8           POPGE    {R0-R2,R4-R11,PC}
   \   000000FC   0300D4E5           LDRB     R0,[R4, #+3]
   \   00000100   0080A0E3           MOV      R8,#+0
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   0700001A           BNE      ??raac_DecodeSpectrumShort_7
   \                     ??raac_DecodeSpectrumShort_8:
   \   0000010C   040087E0           ADD      R0,R7,R4
   \   00000110   3200D0E5           LDRB     R0,[R0, #+50]
   \   00000114   0090A0E3           MOV      R9,#+0
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   E7FFFF1A           BNE      ??raac_DecodeSpectrumShort_5
   \   00000120   EAFFFFEA           B        ??raac_DecodeSpectrumShort_6
   \                     ??raac_DecodeSpectrumShort_9:
   \   00000124   065185E0           ADD      R5,R5,R6, LSL #+2
   \   00000128   018088E2           ADD      R8,R8,#+1
   \                     ??raac_DecodeSpectrumShort_7:
   \   0000012C   0300D4E5           LDRB     R0,[R4, #+3]
   \   00000130   000058E1           CMP      R8,R0
   \   00000134   F4FFFFAA           BGE      ??raac_DecodeSpectrumShort_8
   \   00000138   00009DE5           LDR      R0,[SP, #+0]
   \   0000013C   0090A0E3           MOV      R9,#+0
   \   00000140   880080E0           ADD      R0,R0,R8, LSL #+1
   \   00000144   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000148   F000D0E1           LDRSH    R0,[R0, #+0]
   \   0000014C   006041E0           SUB      R6,R1,R0
   \   00000150   04109DE5           LDR      R1,[SP, #+4]
   \   00000154   040087E0           ADD      R0,R7,R4
   \   00000158   ........           LDRB     R11,[R1], #+1
   \   0000015C   04108DE5           STR      R1,[SP, #+4]
   \   00000160   3200D0E5           LDRB     R0,[R0, #+50]
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   0B00001A           BNE      ??raac_DecodeSpectrumShort_10
   \   0000016C   ECFFFFEA           B        ??raac_DecodeSpectrumShort_9
   \                     ??raac_DecodeSpectrumShort_11:
   \   00000170   0600A0E1           MOV      R0,R6
   \   00000174   010050E3           CMP      R0,#+1
   \   00000178   060000BA           BLT      ??raac_DecodeSpectrumShort_12
   \                     ??raac_DecodeSpectrumShort_13:
   \   0000017C   ........           STR      R10,[R3], #+4
   \   00000180   ........           STR      R10,[R3], #+4
   \   00000184   ........           STR      R10,[R3], #+4
   \   00000188   ........           STR      R10,[R3], #+4
   \   0000018C   040040E2           SUB      R0,R0,#+4
   \   00000190   010050E3           CMP      R0,#+1
   \   00000194   F8FFFFAA           BGE      ??raac_DecodeSpectrumShort_13
   \                     ??raac_DecodeSpectrumShort_12:
   \   00000198   019089E2           ADD      R9,R9,#+1
   \                     ??raac_DecodeSpectrumShort_10:
   \   0000019C   040087E0           ADD      R0,R7,R4
   \   000001A0   3200D0E5           LDRB     R0,[R0, #+50]
   \   000001A4   000059E1           CMP      R9,R0
   \   000001A8   DDFFFFAA           BGE      ??raac_DecodeSpectrumShort_9
   \   000001AC   8903A0E1           LSL      R0,R9,#+7
   \   000001B0   00005BE3           CMP      R11,#+0
   \   000001B4   0B00001A           BNE      ??raac_DecodeSpectrumShort_14
   \   000001B8   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000001BC   0610A0E1           MOV      R1,R6
   \   000001C0   010051E3           CMP      R1,#+1
   \   000001C4   F3FFFFBA           BLT      ??raac_DecodeSpectrumShort_12
   \                     ??raac_DecodeSpectrumShort_15:
   \   000001C8   ........           STR      R10,[R0], #+4
   \   000001CC   ........           STR      R10,[R0], #+4
   \   000001D0   ........           STR      R10,[R0], #+4
   \   000001D4   ........           STR      R10,[R0], #+4
   \   000001D8   041041E2           SUB      R1,R1,#+4
   \   000001DC   010051E3           CMP      R1,#+1
   \   000001E0   ECFFFFBA           BLT      ??raac_DecodeSpectrumShort_12
   \   000001E4   F7FFFFEA           B        ??raac_DecodeSpectrumShort_15
   \                     ??raac_DecodeSpectrumShort_14:
   \   000001E8   003185E0           ADD      R3,R5,R0, LSL #+2
   \   000001EC   05005BE3           CMP      R11,#+5
   \   000001F0   040000AA           BGE      ??raac_DecodeSpectrumShort_16
   \   000001F4   08009DE5           LDR      R0,[SP, #+8]
   \   000001F8   0620A0E1           MOV      R2,R6
   \   000001FC   0B10A0E1           MOV      R1,R11
   \   00000200   ........           BL       UnpackQuads
   \   00000204   E3FFFFEA           B        ??raac_DecodeSpectrumShort_12
   \                     ??raac_DecodeSpectrumShort_16:
   \   00000208   0B005BE3           CMP      R11,#+11
   \   0000020C   040000AA           BGE      ??raac_DecodeSpectrumShort_17
   \   00000210   08009DE5           LDR      R0,[SP, #+8]
   \   00000214   0620A0E1           MOV      R2,R6
   \   00000218   0B10A0E1           MOV      R1,R11
   \   0000021C   ........           BL       UnpackPairsNoEsc
   \   00000220   DCFFFFEA           B        ??raac_DecodeSpectrumShort_12
   \                     ??raac_DecodeSpectrumShort_17:
   \   00000224   D1FFFF1A           BNE      ??raac_DecodeSpectrumShort_11
   \   00000228   08009DE5           LDR      R0,[SP, #+8]
   \   0000022C   0620A0E1           MOV      R2,R6
   \   00000230   0B10A0E3           MOV      R1,#+11
   \   00000234   ........           BL       UnpackPairsEsc
   \   00000238   D6FFFFEA           B        ??raac_DecodeSpectrumShort_12
   \                     ??raac_DecodeSpectrumShort_0:
   \   0000023C   ........           DC32     raac_sfBandTabShortOffset
   \   00000240   ........           DC32     raac_sfBandTabShort

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     raac_huffTabSpecInfo

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     raac_huffTabSpec

   Maximum stack usage in bytes:

     Function                 CSTACK
     --------                 ------
     UnpackPairsEsc              52
     UnpackPairsNoEsc            48
     UnpackQuads                 52
     raac_DecodeHuffmanScalar    16
     raac_DecodeSpectrumLong     48
     raac_DecodeSpectrumShort    48


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     raac_DecodeHuffmanScalar   88
     UnpackQuads               348
     UnpackPairsNoEsc          280
     UnpackPairsEsc            404
     raac_DecodeSpectrumLong   580
     raac_DecodeSpectrumShort  580
     ??DataTable4                4
     ??DataTable5                4
      Others                    60

 
 2 348 bytes in segment CODE
 
 2 288 bytes of CODE memory (+ 60 bytes shared)

Errors: none
Warnings: none
