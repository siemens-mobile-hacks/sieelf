//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   14/Feb/2012  15:35:53 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\zlib\INF /
//                       FAST.C                                              /
//    Command line    =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\zlib\INF /
//                       FAST.C -D NDEBUG -lC D:\SVN\SieELF\SieELF\x65_PCM_P /
//                       layer\Player\Release\List\ -lA                      /
//                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player\Player /
//                       \Release\Obj\ -s9 --cpu_mode arm --endian little    /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --dlib_config "D:\Program                /
//                       Files\IAR\Embedded Workbench 4.0                    /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude      /
//                       swilib.h -I "D:\Program Files\IAR\Embedded          /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=16                               /
//    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\INFFAST.s79                                    /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME INFFAST

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??inflate_fast??rT
        PUBLIC inflate_fast
        FUNCTION inflate_fast,0203H
        LOCFRAME CSTACK, 80, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
inflate_fast        SYMBOL "inflate_fast"
??inflate_fast??rT  SYMBOL "??rT", inflate_fast


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??inflate_fast??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE inflate_fast
// D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\zlib\INFFAST.C
//    1 /* inffast.c -- fast decoding
//    2  * Copyright (C) 1995-2004 Mark Adler
//    3  * For conditions of distribution and use, see copyright notice in zlib.h
//    4  */
//    5 
//    6 #include "zutil.h"
//    7 #include "inftrees.h"
//    8 #include "inflate.h"
//    9 #include "inffast.h"
//   10 
//   11 #ifndef ASMINF
//   12 
//   13 /* Allow machine dependent optimization for post-increment or pre-increment.
//   14    Based on testing to date,
//   15    Pre-increment preferred for:
//   16    - PowerPC G3 (Adler)
//   17    - MIPS R5000 (Randers-Pehrson)
//   18    Post-increment preferred for:
//   19    - none
//   20    No measurable difference:
//   21    - Pentium III (Anderson)
//   22    - M68060 (Nikl)
//   23  */
//   24 #ifdef POSTINC
//   25 #  define OFF 0
//   26 #  define PUP(a) *(a)++
//   27 #else
//   28 #  define OFF 1
//   29 #  define PUP(a) *++(a)
//   30 #endif
//   31 
//   32 /*
//   33    Decode literal, length, and distance codes and write out the resulting
//   34    literal and match bytes until either not enough input or output is
//   35    available, an end-of-block is encountered, or a data error is encountered.
//   36    When large enough input and output buffers are supplied to inflate(), for
//   37    example, a 16K input buffer and a 64K output buffer, more than 95% of the
//   38    inflate execution time is spent in this routine.
//   39 
//   40    Entry assumptions:
//   41 
//   42         state->mode == LEN
//   43         strm->avail_in >= 6
//   44         strm->avail_out >= 258
//   45         start >= strm->avail_out
//   46         state->bits < 8
//   47 
//   48    On return, state->mode is one of:
//   49 
//   50         LEN -- ran out of enough output space or enough available input
//   51         TYPE -- reached end of block code, inflate() to interpret next block
//   52         BAD -- error in block data
//   53 
//   54    Notes:
//   55 
//   56     - The maximum input bits used by a length/distance pair is 15 bits for the
//   57       length code, 5 bits for the length extra, 15 bits for the distance code,
//   58       and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
//   59       Therefore if strm->avail_in >= 6, then there is enough input to avoid
//   60       checking for available input while decoding.
//   61 
//   62     - The maximum bytes that a single length/distance pair can output is 258
//   63       bytes, which is the maximum length that can be coded.  inflate_fast()
//   64       requires strm->avail_out >= 258 for each loop to avoid checking for
//   65       output space.
//   66  */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function inflate_fast
        ARM
//   67 void inflate_fast(strm, start)
//   68 z_streamp strm;
//   69 unsigned start;         /* inflate()'s starting value for strm->avail_out */
//   70 {
inflate_fast:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+44
        CFI CFA R13+80
        MOV      R2,R0
//   71     struct inflate_state FAR *state;
//   72     unsigned char FAR *in;      /* local strm->next_in */
//   73     unsigned char FAR *last;    /* while in < last, enough input available */
//   74     unsigned char FAR *out;     /* local strm->next_out */
//   75     unsigned char FAR *beg;     /* inflate()'s initial strm->next_out */
//   76     unsigned char FAR *end;     /* while out < end, enough space available */
//   77 #ifdef INFLATE_STRICT
//   78     unsigned dmax;              /* maximum distance from zlib header */
//   79 #endif
//   80     unsigned wsize;             /* window size or zero if not using window */
//   81     unsigned whave;             /* valid bytes in the window */
//   82     unsigned write;             /* window write index */
//   83     unsigned char FAR *window;  /* allocated sliding window, if wsize != 0 */
//   84     unsigned long hold;         /* local strm->hold */
//   85     unsigned bits;              /* local strm->bits */
//   86     code const FAR *lcode;      /* local strm->lencode */
//   87     code const FAR *dcode;      /* local strm->distcode */
//   88     unsigned lmask;             /* mask for first level of length codes */
//   89     unsigned dmask;             /* mask for first level of distance codes */
//   90     code this;                  /* retrieved table entry */
//   91     unsigned op;                /* code bits, operation, extra bits, or */
//   92                                 /*  window position, window bytes to copy */
//   93     unsigned len;               /* match length, unused bytes */
//   94     unsigned dist;              /* match distance */
//   95     unsigned char FAR *from;    /* where to copy match from */
//   96 
//   97     /* copy state to local variables */
//   98     state = (struct inflate_state FAR *)strm->state;
//   99     in = strm->next_in - OFF;
        LDR      R0,[R2, #+0]
//  100     last = in + (strm->avail_in - 5);
        LDR      R3,[R2, #+4]
        LDR      R12,[R2, #+28]
        SUB      R4,R0,#+1
        ADD      R3,R3,R4
        SUB      R3,R3,#+5
        STR      R3,[SP, #+20]
//  101     out = strm->next_out - OFF;
        LDR      R0,[R2, #+12]
//  102     beg = out - (start - strm->avail_out);
//  103     end = out + (strm->avail_out - 257);
        MVN      R5,#+256
        SUB      R3,R0,#+1
        LDR      R0,[R2, #+16]
        SUB      R1,R1,R0
        RSB      R1,R1,#+0
        ADD      R1,R1,R3
        STR      R1,[SP, #+28]
        ADD      R0,R0,R3
        ADD      R0,R5,R0
        STR      R0,[SP, #+24]
//  104 #ifdef INFLATE_STRICT
//  105     dmax = state->dmax;
//  106 #endif
//  107     wsize = state->wsize;
        LDR      R1,[R12, #+40]
        STR      R1,[SP, #+4]
//  108     whave = state->whave;
        LDR      R1,[R12, #+44]
        STR      R1,[SP, #+32]
//  109     write = state->write;
//  110     window = state->window;
        LDR      R1,[R12, #+52]
        LDR      R6,[R12, #+48]
        STR      R1,[SP, #+8]
//  111     hold = state->hold;
//  112     bits = state->bits;
//  113     lcode = state->lencode;
        LDR      R1,[R12, #+76]
        LDR      R5,[R12, #+56]
        LDR      R7,[R12, #+60]
        STR      R1,[SP, #+12]
//  114     dcode = state->distcode;
        LDR      R1,[R12, #+80]
        STR      R1,[SP, #+16]
//  115     lmask = (1U << state->lenbits) - 1;
        LDR      R8,[R12, #+84]
        MOV      R1,#+1
        LSL      R8,R1,R8
        SUB      R8,R8,#+1
        STR      R8,[SP, #+36]
//  116     dmask = (1U << state->distbits) - 1;
        LDR      R8,[R12, #+88]
        LSL      R8,R1,R8
        SUB      R8,R8,#+1
        STR      R8,[SP, #+40]
//  117 
//  118     /* decode literals and length/distances until end-of-block or not enough
//  119        input data or output space */
//  120     do {
//  121         if (bits < 15) {
??inflate_fast_0:
        CMP      R7,#+15
        BCS      ??inflate_fast_1
//  122             hold += (unsigned long)(PUP(in)) << bits;
        ADD      R4,R4,#+1
        LDRB     R0,[R4], #+1
        ADD      R0,R5,R0, LSL R7
//  123             bits += 8;
//  124             hold += (unsigned long)(PUP(in)) << bits;
        LDRB     R5,[R4, #+0]
        ADD      R7,R7,#+8
        ADD      R5,R0,R5, LSL R7
//  125             bits += 8;
        ADD      R7,R7,#+8
//  126         }
//  127         this = lcode[hold & lmask];
??inflate_fast_1:
        LDR      R8,[SP, #+36]
        LDR      R9,[SP, #+12]
        AND      R8,R8,R5
        ADD      R8,R9,R8, LSL #+2
        LDRH     R9,[R8, #0]
        MOV      R0,SP
        STRH     R9,[R0, #+0]
        LDRH     R9,[R8, #+2]
        STRH     R9,[R0, #+2]
        MOV      R9,SP
        B        ??inflate_fast_2
//  128       dolen:
//  129         op = (unsigned)(this.bits);
//  130         hold >>= op;
//  131         bits -= op;
//  132         op = (unsigned)(this.op);
//  133         if (op == 0) {                          /* literal */
//  134             Tracevv((stderr, this.val >= 0x20 && this.val < 0x7f ?
//  135                     "inflate:         literal '%c'\n" :
//  136                     "inflate:         literal 0x%02x\n", this.val));
//  137             PUP(out) = (unsigned char)(this.val);
//  138         }
//  139         else if (op & 16) {                     /* length base */
//  140             len = (unsigned)(this.val);
//  141             op &= 15;                           /* number of extra bits */
//  142             if (op) {
//  143                 if (bits < op) {
//  144                     hold += (unsigned long)(PUP(in)) << bits;
//  145                     bits += 8;
//  146                 }
//  147                 len += (unsigned)hold & ((1U << op) - 1);
//  148                 hold >>= op;
//  149                 bits -= op;
//  150             }
//  151             Tracevv((stderr, "inflate:         length %u\n", len));
//  152             if (bits < 15) {
//  153                 hold += (unsigned long)(PUP(in)) << bits;
//  154                 bits += 8;
//  155                 hold += (unsigned long)(PUP(in)) << bits;
//  156                 bits += 8;
//  157             }
//  158             this = dcode[hold & dmask];
//  159           dodist:
//  160             op = (unsigned)(this.bits);
//  161             hold >>= op;
//  162             bits -= op;
//  163             op = (unsigned)(this.op);
//  164             if (op & 16) {                      /* distance base */
//  165                 dist = (unsigned)(this.val);
//  166                 op &= 15;                       /* number of extra bits */
//  167                 if (bits < op) {
//  168                     hold += (unsigned long)(PUP(in)) << bits;
//  169                     bits += 8;
//  170                     if (bits < op) {
//  171                         hold += (unsigned long)(PUP(in)) << bits;
//  172                         bits += 8;
//  173                     }
//  174                 }
//  175                 dist += (unsigned)hold & ((1U << op) - 1);
//  176 #ifdef INFLATE_STRICT
//  177                 if (dist > dmax) {
//  178                     strm->msg = (char *)"invalid distance too far back";
//  179                     state->mode = BAD;
//  180                     break;
//  181                 }
//  182 #endif
//  183                 hold >>= op;
//  184                 bits -= op;
//  185                 Tracevv((stderr, "inflate:         distance %u\n", dist));
//  186                 op = (unsigned)(out - beg);     /* max distance in output */
//  187                 if (dist > op) {                /* see if copy from window */
//  188                     op = dist - op;             /* distance back in window */
//  189                     if (op > whave) {
//  190                         strm->msg = (char *)"invalid distance too far back";
//  191                         state->mode = BAD;
//  192                         break;
//  193                     }
//  194                     from = window - OFF;
//  195                     if (write == 0) {           /* very common case */
//  196                         from += wsize - op;
//  197                         if (op < len) {         /* some from window */
//  198                             len -= op;
//  199                             do {
//  200                                 PUP(out) = PUP(from);
//  201                             } while (--op);
//  202                             from = out - dist;  /* rest from output */
//  203                         }
//  204                     }
//  205                     else if (write < op) {      /* wrap around window */
//  206                         from += wsize + write - op;
//  207                         op -= write;
//  208                         if (op < len) {         /* some from end of window */
//  209                             len -= op;
//  210                             do {
//  211                                 PUP(out) = PUP(from);
//  212                             } while (--op);
//  213                             from = window - OFF;
//  214                             if (write < len) {  /* some from start of window */
//  215                                 op = write;
//  216                                 len -= op;
//  217                                 do {
//  218                                     PUP(out) = PUP(from);
//  219                                 } while (--op);
//  220                                 from = out - dist;      /* rest from output */
//  221                             }
//  222                         }
//  223                     }
//  224                     else {                      /* contiguous in window */
//  225                         from += write - op;
//  226                         if (op < len) {         /* some from window */
//  227                             len -= op;
//  228                             do {
//  229                                 PUP(out) = PUP(from);
//  230                             } while (--op);
//  231                             from = out - dist;  /* rest from output */
//  232                         }
//  233                     }
//  234                     while (len > 2) {
//  235                         PUP(out) = PUP(from);
//  236                         PUP(out) = PUP(from);
//  237                         PUP(out) = PUP(from);
//  238                         len -= 3;
//  239                     }
//  240                     if (len) {
//  241                         PUP(out) = PUP(from);
//  242                         if (len > 1)
//  243                             PUP(out) = PUP(from);
//  244                     }
//  245                 }
//  246                 else {
//  247                     from = out - dist;          /* copy direct from output */
//  248                     do {                        /* minimum length is three */
//  249                         PUP(out) = PUP(from);
//  250                         PUP(out) = PUP(from);
//  251                         PUP(out) = PUP(from);
//  252                         len -= 3;
//  253                     } while (len > 2);
//  254                     if (len) {
//  255                         PUP(out) = PUP(from);
//  256                         if (len > 1)
//  257                             PUP(out) = PUP(from);
//  258                     }
//  259                 }
//  260             }
//  261             else if ((op & 64) == 0) {          /* 2nd level distance code */
//  262                 this = dcode[this.val + (hold & ((1U << op) - 1))];
//  263                 goto dodist;
//  264             }
//  265             else {
//  266                 strm->msg = (char *)"invalid distance code";
//  267                 state->mode = BAD;
//  268                 break;
//  269             }
//  270         }
//  271         else if ((op & 64) == 0) {              /* 2nd level length code */
//  272             this = lcode[this.val + (hold & ((1U << op) - 1))];
??inflate_fast_3:
        LSL      R8,R1,R8
        SUB      R8,R8,#+1
        AND      R8,R8,R5
        ADD      R0,R8,R0
        LDR      R8,[SP, #+12]
        ADD      R0,R8,R0, LSL #+2
        LDRH     R8,[R0, #0]
        STRH     R8,[R9, #+0]
        LDRH     R8,[R0, #+2]
        STRH     R8,[R9, #+2]
//  273             goto dolen;
//  274         }
??inflate_fast_2:
        LDRB     R0,[SP, #+1]
        LDRB     R8,[SP, #+0]
        LSR      R5,R5,R0
        SUB      R7,R7,R0
        LDRH     R0,[SP, #+2]
        CMP      R8,#+0
        BNE      ??inflate_fast_4
??inflate_fast_5:
        STRB     R0,[R3, #+1]!
//  275         else if (op & 32) {                     /* end-of-block */
//  276             Tracevv((stderr, "inflate:         end of block\n"));
//  277             state->mode = TYPE;
//  278             break;
//  279         }
//  280         else {
//  281             strm->msg = (char *)"invalid literal/length code";
//  282             state->mode = BAD;
//  283             break;
//  284         }
//  285     } while (in < last && out < end);
??inflate_fast_6:
        LDR      R0,[SP, #+20]
        CMP      R4,R0
        LDRCC    R0,[SP, #+24]
        CMPCC    R3,R0
        BCC      ??inflate_fast_0
//  286 
//  287     /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
//  288     len = bits >> 3;
??inflate_fast_7:
        LSR      R0,R7,#+3
//  289     in -= len;
        MOV      R6,R0
        RSB      R6,R6,#+0
        ADD      R4,R6,R4
//  290     bits -= len << 3;
//  291     hold &= (1U << bits) - 1;
//  292 
//  293     /* update state and return */
//  294     strm->next_in = in + OFF;
        ADD      R6,R4,#+1
        STR      R6,[R2, #+0]
//  295     strm->next_out = out + OFF;
        ADD      R6,R3,#+1
        STR      R6,[R2, #+12]
//  296     strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
        LDR      R6,[SP, #+20]
        SUB      R0,R7,R0, LSL #+3
        CMP      R4,R6
        RSBCS    R4,R4,#+5
        ADDCS    R4,R6,R4
        SUBCC    R4,R6,R4
        ADDCC    R4,R4,#+5
        B        ??inflate_fast_8
??inflate_fast_4:
        TST      R8,#0x10
        BEQ      ??inflate_fast_9
        ANDS     R8,R8,#0xF
        BEQ      ??inflate_fast_10
        CMP      R7,R8
        LDRBCC   R9,[R4, #+1]!
        ADDCC    R5,R5,R9, LSL R7
        ADDCC    R7,R7,#+8
        LSL      R9,R1,R8
        SUB      R9,R9,#+1
        AND      R9,R9,R5
        ADD      R0,R9,R0
        LSR      R5,R5,R8
        SUB      R7,R7,R8
??inflate_fast_10:
        CMP      R7,#+15
        BCS      ??inflate_fast_11
        ADD      R4,R4,#+1
        LDRB     R8,[R4], #+1
        ADD      R5,R5,R8, LSL R7
        LDRB     R8,[R4, #+0]
        ADD      R7,R7,#+8
        ADD      R5,R5,R8, LSL R7
        ADD      R7,R7,#+8
??inflate_fast_11:
        LDR      R9,[SP, #+40]
        LDR      R10,[SP, #+16]
        AND      R9,R9,R5
        ADD      R9,R10,R9, LSL #+2
        LDRH     R10,[R9, #0]
        MOV      R8,SP
        STRH     R10,[R8, #+0]
        LDRH     R10,[R9, #+2]
        STRH     R10,[R8, #+2]
        MOV      R10,SP
        B        ??inflate_fast_12
??inflate_fast_13:
        LSL      R8,R1,R8
        SUB      R8,R8,#+1
        AND      R8,R8,R5
        ADD      R8,R8,R9
        LDR      R9,[SP, #+16]
        ADD      R8,R9,R8, LSL #+2
        LDRH     R9,[R8, #0]
        STRH     R9,[R10, #+0]
        LDRH     R9,[R8, #+2]
        STRH     R9,[R10, #+2]
??inflate_fast_12:
        LDRB     R8,[SP, #+1]
        LSR      R5,R5,R8
        LDRH     R9,[SP, #+2]
        SUB      R7,R7,R8
        LDRB     R8,[SP, #+0]
        TST      R8,#0x10
        BEQ      ??inflate_fast_14
        AND      R8,R8,#0xF
        CMP      R7,R8
        BCS      ??inflate_fast_15
        LDRB     R10,[R4, #+1]!
        ADD      R5,R5,R10, LSL R7
        ADD      R7,R7,#+8
        CMP      R7,R8
        LDRBCC   R10,[R4, #+1]!
        ADDCC    R5,R5,R10, LSL R7
        ADDCC    R7,R7,#+8
??inflate_fast_15:
        LSL      R10,R1,R8
        SUB      R10,R10,#+1
        AND      R10,R10,R5
        LSR      R5,R5,R8
        SUB      R7,R7,R8
        LDR      R8,[SP, #+28]
        ADD      R9,R10,R9
        SUB      R8,R3,R8
        CMP      R8,R9
        BCS      ??inflate_fast_16
        LDR      R10,[SP, #+32]
        SUB      R8,R9,R8
        CMP      R10,R8
        BCS      ??inflate_fast_17
        LDR      R0,??inflate_fast_18  ;; `?<Constant "invalid distance too ...">`
??inflate_fast_19:
        STR      R0,[R2, #+24]
        MOV      R0,#+27
        STRB     R0,[R12, #+0]
        B        ??inflate_fast_7
??inflate_fast_17:
        LDR      R10,[SP, #+8]
        CMP      R6,#+0
        SUB      R11,R10,#+1
        SUB      R10,R0,R8
        BNE      ??inflate_fast_20
        LDR      LR,[SP, #+4]
        CMP      R8,R0
        SUB      LR,LR,R8
        ADD      R11,LR,R11
        BCS      ??inflate_fast_21
        MOV      R0,R10
??inflate_fast_22:
        LDRB     R10,[R11, #+1]!
        SUBS     R8,R8,#+1
        STRB     R10,[R3, #+1]!
        BNE      ??inflate_fast_22
??inflate_fast_23:
        RSB      R8,R9,#+0
        ADD      R11,R8,R3
        B        ??inflate_fast_21
??inflate_fast_20:
        CMP      R6,R8
        BCS      ??inflate_fast_24
        LDR      R10,[SP, #+4]
        ADD      R10,R6,R10
        SUB      R10,R10,R8
        ADD      R11,R10,R11
        SUB      R8,R8,R6
        CMP      R8,R0
        BCS      ??inflate_fast_21
        SUB      R0,R0,R8
??inflate_fast_25:
        LDRB     R10,[R11, #+1]!
        SUBS     R8,R8,#+1
        STRB     R10,[R3, #+1]!
        BNE      ??inflate_fast_25
        LDR      R8,[SP, #+8]
        CMP      R6,R0
        SUB      R11,R8,#+1
        BCS      ??inflate_fast_21
        MOV      R8,R6
        SUB      R0,R0,R8
??inflate_fast_26:
        LDRB     R10,[R11, #+1]!
        SUBS     R8,R8,#+1
        STRB     R10,[R3, #+1]!
        BNE      ??inflate_fast_26
        B        ??inflate_fast_23
??inflate_fast_24:
        SUB      LR,R6,R8
        ADD      R11,LR,R11
        CMP      R8,R0
        BCS      ??inflate_fast_21
        MOV      R0,R10
??inflate_fast_27:
        LDRB     R10,[R11, #+1]!
        SUBS     R8,R8,#+1
        STRB     R10,[R3, #+1]!
        BNE      ??inflate_fast_27
        B        ??inflate_fast_23
??inflate_fast_28:
        ADD      R11,R11,#+1
        LDRB     R8,[R11], #+1
        ADD      R3,R3,#+1
        SUB      R0,R0,#+3
        STRB     R8,[R3], #+1
        LDRB     R8,[R11], #+1
        STRB     R8,[R3], #+1
        LDRB     R8,[R11, #+0]
        STRB     R8,[R3, #+0]
??inflate_fast_21:
        CMP      R0,#+3
        BCS      ??inflate_fast_28
??inflate_fast_29:
        CMP      R0,#+0
        BEQ      ??inflate_fast_6
        LDRB     R8,[R11, #+1]!
        CMP      R0,#+2
        STRB     R8,[R3, #+1]!
        BCC      ??inflate_fast_6
        LDRB     R0,[R11, #+1]
        B        ??inflate_fast_5
??inflate_fast_16:
        RSB      R8,R9,#+0
        ADD      R11,R8,R3
??inflate_fast_30:
        ADD      R11,R11,#+1
        LDRB     R8,[R11], #+1
        ADD      R3,R3,#+1
        SUB      R0,R0,#+3
        STRB     R8,[R3], #+1
        LDRB     R8,[R11], #+1
        CMP      R0,#+3
        STRB     R8,[R3], #+1
        LDRB     R8,[R11, #+0]
        STRB     R8,[R3, #+0]
        BCS      ??inflate_fast_30
        B        ??inflate_fast_29
??inflate_fast_14:
        TST      R8,#0x40
        BEQ      ??inflate_fast_13
        LDR      R0,??inflate_fast_18+0x4  ;; `?<Constant "invalid distance too ...">` + 32
        B        ??inflate_fast_19
??inflate_fast_9:
        TST      R8,#0x40
        BEQ      ??inflate_fast_3
        TST      R8,#0x20
        MOVNE    R0,#+11
        STRBNE   R0,[R12, #+0]
        BNE      ??inflate_fast_7
        LDR      R0,??inflate_fast_18+0x8  ;; `?<Constant "invalid distance too ...">` + 56
        B        ??inflate_fast_19
??inflate_fast_8:
        STR      R4,[R2, #+4]
//  297     strm->avail_out = (unsigned)(out < end ?
//  298                                  257 + (end - out) : 257 - (out - end));
        LDR      R4,[SP, #+24]
        ORR      R6,R1,#0x100
        CMP      R3,R4
        SUBCC    R3,R4,R3
        ADDCC    R3,R6,R3
        SUBCS    R3,R6,R3
        ADDCS    R3,R4,R3
        STR      R3,[R2, #+16]
//  299     state->hold = hold;
        LSL      R1,R1,R0
        SUB      R1,R1,#+1
        AND      R1,R1,R5
        STR      R1,[R12, #+56]
//  300     state->bits = bits;
        STR      R0,[R12, #+60]
//  301     return;
        ADD      SP,SP,#+44
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??inflate_fast_18:
        DC32     `?<Constant "invalid distance too ...">`
        DC32     `?<Constant "invalid distance too ...">` + 32
        DC32     `?<Constant "invalid distance too ...">` + 56
        CFI EndBlock cfiBlock1
//  302 }

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "invalid distance too ...">`:
        DATA
        DC8 "invalid distance too far back"
        DC8 0, 0
        DC8 "invalid distance code"
        DC8 0, 0
        DC8 "invalid literal/length code"

        END
//  303 
//  304 /*
//  305    inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):
//  306    - Using bit fields for code structure
//  307    - Different op definition to avoid & for extra bits (do & for table bits)
//  308    - Three separate decoding do-loops for direct, window, and write == 0
//  309    - Special case for distance > 1 copies to do overlapped load and store copy
//  310    - Explicit branch predictions (based on measured branch probabilities)
//  311    - Deferring match copy and interspersed it with decoding subsequent codes
//  312    - Swapping literal/length else
//  313    - Swapping window/direct else
//  314    - Larger unrolled copy loops (three is about right)
//  315    - Moving len -= 3 statement into middle of loop
//  316  */
//  317 
//  318 #endif /* !ASMINF */
// 
// 1 200 bytes in segment CODE
//    84 bytes in segment DATA_C
// 
// 1 196 bytes of CODE  memory (+ 4 bytes shared)
//    84 bytes of CONST memory
//
//Errors: none
//Warnings: none
