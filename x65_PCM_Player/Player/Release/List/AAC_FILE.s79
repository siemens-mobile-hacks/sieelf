//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   14/Feb/2012  15:39:30 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACD /
//                       EC\AAC_FILE.c                                       /
//    Command line    =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACD /
//                       EC\AAC_FILE.c -D NDEBUG -lC                         /
//                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Playe /
//                       r\Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Pla /
//                       yer\Player\Release\Obj\ -s9 --cpu_mode arm          /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "D:\Program Files\IAR\Embedded Workbench 4.0        /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude      /
//                       swilib.h -I "D:\Program Files\IAR\Embedded          /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=16                               /
//    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\AAC_FILE.s79                                   /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME AAC_FILE

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??raac_FFT32C??rT
        FUNCTION BitReverse32,0203H
        FUNCTION R4Core32,0203H
        LOCFRAME CSTACK, 36, STACK
        FUNCTION R8FirstPass32,0203H
        LOCFRAME CSTACK, 48, STACK
        PUBLIC raac_FFT32C
        FUNCTION raac_FFT32C,0203H
        LOCFRAME CSTACK, 8, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
raac_FFT32C         SYMBOL "raac_FFT32C"
??raac_FFT32C??rT   SYMBOL "??rT", raac_FFT32C

// D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDEC\AAC_FILE.c
//    1 /* ***** BEGIN LICENSE BLOCK *****  
//    2  * Source last modified: $Id: sbrfft.c,v 1.1 2005/02/26 01:47:35 jrecker Exp $ 
//    3  *   
//    4  * Portions Copyright (c) 1995-2005 RealNetworks, Inc. All Rights Reserved.  
//    5  *       
//    6  * The contents of this file, and the files included with this file, 
//    7  * are subject to the current version of the RealNetworks Public 
//    8  * Source License (the "RPSL") available at 
//    9  * http://www.helixcommunity.org/content/rpsl unless you have licensed 
//   10  * the file under the current version of the RealNetworks Community 
//   11  * Source License (the "RCSL") available at 
//   12  * http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
//   13  * will apply. You may also obtain the license terms directly from 
//   14  * RealNetworks.  You may not use this file except in compliance with 
//   15  * the RPSL or, if you have a valid RCSL with RealNetworks applicable 
//   16  * to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
//   17  * the rights, obligations and limitations governing use of the 
//   18  * contents of the file. 
//   19  *   
//   20  * This file is part of the Helix DNA Technology. RealNetworks is the 
//   21  * developer of the Original Code and owns the copyrights in the 
//   22  * portions it created. 
//   23  *   
//   24  * This file, and the files included with this file, is distributed 
//   25  * and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY 
//   26  * KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS 
//   27  * ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES 
//   28  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET 
//   29  * ENJOYMENT OR NON-INFRINGEMENT. 
//   30  *  
//   31  * Technology Compatibility Kit Test Suite(s) Location:  
//   32  *    http://www.helixcommunity.org/content/tck  
//   33  *  
//   34  * Contributor(s):  
//   35  *   
//   36  * ***** END LICENSE BLOCK ***** */  
//   37 
//   38 /**************************************************************************************
//   39  * Fixed-point HE-AAC decoder
//   40  * Jon Recker (jrecker@real.com), Ken Cooke (kenc@real.com)
//   41  * February 2005
//   42  *
//   43  * sbrfft.c - optimized FFT for SBR QMF filters
//   44  **************************************************************************************/
//   45 
//   46 #include "sbr_aac.h"
//   47 #include "assembly_aac.h"
//   48 
//   49 #define SQRT1_2	0x5a82799a
//   50 
//   51 /* swap RE{p0} with RE{p1} and IM{P0} with IM{P1} */
//   52 #define swapcplx(p0,p1) \ 
//   53 	t = p0; t1 = *(&(p0)+1); p0 = p1; *(&(p0)+1) = *(&(p1)+1); p1 = t; *(&(p1)+1) = t1
//   54 
//   55 /* nfft = 32, hard coded since small, fixed size FFT
//   56 static const unsigned char bitrevtab32[9] = {
//   57 	0x01, 0x04, 0x03, 0x06, 0x00, 0x02, 0x05, 0x07, 0x00,
//   58 };
//   59 */
//   60 
//   61 /* twiddle table for radix 4 pass, format = Q31 */

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//   62 static const int twidTabOdd32[8*6] = {
twidTabOdd32:
        DATA
        DC32 1073741824, 0, 1073741824, 0, 1073741824, 0, 1402911301
        DC32 -410903207, 1262586814, -209476638, 1489322693, -596538995
        DC32 1518500250, -759250125, 1402911301, -410903207, 1402911301
        DC32 -992008094, 1402911301, -992008094, 1489322693, -596538995
        DC32 843633538, -1053110176, 1073741824, -1073741824, 1518500250
        DC32 -759250125, 0, -759250125, 581104888, -992008094, 1489322693
        DC32 -892783698, -843633538, -209476638, 0, -759250125, 1402911301
        DC32 -992008094, -1402911301, 410903207, -581104888, -410903207
        DC32 1262586814, -1053110176, -1489322693, 892783698

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??BitReverse32??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE BitReverse32
//   63 	0x40000000, 0x00000000, 0x40000000, 0x00000000, 0x40000000, 0x00000000, 0x539eba45, 0xe7821d59, 
//   64 	0x4b418bbe, 0xf383a3e2, 0x58c542c5, 0xdc71898d, 0x5a82799a, 0xd2bec333, 0x539eba45, 0xe7821d59, 
//   65 	0x539eba45, 0xc4df2862, 0x539eba45, 0xc4df2862, 0x58c542c5, 0xdc71898d, 0x3248d382, 0xc13ad060, 
//   66 	0x40000000, 0xc0000000, 0x5a82799a, 0xd2bec333, 0x00000000, 0xd2bec333, 0x22a2f4f8, 0xc4df2862, 
//   67 	0x58c542c5, 0xcac933ae, 0xcdb72c7e, 0xf383a3e2, 0x00000000, 0xd2bec333, 0x539eba45, 0xc4df2862, 
//   68 	0xac6145bb, 0x187de2a7, 0xdd5d0b08, 0xe7821d59, 0x4b418bbe, 0xc13ad060, 0xa73abd3b, 0x3536cc52, 
//   69 };
//   70 
//   71 /**************************************************************************************
//   72  * Function:    BitReverse32
//   73  *
//   74  * Description: Ken's fast in-place bit reverse
//   75  *
//   76  * Inputs:      buffer of 32 complex samples
//   77  *
//   78  * Outputs:     bit-reversed samples in same buffer
//   79  *
//   80  * Return:      none
//   81 **************************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function BitReverse32
        ARM
//   82 static void BitReverse32(int *inout)
//   83 {
//   84 	int t, t1;
//   85 
//   86 	swapcplx(inout[2],  inout[32]);
BitReverse32:
        LDR      R3,[R0, #+128]
        LDR      R1,[R0, #+8]
        LDR      R2,[R0, #+12]
        STR      R3,[R0, #+8]
        LDR      R3,[R0, #+132]
        STR      R3,[R0, #+12]
        STR      R1,[R0, #+128]
        STR      R2,[R0, #+132]
//   87 	swapcplx(inout[4],  inout[16]);
        LDR      R3,[R0, #+64]
        LDR      R1,[R0, #+16]
        LDR      R2,[R0, #+20]
        STR      R3,[R0, #+16]
        LDR      R3,[R0, #+68]
        STR      R3,[R0, #+20]
        STR      R1,[R0, #+64]
        STR      R2,[R0, #+68]
//   88 	swapcplx(inout[6],  inout[48]);
        LDR      R3,[R0, #+192]
        LDR      R1,[R0, #+24]
        LDR      R2,[R0, #+28]
        STR      R3,[R0, #+24]
        LDR      R3,[R0, #+196]
        STR      R3,[R0, #+28]
        STR      R1,[R0, #+192]
        STR      R2,[R0, #+196]
//   89 	swapcplx(inout[10], inout[40]);
        LDR      R3,[R0, #+160]
        LDR      R1,[R0, #+40]
        LDR      R2,[R0, #+44]
        STR      R3,[R0, #+40]
        LDR      R3,[R0, #+164]
        STR      R3,[R0, #+44]
        STR      R1,[R0, #+160]
        STR      R2,[R0, #+164]
//   90 	swapcplx(inout[12], inout[24]);
        LDR      R3,[R0, #+96]
        LDR      R1,[R0, #+48]
        LDR      R2,[R0, #+52]
        STR      R3,[R0, #+48]
        LDR      R3,[R0, #+100]
        STR      R3,[R0, #+52]
        STR      R1,[R0, #+96]
        STR      R2,[R0, #+100]
//   91 	swapcplx(inout[14], inout[56]);
        LDR      R3,[R0, #+224]
        LDR      R1,[R0, #+56]
        LDR      R2,[R0, #+60]
        STR      R3,[R0, #+56]
        LDR      R3,[R0, #+228]
        STR      R3,[R0, #+60]
        STR      R1,[R0, #+224]
        STR      R2,[R0, #+228]
//   92 	swapcplx(inout[18], inout[36]);
        LDR      R3,[R0, #+144]
        LDR      R1,[R0, #+72]
        LDR      R2,[R0, #+76]
        STR      R3,[R0, #+72]
        LDR      R3,[R0, #+148]
        STR      R3,[R0, #+76]
        STR      R1,[R0, #+144]
        STR      R2,[R0, #+148]
//   93 	swapcplx(inout[22], inout[52]);
        LDR      R3,[R0, #+208]
        LDR      R1,[R0, #+88]
        LDR      R2,[R0, #+92]
        STR      R3,[R0, #+88]
        LDR      R3,[R0, #+212]
        STR      R3,[R0, #+92]
        STR      R1,[R0, #+208]
        STR      R2,[R0, #+212]
//   94 	swapcplx(inout[26], inout[44]);
        LDR      R3,[R0, #+176]
        LDR      R1,[R0, #+104]
        LDR      R2,[R0, #+108]
        STR      R3,[R0, #+104]
        LDR      R3,[R0, #+180]
        STR      R3,[R0, #+108]
        STR      R1,[R0, #+176]
        STR      R2,[R0, #+180]
//   95 	swapcplx(inout[30], inout[60]);
        LDR      R3,[R0, #+240]
        LDR      R1,[R0, #+120]
        LDR      R2,[R0, #+124]
        STR      R3,[R0, #+120]
        LDR      R3,[R0, #+244]
        STR      R3,[R0, #+124]
        STR      R1,[R0, #+240]
        STR      R2,[R0, #+244]
//   96 	swapcplx(inout[38], inout[50]);
        LDR      R3,[R0, #+200]
        LDR      R1,[R0, #+152]
        LDR      R2,[R0, #+156]
        STR      R3,[R0, #+152]
        LDR      R3,[R0, #+204]
        STR      R3,[R0, #+156]
        STR      R1,[R0, #+200]
        STR      R2,[R0, #+204]
//   97 	swapcplx(inout[46], inout[58]);
        LDR      R3,[R0, #+232]
        LDR      R1,[R0, #+184]
        LDR      R2,[R0, #+188]
        STR      R3,[R0, #+184]
        LDR      R3,[R0, #+236]
        STR      R3,[R0, #+188]
        STR      R1,[R0, #+232]
        STR      R2,[R0, #+236]
//   98 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??R8FirstPass32??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE R8FirstPass32
//   99 
//  100 /**************************************************************************************
//  101  * Function:    R8FirstPass32
//  102  *
//  103  * Description: radix-8 trivial pass for decimation-in-time FFT (log2(N) = 5)
//  104  *
//  105  * Inputs:      buffer of (bit-reversed) samples
//  106  *
//  107  * Outputs:     processed samples in same buffer
//  108  *
//  109  * Return:      none
//  110  *
//  111  * Notes:       assumes 3 guard bits, gains 1 integer bit
//  112  *              guard bits out = guard bits in - 3 (if inputs are full scale)
//  113  *                or guard bits in - 2 (if inputs bounded to +/- sqrt(2)/2)
//  114  *              see scaling comments in fft.c for base AAC
//  115  *              should compile with no stack spills on ARM (verify compiled output)
//  116  *              current instruction count (per pass): 16 LDR, 16 STR, 4 SMULL, 61 ALU
//  117  **************************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function R8FirstPass32
        ARM
//  118 static void R8FirstPass32(int *r0)
//  119 {
R8FirstPass32:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+12
        CFI CFA R13+48
//  120 	int r1, r2, r3, r4, r5, r6, r7;
//  121 	int r8, r9, r10, r11, r12, r14;
//  122 
//  123 	/* number of passes = fft size / 8 = 32 / 8 = 4 */
//  124 	r1 = (32 >> 3);
        MOV      R1,#+4
//  125 	do {
//  126 
//  127 		r2 = r0[8];
??R8FirstPass32_0:
        LDR      R4,[R0, #+32]
//  128 		r3 = r0[9];
        LDR      R5,[R0, #+36]
//  129 		r4 = r0[10];
        LDR      R9,[R0, #+40]
//  130 		r5 = r0[11];
        LDR      R8,[R0, #+44]
//  131 		r6 = r0[12];
//  132 		r7 = r0[13];
        LDR      R2,[R0, #+52]
//  133 		r8 = r0[14];
//  134 		r9 = r0[15];
        LDR      R3,[R0, #+60]
        LDR      R6,[R0, #+48]
        LDR      R7,[R0, #+56]
//  135 
//  136 		r10 = r2 + r4;
        ADD      R11,R9,R4
        STR      R11,[SP, #+0]
//  137 		r11 = r3 + r5;
        ADD      R11,R8,R5
        STR      R11,[SP, #+4]
//  138 		r12 = r6 + r8;
//  139 		r14 = r7 + r9;
        ADD      R11,R3,R2
//  140 
//  141 		r2 -= r4;
        SUB      R4,R4,R9
//  142 		r3 -= r5;
//  143 		r6 -= r8;
//  144 		r7 -= r9;
        SUB      R2,R2,R3
//  145 
//  146 		r4 = r2 - r7;
        SUB      R12,R4,R2
//  147 		r5 = r2 + r7;
        ADD      R10,R2,R4
//  148 		r8 = r3 - r6;
//  149 		r9 = r3 + r6;
//  150 
//  151 		r2 = r4 - r9;
//  152 		r3 = r4 + r9;
//  153 		r6 = r5 - r8;
//  154 		r7 = r5 + r8;
//  155 
//  156 		r2 = MULSHIFT32(SQRT1_2, r2);	/* can use r4, r5, r8, or r9 for constant and lo32 scratch reg */
        LDR      R4,??R8FirstPass32_1  ;; 0x5a82799a
        ADD      LR,R7,R6
        SUB      R5,R5,R8
        SUB      R6,R6,R7
        SUB      R9,R5,R6
        ADD      R8,R6,R5
        SUB      R2,R12,R8
        ASR      R3,R2,#+31
        MOV      R6,R2
        MOV      R7,R3
        UMULL    R2,R3,R6,R4
//  157 		r3 = MULSHIFT32(SQRT1_2, r3);
//  158 		r6 = MULSHIFT32(SQRT1_2, r6);
//  159 		r7 = MULSHIFT32(SQRT1_2, r7);
//  160 
//  161 		r4 = r10 + r12;
//  162 		r5 = r10 - r12;
//  163 		r8 = r11 + r14;
//  164 		r9 = r11 - r14;
//  165 	
//  166 		r10 = r0[0];
//  167 		r11 = r0[2];
//  168 		r12 = r0[4];
//  169 		r14 = r0[6];
//  170 
//  171 		r10 += r11;
//  172 		r12 += r14;
//  173 
//  174 		r4 >>= 1;
//  175 		r10 += r12;
//  176 		r4 += (r10 >> 1);
//  177 		r0[ 0] = r4;
//  178 		r4 -= (r10 >> 1);
//  179 		r4 = (r10 >> 1) - r4;
//  180 		r0[ 8] = r4;
//  181 
//  182 		r9 >>= 1;
//  183 		r10 -= 2*r12;
//  184 		r4 = (r10 >> 1) + r9;
//  185 		r0[ 4] = r4;
//  186 		r4 = (r10 >> 1) - r9;
//  187 		r0[12] = r4;
//  188 		r10 += r12;
//  189 
//  190 		r10 -= 2*r11;
//  191 		r12 -= 2*r14;
//  192 
//  193 		r4 =  r0[1];
//  194 		r9 =  r0[3];
//  195 		r11 = r0[5];
//  196 		r14 = r0[7];
//  197 
//  198 		r4 += r9;
//  199 		r11 += r14;
//  200 
//  201 		r8 >>= 1;
//  202 		r4 += r11;
//  203 		r8 += (r4 >> 1);
//  204 		r0[ 1] = r8;
//  205 		r8 -= (r4 >> 1);
//  206 		r8 = (r4 >> 1) - r8;
//  207 		r0[ 9] = r8;
//  208 
//  209 		r5 >>= 1;
//  210 		r4 -= 2*r11;
//  211 		r8 = (r4 >> 1) - r5;
//  212 		r0[ 5] = r8;
//  213 		r8 = (r4 >> 1) + r5;
//  214 		r0[13] = r8;
//  215 		r4 += r11;
//  216 
//  217 		r4 -= 2*r9;
//  218 		r11 -= 2*r14;
//  219 
//  220 		r9 = r10 - r11;
//  221 		r10 += r11;
//  222 		r14 = r4 + r12;
//  223 		r4 -= r12;
//  224 
//  225 		r5 = (r10 >> 1) + r7;
//  226 		r8 = (r4 >> 1) - r6;
//  227 		r0[ 2] = r5;
//  228 		r0[ 3] = r8;
//  229 
//  230 		r5 = (r9 >> 1) - r2;
//  231 		r8 = (r14 >> 1) - r3;
//  232 		r0[ 6] = r5;
//  233 		r0[ 7] = r8;
//  234 
//  235 		r5 = (r10 >> 1) - r7;
//  236 		r8 = (r4 >> 1) + r6;
//  237 		r0[10] = r5;
//  238 		r0[11] = r8;
//  239 		
//  240 		r5 = (r9 >> 1) + r2;
//  241 		r8 = (r14 >> 1) + r3;
//  242 		r0[14] = r5;
//  243 		r0[15] = r8;
//  244 
//  245 		r0 += 16;
//  246 		r1--;
        SUBS     R1,R1,#+1
        MLA      R3,R7,R4,R3
        ADD      R4,R8,R12
        MOV      R2,R3
        LDR      R3,[SP, #+4]
        STR      R2,[SP, #+8]
        LDR      R2,??R8FirstPass32_1  ;; 0x5a82799a
        ASR      R5,R4,#+31
        UMULL    R6,R7,R4,R2
        SUB      R4,R10,R9
        MLA      R7,R5,R2,R7
        ASR      R5,R4,#+31
        MOV      R12,R7
        UMULL    R6,R7,R4,R2
        ADD      R4,R9,R10
        LDR      R9,[R0, #+24]
        MLA      R7,R5,R2,R7
        ASR      R5,R4,#+31
        MOV      R8,R7
        UMULL    R6,R7,R4,R2
        ADD      R3,R11,R3
        MLA      R7,R5,R2,R7
        LDR      R5,[SP, #+4]
        LDR      R2,[SP, #+0]
        MOV      R6,R7
        LDR      R7,[R0, #+16]
        SUB      R5,R5,R11
        LDR      R11,[R0, #+8]
        ADD      R10,R9,R7
        LDR      R7,[R0, #+0]
        ADD      R4,LR,R2
        SUB      R2,R2,LR
        ADD      R7,R11,R7
        ADD      LR,R10,R7
        ASR      R7,LR,#+1
        ADD      R4,R7,R4, ASR #+1
        STR      R4,[R0, #+0]
        RSB      R4,R4,R7, LSL #+1
        STR      R4,[R0, #+32]
        ASR      R4,R5,#+1
        SUB      R5,LR,R10, LSL #+1
        ASR      R7,R5,#+1
        ADD      LR,R4,R7
        STR      LR,[R0, #+16]
        SUB      R4,R7,R4
        STR      R4,[R0, #+48]
        ADD      R4,R10,R5
        LDR      R5,[R0, #+20]
        SUB      R4,R4,R11, LSL #+1
        LDR      R11,[R0, #+28]
        SUB      R9,R10,R9, LSL #+1
        LDR      R10,[R0, #+12]
        ADD      LR,R11,R5
        LDR      R5,[R0, #+4]
        ASR      R2,R2,#+1
        ADD      R5,R10,R5
        ADD      R5,LR,R5
        ASR      R7,R5,#+1
        ADD      R3,R7,R3, ASR #+1
        STR      R3,[R0, #+4]
        RSB      R3,R3,R7, LSL #+1
        STR      R3,[R0, #+36]
        SUB      R3,R5,LR, LSL #+1
        ASR      R5,R3,#+1
        SUB      R7,R5,R2
        STR      R7,[R0, #+20]
        ADD      R2,R2,R5
        STR      R2,[R0, #+52]
        ADD      R2,LR,R3
        SUB      R5,R2,R10, LSL #+1
        SUB      R3,LR,R11, LSL #+1
        SUB      R2,R4,R3
        ADD      R4,R3,R4
        ADD      R3,R9,R5
        SUB      R5,R5,R9
        ASR      R4,R4,#+1
        ADD      R7,R6,R4
        STR      R7,[R0, #+8]
        ASR      R5,R5,#+1
        SUB      R7,R5,R8
        STR      R7,[R0, #+12]
        LDR      R7,[SP, #+8]
        ASR      R2,R2,#+1
        SUB      R7,R2,R7
        STR      R7,[R0, #+24]
        ASR      R3,R3,#+1
        SUB      R7,R3,R12
        STR      R7,[R0, #+28]
        SUB      R4,R4,R6
        STR      R4,[R0, #+40]
        ADD      R4,R8,R5
        STR      R4,[R0, #+44]
        LDR      R4,[SP, #+8]
        ADD      R2,R4,R2
        STR      R2,[R0, #+56]
        ADD      R2,R12,R3
        STR      R2,[R0, #+60]
        ADD      R0,R0,#+64
//  247 	} while (r1 != 0);
        BNE      ??R8FirstPass32_0
//  248 }
        POP      {R0-R2,R4-R11,PC}  ;; return
        DATA
??R8FirstPass32_1:
        DC32     0x5a82799a
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??R4Core32??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE R4Core32
//  249 
//  250 /**************************************************************************************
//  251  * Function:    R4Core32
//  252  *
//  253  * Description: radix-4 pass for 32-point decimation-in-time FFT
//  254  *
//  255  * Inputs:      buffer of samples
//  256  *
//  257  * Outputs:     processed samples in same buffer
//  258  *
//  259  * Return:      none
//  260  *
//  261  * Notes:       gain 2 integer bits
//  262  *              guard bits out = guard bits in - 1 (if inputs are full scale)
//  263  *              see scaling comments in fft.c for base AAC
//  264  *              uses 3-mul, 3-add butterflies instead of 4-mul, 2-add
//  265  *              should compile with no stack spills on ARM (verify compiled output)
//  266  *              current instruction count (per pass): 16 LDR, 16 STR, 4 SMULL, 61 ALU
//  267  **************************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function R4Core32
        ARM
//  268 static void R4Core32(int *r0)
//  269 {
//  270 	int r2, r3, r4, r5, r6, r7;
//  271 	int r8, r9, r10, r12, r14;
//  272 	int *r1;
//  273 
//  274 	r1 = (int *)twidTabOdd32;
R4Core32:
        LDR      R1,??R4Core32_0  ;; twidTabOdd32
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
//  275 	r10 = 8;
        MOV      R11,#+8
//  276 	do {
//  277 		/* can use r14 for lo32 scratch register in all MULSHIFT32 */
//  278 		r2 = r1[0];
??R4Core32_1:
        LDR      R4,[R1], #+4
//  279 		r3 = r1[1];
        LDR      R5,[R1], #+4
//  280 		r4 = r0[16];
        LDR      R6,[R0, #+64]
//  281 		r5 = r0[17];
        LDR      R7,[R0, #+68]
//  282 		r12 = r4 + r5;
//  283 		r12 = MULSHIFT32(r3, r12);
//  284 		r5  = MULSHIFT32(r2, r5) + r12;
//  285 		r2 += 2*r3;
//  286 		r4  = MULSHIFT32(r2, r4) - r12;	
//  287 
//  288 		r2 = r1[2];
//  289 		r3 = r1[3];
//  290 		r6 = r0[32];
//  291 		r7 = r0[33];
//  292 		r12 = r6 + r7;
//  293 		r12 = MULSHIFT32(r3, r12);
//  294 		r7  = MULSHIFT32(r2, r7) + r12;
//  295 		r2 += 2*r3;
//  296 		r6  = MULSHIFT32(r2, r6) - r12;
//  297 		
//  298 		r2 = r1[4];
//  299 		r3 = r1[5];
//  300 		r8 = r0[48];
//  301 		r9 = r0[49];
//  302 		r12 = r8 + r9;
//  303 		r12 = MULSHIFT32(r3, r12);
//  304 		r9  = MULSHIFT32(r2, r9) + r12;
//  305 		r2 += 2*r3;
//  306 		r8  = MULSHIFT32(r2, r8) - r12;
//  307 
//  308 		r2 = r0[0];
//  309 		r3 = r0[1];
//  310 
//  311 		r12 = r6 + r8;
//  312 		r8  = r6 - r8;
//  313 		r14 = r9 - r7;
//  314 		r9  = r9 + r7;
//  315 
//  316 		r6 = (r2 >> 2) - r4;
//  317 		r7 = (r3 >> 2) - r5;
//  318 		r4 += (r2 >> 2);
//  319 		r5 += (r3 >> 2);
//  320 
//  321 		r2 = r4 + r12;
//  322 		r3 = r5 + r9;
//  323 		r0[0] = r2;
//  324 		r0[1] = r3;
//  325 		r2 = r6 - r14;
//  326 		r3 = r7 - r8;
//  327 		r0[16] = r2;
//  328 		r0[17] = r3;
//  329 		r2 = r4 - r12;
//  330 		r3 = r5 - r9;
//  331 		r0[32] = r2;
//  332 		r0[33] = r3;
//  333 		r2 = r6 + r14;
//  334 		r3 = r7 + r8;
//  335 		r0[48] = r2;
//  336 		r0[49] = r3;
//  337 
//  338 		r0 += 2;
//  339 		r1 += 6;
//  340 		r10--;
        SUBS     R11,R11,#+1
        ADD      R8,R7,R6
        SMULL    R2,R3,R5,R8
        MOV      R8,R3
        SMULL    R2,R3,R4,R7
        LDR      R7,[R0, #+132]
        ADD      LR,R8,R3
        ADD      R4,R4,R5, LSL #+1
        SMULL    R2,R3,R4,R6
        LDR      R4,[R1], #+4
        LDR      R5,[R1], #+4
        LDR      R6,[R0, #+128]
        SUB      R10,R3,R8
        ADD      R8,R7,R6
        SMULL    R2,R3,R5,R8
        MOV      R8,R3
        SMULL    R2,R3,R4,R7
        ADD      R4,R4,R5, LSL #+1
        ADD      R7,R8,R3
        SMULL    R2,R3,R4,R6
        LDR      R4,[R1], #+4
        LDR      R5,[R1], #+4
        LDR      R6,[R0, #+192]
        SUB      R12,R3,R8
        LDR      R8,[R0, #+196]
        ADD      R9,R8,R6
        SMULL    R2,R3,R5,R9
        MOV      R9,R3
        SMULL    R2,R3,R4,R8
        ADD      R4,R4,R5, LSL #+1
        ADD      R8,R9,R3
        SMULL    R2,R3,R4,R6
        LDR      R2,[R0, #+4]
        SUB      R4,R3,R9
        LDR      R9,[R0, #+0]
        ADD      R3,R4,R12
        SUB      R4,R12,R4
        SUB      R5,R8,R7
        ADD      R6,R7,R8
        ASR      R8,R9,#+2
        SUB      R7,R8,R10
        ASR      R9,R2,#+2
        SUB      R2,R9,LR
        ADD      R8,R8,R10
        ADD      R9,R9,LR
        ADD      R10,R3,R8
        STR      R10,[R0, #+0]
        ADD      R10,R6,R9
        STR      R10,[R0, #+4]
        SUB      R10,R7,R5
        STR      R10,[R0, #+64]
        SUB      R10,R2,R4
        STR      R10,[R0, #+68]
        SUB      R3,R8,R3
        STR      R3,[R0, #+128]
        SUB      R3,R9,R6
        STR      R3,[R0, #+132]
        ADD      R3,R5,R7
        STR      R3,[R0, #+192]
        ADD      R2,R4,R2
        STR      R2,[R0, #+196]
        ADD      R0,R0,#+8
//  341 	} while (r10 != 0);
        BNE      ??R4Core32_1
//  342 }
        POP      {R4-R11,PC}      ;; return
        DATA
??R4Core32_0:
        DC32     twidTabOdd32
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??raac_FFT32C??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE raac_FFT32C
//  343 
//  344 /**************************************************************************************
//  345  * Function:    FFT32C
//  346  *
//  347  * Description: Ken's very fast in-place radix-4 decimation-in-time FFT
//  348  *
//  349  * Inputs:      buffer of 32 complex samples (before bit-reversal)
//  350  *
//  351  * Outputs:     processed samples in same buffer
//  352  *
//  353  * Return:      none
//  354  *
//  355  * Notes:       assumes 3 guard bits in, gains 3 integer bits
//  356  *              guard bits out = guard bits in - 2
//  357  *              (guard bit analysis includes assumptions about steps immediately
//  358  *               before and after, i.e. PreMul and PostMul for DCT)
//  359  **************************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function raac_FFT32C
        ARM
//  360 void FFT32C(int *x)
//  361 {
raac_FFT32C:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  362 	/* decimation in time */
//  363 	BitReverse32(x);
        BL       BitReverse32
//  364 
//  365 	/* 32-point complex FFT */
//  366 	R8FirstPass32(x);	/* gain 1 int bit,  lose 2 GB (making assumptions about input) */
        MOV      R0,R4
        BL       R8FirstPass32
//  367 	R4Core32(x);		/* gain 2 int bits, lose 0 GB (making assumptions about input) */
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        B        R4Core32         ;; tailcall
        CFI EndBlock cfiBlock7
//  368 }

        END
// 
// 1 252 bytes in segment CODE
//   192 bytes in segment DATA_C
// 
// 1 236 bytes of CODE  memory (+ 16 bytes shared)
//   192 bytes of CONST memory
//
//Errors: none
//Warnings: none
