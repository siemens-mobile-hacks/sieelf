//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   14/Feb/2012  15:39:24 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACD /
//                       EC\AAC_FILE (24).c                                  /
//    Command line    =  "D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AAC /
//                       DEC\AAC_FILE (24).c" -D NDEBUG -lC                  /
//                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Playe /
//                       r\Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Pla /
//                       yer\Player\Release\Obj\ -s9 --cpu_mode arm          /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "D:\Program Files\IAR\Embedded Workbench 4.0        /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude      /
//                       swilib.h -I "D:\Program Files\IAR\Embedded          /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=16                               /
//    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\AAC_FILE (24).s79                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME `AAC_FILE (24)`

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??Get32BitVal??rA
        MULTWEAK ??raac_PNS??rT
        FUNCTION ScaleNoiseVector,0203H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC raac_PNS
        FUNCTION raac_PNS,0203H
        LOCFRAME CSTACK, 84, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
Get32BitVal         SYMBOL "Get32BitVal"
??Get32BitVal??rA   SYMBOL "??rA", Get32BitVal
raac_PNS            SYMBOL "raac_PNS"
??raac_PNS??rT      SYMBOL "??rT", raac_PNS

        EXTERN Get32BitVal
        FUNCTION Get32BitVal,0202H
        EXTERN raac_sfBandTabLong
        EXTERN raac_sfBandTabLongOffset
        EXTERN raac_sfBandTabShort
        EXTERN raac_sfBandTabShortOffset

// D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDEC\AAC_FILE (24).c
//    1 /* ***** BEGIN LICENSE BLOCK *****  
//    2  * Source last modified: $Id: pns.c,v 1.2 2005/03/10 17:01:56 jrecker Exp $ 
//    3  *   
//    4  * Portions Copyright (c) 1995-2005 RealNetworks, Inc. All Rights Reserved.  
//    5  *       
//    6  * The contents of this file, and the files included with this file, 
//    7  * are subject to the current version of the RealNetworks Public 
//    8  * Source License (the "RPSL") available at 
//    9  * http://www.helixcommunity.org/content/rpsl unless you have licensed 
//   10  * the file under the current version of the RealNetworks Community 
//   11  * Source License (the "RCSL") available at 
//   12  * http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
//   13  * will apply. You may also obtain the license terms directly from 
//   14  * RealNetworks.  You may not use this file except in compliance with 
//   15  * the RPSL or, if you have a valid RCSL with RealNetworks applicable 
//   16  * to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
//   17  * the rights, obligations and limitations governing use of the 
//   18  * contents of the file. 
//   19  *   
//   20  * This file is part of the Helix DNA Technology. RealNetworks is the 
//   21  * developer of the Original Code and owns the copyrights in the 
//   22  * portions it created. 
//   23  *   
//   24  * This file, and the files included with this file, is distributed 
//   25  * and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY 
//   26  * KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS 
//   27  * ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES 
//   28  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET 
//   29  * ENJOYMENT OR NON-INFRINGEMENT. 
//   30  *  
//   31  * Technology Compatibility Kit Test Suite(s) Location:  
//   32  *    http://www.helixcommunity.org/content/tck  
//   33  *  
//   34  * Contributor(s):  
//   35  *   
//   36  * ***** END LICENSE BLOCK ***** */  
//   37 
//   38 /**************************************************************************************
//   39  * Fixed-point HE-AAC decoder
//   40  * Jon Recker (jrecker@real.com)
//   41  * February 2005
//   42  *
//   43  * pns.c - perceptual noise substitution
//   44  **************************************************************************************/
//   45 
//   46 #include "coder_aac.h"
//   47 #include "assembly_aac.h"
//   48 extern unsigned int Get32BitVal(unsigned int *last);
//   49 /**************************************************************************************
//   50  * Function:    Get32BitVal
//   51  *
//   52  * Description: generate 32-bit unsigned random number
//   53  *
//   54  * Inputs:      last number calculated (seed, first time through)
//   55  *
//   56  * Outputs:     new number, saved in *last
//   57  *
//   58  * Return:      32-bit number, uniformly distributed between [0, 2^32)
//   59  *
//   60  * Notes:       uses simple linear congruential generator
//   61  **************************************************************************************/
//   62 
//   63 
//   64 /* pow(2, i/4.0) for i = [0,1,2,3], format = Q30 */

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//   65 static const int pow14[4] = { 
pow14:
        DATA
        DC32 1073741824, 1276901417, 1518500250, 1805811301

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??ScaleNoiseVector??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ScaleNoiseVector
//   66 	0x40000000, 0x4c1bf829, 0x5a82799a, 0x6ba27e65
//   67 };
//   68 
//   69 #define NUM_ITER_INVSQRT	4
//   70 
//   71 #define X0_COEF_2	0xc0000000	/* Q29: -2.0 */
//   72 #define X0_OFF_2	0x60000000	/* Q29:  3.0 */
//   73 #define Q26_3		0x0c000000	/* Q26:  3.0 */
//   74 
//   75 
//   76 
//   77 /**************************************************************************************
//   78  * Function:    InvRootR
//   79  *
//   80  * Description: use Newton's method to solve for x = 1/sqrt(r)
//   81  *
//   82  * Inputs:      r in Q30 format, range = [0.25, 1] (normalize inputs to this range)
//   83  *
//   84  * Outputs:     none
//   85  *
//   86  * Return:      x = Q29, range = (1, 2)
//   87  *
//   88  * Notes:       guaranteed to converge and not overflow for any r in this range
//   89  *              
//   90  *              xn+1  = xn - f(xn)/f'(xn)
//   91  *              f(x)  = 1/sqrt(r) - x = 0 (find root)
//   92  *                    = 1/x^2 - r
//   93  *              f'(x) = -2/x^3
//   94  *
//   95  *              so xn+1 = xn/2 * (3 - r*xn^2)
//   96  *
//   97  *              NUM_ITER_INVSQRT = 3, maxDiff = 1.3747e-02
//   98  *              NUM_ITER_INVSQRT = 4, maxDiff = 3.9832e-04
//   99  **************************************************************************************/
//  100 static int InvRootR(int r)
//  101 {
//  102 	int i, xn, t;
//  103 
//  104 	/* use linear equation for initial guess
//  105 	 * x0 = -2*r + 3 (so x0 always >= correct answer in range [0.25, 1))
//  106 	 * xn = Q29 (at every step)
//  107 	 */
//  108 	xn = (MULSHIFT32(r, X0_COEF_2) << 2) + X0_OFF_2;
//  109 
//  110 	for (i = 0; i < NUM_ITER_INVSQRT; i++) {
//  111 		t = MULSHIFT32(xn, xn);					/* Q26 = Q29*Q29 */
//  112 		t = Q26_3 - (MULSHIFT32(r, t) << 2);	/* Q26 = Q26 - (Q31*Q26 << 1) */
//  113 		xn = MULSHIFT32(xn, t) << (6 - 1);		/* Q29 = (Q29*Q26 << 6), and -1 for division by 2 */
//  114 	}
//  115 
//  116 	/* clip to range (1.0, 2.0) 
//  117 	 * (because of rounding, this can converge to xn slightly > 2.0 when r is near 0.25)
//  118 	 */
//  119 	if (xn >> 30)
//  120 		xn = (1 << 30) - 1;
//  121 
//  122 	return xn;
//  123 }
//  124 
//  125 
//  126 
//  127 /**************************************************************************************
//  128  * Function:    ScaleNoiseVector
//  129  *
//  130  * Description: apply scaling to vector of noise coefficients for one scalefactor band
//  131  *
//  132  * Inputs:      unscaled coefficients
//  133  *              number of coefficients in vector (one scalefactor band of coefs)
//  134  *              scalefactor for this band (i.e. noise energy)
//  135  *
//  136  * Outputs:     nVals coefficients in Q(FBITS_OUT_DQ_OFF)
//  137  *
//  138  * Return:      guard bit mask (OR of abs value of all noise coefs)
//  139  **************************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ScaleNoiseVector
        ARM
//  140 static int ScaleNoiseVector(int *coef, int nVals, int sf)
//  141 {
ScaleNoiseVector:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+4
        CFI CFA R13+40
        MOV      R10,R0
        MOV      R9,R1
//  142 	int i, c, spec, energy, sq, scalef, scalei, invSqrtEnergy, z, gbMask;
//  143 	
//  144 	energy = 0;
        MOV      R0,#+0
//  145 	for (i = 0; i < nVals; i++) {
        MOV      R12,#+0
        CMP      R9,#+1
        BGE      ??ScaleNoiseVector_0
        MOV      R0,#+0
        POP      {R1,R4-R11,PC}
//  146 		spec = coef[i];
??ScaleNoiseVector_1:
        LDR      R1,[R10, +R12, LSL #+2]
//  147 
//  148 		/* max nVals = max SFB width = 96, so energy can gain < 2^7 bits in accumulation */
//  149 		sq = (spec * spec) >> 8;		/* spec*spec range = (-2^30, 2^30) */
//  150 		energy += sq;
//  151 	}
        ADD      R12,R12,#+1
        MUL      R3,R1,R1
        ADD      R0,R0,R3, ASR #+8
??ScaleNoiseVector_0:
        CMP      R12,R9
        BLT      ??ScaleNoiseVector_1
//  152 
//  153 	/* unless nVals == 1 (or the number generator is broken...), this should not happen */
//  154 	if (energy == 0)
        CMP      R0,#+0
//  155 		return 0;	/* coef[i] must = 0 for i = [0, nVals-1], so gbMask = 0 */
        MOVEQ    R0,#+0
        POPEQ    {R1,R4-R11,PC}
//  156 
//  157 	/* pow(2, sf/4) * pow(2, FBITS_OUT_DQ_OFF) */
//  158 	scalef = pow14[sf & 0x3];
        LDR      R4,??ScaleNoiseVector_2  ;; pow14
        AND      R3,R2,#0x3
        LDR      R3,[R4, +R3, LSL #+2]
//  159 	scalei = (sf >> 2) + FBITS_OUT_DQ_OFF;
        MOV      R1,#+5
        STR      R3,[SP, #+0]
        ADD      LR,R1,R2, ASR #+2
//  160 
//  161 	/* energy has implied factor of 2^-8 since we shifted the accumulator 
//  162 	 * normalize energy to range [0.25, 1.0), calculate 1/sqrt(1), and denormalize
//  163 	 *   i.e. divide input by 2^(30-z) and convert to Q30
//  164 	 *        output of 1/sqrt(i) now has extra factor of 2^((30-z)/2)
//  165 	 *        for energy > 0, z is an even number between 0 and 28
//  166 	 * final scaling of invSqrtEnergy:
//  167 	 *  2^(15 - z/2) to compensate for implicit 2^(30-z) factor in input
//  168 	 *  +4 to compensate for implicit 2^-8 factor in input
//  169 	 */
//  170 	z = CLZ(energy) - 2;					/* energy has at least 2 leading zeros (see acc loop) */
        MOV      R1,R0
        MOV      R2,#+1
        LSRS     R3,R1,#+16
        MOVEQ    R2,#+17
        LSLEQ    R1,R1,#+16
        LSRS     R3,R1,#+24
        ADDEQ    R2,R2,#+8
        LSLEQ    R1,R1,#+8
        LSRS     R3,R1,#+28
        ADDEQ    R2,R2,#+4
        LSLEQ    R1,R1,#+4
        LSRS     R3,R1,#+30
        ADDEQ    R2,R2,#+2
        LSLEQ    R1,R1,#+2
        SUB      R1,R2,R1, LSR #+31
        SUB      R1,R1,#+2
//  171 	z &= 0xfffffffe;						/* force even */
        BIC      R8,R1,#0x1
//  172 	invSqrtEnergy = InvRootR(energy << z);	/* energy << z must be in range [0x10000000, 0x40000000] */
        LSL      R2,R0,R8
        ASR      R3,R2,#+31
        MOV      R0,R2
        MOV      R1,R3
        LSL      R1,R1,#+30
        ORR      R1,R1,R0, LSR #+2
        LSL      R0,R0,#+30
        RSBS     R0,R0,#+0
        RSC      R1,R1,#+0
        MOV      R0,R1
        MOV      R1,#+1610612736
        ADD      R4,R1,R0, LSL #+2
        MOV      R12,#+0
        MOV      R11,#+201326592
??ScaleNoiseVector_3:
        ASR      R5,R4,#+31
        UMULL    R0,R1,R4,R4
        ADD      R12,R12,#+1
        MLA      R1,R4,R5,R1
        CMP      R12,#+4
        MLA      R1,R5,R4,R1
        MOV      R6,R1
        ASR      R7,R1,#+31
        UMULL    R0,R1,R2,R6
        MLA      R1,R2,R7,R1
        MLA      R1,R3,R6,R1
        SUB      R0,R11,R1, LSL #+2
        ASR      R1,R0,#+31
        UMULL    R6,R7,R4,R0
        MLA      R7,R4,R1,R7
        MLA      R7,R5,R0,R7
        LSL      R4,R7,#+5
        BLT      ??ScaleNoiseVector_3
        ASRS     R0,R4,#+30
        MVNNE    R4,#-1073741824
//  173 	scalei -= (15 - z/2 + 4);				/* nInt = 1/sqrt(energy) in Q29 */
        ADD      R0,R8,R8, LSR #+31
        ASR      R0,R0,#+1
        SUB      R0,R0,#+19
        ADD      R0,R0,LR
//  174 
//  175 	/* normalize for final scaling */
//  176 	z = CLZ(invSqrtEnergy) - 1;
        MOVS     R1,R4
        MOVEQ    R1,#+32
        BEQ      ??ScaleNoiseVector_4
        MOV      R2,#+1
        LSRS     R3,R1,#+16
        MOVEQ    R2,#+17
        LSLEQ    R1,R1,#+16
        LSRS     R3,R1,#+24
        ADDEQ    R2,R2,#+8
        LSLEQ    R1,R1,#+8
        LSRS     R3,R1,#+28
        ADDEQ    R2,R2,#+4
        LSLEQ    R1,R1,#+4
        LSRS     R3,R1,#+30
        ADDEQ    R2,R2,#+2
        LSLEQ    R1,R1,#+2
        SUB      R1,R2,R1, LSR #+31
??ScaleNoiseVector_4:
        SUB      R1,R1,#+1
//  177 	invSqrtEnergy <<= z;
//  178 	scalei -= (z - 3 - 2);	/* -2 for scalef, z-3 for invSqrtEnergy */
        SUB      R0,R0,R1
        ADD      R8,R0,#+5
//  179 	scalef = MULSHIFT32(scalef, invSqrtEnergy);	/* scalef (input) = Q30, invSqrtEnergy = Q29 * 2^z */
        LDR      R0,[SP, #+0]
        LSL      R1,R4,R1
        SMULL    R2,R3,R0,R1
//  180 	gbMask = 0;
//  181 
//  182 	if (scalei < 0) {
        CMP      R8,#+0
        MOV      R2,R3
        MOV      R3,#+0
        BPL      ??ScaleNoiseVector_5
//  183 		scalei = -scalei;
        RSB      R8,R8,#+0
//  184 		if (scalei > 31)
        CMP      R8,#+32
//  185 			scalei = 31;
        MOVGE    R8,#+31
//  186 		for (i = 0; i < nVals; i++) {
        MOV      R12,#+0
??ScaleNoiseVector_6:
        CMP      R12,R9
        BGE      ??ScaleNoiseVector_7
//  187 			c = MULSHIFT32(coef[i], scalef) >> scalei;
        ADD      R4,R10,R12, LSL #+2
        LDR      R6,[R4, #+0]
//  188 			gbMask |= FASTABS(c);
//  189 			coef[i] = c;
//  190 		}
        ADD      R12,R12,#+1
        SMULL    R0,R1,R6,R2
        MOV      R0,R1
        ASR      R0,R0,R8
        ASR      R1,R0,#+31
        EOR      R6,R1,R0
        SUB      R1,R6,R1
        ORR      R3,R1,R3
        STR      R0,[R4, #+0]
        B        ??ScaleNoiseVector_6
//  191 	} else {
//  192 		/* for scalei <= 16, no clipping possible (coef[i] is < 2^15 before scaling) 
//  193 		 * for scalei > 16, just saturate exponent (rare)
//  194 		 *   scalef is close to full-scale (since we normalized invSqrtEnergy)
//  195 		 * remember, we are just producing noise here
//  196 		 */
//  197 		if (scalei > 16)
??ScaleNoiseVector_5:
        CMP      R8,#+17
//  198 			scalei = 16;
        MOVGE    R8,#+16
//  199 		for (i = 0; i < nVals; i++) {
        MOV      R12,#+0
        B        ??ScaleNoiseVector_8
//  200 			c = MULSHIFT32(coef[i] << scalei, scalef);
??ScaleNoiseVector_9:
        ADD      R4,R10,R12, LSL #+2
        LDR      R0,[R4, #+0]
//  201 			coef[i] = c;
//  202 			gbMask |= FASTABS(c);
//  203 		}
        ADD      R12,R12,#+1
        LSL      R6,R0,R8
        SMULL    R0,R1,R6,R2
        MOV      R0,R1
        STR      R0,[R4, #+0]
        ASR      R1,R0,#+31
        EOR      R0,R1,R0
        SUB      R0,R0,R1
        ORR      R3,R0,R3
??ScaleNoiseVector_8:
        CMP      R12,R9
        BLT      ??ScaleNoiseVector_9
//  204 	}
//  205 
//  206 	return gbMask;
??ScaleNoiseVector_7:
        MOV      R0,R3
        POP      {R1,R4-R11,PC}   ;; return
        DATA
??ScaleNoiseVector_2:
        DC32     pow14
        CFI EndBlock cfiBlock1
//  207 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??raac_PNS??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE raac_PNS
//  208 
//  209 /**************************************************************************************
//  210  * Function:    GenerateNoiseVector
//  211  *
//  212  * Description: create vector of noise coefficients for one scalefactor band
//  213  *
//  214  * Inputs:      seed for number generator
//  215  *              number of coefficients to generate
//  216  *
//  217  * Outputs:     buffer of nVals coefficients, range = [-2^15, 2^15)
//  218  *              updated seed for number generator
//  219  *
//  220  * Return:      none
//  221  **************************************************************************************/
//  222 static void GenerateNoiseVector(int *coef, int *last, int nVals)
//  223 {
//  224 	int i;
//  225 	
//  226 	for (i = 0; i < nVals; i++)
//  227 		coef[i] = ((signed int)Get32BitVal((unsigned int *)last)) >> 16;
//  228 }
//  229 
//  230 /**************************************************************************************
//  231  * Function:    CopyNoiseVector
//  232  *
//  233  * Description: copy vector of noise coefficients for one scalefactor band from L to R
//  234  *
//  235  * Inputs:      buffer of left coefficients
//  236  *              number of coefficients to copy
//  237  *
//  238  * Outputs:     buffer of right coefficients
//  239  *
//  240  * Return:      none
//  241  **************************************************************************************/
//  242 static void CopyNoiseVector(int *coefL, int *coefR, int nVals)
//  243 {
//  244 	int i;
//  245 
//  246 	for (i = 0; i < nVals; i++)
//  247 		coefR[i] = coefL[i];
//  248 }
//  249 
//  250 /**************************************************************************************
//  251  * Function:    PNS
//  252  *
//  253  * Description: apply perceptual noise substitution, if enabled (MPEG-4 only)
//  254  *
//  255  * Inputs:      valid AACDecInfo struct
//  256  *              index of current channel
//  257  *
//  258  * Outputs:     shaped noise in scalefactor bands where PNS is active
//  259  *              updated minimum guard bit count for this channel
//  260  *
//  261  * Return:      0 if successful, -1 if error
//  262  **************************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function raac_PNS
        ARM
//  263 int PNS(AACDecInfo *aacDecInfo, int ch)
//  264 {
raac_PNS:
        PUSH     {R1,R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+40
        SUB      SP,SP,#+44
        CFI CFA R13+84
//  265 	int gp, sfb, win, width, nSamps, gb, gbMask;
//  266 	int *coef;
//  267 	const short *sfbTab;
//  268 	unsigned char *sfbCodeBook;
//  269 	short *scaleFactors;
//  270 	int msMaskOffset, checkCorr, genNew;
//  271 	unsigned char msMask;
//  272 	unsigned char *msMaskPtr;
//  273 	PSInfoBase *psi;
//  274 	ICSInfo *icsInfo;
//  275 	
//  276 	/* validate pointers */
//  277 	if (!aacDecInfo || !aacDecInfo->psInfoBase)
        CMP      R0,#+0
        LDRNE    R4,[R0, #+0]
        CMPNE    R4,#+0
//  278 		return -1;
        MVNEQ    R0,#+0
        ADDEQ    SP,SP,#+48
        POPEQ    {R4-R11,PC}
//  279 	psi = (PSInfoBase *)(aacDecInfo->psInfoBase);
//  280 	icsInfo = (ch == 1 && psi->commonWin == 1) ? &(psi->icsInfo[0]) : &(psi->icsInfo[ch]);
        LDR      R2,[SP, #+44]
        MOV      R1,#+124
        CMP      R2,#+1
        LDREQ    R2,[R4, #+2288]
        ORR      R1,R1,#0x800
        CMPEQ    R2,#+1
        ADDEQ    R5,R1,R4
        BEQ      ??raac_PNS_0
        LDR      R2,[SP, #+44]
        MOV      R3,#+58
        MLA      R2,R3,R2,R4
        ADD      R5,R1,R2
//  281 	
//  282 	if (!psi->pnsUsed[ch])
??raac_PNS_0:
        LDR      R3,[SP, #+44]
        ADD      R2,R1,#+860
        ADD      R3,R4,R3, LSL #+2
        ADD      R2,R2,R3
        STR      R2,[SP, #+24]
        LDR      R1,[R2, #+0]
        CMP      R1,#+0
        BNE      ??raac_PNS_1
//  283 		return 0;
??raac_PNS_2:
        B        ??raac_PNS_3
//  284 	
//  285 	if (icsInfo->winSequence == 2) {
??raac_PNS_1:
        LDRB     R1,[R5, #+1]
        LDR      R2,[R4, #+2168]
        CMP      R1,#+2
        BNE      ??raac_PNS_4
//  286 		sfbTab = sfBandTabShort + sfBandTabShortOffset[psi->sampRateIdx];
        LDR      R3,??raac_PNS_5  ;; raac_sfBandTabShortOffset
        LDR      R2,[R3, +R2, LSL #+2]
        LDR      R3,??raac_PNS_5+0x4  ;; raac_sfBandTabShort
        ADD      R2,R3,R2, LSL #+1
        STR      R2,[SP, #+4]
//  287 		nSamps = NSAMPS_SHORT;
        MOV      R2,#+128
        B        ??raac_PNS_6
//  288 	} else {
//  289 		sfbTab = sfBandTabLong + sfBandTabLongOffset[psi->sampRateIdx];
??raac_PNS_4:
        LDR      R3,??raac_PNS_5+0x8  ;; raac_sfBandTabLongOffset
        LDR      R2,[R3, +R2, LSL #+2]
        LDR      R3,??raac_PNS_5+0xC  ;; raac_sfBandTabLong
        ADD      R2,R3,R2, LSL #+1
        STR      R2,[SP, #+4]
//  290 		nSamps = NSAMPS_LONG;
        MOV      R2,#+1024
//  291 	}
//  292 	coef = psi->coef[ch];
//  293 	sfbCodeBook = psi->sfbCodeBook[ch];
??raac_PNS_6:
        LDR      R3,[SP, #+44]
        STR      R2,[SP, #+28]
        LDR      R2,[SP, #+44]
        MOV      R7,#+120
        MLA      R3,R7,R3,R4
        MOV      R1,#+72
        ORR      R1,R1,#0x1000
        ADD      R2,R4,R2, LSL #+12
        ADD      R6,R1,R2
        MOV      R2,#+212
        ORR      R2,R2,#0xA00
        ADD      R2,R2,R3
        STR      R2,[SP, #+8]
//  294 	scaleFactors = psi->scaleFactors[ch];
//  295 	checkCorr = (aacDecInfo->currBlockID == AAC_ID_CPE && psi->commonWin == 1 ? 1 : 0);
        LDR      R0,[R0, #+40]
        CMP      R0,#+1
        LDREQ    R0,[R4, #+2288]
        CMPEQ    R0,#+1
        MOVEQ    R1,#+1
        MOVNE    R1,#+0
        STR      R1,[SP, #+12]
//  296 	
//  297 	gbMask = 0;
        MOV      R1,#+0
        STR      R1,[SP, #+16]
//  298 	for (gp = 0; gp < icsInfo->numWinGroup; gp++) {
        STR      R1,[SP, #+0]
        LDRB     R0,[R5, #+49]
        CMP      R0,#+0
        BNE      ??raac_PNS_7
//  299 		for (win = 0; win < icsInfo->winGroupLen[gp]; win++) {
//  300 			msMaskPtr = psi->msMaskBits + ((gp*icsInfo->maxSFB) >> 3);
//  301 			msMaskOffset = ((gp*icsInfo->maxSFB) & 0x07);
//  302 			msMask = (*msMaskPtr++) >> msMaskOffset;
//  303 			
//  304 			for (sfb = 0; sfb < icsInfo->maxSFB; sfb++) {
//  305 				width = sfbTab[sfb+1] - sfbTab[sfb];
//  306 				if (sfbCodeBook[sfb] == 13) {
//  307 					if (ch == 0) {
//  308 						/* generate new vector, copy into ch 1 if it's possible that the channels will be correlated 
//  309 						 * if ch 1 has PNS enabled for this SFB but it's uncorrelated (i.e. ms_used == 0),
//  310 						 *    the copied values will be overwritten when we process ch 1
//  311 						 */
//  312 						GenerateNoiseVector(coef, &psi->pnsLastVal, width);
//  313 						if (checkCorr && psi->sfbCodeBook[1][gp*icsInfo->maxSFB + sfb] == 13)
//  314 							CopyNoiseVector(coef, psi->coef[1] + (coef - psi->coef[0]), width);
//  315 					} else {
//  316 						/* generate new vector if no correlation between channels */
//  317 						genNew = 1;
//  318 						if (checkCorr && psi->sfbCodeBook[0][gp*icsInfo->maxSFB + sfb] == 13) {
//  319 							if ( (psi->msMaskPresent == 1 && (msMask & 0x01)) || psi->msMaskPresent == 2 )
//  320 								genNew = 0;
//  321 						}
//  322 						if (genNew)
//  323 							GenerateNoiseVector(coef, &psi->pnsLastVal, width);
//  324 					}
//  325 					gbMask |= ScaleNoiseVector(coef, width, psi->scaleFactors[ch][gp*icsInfo->maxSFB + sfb]);
//  326 				}
//  327 				coef += width;
//  328 				
//  329 				/* get next mask bit (should be branchless on ARM) */
//  330 				msMask >>= 1;
//  331 				if (++msMaskOffset == 8) {
//  332 					msMask = *msMaskPtr++;
//  333 					msMaskOffset = 0;
//  334 				}
//  335 			}
//  336 			coef += (nSamps - sfbTab[icsInfo->maxSFB]);
//  337 		}
//  338 		sfbCodeBook += icsInfo->maxSFB;
//  339 		scaleFactors += icsInfo->maxSFB;
//  340 	}
//  341 	
//  342 	/* update guard bit count if necessary */
//  343 	gb = CLZ(gbMask) - 1;
??raac_PNS_8:
        LDR      R0,[SP, #+16]
        CMP      R0,#+0
        BNE      ??raac_PNS_9
        MOV      R0,#+32
        B        ??raac_PNS_10
??raac_PNS_11:
        LDRB     R1,[R5, #+3]
        LDR      R2,[SP, #+8]
        ADD      R1,R1,R2
        STR      R1,[SP, #+8]
        LDR      R1,[SP, #+0]
        ADD      R1,R1,#+1
        STR      R1,[SP, #+0]
??raac_PNS_7:
        LDRB     R1,[R5, #+49]
        LDR      R0,[SP, #+0]
        CMP      R0,R1
        BGE      ??raac_PNS_8
        MOV      R1,#+0
        STR      R1,[SP, #+20]
        ADD      R0,R0,R5
        LDRB     R0,[R0, #+50]
        CMP      R0,#+0
        BNE      ??raac_PNS_12
        B        ??raac_PNS_11
??raac_PNS_13:
        LDRB     R1,[R5, #+3]
        LDR      R2,[SP, #+4]
        LDR      R0,[SP, #+28]
        ADD      R1,R2,R1, LSL #+1
        LDRSH    R1,[R1, #+0]
        SUB      R0,R0,R1
        LDR      R1,[SP, #+20]
        ADD      R6,R6,R0, LSL #+2
        ADD      R1,R1,#+1
        STR      R1,[SP, #+20]
??raac_PNS_12:
        LDR      R1,[SP, #+0]
        LDR      R0,[SP, #+20]
        ADD      R1,R1,R5
        LDRB     R1,[R1, #+50]
        CMP      R0,R1
        BGE      ??raac_PNS_11
        LDRB     R3,[R5, #+3]
        LDR      R2,[SP, #+0]
        MOV      R1,#+200
        MUL      R2,R3,R2
        ORR      R1,R1,#0xB00
        ADD      R2,R4,R2, ASR #+3
        ADD      R1,R1,R2
        STR      R1,[SP, #+32]
        LDRB     R1,[R5, #+3]
        LDR      R0,[SP, #+0]
        MOV      R9,#+0
        MUL      R0,R1,R0
        LDR      R1,[SP, #+32]
        AND      R7,R0,#0x7
        LDRB     R2,[R1], #+1
        STR      R1,[SP, #+32]
        LDRB     R0,[R5, #+3]
        ASR      R8,R2,R7
        CMP      R0,#+0
        BNE      ??raac_PNS_14
        B        ??raac_PNS_13
??raac_PNS_15:
        LDR      R0,[SP, #+40]
        _BLF     Get32BitVal,??Get32BitVal??rA
        ASR      R0,R0,#+16
        STR      R0,[R6, +R11, LSL #+2]
        ADD      R11,R11,#+1
??raac_PNS_16:
        CMP      R11,R10
        BLT      ??raac_PNS_15
??raac_PNS_17:
        LDRB     R2,[R5, #+3]
        LDR      R1,[SP, #+0]
        LDR      R11,[SP, #+16]
        MLA      R1,R2,R1,R9
        LDR      R2,[SP, #+44]
        MOV      R3,#+240
        MLA      R2,R3,R2,R4
        MOV      R0,#+244
        ORR      R0,R0,#0x800
        ADD      R1,R2,R1, LSL #+1
        LDRSH    R2,[R0, +R1]
        MOV      R1,R10
        MOV      R0,R6
        BL       ScaleNoiseVector
        ORR      R0,R0,R11
        STR      R0,[SP, #+16]
??raac_PNS_18:
        ADD      R6,R6,R10, LSL #+2
        LSL      R8,R8,#+24
        LSR      R8,R8,#+25
        ADD      R7,R7,#+1
        CMP      R7,#+8
        BNE      ??raac_PNS_19
        LDR      R1,[SP, #+32]
        MOV      R7,#+0
        LDRB     R8,[R1], #+1
        STR      R1,[SP, #+32]
??raac_PNS_19:
        ADD      R9,R9,#+1
??raac_PNS_14:
        LDRB     R0,[R5, #+3]
        CMP      R9,R0
        BGE      ??raac_PNS_13
        LDR      R0,[SP, #+4]
        ADD      R0,R0,R9, LSL #+1
        LDRSH    R1,[R0, #+2]
        LDRSH    R0,[R0, #+0]
        SUB      R10,R1,R0
        LDR      R0,[SP, #+8]
        LDRB     R0,[R9, +R0]
        CMP      R0,#+13
        BNE      ??raac_PNS_18
        LDR      R0,[SP, #+44]
        CMP      R0,#+0
        BNE      ??raac_PNS_20
        ADD      R1,R4,#+3040
        STR      R1,[SP, #+36]
        MOV      R11,#+0
        CMP      R10,#+1
        BGE      ??raac_PNS_21
        B        ??raac_PNS_22
??raac_PNS_23:
        LDR      R0,[SP, #+36]
        _BLF     Get32BitVal,??Get32BitVal??rA
        ASR      R0,R0,#+16
        STR      R0,[R6, +R11, LSL #+2]
        ADD      R11,R11,#+1
??raac_PNS_21:
        CMP      R11,R10
        BLT      ??raac_PNS_23
??raac_PNS_22:
        LDR      R0,[SP, #+12]
        CMP      R0,#+0
        BEQ      ??raac_PNS_17
        LDRB     R1,[R5, #+3]
        LDR      R0,[SP, #+0]
        MLA      R0,R1,R0,R9
        ADD      R0,R0,R4
        LDRB     R0,[R0, #+2892]
        CMP      R0,#+13
        BNE      ??raac_PNS_17
        MOV      R0,#+72
        ORR      R0,R0,#0x2000
        LSR      R1,R6,#+2
        SUB      R2,R0,#+4096
        ADD      R2,R2,R4
        SUB      R1,R1,R2, LSR #+2
        ADD      R1,R4,R1, LSL #+2
        ADD      R0,R0,R1
        MOV      R1,#+0
        CMP      R10,#+1
        BLT      ??raac_PNS_17
??raac_PNS_24:
        CMP      R1,R10
        BGE      ??raac_PNS_17
        LDR      R2,[R6, +R1, LSL #+2]
        STR      R2,[R0, +R1, LSL #+2]
        ADD      R1,R1,#+1
        B        ??raac_PNS_24
??raac_PNS_20:
        LDR      R0,[SP, #+12]
        CMP      R0,#+0
        BEQ      ??raac_PNS_25
        LDRB     R1,[R5, #+3]
        LDR      R0,[SP, #+0]
        MLA      R0,R1,R0,R9
        ADD      R0,R0,R4
        LDRB     R0,[R0, #+2772]
        CMP      R0,#+13
        BNE      ??raac_PNS_25
        LDR      R0,[R4, #+3012]
        CMP      R0,#+1
        BNE      ??raac_PNS_26
        TST      R8,#0x1
        BNE      ??raac_PNS_17
??raac_PNS_26:
        CMP      R0,#+2
        BEQ      ??raac_PNS_17
??raac_PNS_25:
        ADD      R1,R4,#+3040
        STR      R1,[SP, #+40]
        MOV      R11,#+0
        CMP      R10,#+1
        BGE      ??raac_PNS_16
        B        ??raac_PNS_17
??raac_PNS_9:
        MOV      R1,#+1
        LSRS     R2,R0,#+16
        MOVEQ    R1,#+17
        LSLEQ    R0,R0,#+16
        LSRS     R2,R0,#+24
        ADDEQ    R1,R1,#+8
        LSLEQ    R0,R0,#+8
        LSRS     R2,R0,#+28
        ADDEQ    R1,R1,#+4
        LSLEQ    R0,R0,#+4
        LSRS     R2,R0,#+30
        ADDEQ    R1,R1,#+2
        LSLEQ    R0,R0,#+2
        SUB      R0,R1,R0, LSR #+31
//  344 	if (psi->gbCurrent[ch] > gb)
??raac_PNS_10:
        LDR      R1,[SP, #+24]
        SUB      R0,R0,#+1
        LDR      R1,[R1, #+1128]
        CMP      R0,R1
        BGE      ??raac_PNS_3
//  345 		psi->gbCurrent[ch] = gb;
        LDR      R1,[SP, #+24]
        STR      R0,[R1, #+1128]
??raac_PNS_3:
        MOV      R0,#+0
        ADD      SP,SP,#+48
        CFI CFA R13+36
        POP      {R4-R11,PC}
        DATA
??raac_PNS_5:
        DC32     raac_sfBandTabShortOffset
        DC32     raac_sfBandTabShort
        DC32     raac_sfBandTabLongOffset
        DC32     raac_sfBandTabLong
        CFI EndBlock cfiBlock3
//  346 	
//  347 	return 0;
//  348 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon1
        CFI NoFunction
        ARM
??Get32BitVal??rA:
        LDR      R12,??Subroutine2_0  ;; Get32BitVal
        BX       R12
        DATA
??Subroutine2_0:
        DC32     Get32BitVal
        CFI EndBlock cfiBlock4

        END
//  349 
//  350 /*
//  351 static unsigned int Get32BitVal(unsigned int *last)
//  352 {
//  353 	//unsigned int r = *last;
//  354 	/* use same coefs as MPEG reference code (classic LCG)
//  355 	 * use unsigned multiply to force reliable wraparound behavior in C (mod 2^32)
//  356 	
//  357 	//r =1013904223U+ (1664525U * r);
//  358 
//  359 	//*last =1013904223U+ (*last*1664525U);
//  360 
//  361 	return *last;
//  362 }
//  363 */
// 
// 1 688 bytes in segment CODE
//    16 bytes in segment DATA_C
// 
// 1 668 bytes of CODE  memory (+ 20 bytes shared)
//    16 bytes of CONST memory
//
//Errors: none
//Warnings: 3
