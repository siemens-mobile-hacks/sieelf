##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Feb/2012  15:39:15 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDE #
#                       C\AAC_FILE (11).c                                    #
#    Command line    =  "D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACD #
#                       EC\AAC_FILE (11).c" -D NDEBUG -lC                    #
#                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\ #
#                       Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player #
#                       \Player\Release\Obj\ -s9 --cpu_mode arm --endian     #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Program              #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude       #
#                       swilib.h -I "D:\Program Files\IAR\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=16                                #
#    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\AAC_FILE (11).lst                                #
#    Object file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\AAC_FILE (11).r79                                 #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDEC\AAC_FILE (11).c
      1          /* ***** BEGIN LICENSE BLOCK *****  
      2           * Source last modified: $Id: tns.c,v 1.1 2005/02/26 01:47:35 jrecker Exp $ 
      3           *   
      4           * Portions Copyright (c) 1995-2005 RealNetworks, Inc. All Rights Reserved.  
      5           *       
      6           * The contents of this file, and the files included with this file, 
      7           * are subject to the current version of the RealNetworks Public 
      8           * Source License (the "RPSL") available at 
      9           * http://www.helixcommunity.org/content/rpsl unless you have licensed 
     10           * the file under the current version of the RealNetworks Community 
     11           * Source License (the "RCSL") available at 
     12           * http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
     13           * will apply. You may also obtain the license terms directly from 
     14           * RealNetworks.  You may not use this file except in compliance with 
     15           * the RPSL or, if you have a valid RCSL with RealNetworks applicable 
     16           * to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
     17           * the rights, obligations and limitations governing use of the 
     18           * contents of the file. 
     19           *   
     20           * This file is part of the Helix DNA Technology. RealNetworks is the 
     21           * developer of the Original Code and owns the copyrights in the 
     22           * portions it created. 
     23           *   
     24           * This file, and the files included with this file, is distributed 
     25           * and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY 
     26           * KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS 
     27           * ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES 
     28           * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET 
     29           * ENJOYMENT OR NON-INFRINGEMENT. 
     30           *  
     31           * Technology Compatibility Kit Test Suite(s) Location:  
     32           *    http://www.helixcommunity.org/content/tck  
     33           *  
     34           * Contributor(s):  
     35           *   
     36           * ***** END LICENSE BLOCK ***** */  
     37          
     38          /**************************************************************************************
     39           * Fixed-point HE-AAC decoder
     40           * Jon Recker (jrecker@real.com)
     41           * February 2005
     42           *
     43           * tns.c - apply TNS to spectrum
     44           **************************************************************************************/
     45          
     46          #include "coder_aac.h"
     47          #include "assembly_aac.h"
     48          
     49          #define FBITS_LPC_COEFS	20
     50          
     51          /* inverse quantization tables for TNS filter coefficients, format = Q31
     52           * see bottom of file for table generation
     53           * negative (vs. spec) since we use MADD for filter kernel
     54           */

   \                                 In segment DATA_C, align 4, align-sorted
     55          static const int invQuant3[16] = {
   \                     invQuant3:
   \   00000000   00000000657F       DC32 0, -931758235, -1678970324, -2093641749, -2093641749, -1678970324
   \              76C82CF2EC9B
   \              EB8F3583EB8F
   \              35832CF2EC9B
   \   00000018   657F76C80000       DC32 -931758235, 0, 734482665, 1380375881, 1859775393, 2114858546
   \              0000E950C72B
   \              49DD4652A1EB
   \              D96E322E0E7E
   \   00000030   322E0E7EA1EB       DC32 2114858546, 1859775393, 1380375881, 734482665
   \              D96E49DD4652
   \              E950C72B    
   \   00000040   000000005426       DC32 0, -446486956, -873460290, -1262259218, -1595891361, -1859775393
   \              63E5BE0DF0CB
   \              EE73C3B45FA1
   \              E0A05F142691
   \   00000058   B3C74386AC81       DC32 -2042378317, -2135719508, 2138322861, 2065504841, 1922348530
   \              B380AD37747F
   \              491A1D7BF2B5
   \              9472        
   \   0000006C   B26D2566AAA8       DC32 1713728946, 1446750378, 1130504462, 775760571, 394599085
   \              3B560E216243
   \              BB2A3D2EAD1A
   \              8517        
     56          	0x00000000, 0xc8767f65, 0x9becf22c, 0x83358feb, 0x83358feb, 0x9becf22c, 0xc8767f65, 0x00000000,
     57          	0x2bc750e9, 0x5246dd49, 0x6ed9eba1, 0x7e0e2e32, 0x7e0e2e32, 0x6ed9eba1, 0x5246dd49, 0x2bc750e9,
     58          };
     59          
     60          static const int invQuant4[16] = {
     61          	0x00000000, 0xe5632654, 0xcbf00dbe, 0xb4c373ee, 0xa0e0a15f, 0x9126145f, 0x8643c7b3, 0x80b381ac,
     62          	0x7f7437ad, 0x7b1d1a49, 0x7294b5f2, 0x66256db2, 0x563ba8aa, 0x4362210e, 0x2e3d2abb, 0x17851aad,
     63          };
     64          
     65          /**************************************************************************************
     66           * Function:    DecodeLPCCoefs
     67           *
     68           * Description: decode LPC coefficients for TNS
     69           *
     70           * Inputs:      order of TNS filter
     71           *              resolution of coefficients (3 or 4 bits)
     72           *              coefficients unpacked from bitstream
     73           *              scratch buffer (b) of size >= order
     74           *
     75           * Outputs:     LPC coefficients in Q(FBITS_LPC_COEFS), in 'a'
     76           *
     77           * Return:      none
     78           * 
     79           * Notes:       assumes no guard bits in input transform coefficients
     80           *              a[i] = Q(FBITS_LPC_COEFS), don't store a0 = 1.0 
     81           *                (so a[0] = first delay tap, etc.) 
     82           *              max abs(a[i]) < log2(order), so for max order = 20 a[i] < 4.4 
     83           *                (up to 3 bits of gain) so a[i] has at least 31 - FBITS_LPC_COEFS - 3 
     84           *                guard bits
     85           *              to ensure no intermediate overflow in all-pole filter, set 
     86           *                FBITS_LPC_COEFS such that number of guard bits >= log2(max order)
     87           **************************************************************************************/
     88          static void DecodeLPCCoefs(int order, int res, signed char *filtCoef, int *a, int *b)
     89          {
     90          	int i, m, t;
     91          	const int *invQuantTab;
     92          
     93          	if (res == 3)			invQuantTab = invQuant3;
     94          	else if (res == 4)		invQuantTab = invQuant4;
     95          	else					return;
     96          
     97          	for (m = 0; m < order; m++) {
     98          		t = invQuantTab[filtCoef[m] & 0x0f];	/* t = Q31 */
     99          		for (i = 0; i < m; i++)
    100          			b[i] = a[i] - (MULSHIFT32(t, a[m-i-1]) << 1);
    101          		for (i = 0; i < m; i++) 
    102          			a[i] = b[i];
    103          		a[m] = t >> (31 - FBITS_LPC_COEFS);
    104          	}
    105          }
    106          
    107          /**************************************************************************************
    108           * Function:    FilterRegion
    109           *
    110           * Description: apply LPC filter to one region of coefficients
    111           *
    112           * Inputs:      number of transform coefficients in this region
    113           *              direction flag (forward = 1, backward = -1)
    114           *              order of filter
    115           *              'size' transform coefficients
    116           *              'order' LPC coefficients in Q(FBITS_LPC_COEFS)
    117           *              scratch buffer for history (must be >= order samples long)
    118           *
    119           * Outputs:     filtered transform coefficients
    120           *
    121           * Return:      guard bit mask (OR of abs value of all filtered transform coefs)
    122           * 
    123           * Notes:       assumes no guard bits in input transform coefficients
    124           *              gains 0 int bits
    125           *              history buffer does not need to be preserved between regions
    126           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    127          static int FilterRegion(int size, int dir, int order, int *audioCoef, int *a, int *hist)
    128          {
   \                     FilterRegion:
   \   00000000   F00F2DE9           PUSH     {R4-R11}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   28409DE5           LDR      R4,[SP, #+40]
   \   0000000C   2C509DE5           LDR      R5,[SP, #+44]
   \   00000010   00C0A0E1           MOV      R12,R0
   \   00000014   0270A0E1           MOV      R7,R2
    129          	int i, j, y, hi32, inc, gbMask;
    130          	U64 sum64;
    131          
    132          	/* init history to 0 every time */
    133          	for (i = 0; i < order; i++)
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   010057E3           CMP      R7,#+1
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   020000AA           BGE      ??FilterRegion_0
   \   00000028   030000EA           B        ??FilterRegion_1
    134          		hist[i] = 0;
   \                     ??FilterRegion_2:
   \   0000002C   002185E7           STR      R2,[R5, +R0, LSL #+2]
   \   00000030   010080E2           ADD      R0,R0,#+1
   \                     ??FilterRegion_0:
   \   00000034   070050E1           CMP      R0,R7
   \   00000038   FBFFFFBA           BLT      ??FilterRegion_2
    135          
    136          	gbMask = 0;
    137          	inc = (dir ? -1 : 1);
   \                     ??FilterRegion_1:
   \   0000003C   000051E3           CMP      R1,#+0
   \   00000040   0260E011           MVNNE    R6,R2
   \   00000044   0160A003           MOVEQ    R6,#+1
    138          	do {
    139          		/* sum64 = a0*y[n] = 1.0*y[n] */
    140          		y = *audioCoef;
   \                     ??FilterRegion_3:
   \   00000048   000093E5           LDR      R0,[R3, #+0]
    141          		sum64.r.hi32 = y >> (32 - FBITS_LPC_COEFS);
   \   0000004C   4086A0E1           ASR      R8,R0,#+12
   \   00000050   04808DE5           STR      R8,[SP, #+4]
    142          		sum64.r.lo32 = y << FBITS_LPC_COEFS;
   \   00000054   000AA0E1           LSL      R0,R0,#+20
   \   00000058   00008DE5           STR      R0,[SP, #+0]
    143          		 
    144          		/* sum64 += (a1*y[n-1] + a2*y[n-2] + ... + a[order-1]*y[n-(order-1)]) */
    145                  for (j = order - 1; j > 0; j--) {
   \   0000005C   018047E2           SUB      R8,R7,#+1
   \   00000060   010058E3           CMP      R8,#+1
   \   00000064   0C0000BA           BLT      ??FilterRegion_4
    146          			sum64.w64 = MADD64(sum64.w64, hist[j], a[j]);
   \                     ??FilterRegion_5:
   \   00000068   08A195E7           LDR      R10,[R5, +R8, LSL #+2]
   \   0000006C   089194E7           LDR      R9,[R4, +R8, LSL #+2]
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   030090E8           LDM      R0,{R0,R1}
   \   00000078   0DB0A0E1           MOV      R11,SP
   \   0000007C   9A09E1E0           SMLAL    R0,R1,R10,R9
   \   00000080   03008BE8           STM      R11,{R0,R1}
    147                      hist[j] = hist[j-1];
   \   00000084   040045E2           SUB      R0,R5,#+4
   \   00000088   080190E7           LDR      R0,[R0, +R8, LSL #+2]
   \   0000008C   080185E7           STR      R0,[R5, +R8, LSL #+2]
    148          		}
   \   00000090   018048E2           SUB      R8,R8,#+1
   \   00000094   010058E3           CMP      R8,#+1
   \   00000098   F2FFFFAA           BGE      ??FilterRegion_5
    149          		sum64.w64 = MADD64(sum64.w64, hist[0], a[0]);
   \                     ??FilterRegion_4:
   \   0000009C   009095E5           LDR      R9,[R5, #+0]
   \   000000A0   00A094E5           LDR      R10,[R4, #+0]
   \   000000A4   0D00A0E1           MOV      R0,SP
   \   000000A8   030090E8           LDM      R0,{R0,R1}
   \   000000AC   0D80A0E1           MOV      R8,SP
   \   000000B0   990AE1E0           SMLAL    R0,R1,R9,R10
   \   000000B4   030088E8           STM      R8,{R0,R1}
    150          		y = (sum64.r.hi32 << (32 - FBITS_LPC_COEFS)) | (sum64.r.lo32 >> FBITS_LPC_COEFS);
   \   000000B8   0100A0E1           MOV      R0,R1
   \   000000BC   00109DE5           LDR      R1,[SP, #+0]
    151          
    152          		/* clip output (rare) */
    153          		hi32 = sum64.r.hi32;
    154          		if ((hi32 >> 31) != (hi32 >> (FBITS_LPC_COEFS-1)))
   \   000000C0   C08FA0E1           ASR      R8,R0,#+31
   \   000000C4   211AA0E1           LSR      R1,R1,#+20
   \   000000C8   001681E1           ORR      R1,R1,R0, LSL #+12
   \   000000CC   C00958E1           CMP      R8,R0, ASR #+19
    155          			y = (hi32 >> 31) ^ 0x7fffffff;
   \   000000D0   8004E013           MVNNE    R0,#-2147483648
   \   000000D4   08102010           EORNE    R1,R0,R8
    156          
    157          		hist[0] = y;
   \   000000D8   001085E5           STR      R1,[R5, #+0]
    158          		*audioCoef = y;
   \   000000DC   001083E5           STR      R1,[R3, #+0]
    159          		audioCoef += inc;
   \   000000E0   063183E0           ADD      R3,R3,R6, LSL #+2
    160          		gbMask |= FASTABS(y);
   \   000000E4   C10FA0E1           ASR      R0,R1,#+31
   \   000000E8   011020E0           EOR      R1,R0,R1
   \   000000EC   000041E0           SUB      R0,R1,R0
   \   000000F0   022080E1           ORR      R2,R0,R2
    161          	} while (--size);
   \   000000F4   01C05CE2           SUBS     R12,R12,#+1
   \   000000F8   D2FFFF1A           BNE      ??FilterRegion_3
    162          
    163          	return gbMask;
   \   000000FC   0200A0E1           MOV      R0,R2
   \   00000100   F60FBDE8           POP      {R1,R2,R4-R11}
   \   00000104   1EFF2FE1           BX       LR               ;; return
    164          }
    165          
    166          /**************************************************************************************
    167           * Function:    TNSFilter
    168           *
    169           * Description: apply temporal noise shaping, if enabled
    170           *
    171           * Inputs:      valid AACDecInfo struct
    172           *              index of current channel
    173           *
    174           * Outputs:     updated transform coefficients
    175           *              updated minimum guard bit count for this channel
    176           *
    177           * Return:      0 if successful, -1 if error
    178           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    179          int TNSFilter(AACDecInfo *aacDecInfo, int ch)
    180          {
   \                     raac_TNSFilter:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   48D04DE2           SUB      SP,SP,#+72
    181          	int win, winLen, nWindows, nSFB, filt, bottom, top, order, maxOrder, dir;
    182          	int start, end, size, tnsMaxBand, numFilt, gbMask;
    183          	int *audioCoef;
    184          	unsigned char *filtLength, *filtOrder, *filtRes, *filtDir; 
    185          	signed char *filtCoef;
    186          	const unsigned char *tnsMaxBandTab;
    187          	const short *sfbTab;
    188          	ICSInfo *icsInfo;
    189          	TNSInfo *ti;
    190          	PSInfoBase *psi;
    191          
    192          	/* validate pointers */
    193          	if (!aacDecInfo || !aacDecInfo->psInfoBase)
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   00809015           LDRNE    R8,[R0, #+0]
   \   00000010   00005813           CMPNE    R8,#+0
    194          		return -1;
   \   00000014   0000E003           MVNEQ    R0,#+0
   \   00000018   4CD08D02           ADDEQ    SP,SP,#+76
   \   0000001C   F08FBD08           POPEQ    {R4-R11,PC}
    195          	psi = (PSInfoBase *)(aacDecInfo->psInfoBase);
    196          	icsInfo = (ch == 1 && psi->commonWin == 1) ? &(psi->icsInfo[0]) : &(psi->icsInfo[ch]);
   \   00000020   48209DE5           LDR      R2,[SP, #+72]
   \   00000024   7C10A0E3           MOV      R1,#+124
   \   00000028   010052E3           CMP      R2,#+1
   \   0000002C   F0289805           LDREQ    R2,[R8, #+2288]
   \   00000030   801E81E3           ORR      R1,R1,#0x800
   \   00000034   01005203           CMPEQ    R2,#+1
   \   00000038   08108100           ADDEQ    R1,R1,R8
   \   0000003C   0300000A           BEQ      ??raac_TNSFilter_0
   \   00000040   48209DE5           LDR      R2,[SP, #+72]
   \   00000044   3A30A0E3           MOV      R3,#+58
   \   00000048   938222E0           MLA      R2,R3,R2,R8
   \   0000004C   021081E0           ADD      R1,R1,R2
    197          	ti = &psi->tnsInfo[ch];
   \                     ??raac_TNSFilter_0:
   \   00000050   48409DE5           LDR      R4,[SP, #+72]
   \   00000054   6550A0E3           MOV      R5,#+101
   \   00000058   958424E0           MLA      R4,R5,R4,R8
   \   0000005C   0230A0E3           MOV      R3,#+2
   \   00000060   C03E83E3           ORR      R3,R3,#0xC00
   \   00000064   043083E0           ADD      R3,R3,R4
   \   00000068   00308DE5           STR      R3,[SP, #+0]
    198          
    199          	if (!ti->tnsDataPresent)
   \   0000006C   0020D3E5           LDRB     R2,[R3, #+0]
   \   00000070   000052E3           CMP      R2,#+0
   \   00000074   0000001A           BNE      ??raac_TNSFilter_1
    200          		return 0;
   \                     ??raac_TNSFilter_2:
   \   00000078   F40000EA           B        ??raac_TNSFilter_3
    201          
    202          	if (icsInfo->winSequence == 2) {
   \                     ??raac_TNSFilter_1:
   \   0000007C   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000080   480090E5           LDR      R0,[R0, #+72]
   \   00000084   020052E3           CMP      R2,#+2
   \   00000088   1500001A           BNE      ??raac_TNSFilter_4
    203          		nWindows = NWINDOWS_SHORT;
    204          		winLen = NSAMPS_SHORT;
    205          		nSFB = sfBandTotalShort[psi->sampRateIdx];
   \   0000008C   C8439FE5           LDR      R4,??raac_TNSFilter_5  ;; raac_sfBandTotalShort
   \   00000090   0830A0E3           MOV      R3,#+8
   \   00000094   24308DE5           STR      R3,[SP, #+36]
   \   00000098   8030A0E3           MOV      R3,#+128
   \   0000009C   28308DE5           STR      R3,[SP, #+40]
   \   000000A0   783898E5           LDR      R3,[R8, #+2168]
   \   000000A4   0430D3E7           LDRB     R3,[R3, +R4]
    206          		maxOrder = tnsMaxOrderShort[aacDecInfo->profile];
    207          		sfbTab = sfBandTabShort + sfBandTabShortOffset[psi->sampRateIdx];
   \   000000A8   B0439FE5           LDR      R4,??raac_TNSFilter_5+0x4  ;; raac_sfBandTabShortOffset
   \   000000AC   2C308DE5           STR      R3,[SP, #+44]
   \   000000B0   AC339FE5           LDR      R3,??raac_TNSFilter_5+0x8  ;; raac_tnsMaxOrderShort
   \   000000B4   0330D0E7           LDRB     R3,[R0, +R3]
   \   000000B8   0C308DE5           STR      R3,[SP, #+12]
   \   000000BC   783898E5           LDR      R3,[R8, #+2168]
   \   000000C0   033194E7           LDR      R3,[R4, +R3, LSL #+2]
   \   000000C4   9C439FE5           LDR      R4,??raac_TNSFilter_5+0xC  ;; raac_sfBandTabShort
   \   000000C8   833084E0           ADD      R3,R4,R3, LSL #+1
    208          		tnsMaxBandTab = tnsMaxBandsShort + tnsMaxBandsShortOffset[aacDecInfo->profile];
    209          		tnsMaxBand = tnsMaxBandTab[psi->sampRateIdx];
   \   000000CC   98439FE5           LDR      R4,??raac_TNSFilter_5+0x10  ;; raac_tnsMaxBandsShortOffset
   \   000000D0   10308DE5           STR      R3,[SP, #+16]
   \   000000D4   783898E5           LDR      R3,[R8, #+2168]
   \   000000D8   000194E7           LDR      R0,[R4, +R0, LSL #+2]
   \   000000DC   8C439FE5           LDR      R4,??raac_TNSFilter_5+0x14  ;; raac_tnsMaxBandsShort
   \   000000E0   140000EA           B        ??raac_TNSFilter_6
    210          	} else {
    211          		nWindows = NWINDOWS_LONG;
    212          		winLen = NSAMPS_LONG;
    213          		nSFB = sfBandTotalLong[psi->sampRateIdx];
   \                     ??raac_TNSFilter_4:
   \   000000E4   88439FE5           LDR      R4,??raac_TNSFilter_5+0x18  ;; raac_sfBandTotalLong
   \   000000E8   0130A0E3           MOV      R3,#+1
   \   000000EC   24308DE5           STR      R3,[SP, #+36]
   \   000000F0   403EA0E3           MOV      R3,#+1024
   \   000000F4   28308DE5           STR      R3,[SP, #+40]
   \   000000F8   783898E5           LDR      R3,[R8, #+2168]
   \   000000FC   0430D3E7           LDRB     R3,[R3, +R4]
    214          		maxOrder = tnsMaxOrderLong[aacDecInfo->profile];
    215          		sfbTab = sfBandTabLong + sfBandTabLongOffset[psi->sampRateIdx];
   \   00000100   70439FE5           LDR      R4,??raac_TNSFilter_5+0x1C  ;; raac_sfBandTabLongOffset
   \   00000104   2C308DE5           STR      R3,[SP, #+44]
   \   00000108   6C339FE5           LDR      R3,??raac_TNSFilter_5+0x20  ;; raac_tnsMaxOrderLong
   \   0000010C   0330D0E7           LDRB     R3,[R0, +R3]
   \   00000110   0C308DE5           STR      R3,[SP, #+12]
   \   00000114   783898E5           LDR      R3,[R8, #+2168]
   \   00000118   033194E7           LDR      R3,[R4, +R3, LSL #+2]
   \   0000011C   5C439FE5           LDR      R4,??raac_TNSFilter_5+0x24  ;; raac_sfBandTabLong
   \   00000120   833084E0           ADD      R3,R4,R3, LSL #+1
    216          		tnsMaxBandTab = tnsMaxBandsLong + tnsMaxBandsLongOffset[aacDecInfo->profile];
    217          		tnsMaxBand = tnsMaxBandTab[psi->sampRateIdx];
   \   00000124   58439FE5           LDR      R4,??raac_TNSFilter_5+0x28  ;; raac_tnsMaxBandsLongOffset
   \   00000128   10308DE5           STR      R3,[SP, #+16]
   \   0000012C   783898E5           LDR      R3,[R8, #+2168]
   \   00000130   000194E7           LDR      R0,[R4, +R0, LSL #+2]
   \   00000134   4C439FE5           LDR      R4,??raac_TNSFilter_5+0x2C  ;; raac_tnsMaxBandsLong
    218          	}
    219          
    220          	if (tnsMaxBand > icsInfo->maxSFB)
    221          		tnsMaxBand = icsInfo->maxSFB;
    222          
    223          	filtRes =    ti->coefRes;
    224          	filtLength = ti->length;
    225          	filtOrder =  ti->order;
    226          	filtDir =    ti->dir;
    227          	filtCoef =   ti->coef;
    228          
    229          	gbMask = 0;
    230          	audioCoef =  psi->coef[ch];
   \                     ??raac_TNSFilter_6:
   \   00000138   48209DE5           LDR      R2,[SP, #+72]
   \   0000013C   040080E0           ADD      R0,R0,R4
   \   00000140   0000D3E7           LDRB     R0,[R3, +R0]
   \   00000144   022688E0           ADD      R2,R8,R2, LSL #+12
   \   00000148   04008DE5           STR      R0,[SP, #+4]
   \   0000014C   0300D1E5           LDRB     R0,[R1, #+3]
   \   00000150   04109DE5           LDR      R1,[SP, #+4]
   \   00000154   010050E1           CMP      R0,R1
   \   00000158   00109DE5           LDR      R1,[SP, #+0]
   \   0000015C   04008DB5           STRLT    R0,[SP, #+4]
   \   00000160   091081E2           ADD      R1,R1,#+9
   \   00000164   38108DE5           STR      R1,[SP, #+56]
   \   00000168   00109DE5           LDR      R1,[SP, #+0]
   \   0000016C   111081E2           ADD      R1,R1,#+17
   \   00000170   3C108DE5           STR      R1,[SP, #+60]
   \   00000174   00109DE5           LDR      R1,[SP, #+0]
   \   00000178   191081E2           ADD      R1,R1,#+25
   \   0000017C   40108DE5           STR      R1,[SP, #+64]
   \   00000180   00109DE5           LDR      R1,[SP, #+0]
   \   00000184   211081E2           ADD      R1,R1,#+33
   \   00000188   44108DE5           STR      R1,[SP, #+68]
   \   0000018C   00109DE5           LDR      R1,[SP, #+0]
   \   00000190   291081E2           ADD      R1,R1,#+41
   \   00000194   14108DE5           STR      R1,[SP, #+20]
   \   00000198   0010A0E3           MOV      R1,#+0
   \   0000019C   20108DE5           STR      R1,[SP, #+32]
   \   000001A0   4810A0E3           MOV      R1,#+72
   \   000001A4   401D81E3           ORR      R1,R1,#0x1000
   \   000001A8   021081E0           ADD      R1,R1,R2
   \   000001AC   18108DE5           STR      R1,[SP, #+24]
    231          	for (win = 0; win < nWindows; win++) {
   \   000001B0   0010A0E3           MOV      R1,#+0
   \   000001B4   050000EA           B        ??raac_TNSFilter_7
    232          		bottom = nSFB;
    233          		numFilt = ti->numFilt[win];
    234          		for (filt = 0; filt < numFilt; filt++) {
    235          			top = bottom;
    236          			bottom = top - *filtLength++;
    237          			bottom = MAX(bottom, 0);
    238          			order = *filtOrder++;
    239          			order = MIN(order, maxOrder);
    240          
    241          			if (order) {
    242          				start = sfbTab[MIN(bottom, tnsMaxBand)];
    243          				end   = sfbTab[MIN(top, tnsMaxBand)];
    244          				size = end - start;
    245          				if (size > 0) {
    246          					dir = *filtDir++;
    247          					if (dir)
    248          						start = end - 1;
    249          
    250          					DecodeLPCCoefs(order, filtRes[win], filtCoef, psi->tnsLPCBuf, psi->tnsWorkBuf);
    251          					gbMask |= FilterRegion(size, dir, order, audioCoef + start, psi->tnsLPCBuf, psi->tnsWorkBuf);
    252          				}
    253          				filtCoef += order;
    254          			}
    255          		}
    256          		audioCoef += winLen;
   \                     ??raac_TNSFilter_8:
   \   000001B8   28109DE5           LDR      R1,[SP, #+40]
   \   000001BC   18209DE5           LDR      R2,[SP, #+24]
   \   000001C0   011182E0           ADD      R1,R2,R1, LSL #+2
   \   000001C4   18108DE5           STR      R1,[SP, #+24]
   \   000001C8   08109DE5           LDR      R1,[SP, #+8]
   \   000001CC   011081E2           ADD      R1,R1,#+1
   \                     ??raac_TNSFilter_7:
   \   000001D0   08108DE5           STR      R1,[SP, #+8]
   \   000001D4   08009DE5           LDR      R0,[SP, #+8]
   \   000001D8   24109DE5           LDR      R1,[SP, #+36]
   \   000001DC   010050E1           CMP      R0,R1
   \   000001E0   800000AA           BGE      ??raac_TNSFilter_9
   \   000001E4   00209DE5           LDR      R2,[SP, #+0]
   \   000001E8   2C409DE5           LDR      R4,[SP, #+44]
   \   000001EC   021080E0           ADD      R1,R0,R2
   \   000001F0   0110D1E5           LDRB     R1,[R1, #+1]
   \   000001F4   30108DE5           STR      R1,[SP, #+48]
   \   000001F8   0010A0E3           MOV      R1,#+0
   \   000001FC   1C108DE5           STR      R1,[SP, #+28]
   \   00000200   30009DE5           LDR      R0,[SP, #+48]
   \   00000204   010050E3           CMP      R0,#+1
   \   00000208   3B0000AA           BGE      ??raac_TNSFilter_10
   \   0000020C   E9FFFFEA           B        ??raac_TNSFilter_8
   \                     ??raac_TNSFilter_11:
   \   00000210   10209DE5           LDR      R2,[SP, #+16]
   \   00000214   811082E0           ADD      R1,R2,R1, LSL #+1
   \   00000218   F020D1E1           LDRSH    R2,[R1, #+0]
   \   0000021C   04109DE5           LDR      R1,[SP, #+4]
   \   00000220   010050E1           CMP      R0,R1
   \   00000224   0100A0A1           MOVGE    R0,R1
   \   00000228   10109DE5           LDR      R1,[SP, #+16]
   \   0000022C   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000230   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000234   023040E0           SUB      R3,R0,R2
   \   00000238   34308DE5           STR      R3,[SP, #+52]
   \   0000023C   010053E3           CMP      R3,#+1
   \   00000240   270000BA           BLT      ??raac_TNSFilter_12
   \   00000244   44309DE5           LDR      R3,[SP, #+68]
   \   00000248   3C929FE5           LDR      R9,??raac_TNSFilter_5+0x30  ;; invQuant3
   \   0000024C   ........           LDRB     R10,[R3], #+1
   \   00000250   44308DE5           STR      R3,[SP, #+68]
   \   00000254   38109DE5           LDR      R1,[SP, #+56]
   \   00000258   00005AE3           CMP      R10,#+0
   \   0000025C   01204012           SUBNE    R2,R0,#+1
   \   00000260   1C00A0E3           MOV      R0,#+28
   \   00000264   D00E80E3           ORR      R0,R0,#0xD00
   \   00000268   083080E0           ADD      R3,R0,R8
   \   0000026C   500040E2           SUB      R0,R0,#+80
   \   00000270   08C080E0           ADD      R12,R0,R8
   \   00000274   08009DE5           LDR      R0,[SP, #+8]
   \   00000278   0100D0E7           LDRB     R0,[R0, +R1]
   \   0000027C   030050E3           CMP      R0,#+3
   \   00000280   0200000A           BEQ      ??raac_TNSFilter_13
   \   00000284   040050E3           CMP      R0,#+4
   \   00000288   0300001A           BNE      ??raac_TNSFilter_14
   \   0000028C   409089E2           ADD      R9,R9,#+64
   \                     ??raac_TNSFilter_13:
   \   00000290   00E0A0E3           MOV      LR,#+0
   \   00000294   010055E3           CMP      R5,#+1
   \   00000298   370000AA           BGE      ??raac_TNSFilter_15
   \                     ??raac_TNSFilter_14:
   \   0000029C   20609DE5           LDR      R6,[SP, #+32]
   \   000002A0   1C00A0E3           MOV      R0,#+28
   \   000002A4   D00E80E3           ORR      R0,R0,#0xD00
   \   000002A8   080080E0           ADD      R0,R0,R8
   \   000002AC   01002DE9           PUSH     {R0}
   \   000002B0   0A10A0E1           MOV      R1,R10
   \   000002B4   CC00A0E3           MOV      R0,#+204
   \   000002B8   C00E80E3           ORR      R0,R0,#0xC00
   \   000002BC   080080E0           ADD      R0,R0,R8
   \   000002C0   01002DE9           PUSH     {R0}
   \   000002C4   20009DE5           LDR      R0,[SP, #+32]
   \   000002C8   023180E0           ADD      R3,R0,R2, LSL #+2
   \   000002CC   3C009DE5           LDR      R0,[SP, #+60]
   \   000002D0   0520A0E1           MOV      R2,R5
   \   000002D4   ........           BL       FilterRegion
   \   000002D8   060080E1           ORR      R0,R0,R6
   \   000002DC   28008DE5           STR      R0,[SP, #+40]
   \   000002E0   08D08DE2           ADD      SP,SP,#+8
   \                     ??raac_TNSFilter_12:
   \   000002E4   14109DE5           LDR      R1,[SP, #+20]
   \   000002E8   011085E0           ADD      R1,R5,R1
   \   000002EC   14108DE5           STR      R1,[SP, #+20]
   \                     ??raac_TNSFilter_16:
   \   000002F0   1C109DE5           LDR      R1,[SP, #+28]
   \   000002F4   011081E2           ADD      R1,R1,#+1
   \   000002F8   1C108DE5           STR      R1,[SP, #+28]
   \                     ??raac_TNSFilter_10:
   \   000002FC   1C009DE5           LDR      R0,[SP, #+28]
   \   00000300   30109DE5           LDR      R1,[SP, #+48]
   \   00000304   010050E1           CMP      R0,R1
   \   00000308   AAFFFFAA           BGE      ??raac_TNSFilter_8
   \   0000030C   3C209DE5           LDR      R2,[SP, #+60]
   \   00000310   0400A0E1           MOV      R0,R4
   \   00000314   ........           LDRB     R3,[R2], #+1
   \   00000318   3C208DE5           STR      R2,[SP, #+60]
   \   0000031C   40209DE5           LDR      R2,[SP, #+64]
   \   00000320   034040E0           SUB      R4,R0,R3
   \   00000324   ........           LDRB     R5,[R2], #+1
   \   00000328   40208DE5           STR      R2,[SP, #+64]
   \   0000032C   0C109DE5           LDR      R1,[SP, #+12]
   \   00000330   010054E3           CMP      R4,#+1
   \   00000334   0040A0B3           MOVLT    R4,#+0
   \   00000338   010055E1           CMP      R5,R1
   \   0000033C   0150A0A1           MOVGE    R5,R1
   \   00000340   000055E3           CMP      R5,#+0
   \   00000344   E9FFFF0A           BEQ      ??raac_TNSFilter_16
   \   00000348   04109DE5           LDR      R1,[SP, #+4]
   \   0000034C   010054E1           CMP      R4,R1
   \   00000350   AEFFFFAA           BGE      ??raac_TNSFilter_11
   \   00000354   0410A0E1           MOV      R1,R4
   \   00000358   ACFFFFEA           B        ??raac_TNSFilter_11
   \                     ??raac_TNSFilter_17:
   \   0000035C   001193E7           LDR      R1,[R3, +R0, LSL #+2]
   \   00000360   00118CE7           STR      R1,[R12, +R0, LSL #+2]
   \   00000364   010080E2           ADD      R0,R0,#+1
   \                     ??raac_TNSFilter_18:
   \   00000368   0E0050E1           CMP      R0,LR
   \   0000036C   FAFFFFBA           BLT      ??raac_TNSFilter_17
   \                     ??raac_TNSFilter_19:
   \   00000370   C605A0E1           ASR      R0,R6,#+11
   \   00000374   0E018CE7           STR      R0,[R12, +LR, LSL #+2]
   \   00000378   01E08EE2           ADD      LR,LR,#+1
   \                     ??raac_TNSFilter_15:
   \   0000037C   05005EE1           CMP      LR,R5
   \   00000380   C5FFFFAA           BGE      ??raac_TNSFilter_14
   \   00000384   14009DE5           LDR      R0,[SP, #+20]
   \   00000388   0070A0E3           MOV      R7,#+0
   \   0000038C   D0009EE1           LDRSB    R0,[LR, +R0]
   \   00000390   01005EE3           CMP      LR,#+1
   \   00000394   0F0000E2           AND      R0,R0,#0xF
   \   00000398   006199E7           LDR      R6,[R9, +R0, LSL #+2]
   \   0000039C   0B0000AA           BGE      ??raac_TNSFilter_20
   \   000003A0   0C0000EA           B        ??raac_TNSFilter_21
   \                     ??raac_TNSFilter_22:
   \   000003A4   07019CE7           LDR      R0,[R12, +R7, LSL #+2]
   \   000003A8   01002DE9           PUSH     {R0}
   \   000003AC   07004EE0           SUB      R0,LR,R7
   \   000003B0   00018CE0           ADD      R0,R12,R0, LSL #+2
   \   000003B4   04B010E5           LDR      R11,[R0, #-4]
   \   000003B8   960BC1E0           SMULL    R0,R1,R6,R11
   \   000003BC   0100A0E1           MOV      R0,R1
   \   000003C0   0200BDE8           POP      {R1}
   \   000003C4   800041E0           SUB      R0,R1,R0, LSL #+1
   \   000003C8   070183E7           STR      R0,[R3, +R7, LSL #+2]
   \   000003CC   017087E2           ADD      R7,R7,#+1
   \                     ??raac_TNSFilter_20:
   \   000003D0   0E0057E1           CMP      R7,LR
   \   000003D4   F2FFFFBA           BLT      ??raac_TNSFilter_22
   \                     ??raac_TNSFilter_21:
   \   000003D8   0000A0E3           MOV      R0,#+0
   \   000003DC   01005EE3           CMP      LR,#+1
   \   000003E0   E0FFFFAA           BGE      ??raac_TNSFilter_18
   \   000003E4   E1FFFFEA           B        ??raac_TNSFilter_19
    257          	}
    258          
    259          	/* update guard bit count if necessary */
    260          	size = CLZ(gbMask) - 1;
   \                     ??raac_TNSFilter_9:
   \   000003E8   20009DE5           LDR      R0,[SP, #+32]
   \   000003EC   000050E3           CMP      R0,#+0
   \   000003F0   2000A003           MOVEQ    R0,#+32
   \   000003F4   0D00000A           BEQ      ??raac_TNSFilter_23
   \   000003F8   0110A0E3           MOV      R1,#+1
   \   000003FC   2028B0E1           LSRS     R2,R0,#+16
   \   00000400   1110A003           MOVEQ    R1,#+17
   \   00000404   0008A001           LSLEQ    R0,R0,#+16
   \   00000408   202CB0E1           LSRS     R2,R0,#+24
   \   0000040C   08108102           ADDEQ    R1,R1,#+8
   \   00000410   0004A001           LSLEQ    R0,R0,#+8
   \   00000414   202EB0E1           LSRS     R2,R0,#+28
   \   00000418   04108102           ADDEQ    R1,R1,#+4
   \   0000041C   0002A001           LSLEQ    R0,R0,#+4
   \   00000420   202FB0E1           LSRS     R2,R0,#+30
   \   00000424   02108102           ADDEQ    R1,R1,#+2
   \   00000428   0001A001           LSLEQ    R0,R0,#+2
   \   0000042C   A00F41E0           SUB      R0,R1,R0, LSR #+31
    261          	if (psi->gbCurrent[ch] > size)
   \                     ??raac_TNSFilter_23:
   \   00000430   48109DE5           LDR      R1,[SP, #+72]
   \   00000434   010040E2           SUB      R0,R0,#+1
   \   00000438   011188E0           ADD      R1,R8,R1, LSL #+2
   \   0000043C   411D81E2           ADD      R1,R1,#+4160
   \   00000440   002091E5           LDR      R2,[R1, #+0]
   \   00000444   020050E1           CMP      R0,R2
   \   00000448   000000AA           BGE      ??raac_TNSFilter_3
    262          		psi->gbCurrent[ch] = size;
   \   0000044C   000081E5           STR      R0,[R1, #+0]
   \                     ??raac_TNSFilter_3:
   \   00000450   0000A0E3           MOV      R0,#+0
   \   00000454   4CD08DE2           ADD      SP,SP,#+76
   \   00000458   F08FBDE8           POP      {R4-R11,PC}
   \                     ??raac_TNSFilter_5:
   \   0000045C   ........           DC32     raac_sfBandTotalShort
   \   00000460   ........           DC32     raac_sfBandTabShortOffset
   \   00000464   ........           DC32     raac_tnsMaxOrderShort
   \   00000468   ........           DC32     raac_sfBandTabShort
   \   0000046C   ........           DC32     raac_tnsMaxBandsShortOffset
   \   00000470   ........           DC32     raac_tnsMaxBandsShort
   \   00000474   ........           DC32     raac_sfBandTotalLong
   \   00000478   ........           DC32     raac_sfBandTabLongOffset
   \   0000047C   ........           DC32     raac_tnsMaxOrderLong
   \   00000480   ........           DC32     raac_sfBandTabLong
   \   00000484   ........           DC32     raac_tnsMaxBandsLongOffset
   \   00000488   ........           DC32     raac_tnsMaxBandsLong
   \   0000048C   ........           DC32     invQuant3
    263          
    264          	return 0;
    265          }
    266          
    267          /*	Code to generate invQuantXXX[] tables
    268           *  {
    269           *    int res, i, t;
    270           *    double powScale, iqfac, iqfac_m, d;
    271           *
    272           *    powScale = pow(2.0, 31) * -1.0;	/ ** make coefficients negative for using MADD in kernel ** /
    273           *    for (res = 3; res <= 4; res++) {
    274           *      iqfac =   ( ((1 << (res-1)) - 0.5) * (2.0 / M_PI) );
    275           *      iqfac_m = ( ((1 << (res-1)) + 0.5) * (2.0 / M_PI) );
    276           *      printf("static const int invQuant%d[16] = {\n", res);
    277           *      for (i = 0; i < 16; i++) {
    278           *        / ** extend bottom 4 bits into signed, 2's complement number ** /
    279           *        t = (i << 28) >> 28;
    280           *
    281           *        if (t >= 0)   d = sin(t / iqfac);
    282           *        else          d = sin(t / iqfac_m);
    283           *
    284           *        d *= powScale;
    285           *        printf("0x%08x, ", (int)(d > 0 ? d + 0.5 : d - 0.5));
    286           *        if ((i & 0x07) == 0x07)
    287           *           printf("\n");
    288           *      }
    289           *      printf("};\n\n");
    290           *	  }
    291           *  }
    292           */
    293          

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     FilterRegion      40
     raac_TNSFilter   120


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     invQuant3       128
     FilterRegion    264
     raac_TNSFilter 1168
      Others           8

 
 1 440 bytes in segment CODE
   128 bytes in segment DATA_C
 
 1 432 bytes of CODE  memory (+ 8 bytes shared)
   128 bytes of CONST memory

Errors: none
Warnings: none
