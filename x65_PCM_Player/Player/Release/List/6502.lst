##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Feb/2012  15:39:13 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\NSF\6502. #
#                       C                                                    #
#    Command line    =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\NSF\6502. #
#                       C -D NDEBUG -lC D:\SVN\SieELF\SieELF\x65_PCM_Player\ #
#                       Player\Release\List\ -lA D:\SVN\SieELF\SieELF\x65_PC #
#                       M_Player\Player\Release\List\ -o                     #
#                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\ -s9 --cpu_mode arm --endian little --cpu         #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "D:\Program Files\IAR\Embedded    #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h"      #
#                       --preinclude swilib.h -I "D:\Program                 #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\INC\" --inline_threshold=16           #
#    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\6502.lst                                         #
#    Object file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\6502.r79                                          #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\NSF\6502.C
      1          
      2          #include "6502.h"
      3          extern void APUWrite( WORD address, BYTE data );
      4          /* flags = NVRBDIZC */

   \                                 In segment DATA_Z, align 4, align-sorted
      5          BYTE a_reg, x_reg, y_reg, flag_reg, s_reg;
      6          WORD pc_reg = 0;
   \                     pc_reg:
   \   00000000                      DS8 2
      7          
      8          /* Macros for convenience */
      9          #define A a_reg
     10          #define X x_reg
     11          #define Y y_reg
     12          #define P flag_reg
     13          #define S s_reg
     14          #define PC pc_reg
     15          
     16          /* internal registers */
     17          BYTE opcode;
     18          int clockticks6502 = 0;
     19          
     20          /* help variables */
     21          WORD savepc;
   \                     savepc:
   \   00000002                      DS8 2
     22          BYTE value;
     23          int sum, saveflags;
     24          
     25          /* arrays */
     26          void( * adrmode[256] ) ();
     27          void( * instruction[256] ) ();
     28          int ticks[256];
     29          WORD help;
   \                     help:
   \   00000004                      DS8 2
   \   00000006                      DS8 2
   \                     adrmode:
   \   00000008                      DS8 1024
   \                     instruction:
   \   00000408                      DS8 1024
   \                     ticks:
   \   00000808                      DS8 1024
   \                     clockticks6502:
   \   00000C08                      DS8 4
   \                     sum:
   \   00000C0C                      DS8 4
   \                     saveflags:
   \   00000C10                      DS8 4
   \                     a_reg:
   \   00000C14                      DS8 1
   \                     x_reg:
   \   00000C15                      DS8 1
   \                     y_reg:
   \   00000C16                      DS8 1
   \                     flag_reg:
   \   00000C17                      DS8 1
   \                     s_reg:
   \   00000C18                      DS8 1
   \                     opcode:
   \   00000C19                      DS8 1
   \                     value:
   \   00000C1A                      DS8 1
     30          
     31          

   \                                 In segment CODE, align 4, keep-with-next
     32          int get6502memory( WORD addr )
     33          {
     34          
     35            return ( gameImage[addr] );
   \                     get6502memory:
   \   00000000   ........           LDR      R1,??DataTable72  ;; gameImage
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   0100D0E7           LDRB     R0,[R0, +R1]
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     36          }
     37          

   \                                 In segment CODE, align 4, keep-with-next
     38          void put6502memory( WORD addr, BYTE byte )
     39          {
   \                     put6502memory:
   \   00000000   00402DE9           PUSH     {LR}
     40            if ( addr > 32768 ) return;
   \   00000004   0120A0E3           MOV      R2,#+1
   \   00000008   802C82E3           ORR      R2,R2,#0x8000
   \   0000000C   020050E1           CMP      R0,R2
   \   00000010   0080BD28           POPCS    {PC}
     41            gameImage[addr] = byte;
   \   00000014   ........           LDR      R3,??DataTable72  ;; gameImage
     42            if ( ( addr > 0x3FFF ) && ( addr < 0x4020 ) ) APUWrite( addr, byte );
   \   00000018   400C50E3           CMP      R0,#+16384
   \   0000001C   003093E5           LDR      R3,[R3, #+0]
   \   00000020   0310C0E7           STRB     R1,[R0, +R3]
   \   00000024   0080BD38           POPCC    {PC}
   \   00000028   2020A0E3           MOV      R2,#+32
   \   0000002C   402C82E3           ORR      R2,R2,#0x4000
   \   00000030   020050E1           CMP      R0,R2
   \   00000034   0080BD28           POPCS    {PC}
   \   00000038   ........           _BLF     APUWrite,??APUWrite??rA
   \   0000003C   0080BDE8           POP      {PC}             ;; return
     43          }
     44          
     45          
     46          
     47          /* Adressing modes */
     48          /* Implied */

   \                                 In segment CODE, align 4, keep-with-next
     49          void implied6502()
     50          {
     51          }
   \                     implied6502:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     52          
     53          /* #Immediate */

   \                                 In segment CODE, align 4, keep-with-next
     54          void immediate6502()
     55          {
     56            savepc = PC++;
   \                     immediate6502:
   \   00000000   ........           LDR      R0,??DataTable53  ;; pc_reg
   \   00000004   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000008   B210C0E1           STRH     R1,[R0, #+2]
   \   0000000C   011081E2           ADD      R1,R1,#+1
   \   00000010   B010C0E1           STRH     R1,[R0, #+0]
     57          }
   \   00000014   1EFF2FE1           BX       LR               ;; return
     58          
     59          /* ABS */

   \                                 In segment CODE, align 4, keep-with-next
     60          void abs6502()
     61          {
     62            savepc = gameImage[PC] + ( gameImage[PC + 1] << 8 );
   \                     abs6502:
   \   00000000   ........           LDR      R0,??DataTable53  ;; pc_reg
   \   00000004   ........           LDR      R3,??DataTable72  ;; gameImage
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   032081E0           ADD      R2,R1,R3
   \   00000014   0030D2E5           LDRB     R3,[R2, #+0]
   \   00000018   0120D2E5           LDRB     R2,[R2, #+1]
     63            PC++;
     64            PC++;
   \   0000001C   021081E2           ADD      R1,R1,#+2
   \   00000020   B010C0E1           STRH     R1,[R0, #+0]
   \   00000024   022483E0           ADD      R2,R3,R2, LSL #+8
   \   00000028   B220C0E1           STRH     R2,[R0, #+2]
     65          }
   \   0000002C   1EFF2FE1           BX       LR               ;; return
     66          
     67          /* Branch */

   \                                 In segment CODE, align 4, keep-with-next
     68          void relative6502()
     69          {
     70            savepc = gameImage[PC++];
   \                     relative6502:
   \   00000000   ........           LDR      R0,??DataTable53  ;; pc_reg
   \   00000004   ........           LDR      R3,??DataTable72  ;; gameImage
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   0320D1E7           LDRB     R2,[R1, +R3]
   \   00000014   011081E2           ADD      R1,R1,#+1
   \   00000018   B010C0E1           STRH     R1,[R0, #+0]
     71            if ( savepc & 0x80 ) savepc -= 0x100;
   \   0000001C   800012E3           TST      R2,#0x80
   \   00000020   FF2C8212           ADDNE    R2,R2,#+65280
   \   00000024   B220C0E1           STRH     R2,[R0, #+2]
     72            if ( ( savepc >> 8 ) != ( PC >> 8 ) )
   \   00000028   0228A0E1           LSL      R2,R2,#+16
   \   0000002C   0118A0E1           LSL      R1,R1,#+16
   \   00000030   222CA0E1           LSR      R2,R2,#+24
   \   00000034   211CA0E1           LSR      R1,R1,#+24
   \   00000038   010052E1           CMP      R2,R1
     73              clockticks6502++;
   \   0000003C   081C9015           LDRNE    R1,[R0, #+3080]
   \   00000040   01108112           ADDNE    R1,R1,#+1
   \   00000044   081C8015           STRNE    R1,[R0, #+3080]
     74          }
   \   00000048   1EFF2FE1           BX       LR               ;; return
     75          
     76          /* (ABS) */

   \                                 In segment CODE, align 4, keep-with-next
     77          void indirect6502()
     78          {
     79            help = gameImage[PC] + ( gameImage[PC + 1] << 8 );
   \                     indirect6502:
   \   00000000   ........           LDR      R0,??DataTable53  ;; pc_reg
   \   00000004   ........           LDR      R2,??DataTable72  ;; gameImage
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   023081E0           ADD      R3,R1,R2
   \   00000014   00C0D3E5           LDRB     R12,[R3, #+0]
   \   00000018   0130D3E5           LDRB     R3,[R3, #+1]
     80            savepc = gameImage[help] + ( gameImage[help + 1] << 8 );
     81            PC++;
     82            PC++;
   \   0000001C   021081E2           ADD      R1,R1,#+2
   \   00000020   03348CE0           ADD      R3,R12,R3, LSL #+8
   \   00000024   B430C0E1           STRH     R3,[R0, #+4]
   \   00000028   B430D0E1           LDRH     R3,[R0, #+4]
   \   0000002C   022083E0           ADD      R2,R3,R2
   \   00000030   0030D2E5           LDRB     R3,[R2, #+0]
   \   00000034   0120D2E5           LDRB     R2,[R2, #+1]
   \   00000038   B010C0E1           STRH     R1,[R0, #+0]
   \   0000003C   022483E0           ADD      R2,R3,R2, LSL #+8
   \   00000040   B220C0E1           STRH     R2,[R0, #+2]
     83          }
   \   00000044   1EFF2FE1           BX       LR               ;; return
     84          
     85          /* ABS,X */

   \                                 In segment CODE, align 4, keep-with-next
     86          void absx6502()
     87          {
     88            savepc = gameImage[PC] + ( gameImage[PC + 1] << 8 );
   \                     absx6502:
   \   00000000   ........           LDR      R0,??DataTable53  ;; pc_reg
   \   00000004   ........           LDR      R3,??DataTable72  ;; gameImage
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   032081E0           ADD      R2,R1,R3
   \   00000014   0030D2E5           LDRB     R3,[R2, #+0]
   \   00000018   0120D2E5           LDRB     R2,[R2, #+1]
     89            PC++;
     90            PC++;
   \   0000001C   021081E2           ADD      R1,R1,#+2
   \   00000020   B010C0E1           STRH     R1,[R0, #+0]
     91            if ( ticks[opcode] == 4 )
   \   00000024   151CD0E5           LDRB     R1,[R0, #+3093]
   \   00000028   022483E0           ADD      R2,R3,R2, LSL #+8
   \   0000002C   B220C0E1           STRH     R2,[R0, #+2]
   \   00000030   192CD0E5           LDRB     R2,[R0, #+3097]
   \   00000034   022180E0           ADD      R2,R0,R2, LSL #+2
   \   00000038   082892E5           LDR      R2,[R2, #+2056]
   \   0000003C   040052E3           CMP      R2,#+4
   \   00000040   0600001A           BNE      ??absx6502_0
     92              if ( ( savepc >> 8 ) != ( ( savepc + X ) >> 8 ) )
   \   00000044   B220D0E1           LDRH     R2,[R0, #+2]
   \   00000048   2234A0E1           LSR      R3,R2,#+8
   \   0000004C   022081E0           ADD      R2,R1,R2
   \   00000050   420453E1           CMP      R3,R2, ASR #+8
     93                clockticks6502++;
   \   00000054   082C9015           LDRNE    R2,[R0, #+3080]
   \   00000058   01208212           ADDNE    R2,R2,#+1
   \   0000005C   082C8015           STRNE    R2,[R0, #+3080]
     94            savepc += X;
   \                     ??absx6502_0:
   \   00000060   B220D0E1           LDRH     R2,[R0, #+2]
   \   00000064   021081E0           ADD      R1,R1,R2
   \   00000068   B210C0E1           STRH     R1,[R0, #+2]
     95          }
   \   0000006C   1EFF2FE1           BX       LR               ;; return
     96          
     97          /* ABS,Y */

   \                                 In segment CODE, align 4, keep-with-next
     98          void absy6502()
     99          {
    100            savepc = gameImage[PC] + ( gameImage[PC + 1] << 8 );
   \                     absy6502:
   \   00000000   ........           LDR      R0,??DataTable53  ;; pc_reg
   \   00000004   ........           LDR      R3,??DataTable72  ;; gameImage
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   032081E0           ADD      R2,R1,R3
   \   00000014   0030D2E5           LDRB     R3,[R2, #+0]
   \   00000018   0120D2E5           LDRB     R2,[R2, #+1]
    101            PC++;
    102            PC++;
   \   0000001C   021081E2           ADD      R1,R1,#+2
   \   00000020   B010C0E1           STRH     R1,[R0, #+0]
    103          
    104            if ( ticks[opcode] == 4 )
   \   00000024   161CD0E5           LDRB     R1,[R0, #+3094]
   \   00000028   022483E0           ADD      R2,R3,R2, LSL #+8
   \   0000002C   B220C0E1           STRH     R2,[R0, #+2]
   \   00000030   192CD0E5           LDRB     R2,[R0, #+3097]
   \   00000034   022180E0           ADD      R2,R0,R2, LSL #+2
   \   00000038   082892E5           LDR      R2,[R2, #+2056]
   \   0000003C   040052E3           CMP      R2,#+4
   \   00000040   0600001A           BNE      ??absy6502_0
    105              if ( ( savepc >> 8 ) != ( ( savepc + Y ) >> 8 ) )
   \   00000044   B220D0E1           LDRH     R2,[R0, #+2]
   \   00000048   2234A0E1           LSR      R3,R2,#+8
   \   0000004C   022081E0           ADD      R2,R1,R2
   \   00000050   420453E1           CMP      R3,R2, ASR #+8
    106                clockticks6502++;
   \   00000054   082C9015           LDRNE    R2,[R0, #+3080]
   \   00000058   01208212           ADDNE    R2,R2,#+1
   \   0000005C   082C8015           STRNE    R2,[R0, #+3080]
    107            savepc += Y;
   \                     ??absy6502_0:
   \   00000060   B220D0E1           LDRH     R2,[R0, #+2]
   \   00000064   021081E0           ADD      R1,R1,R2
   \   00000068   B210C0E1           STRH     R1,[R0, #+2]
    108          }
   \   0000006C   1EFF2FE1           BX       LR               ;; return
    109          
    110          /* ZP */

   \                                 In segment CODE, align 4, keep-with-next
    111          void zp6502()
    112          {
    113            savepc = gameImage[PC++];
   \                     zp6502:
   \   00000000   ........           LDR      R0,??DataTable53  ;; pc_reg
   \   00000004   ........           LDR      R3,??DataTable72  ;; gameImage
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   0320D1E7           LDRB     R2,[R1, +R3]
   \   00000014   011081E2           ADD      R1,R1,#+1
   \   00000018   B010C0E1           STRH     R1,[R0, #+0]
   \   0000001C   B220C0E1           STRH     R2,[R0, #+2]
    114          }
   \   00000020   1EFF2FE1           BX       LR               ;; return
    115          
    116          /* ZP,X */

   \                                 In segment CODE, align 4, keep-with-next
    117          void zpx6502()
    118          {
    119            savepc = gameImage[PC++] + X;
   \                     zpx6502:
   \   00000000   ........           LDR      R0,??DataTable53  ;; pc_reg
   \   00000004   ........           LDR      R3,??DataTable72  ;; gameImage
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   0320D1E7           LDRB     R2,[R1, +R3]
   \   00000014   153CD0E5           LDRB     R3,[R0, #+3093]
   \   00000018   011081E2           ADD      R1,R1,#+1
   \   0000001C   B010C0E1           STRH     R1,[R0, #+0]
   \   00000020   022083E0           ADD      R2,R3,R2
   \   00000024   B220C0E1           STRH     R2,[R0, #+2]
    120            savepc &= 0x00ff;
   \   00000028   B210D0E1           LDRH     R1,[R0, #+2]
   \   0000002C   FF1001E2           AND      R1,R1,#0xFF
   \   00000030   B210C0E1           STRH     R1,[R0, #+2]
    121          }
   \   00000034   1EFF2FE1           BX       LR               ;; return
    122          
    123          /* ZP,Y */

   \                                 In segment CODE, align 4, keep-with-next
    124          void zpy6502()
    125          {
    126            savepc = gameImage[PC++] + Y;
   \                     zpy6502:
   \   00000000   ........           LDR      R0,??DataTable53  ;; pc_reg
   \   00000004   ........           LDR      R3,??DataTable72  ;; gameImage
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   0320D1E7           LDRB     R2,[R1, +R3]
   \   00000014   163CD0E5           LDRB     R3,[R0, #+3094]
   \   00000018   011081E2           ADD      R1,R1,#+1
   \   0000001C   B010C0E1           STRH     R1,[R0, #+0]
   \   00000020   022083E0           ADD      R2,R3,R2
   \   00000024   B220C0E1           STRH     R2,[R0, #+2]
    127            savepc &= 0x00ff;
   \   00000028   B210D0E1           LDRH     R1,[R0, #+2]
   \   0000002C   FF1001E2           AND      R1,R1,#0xFF
   \   00000030   B210C0E1           STRH     R1,[R0, #+2]
    128          }
   \   00000034   1EFF2FE1           BX       LR               ;; return
    129          
    130          /* (ZP,X) */

   \                                 In segment CODE, align 4, keep-with-next
    131          void indx6502()
    132          {
    133            value = gameImage[PC++] + X;
   \                     indx6502:
   \   00000000   ........           LDR      R0,??DataTable53  ;; pc_reg
   \   00000004   ........           LDR      R2,??DataTable72  ;; gameImage
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   15CCD0E5           LDRB     R12,[R0, #+3093]
   \   00000014   0230D1E7           LDRB     R3,[R1, +R2]
   \   00000018   011081E2           ADD      R1,R1,#+1
   \   0000001C   B010C0E1           STRH     R1,[R0, #+0]
   \   00000020   03308CE0           ADD      R3,R12,R3
   \   00000024   1A3CC0E5           STRB     R3,[R0, #+3098]
    134            savepc = gameImage[value] + ( gameImage[value + 1] << 8 );
   \   00000028   FF3003E2           AND      R3,R3,#0xFF
   \   0000002C   021083E0           ADD      R1,R3,R2
   \   00000030   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000034   0110D1E5           LDRB     R1,[R1, #+1]
   \   00000038   011482E0           ADD      R1,R2,R1, LSL #+8
   \   0000003C   B210C0E1           STRH     R1,[R0, #+2]
    135          }
   \   00000040   1EFF2FE1           BX       LR               ;; return
    136          
    137          /* (ZP),Y */

   \                                 In segment CODE, align 4, keep-with-next
    138          void indy6502()
    139          {
    140            value = gameImage[PC++];
   \                     indy6502:
   \   00000000   ........           LDR      R0,??DataTable53  ;; pc_reg
   \   00000004   ........           LDR      R2,??DataTable72  ;; gameImage
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   0230D1E7           LDRB     R3,[R1, +R2]
   \   00000014   011081E2           ADD      R1,R1,#+1
   \   00000018   B010C0E1           STRH     R1,[R0, #+0]
   \   0000001C   1A3CC0E5           STRB     R3,[R0, #+3098]
    141            savepc = gameImage[value] + ( gameImage[value + 1] << 8 );
   \   00000020   021083E0           ADD      R1,R3,R2
   \   00000024   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000028   0110D1E5           LDRB     R1,[R1, #+1]
   \   0000002C   011482E0           ADD      R1,R2,R1, LSL #+8
    142            if ( ticks[opcode] == 5 )
   \   00000030   192CD0E5           LDRB     R2,[R0, #+3097]
   \   00000034   B210C0E1           STRH     R1,[R0, #+2]
   \   00000038   161CD0E5           LDRB     R1,[R0, #+3094]
   \   0000003C   022180E0           ADD      R2,R0,R2, LSL #+2
   \   00000040   082892E5           LDR      R2,[R2, #+2056]
   \   00000044   050052E3           CMP      R2,#+5
   \   00000048   0600001A           BNE      ??indy6502_0
    143              if ( ( savepc >> 8 ) != ( ( savepc + Y ) >> 8 ) )
   \   0000004C   B220D0E1           LDRH     R2,[R0, #+2]
   \   00000050   2234A0E1           LSR      R3,R2,#+8
   \   00000054   022081E0           ADD      R2,R1,R2
   \   00000058   420453E1           CMP      R3,R2, ASR #+8
    144                clockticks6502++;
   \   0000005C   082C9015           LDRNE    R2,[R0, #+3080]
   \   00000060   01208212           ADDNE    R2,R2,#+1
   \   00000064   082C8015           STRNE    R2,[R0, #+3080]
    145            savepc += Y;
   \                     ??indy6502_0:
   \   00000068   B220D0E1           LDRH     R2,[R0, #+2]
   \   0000006C   021081E0           ADD      R1,R1,R2
   \   00000070   B210C0E1           STRH     R1,[R0, #+2]
    146          }
   \   00000074   1EFF2FE1           BX       LR               ;; return
    147          
    148          /* (ABS,X) */

   \                                 In segment CODE, align 4, keep-with-next
    149          void indabsx6502()
    150          {
    151            help = gameImage[PC] + ( gameImage[PC + 1] << 8 ) + X;
   \                     indabsx6502:
   \   00000000   ........           LDR      R1,??DataTable53  ;; pc_reg
   \   00000004   ........           LDR      R0,??DataTable72  ;; gameImage
   \   00000008   B020D1E1           LDRH     R2,[R1, #+0]
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   002082E0           ADD      R2,R2,R0
   \   00000014   0030D2E5           LDRB     R3,[R2, #+0]
   \   00000018   0120D2E5           LDRB     R2,[R2, #+1]
   \   0000001C   022483E0           ADD      R2,R3,R2, LSL #+8
   \   00000020   153CD1E5           LDRB     R3,[R1, #+3093]
   \   00000024   022083E0           ADD      R2,R3,R2
   \   00000028   B420C1E1           STRH     R2,[R1, #+4]
    152            savepc = gameImage[help] + ( gameImage[help + 1] << 8 );
   \   0000002C   0228A0E1           MOV      R2,R2, LSL #+16
   \   00000030   2228A0E1           MOV      R2,R2, LSR #+16
   \   00000034   000082E0           ADD      R0,R2,R0
   \   00000038   0020D0E5           LDRB     R2,[R0, #+0]
   \   0000003C   0100D0E5           LDRB     R0,[R0, #+1]
   \   00000040   000482E0           ADD      R0,R2,R0, LSL #+8
   \   00000044   B200C1E1           STRH     R0,[R1, #+2]
    153          }
   \   00000048   1EFF2FE1           BX       LR               ;; return
    154          
    155          /* (ZP) */

   \                                 In segment CODE, align 4, keep-with-next
    156          void indzp6502()
    157          {
    158            value = gameImage[PC++];
   \                     indzp6502:
   \   00000000   ........           LDR      R0,??DataTable53  ;; pc_reg
   \   00000004   ........           LDR      R2,??DataTable72  ;; gameImage
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   0230D1E7           LDRB     R3,[R1, +R2]
   \   00000014   011081E2           ADD      R1,R1,#+1
   \   00000018   B010C0E1           STRH     R1,[R0, #+0]
   \   0000001C   1A3CC0E5           STRB     R3,[R0, #+3098]
    159            savepc = gameImage[value] + ( gameImage[value + 1] << 8 );
   \   00000020   021083E0           ADD      R1,R3,R2
   \   00000024   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000028   0110D1E5           LDRB     R1,[R1, #+1]
   \   0000002C   011482E0           ADD      R1,R2,R1, LSL #+8
   \   00000030   B210C0E1           STRH     R1,[R0, #+2]
    160          }
   \   00000034   1EFF2FE1           BX       LR               ;; return
    161          
    162          /* Instructions */

   \                                 In segment CODE, align 4, keep-with-next
    163          void adc6502()
    164          {
   \                     adc6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    165            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    166            value = gameImage[savepc];
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   ........           LDR      R1,??DataTable72  ;; gameImage
    167            saveflags = ( P & 0x01 );
    168            sum = ( ( char )A ) + ( ( char )value ) + saveflags;
   \   00000020   143CD4E5           LDRB     R3,[R4, #+3092]
   \   00000024   001091E5           LDR      R1,[R1, #+0]
   \   00000028   0100D0E7           LDRB     R0,[R0, +R1]
   \   0000002C   171CD4E5           LDRB     R1,[R4, #+3095]
   \   00000030   1A0CC4E5           STRB     R0,[R4, #+3098]
   \   00000034   012001E2           AND      R2,R1,#0x1
   \   00000038   102C84E5           STR      R2,[R4, #+3088]
   \   0000003C   030080E0           ADD      R0,R0,R3
   \   00000040   000082E0           ADD      R0,R2,R0
   \   00000044   0C0C84E5           STR      R0,[R4, #+3084]
    169            if ( ( sum > 0x7f ) || ( sum < -0x80 ) ) P |= 0x40;
   \   00000048   800050E3           CMP      R0,#+128
   \   0000004C   020000AA           BGE      ??adc6502_0
   \   00000050   7F20E0E3           MVN      R2,#+127
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   040000AA           BGE      ??adc6502_1
   \                     ??adc6502_0:
   \   0000005C   401081E3           ORR      R1,R1,#0x40
    170            else P &= 0xbf;
    171            sum = A + value + saveflags;
    172            if ( sum > 0xff ) P |= 0x01;
   \   00000060   400F50E3           CMP      R0,#+256
   \   00000064   020000BA           BLT      ??adc6502_2
   \   00000068   011081E3           ORR      R1,R1,#0x1
   \   0000006C   010000EA           B        ??adc6502_3
   \                     ??adc6502_1:
   \   00000070   BF1001E2           AND      R1,R1,#0xBF
    173            else P &= 0xfe;
   \                     ??adc6502_2:
   \   00000074   FE1001E2           AND      R1,R1,#0xFE
    174            A = sum;
    175            if ( P & 0x08 )
   \                     ??adc6502_3:
   \   00000078   080011E3           TST      R1,#0x8
   \   0000007C   0B00000A           BEQ      ??adc6502_4
    176            {
    177              P &= 0xfe;
   \   00000080   FE1001E2           AND      R1,R1,#0xFE
    178              if ( ( A & 0x0f ) > 0x09 )
   \   00000084   FF2000E2           AND      R2,R0,#0xFF
   \   00000088   0F2002E2           AND      R2,R2,#0xF
   \   0000008C   0A0052E3           CMP      R2,#+10
    179                A += 0x06;
   \   00000090   060080A2           ADDGE    R0,R0,#+6
    180              if ( ( A & 0xf0 ) > 0x90 )
   \   00000094   FF2000E2           AND      R2,R0,#0xFF
   \   00000098   F02002E2           AND      R2,R2,#0xF0
   \   0000009C   910052E3           CMP      R2,#+145
   \   000000A0   050000BA           BLT      ??adc6502_5
    181              {
    182                A += 0x60;
   \   000000A4   600080E2           ADD      R0,R0,#+96
    183                P |= 0x01;
   \   000000A8   011081E3           ORR      R1,R1,#0x1
   \   000000AC   020000EA           B        ??adc6502_5
    184              }
    185            }
    186            else
    187            {
    188              clockticks6502++;
   \                     ??adc6502_4:
   \   000000B0   082C94E5           LDR      R2,[R4, #+3080]
   \   000000B4   012082E2           ADD      R2,R2,#+1
   \   000000B8   082C84E5           STR      R2,[R4, #+3080]
   \                     ??adc6502_5:
   \   000000BC   140CC4E5           STRB     R0,[R4, #+3092]
    189            }
    190            if ( A ) P &= 0xfd;
   \   000000C0   000CB0E1           LSLS     R0,R0,#+24
   \   000000C4   FD000112           ANDNE    R0,R1,#0xFD
    191            else P |= 0x02;
   \   000000C8   02008103           ORREQ    R0,R1,#0x2
    192            if ( A & 0x80 ) P |= 0x80;
   \   000000CC   141CD4E5           LDRB     R1,[R4, #+3092]
   \   000000D0   800011E3           TST      R1,#0x80
   \   000000D4   80008013           ORRNE    R0,R0,#0x80
    193            else P &= 0x7f;
   \   000000D8   7F000002           ANDEQ    R0,R0,#0x7F
   \   000000DC   170CC4E5           STRB     R0,[R4, #+3095]
    194          }
   \   000000E0   1080BDE8           POP      {R4,PC}          ;; return
    195          

   \                                 In segment CODE, align 4, keep-with-next
    196          void and6502()
    197          {
   \                     and6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    198            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    199            value = gameImage[savepc];
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   ........           LDR      R1,??DataTable72  ;; gameImage
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   0100D0E7           LDRB     R0,[R0, +R1]
    200            A &= value;
   \   00000028   141CD4E5           LDRB     R1,[R4, #+3092]
   \   0000002C   1A0CC4E5           STRB     R0,[R4, #+3098]
   \   00000030   010010E0           ANDS     R0,R0,R1
    201            if ( A ) P &= 0xfd;
   \   00000034   171CD4E5           LDRB     R1,[R4, #+3095]
   \   00000038   140CC4E5           STRB     R0,[R4, #+3092]
   \   0000003C   FD100112           ANDNE    R1,R1,#0xFD
    202            else P |= 0x02;
   \   00000040   02108103           ORREQ    R1,R1,#0x2
    203            if ( A & 0x80 ) P |= 0x80;
   \   00000044   800010E3           TST      R0,#0x80
   \   00000048   80008113           ORRNE    R0,R1,#0x80
    204            else P &= 0x7f;
   \   0000004C   7F000102           ANDEQ    R0,R1,#0x7F
   \   00000050   170CC4E5           STRB     R0,[R4, #+3095]
    205          }
   \   00000054   1080BDE8           POP      {R4,PC}          ;; return
    206          

   \                                 In segment CODE, align 4, keep-with-next
    207          void asl6502()
    208          {
   \                     asl6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    209            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    210            value = gameImage[savepc];
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   ........           LDR      R2,??DataTable72  ;; gameImage
    211            P = ( P & 0xfe ) | ( ( value >> 7 ) & 0x01 );
   \   00000020   173CD4E5           LDRB     R3,[R4, #+3095]
   \   00000024   002092E5           LDR      R2,[R2, #+0]
   \   00000028   022080E0           ADD      R2,R0,R2
   \   0000002C   0010D2E5           LDRB     R1,[R2, #+0]
   \   00000030   FE3003E2           AND      R3,R3,#0xFE
   \   00000034   1A1CC4E5           STRB     R1,[R4, #+3098]
   \   00000038   A13383E1           ORR      R3,R3,R1, LSR #+7
   \   0000003C   173CC4E5           STRB     R3,[R4, #+3095]
    212            value = value << 1;
   \   00000040   8110A0E1           LSL      R1,R1,#+1
   \   00000044   1A1CC4E5           STRB     R1,[R4, #+3098]
    213            put6502memory( savepc, value );
   \   00000048   0130A0E3           MOV      R3,#+1
   \   0000004C   803C83E3           ORR      R3,R3,#0x8000
   \   00000050   030050E1           CMP      R0,R3
   \   00000054   0800002A           BCS      ??asl6502_0
   \   00000058   0010C2E5           STRB     R1,[R2, #+0]
   \   0000005C   400C50E3           CMP      R0,#+16384
   \   00000060   0500003A           BCC      ??asl6502_0
   \   00000064   2020A0E3           MOV      R2,#+32
   \   00000068   402C82E3           ORR      R2,R2,#0x4000
   \   0000006C   020050E1           CMP      R0,R2
   \   00000070   0100002A           BCS      ??asl6502_0
   \   00000074   FF1001E2           AND      R1,R1,#0xFF
   \   00000078   ........           _BLF     APUWrite,??APUWrite??rA
    214            if ( value ) P &= 0xfd;
   \                     ??asl6502_0:
   \   0000007C   170CD4E5           LDRB     R0,[R4, #+3095]
   \   00000080   1A1CD4E5           LDRB     R1,[R4, #+3098]
   \   00000084   000051E3           CMP      R1,#+0
   \   00000088   FD000012           ANDNE    R0,R0,#0xFD
    215            else P |= 0x02;
   \   0000008C   02008003           ORREQ    R0,R0,#0x2
    216            if ( value & 0x80 ) P |= 0x80;
   \   00000090   800011E3           TST      R1,#0x80
   \   00000094   80008013           ORRNE    R0,R0,#0x80
    217            else P &= 0x7f;
   \   00000098   7F000002           ANDEQ    R0,R0,#0x7F
   \   0000009C   170CC4E5           STRB     R0,[R4, #+3095]
    218          }
   \   000000A0   1080BDE8           POP      {R4,PC}          ;; return
    219          

   \                                 In segment CODE, align 4, keep-with-next
    220          void asla6502()
    221          {
    222            P = ( P & 0xfe ) | ( ( A >> 7 ) & 0x01 );
   \                     asla6502:
   \   00000000   ........           LDR      R0,??DataTable91  ;; pc_reg
   \   00000004   141CD0E5           LDRB     R1,[R0, #+3092]
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   FE2002E2           AND      R2,R2,#0xFE
   \   00000010   A12382E1           ORR      R2,R2,R1, LSR #+7
    223            A = A << 1;
   \   00000014   8110A0E1           LSL      R1,R1,#+1
   \   00000018   141CC0E5           STRB     R1,[R0, #+3092]
    224            if ( A ) P &= 0xfd;
   \   0000001C   FF1011E2           ANDS     R1,R1,#0xFF
   \   00000020   FD200212           ANDNE    R2,R2,#0xFD
    225            else P |= 0x02;
   \   00000024   02208203           ORREQ    R2,R2,#0x2
    226            if ( A & 0x80 ) P |= 0x80;
   \   00000028   800011E3           TST      R1,#0x80
   \   0000002C   80108213           ORRNE    R1,R2,#0x80
    227            else P &= 0x7f;
   \   00000030   7F100202           ANDEQ    R1,R2,#0x7F
   \   00000034   171CC0E5           STRB     R1,[R0, #+3095]
    228          }
   \   00000038   1EFF2FE1           BX       LR               ;; return
    229          

   \                                 In segment CODE, align 4, keep-with-next
    230          void bcc6502()
    231          {
   \                     bcc6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    232            if ( ( P & 0x01 ) == 0 )
   \   00000004   ........           LDR      R4,??DataTable53  ;; pc_reg
   \   00000008   170CD4E5           LDRB     R0,[R4, #+3095]
   \   0000000C   010010E3           TST      R0,#0x1
   \   00000010   0B00001A           BNE      ??bcc6502_0
    233            {
    234              adrmode[opcode] ();
   \   00000014   190CD4E5           LDRB     R0,[R4, #+3097]
   \   00000018   000184E0           ADD      R0,R4,R0, LSL #+2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   30FF2FE1           BLX      R0
    235              PC += savepc;
   \   00000024   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000028   B210D4E1           LDRH     R1,[R4, #+2]
   \   0000002C   000081E0           ADD      R0,R1,R0
   \   00000030   B000C4E1           STRH     R0,[R4, #+0]
    236              clockticks6502++;
   \   00000034   080C94E5           LDR      R0,[R4, #+3080]
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   080C84E5           STR      R0,[R4, #+3080]
   \   00000040   1080BDE8           POP      {R4,PC}
    237            }
    238            else
    239              value = gameImage[PC++];
   \                     ??bcc6502_0:
   \   00000044   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000048   ........           LDR      R2,??DataTable72  ;; gameImage
   \   0000004C   002092E5           LDR      R2,[R2, #+0]
   \   00000050   0210D0E7           LDRB     R1,[R0, +R2]
   \   00000054   010080E2           ADD      R0,R0,#+1
   \   00000058   B000C4E1           STRH     R0,[R4, #+0]
   \   0000005C   1A1CC4E5           STRB     R1,[R4, #+3098]
    240          }
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
    241          

   \                                 In segment CODE, align 4, keep-with-next
    242          void bcs6502()
    243          {
   \                     bcs6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    244            if ( P & 0x01 )
   \   00000004   ........           LDR      R4,??DataTable53  ;; pc_reg
   \   00000008   170CD4E5           LDRB     R0,[R4, #+3095]
   \   0000000C   010010E3           TST      R0,#0x1
   \   00000010   0B00000A           BEQ      ??bcs6502_0
    245            {
    246              adrmode[opcode] ();
   \   00000014   190CD4E5           LDRB     R0,[R4, #+3097]
   \   00000018   000184E0           ADD      R0,R4,R0, LSL #+2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   30FF2FE1           BLX      R0
    247              PC += savepc;
   \   00000024   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000028   B210D4E1           LDRH     R1,[R4, #+2]
   \   0000002C   000081E0           ADD      R0,R1,R0
   \   00000030   B000C4E1           STRH     R0,[R4, #+0]
    248              clockticks6502++;
   \   00000034   080C94E5           LDR      R0,[R4, #+3080]
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   080C84E5           STR      R0,[R4, #+3080]
   \   00000040   1080BDE8           POP      {R4,PC}
    249            }
    250            else
    251              value = gameImage[PC++];
   \                     ??bcs6502_0:
   \   00000044   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000048   ........           LDR      R2,??DataTable72  ;; gameImage
   \   0000004C   002092E5           LDR      R2,[R2, #+0]
   \   00000050   0210D0E7           LDRB     R1,[R0, +R2]
   \   00000054   010080E2           ADD      R0,R0,#+1
   \   00000058   B000C4E1           STRH     R0,[R4, #+0]
   \   0000005C   1A1CC4E5           STRB     R1,[R4, #+3098]
    252          }
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
    253          

   \                                 In segment CODE, align 4, keep-with-next
    254          void beq6502()
    255          {
   \                     beq6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    256            if ( P & 0x02 )
   \   00000004   ........           LDR      R4,??DataTable53  ;; pc_reg
   \   00000008   170CD4E5           LDRB     R0,[R4, #+3095]
   \   0000000C   020010E3           TST      R0,#0x2
   \   00000010   0B00000A           BEQ      ??beq6502_0
    257            {
    258              adrmode[opcode] ();
   \   00000014   190CD4E5           LDRB     R0,[R4, #+3097]
   \   00000018   000184E0           ADD      R0,R4,R0, LSL #+2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   30FF2FE1           BLX      R0
    259              PC += savepc;
   \   00000024   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000028   B210D4E1           LDRH     R1,[R4, #+2]
   \   0000002C   000081E0           ADD      R0,R1,R0
   \   00000030   B000C4E1           STRH     R0,[R4, #+0]
    260              clockticks6502++;
   \   00000034   080C94E5           LDR      R0,[R4, #+3080]
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   080C84E5           STR      R0,[R4, #+3080]
   \   00000040   1080BDE8           POP      {R4,PC}
    261            }
    262            else
    263              value = gameImage[PC++];
   \                     ??beq6502_0:
   \   00000044   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000048   ........           LDR      R2,??DataTable72  ;; gameImage
   \   0000004C   002092E5           LDR      R2,[R2, #+0]
   \   00000050   0210D0E7           LDRB     R1,[R0, +R2]
   \   00000054   010080E2           ADD      R0,R0,#+1
   \   00000058   B000C4E1           STRH     R0,[R4, #+0]
   \   0000005C   1A1CC4E5           STRB     R1,[R4, #+3098]
    264          }
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
    265          

   \                                 In segment CODE, align 4, keep-with-next
    266          void bit6502()
    267          {
   \                     bit6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    268            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    269            value = gameImage[savepc];
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   ........           LDR      R1,??DataTable72  ;; gameImage
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   0100D0E7           LDRB     R0,[R0, +R1]
    270          
    271            /* non-destrucive logically And between value and the accumulator * and set zero flag */
    272            if ( value & A ) P &= 0xfd;
   \   00000028   141CD4E5           LDRB     R1,[R4, #+3092]
   \   0000002C   1A0CC4E5           STRB     R0,[R4, #+3098]
   \   00000030   000011E1           TST      R1,R0
   \   00000034   171CD4E5           LDRB     R1,[R4, #+3095]
   \   00000038   FD100112           ANDNE    R1,R1,#0xFD
    273            else P |= 0x02;
   \   0000003C   02108103           ORREQ    R1,R1,#0x2
   \   00000040   171CC4E5           STRB     R1,[R4, #+3095]
    274          
    275            /* set negative and overflow flags from value */
    276            P = ( P & 0x3f ) | ( value & 0xc0 );
   \   00000044   171CD4E5           LDRB     R1,[R4, #+3095]
   \   00000048   C00000E2           AND      R0,R0,#0xC0
   \   0000004C   3F1001E2           AND      R1,R1,#0x3F
   \   00000050   010080E1           ORR      R0,R0,R1
   \   00000054   170CC4E5           STRB     R0,[R4, #+3095]
    277          }
   \   00000058   1080BDE8           POP      {R4,PC}          ;; return
    278          

   \                                 In segment CODE, align 4, keep-with-next
    279          void bmi6502()
    280          {
   \                     bmi6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    281            if ( P & 0x80 )
   \   00000004   ........           LDR      R4,??DataTable53  ;; pc_reg
   \   00000008   170CD4E5           LDRB     R0,[R4, #+3095]
   \   0000000C   800010E3           TST      R0,#0x80
   \   00000010   0B00000A           BEQ      ??bmi6502_0
    282            {
    283              adrmode[opcode] ();
   \   00000014   190CD4E5           LDRB     R0,[R4, #+3097]
   \   00000018   000184E0           ADD      R0,R4,R0, LSL #+2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   30FF2FE1           BLX      R0
    284              PC += savepc;
   \   00000024   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000028   B210D4E1           LDRH     R1,[R4, #+2]
   \   0000002C   000081E0           ADD      R0,R1,R0
   \   00000030   B000C4E1           STRH     R0,[R4, #+0]
    285              clockticks6502++;
   \   00000034   080C94E5           LDR      R0,[R4, #+3080]
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   080C84E5           STR      R0,[R4, #+3080]
   \   00000040   1080BDE8           POP      {R4,PC}
    286            }
    287            else
    288              value = gameImage[PC++];
   \                     ??bmi6502_0:
   \   00000044   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000048   ........           LDR      R2,??DataTable72  ;; gameImage
   \   0000004C   002092E5           LDR      R2,[R2, #+0]
   \   00000050   0210D0E7           LDRB     R1,[R0, +R2]
   \   00000054   010080E2           ADD      R0,R0,#+1
   \   00000058   B000C4E1           STRH     R0,[R4, #+0]
   \   0000005C   1A1CC4E5           STRB     R1,[R4, #+3098]
    289          }
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
    290          

   \                                 In segment CODE, align 4, keep-with-next
    291          void bne6502()
    292          {
   \                     bne6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    293            if ( ( P & 0x02 ) == 0 )
   \   00000004   ........           LDR      R4,??DataTable53  ;; pc_reg
   \   00000008   170CD4E5           LDRB     R0,[R4, #+3095]
   \   0000000C   020010E3           TST      R0,#0x2
   \   00000010   0B00001A           BNE      ??bne6502_0
    294            {
    295              adrmode[opcode] ();
   \   00000014   190CD4E5           LDRB     R0,[R4, #+3097]
   \   00000018   000184E0           ADD      R0,R4,R0, LSL #+2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   30FF2FE1           BLX      R0
    296              PC += savepc;
   \   00000024   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000028   B210D4E1           LDRH     R1,[R4, #+2]
   \   0000002C   000081E0           ADD      R0,R1,R0
   \   00000030   B000C4E1           STRH     R0,[R4, #+0]
    297              clockticks6502++;
   \   00000034   080C94E5           LDR      R0,[R4, #+3080]
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   080C84E5           STR      R0,[R4, #+3080]
   \   00000040   1080BDE8           POP      {R4,PC}
    298            }
    299            else
    300              value = gameImage[PC++];
   \                     ??bne6502_0:
   \   00000044   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000048   ........           LDR      R2,??DataTable72  ;; gameImage
   \   0000004C   002092E5           LDR      R2,[R2, #+0]
   \   00000050   0210D0E7           LDRB     R1,[R0, +R2]
   \   00000054   010080E2           ADD      R0,R0,#+1
   \   00000058   B000C4E1           STRH     R0,[R4, #+0]
   \   0000005C   1A1CC4E5           STRB     R1,[R4, #+3098]
    301          }
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
    302          

   \                                 In segment CODE, align 4, keep-with-next
    303          void bpl6502()
    304          {
   \                     bpl6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    305            if ( ( P & 0x80 ) == 0 )
   \   00000004   ........           LDR      R4,??DataTable53  ;; pc_reg
   \   00000008   170CD4E5           LDRB     R0,[R4, #+3095]
   \   0000000C   800010E3           TST      R0,#0x80
   \   00000010   0B00001A           BNE      ??bpl6502_0
    306            {
    307              adrmode[opcode] ();
   \   00000014   190CD4E5           LDRB     R0,[R4, #+3097]
   \   00000018   000184E0           ADD      R0,R4,R0, LSL #+2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   30FF2FE1           BLX      R0
    308              PC += savepc;
   \   00000024   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000028   B210D4E1           LDRH     R1,[R4, #+2]
   \   0000002C   000081E0           ADD      R0,R1,R0
   \   00000030   B000C4E1           STRH     R0,[R4, #+0]
    309              clockticks6502++;
   \   00000034   080C94E5           LDR      R0,[R4, #+3080]
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   080C84E5           STR      R0,[R4, #+3080]
   \   00000040   1080BDE8           POP      {R4,PC}
    310            }
    311            else
    312              value = gameImage[PC++];
   \                     ??bpl6502_0:
   \   00000044   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000048   ........           LDR      R2,??DataTable72  ;; gameImage
   \   0000004C   002092E5           LDR      R2,[R2, #+0]
   \   00000050   0210D0E7           LDRB     R1,[R0, +R2]
   \   00000054   010080E2           ADD      R0,R0,#+1
   \   00000058   B000C4E1           STRH     R0,[R4, #+0]
   \   0000005C   1A1CC4E5           STRB     R1,[R4, #+3098]
    313          }
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
    314          

   \                                 In segment CODE, align 4, keep-with-next
    315          void brk6502()
    316          {
   \                     brk6502:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    317            PC++;
   \   00000004   ........           LDR      R4,??DataTable53  ;; pc_reg
   \   00000008   B000D4E1           LDRH     R0,[R4, #+0]
    318            put6502memory( 0x0100 + S--, ( BYTE )( PC >> 8 ) );
   \   0000000C   182CD4E5           LDRB     R2,[R4, #+3096]
   \   00000010   ........           LDR      R6,??DataTable72  ;; gameImage
   \   00000014   010080E2           ADD      R0,R0,#+1
   \   00000018   B000C4E1           STRH     R0,[R4, #+0]
   \   0000001C   011042E2           SUB      R1,R2,#+1
   \   00000020   181CC4E5           STRB     R1,[R4, #+3096]
   \   00000024   2014A0E1           LSR      R1,R0,#+8
   \   00000028   400F82E2           ADD      R0,R2,#+256
   \   0000002C   2050A0E3           MOV      R5,#+32
   \   00000030   405C85E3           ORR      R5,R5,#0x4000
   \   00000034   0170A0E3           MOV      R7,#+1
   \   00000038   807C87E3           ORR      R7,R7,#0x8000
   \   0000003C   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000040   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000044   070050E1           CMP      R0,R7
   \   00000048   0700002A           BCS      ??brk6502_0
   \   0000004C   003096E5           LDR      R3,[R6, #+0]
   \   00000050   400C50E3           CMP      R0,#+16384
   \   00000054   0310C0E7           STRB     R1,[R0, +R3]
   \   00000058   0300003A           BCC      ??brk6502_0
   \   0000005C   050050E1           CMP      R0,R5
   \   00000060   0100002A           BCS      ??brk6502_0
   \   00000064   FF1001E2           AND      R1,R1,#0xFF
   \   00000068   ........           _BLF     APUWrite,??APUWrite??rA
    319            put6502memory( 0x0100 + S--, ( BYTE )( PC & 0xff ) );
   \                     ??brk6502_0:
   \   0000006C   180CD4E5           LDRB     R0,[R4, #+3096]
   \   00000070   011040E2           SUB      R1,R0,#+1
   \   00000074   181CC4E5           STRB     R1,[R4, #+3096]
   \   00000078   B010D4E1           LDRH     R1,[R4, #+0]
   \   0000007C   400F80E2           ADD      R0,R0,#+256
   \   00000080   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000084   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000088   070050E1           CMP      R0,R7
   \   0000008C   0700002A           BCS      ??brk6502_1
   \   00000090   003096E5           LDR      R3,[R6, #+0]
   \   00000094   400C50E3           CMP      R0,#+16384
   \   00000098   0310C0E7           STRB     R1,[R0, +R3]
   \   0000009C   0300003A           BCC      ??brk6502_1
   \   000000A0   050050E1           CMP      R0,R5
   \   000000A4   0100002A           BCS      ??brk6502_1
   \   000000A8   FF1001E2           AND      R1,R1,#0xFF
   \   000000AC   ........           _BLF     APUWrite,??APUWrite??rA
    320            put6502memory( 0x0100 + S--, P );
   \                     ??brk6502_1:
   \   000000B0   180CD4E5           LDRB     R0,[R4, #+3096]
   \   000000B4   011040E2           SUB      R1,R0,#+1
   \   000000B8   181CC4E5           STRB     R1,[R4, #+3096]
   \   000000BC   171CD4E5           LDRB     R1,[R4, #+3095]
   \   000000C0   400F80E2           ADD      R0,R0,#+256
   \   000000C4   0008A0E1           MOV      R0,R0, LSL #+16
   \   000000C8   2008A0E1           MOV      R0,R0, LSR #+16
   \   000000CC   070050E1           CMP      R0,R7
   \   000000D0   0600002A           BCS      ??brk6502_2
   \   000000D4   003096E5           LDR      R3,[R6, #+0]
   \   000000D8   400C50E3           CMP      R0,#+16384
   \   000000DC   0310C0E7           STRB     R1,[R0, +R3]
   \   000000E0   0200003A           BCC      ??brk6502_2
   \   000000E4   050050E1           CMP      R0,R5
   \   000000E8   0000002A           BCS      ??brk6502_2
   \   000000EC   ........           _BLF     APUWrite,??APUWrite??rA
    321            P |= 0x14;
   \                     ??brk6502_2:
   \   000000F0   170CD4E5           LDRB     R0,[R4, #+3095]
    322            PC = gameImage[0xfffe & addrmask] + ( gameImage[0xffff & addrmask] << 8 );
   \   000000F4   001096E5           LDR      R1,[R6, #+0]
   \   000000F8   FE20A0E3           MOV      R2,#+254
   \   000000FC   140080E3           ORR      R0,R0,#0x14
   \   00000100   170CC4E5           STRB     R0,[R4, #+3095]
   \   00000104   ........           LDR      R0,??DataTable50  ;; addrmask
   \   00000108   FF2C82E3           ORR      R2,R2,#0xFF00
   \   0000010C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000110   002002E0           AND      R2,R2,R0
   \   00000114   0120D2E7           LDRB     R2,[R2, +R1]
   \   00000118   0100D0E7           LDRB     R0,[R0, +R1]
   \   0000011C   000482E0           ADD      R0,R2,R0, LSL #+8
   \   00000120   B000C4E1           STRH     R0,[R4, #+0]
    323          }
   \   00000124   F080BDE8           POP      {R4-R7,PC}       ;; return
    324          

   \                                 In segment CODE, align 4, keep-with-next
    325          void bvc6502()
    326          {
   \                     bvc6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    327            if ( ( P & 0x40 ) == 0 )
   \   00000004   ........           LDR      R4,??DataTable53  ;; pc_reg
   \   00000008   170CD4E5           LDRB     R0,[R4, #+3095]
   \   0000000C   400010E3           TST      R0,#0x40
   \   00000010   0B00001A           BNE      ??bvc6502_0
    328            {
    329              adrmode[opcode] ();
   \   00000014   190CD4E5           LDRB     R0,[R4, #+3097]
   \   00000018   000184E0           ADD      R0,R4,R0, LSL #+2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   30FF2FE1           BLX      R0
    330              PC += savepc;
   \   00000024   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000028   B210D4E1           LDRH     R1,[R4, #+2]
   \   0000002C   000081E0           ADD      R0,R1,R0
   \   00000030   B000C4E1           STRH     R0,[R4, #+0]
    331              clockticks6502++;
   \   00000034   080C94E5           LDR      R0,[R4, #+3080]
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   080C84E5           STR      R0,[R4, #+3080]
   \   00000040   1080BDE8           POP      {R4,PC}
    332            }
    333            else
    334              value = gameImage[PC++];
   \                     ??bvc6502_0:
   \   00000044   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000048   ........           LDR      R2,??DataTable72  ;; gameImage
   \   0000004C   002092E5           LDR      R2,[R2, #+0]
   \   00000050   0210D0E7           LDRB     R1,[R0, +R2]
   \   00000054   010080E2           ADD      R0,R0,#+1
   \   00000058   B000C4E1           STRH     R0,[R4, #+0]
   \   0000005C   1A1CC4E5           STRB     R1,[R4, #+3098]
    335          }
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
    336          

   \                                 In segment CODE, align 4, keep-with-next
    337          void bvs6502()
    338          {
   \                     bvs6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    339            if ( P & 0x40 )
   \   00000004   ........           LDR      R4,??DataTable53  ;; pc_reg
   \   00000008   170CD4E5           LDRB     R0,[R4, #+3095]
   \   0000000C   400010E3           TST      R0,#0x40
   \   00000010   0B00000A           BEQ      ??bvs6502_0
    340            {
    341              adrmode[opcode] ();
   \   00000014   190CD4E5           LDRB     R0,[R4, #+3097]
   \   00000018   000184E0           ADD      R0,R4,R0, LSL #+2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   30FF2FE1           BLX      R0
    342              PC += savepc;
   \   00000024   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000028   B210D4E1           LDRH     R1,[R4, #+2]
   \   0000002C   000081E0           ADD      R0,R1,R0
   \   00000030   B000C4E1           STRH     R0,[R4, #+0]
    343              clockticks6502++;
   \   00000034   080C94E5           LDR      R0,[R4, #+3080]
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   080C84E5           STR      R0,[R4, #+3080]
   \   00000040   1080BDE8           POP      {R4,PC}
    344            }
    345            else
    346              value = gameImage[PC++];
   \                     ??bvs6502_0:
   \   00000044   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000048   ........           LDR      R2,??DataTable72  ;; gameImage
   \   0000004C   002092E5           LDR      R2,[R2, #+0]
   \   00000050   0210D0E7           LDRB     R1,[R0, +R2]
   \   00000054   010080E2           ADD      R0,R0,#+1
   \   00000058   B000C4E1           STRH     R0,[R4, #+0]
   \   0000005C   1A1CC4E5           STRB     R1,[R4, #+3098]
    347          }
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
    348          

   \                                 In segment CODE, align 4, keep-with-next
    349          void clc6502()
    350          {
    351            P &= 0xfe;
   \                     clc6502:
   \   00000000   ........           LDR      R0,??DataTable91  ;; pc_reg
   \   00000004   171CD0E5           LDRB     R1,[R0, #+3095]
   \   00000008   FE1001E2           AND      R1,R1,#0xFE
   \   0000000C   171CC0E5           STRB     R1,[R0, #+3095]
    352          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    353          

   \                                 In segment CODE, align 4, keep-with-next
    354          void cld6502()
    355          {
    356            P &= 0xf7;
   \                     cld6502:
   \   00000000   ........           LDR      R0,??DataTable91  ;; pc_reg
   \   00000004   171CD0E5           LDRB     R1,[R0, #+3095]
   \   00000008   F71001E2           AND      R1,R1,#0xF7
   \   0000000C   171CC0E5           STRB     R1,[R0, #+3095]
    357          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    358          

   \                                 In segment CODE, align 4, keep-with-next
    359          void cli6502()
    360          {
    361            P &= 0xfb;
   \                     cli6502:
   \   00000000   ........           LDR      R0,??DataTable91  ;; pc_reg
   \   00000004   171CD0E5           LDRB     R1,[R0, #+3095]
   \   00000008   FB1001E2           AND      R1,R1,#0xFB
   \   0000000C   171CC0E5           STRB     R1,[R0, #+3095]
    362          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    363          

   \                                 In segment CODE, align 4, keep-with-next
    364          void clv6502()
    365          {
    366            P &= 0xbf;
   \                     clv6502:
   \   00000000   ........           LDR      R0,??DataTable91  ;; pc_reg
   \   00000004   171CD0E5           LDRB     R1,[R0, #+3095]
   \   00000008   BF1001E2           AND      R1,R1,#0xBF
   \   0000000C   171CC0E5           STRB     R1,[R0, #+3095]
    367          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    368          

   \                                 In segment CODE, align 4, keep-with-next
    369          void cmp6502()
    370          {
   \                     cmp6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    371            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    372            value = gameImage[savepc];
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   ........           LDR      R1,??DataTable72  ;; gameImage
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   0100D0E7           LDRB     R0,[R0, +R1]
    373            if ( A + 0x100 - value > 0xff ) P |= 0x01;
   \   00000028   141CD4E5           LDRB     R1,[R4, #+3092]
   \   0000002C   1A0CC4E5           STRB     R0,[R4, #+3098]
   \   00000030   402F81E2           ADD      R2,R1,#+256
   \   00000034   002042E0           SUB      R2,R2,R0
   \   00000038   400F52E3           CMP      R2,#+256
   \   0000003C   172CD4E5           LDRB     R2,[R4, #+3095]
    374            else P &= 0xfe;
    375            value = A + 0x100 - value;
   \   00000040   000041E0           SUB      R0,R1,R0
   \   00000044   1A0CC4E5           STRB     R0,[R4, #+3098]
   \   00000048   012082A3           ORRGE    R2,R2,#0x1
   \   0000004C   FE2002B2           ANDLT    R2,R2,#0xFE
    376            if ( value ) P &= 0xfd;
   \   00000050   FF0010E2           ANDS     R0,R0,#0xFF
   \   00000054   FD100212           ANDNE    R1,R2,#0xFD
    377            else P |= 0x02;
   \   00000058   02108203           ORREQ    R1,R2,#0x2
    378            if ( value & 0x80 ) P |= 0x80;
   \   0000005C   800010E3           TST      R0,#0x80
   \   00000060   80008113           ORRNE    R0,R1,#0x80
    379            else P &= 0x7f;
   \   00000064   7F000102           ANDEQ    R0,R1,#0x7F
   \   00000068   170CC4E5           STRB     R0,[R4, #+3095]
    380          }
   \   0000006C   1080BDE8           POP      {R4,PC}          ;; return
    381          

   \                                 In segment CODE, align 4, keep-with-next
    382          void cpx6502()
    383          {
   \                     cpx6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    384            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    385            value = gameImage[savepc];
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   ........           LDR      R1,??DataTable72  ;; gameImage
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   0100D0E7           LDRB     R0,[R0, +R1]
    386            if ( X + 0x100 - value > 0xff ) P |= 0x01;
   \   00000028   151CD4E5           LDRB     R1,[R4, #+3093]
   \   0000002C   1A0CC4E5           STRB     R0,[R4, #+3098]
   \   00000030   402F81E2           ADD      R2,R1,#+256
   \   00000034   002042E0           SUB      R2,R2,R0
   \   00000038   400F52E3           CMP      R2,#+256
   \   0000003C   172CD4E5           LDRB     R2,[R4, #+3095]
    387            else P &= 0xfe;
    388            value = X + 0x100 - value;
   \   00000040   000041E0           SUB      R0,R1,R0
   \   00000044   1A0CC4E5           STRB     R0,[R4, #+3098]
   \   00000048   012082A3           ORRGE    R2,R2,#0x1
   \   0000004C   FE2002B2           ANDLT    R2,R2,#0xFE
    389            if ( value ) P &= 0xfd;
   \   00000050   FF0010E2           ANDS     R0,R0,#0xFF
   \   00000054   FD100212           ANDNE    R1,R2,#0xFD
    390            else P |= 0x02;
   \   00000058   02108203           ORREQ    R1,R2,#0x2
    391            if ( value & 0x80 ) P |= 0x80;
   \   0000005C   800010E3           TST      R0,#0x80
   \   00000060   80008113           ORRNE    R0,R1,#0x80
    392            else P &= 0x7f;
   \   00000064   7F000102           ANDEQ    R0,R1,#0x7F
   \   00000068   170CC4E5           STRB     R0,[R4, #+3095]
    393          }
   \   0000006C   1080BDE8           POP      {R4,PC}          ;; return
    394          

   \                                 In segment CODE, align 4, keep-with-next
    395          void cpy6502()
    396          {
   \                     cpy6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    397            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    398            value = gameImage[savepc];
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   ........           LDR      R1,??DataTable72  ;; gameImage
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   0100D0E7           LDRB     R0,[R0, +R1]
    399            if ( Y + 0x100 - value > 0xff ) P |= 0x01;
   \   00000028   161CD4E5           LDRB     R1,[R4, #+3094]
   \   0000002C   1A0CC4E5           STRB     R0,[R4, #+3098]
   \   00000030   402F81E2           ADD      R2,R1,#+256
   \   00000034   002042E0           SUB      R2,R2,R0
   \   00000038   400F52E3           CMP      R2,#+256
   \   0000003C   172CD4E5           LDRB     R2,[R4, #+3095]
    400            else P &= 0xfe;
    401            value = Y + 0x100 - value;
   \   00000040   000041E0           SUB      R0,R1,R0
   \   00000044   1A0CC4E5           STRB     R0,[R4, #+3098]
   \   00000048   012082A3           ORRGE    R2,R2,#0x1
   \   0000004C   FE2002B2           ANDLT    R2,R2,#0xFE
    402            if ( value ) P &= 0xfd;
   \   00000050   FF0010E2           ANDS     R0,R0,#0xFF
   \   00000054   FD100212           ANDNE    R1,R2,#0xFD
    403            else P |= 0x02;
   \   00000058   02108203           ORREQ    R1,R2,#0x2
    404            if ( value & 0x80 ) P |= 0x80;
   \   0000005C   800010E3           TST      R0,#0x80
   \   00000060   80008113           ORRNE    R0,R1,#0x80
    405            else P &= 0x7f;
   \   00000064   7F000102           ANDEQ    R0,R1,#0x7F
   \   00000068   170CC4E5           STRB     R0,[R4, #+3095]
    406          }
   \   0000006C   1080BDE8           POP      {R4,PC}          ;; return
    407          

   \                                 In segment CODE, align 4, keep-with-next
    408          void dec6502()
    409          {
   \                     dec6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    410            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    411            gameImage[savepc] --;
   \   00000018   ........           LDR      R0,??DataTable72  ;; gameImage
   \   0000001C   B210D4E1           LDRH     R1,[R4, #+2]
   \   00000020   002090E5           LDR      R2,[R0, #+0]
   \   00000024   021081E0           ADD      R1,R1,R2
   \   00000028   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000002C   012042E2           SUB      R2,R2,#+1
   \   00000030   0020C1E5           STRB     R2,[R1, #+0]
    412            value = gameImage[savepc];
   \   00000034   B210D4E1           LDRH     R1,[R4, #+2]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   0000D1E7           LDRB     R0,[R1, +R0]
    413            if ( value ) P &= 0xfd;
   \   00000040   171CD4E5           LDRB     R1,[R4, #+3095]
   \   00000044   1A0CC4E5           STRB     R0,[R4, #+3098]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   FD100112           ANDNE    R1,R1,#0xFD
    414            else P |= 0x02;
   \   00000050   02108103           ORREQ    R1,R1,#0x2
    415            if ( value & 0x80 ) P |= 0x80;
   \   00000054   800010E3           TST      R0,#0x80
   \   00000058   80008113           ORRNE    R0,R1,#0x80
    416            else P &= 0x7f;
   \   0000005C   7F000102           ANDEQ    R0,R1,#0x7F
   \   00000060   170CC4E5           STRB     R0,[R4, #+3095]
    417          }
   \   00000064   1080BDE8           POP      {R4,PC}          ;; return
    418          

   \                                 In segment CODE, align 4, keep-with-next
    419          void dex6502()
    420          {
    421            X--;
   \                     dex6502:
   \   00000000   ........           LDR      R0,??DataTable91  ;; pc_reg
   \   00000004   151CD0E5           LDRB     R1,[R0, #+3093]
    422            if ( X ) P &= 0xfd;
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   011041E2           SUB      R1,R1,#+1
   \   00000010   151CC0E5           STRB     R1,[R0, #+3093]
   \   00000014   FF1011E2           ANDS     R1,R1,#0xFF
   \   00000018   FD200212           ANDNE    R2,R2,#0xFD
    423            else P |= 0x02;
   \   0000001C   02208203           ORREQ    R2,R2,#0x2
    424            if ( X & 0x80 ) P |= 0x80;
   \   00000020   800011E3           TST      R1,#0x80
   \   00000024   80108213           ORRNE    R1,R2,#0x80
    425            else P &= 0x7f;
   \   00000028   7F100202           ANDEQ    R1,R2,#0x7F
   \   0000002C   171CC0E5           STRB     R1,[R0, #+3095]
    426          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
    427          

   \                                 In segment CODE, align 4, keep-with-next
    428          void dey6502()
    429          {
    430            Y--;
   \                     dey6502:
   \   00000000   ........           LDR      R0,??DataTable91  ;; pc_reg
   \   00000004   161CD0E5           LDRB     R1,[R0, #+3094]
    431            if ( Y ) P &= 0xfd;
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   011041E2           SUB      R1,R1,#+1
   \   00000010   161CC0E5           STRB     R1,[R0, #+3094]
   \   00000014   FF1011E2           ANDS     R1,R1,#0xFF
   \   00000018   FD200212           ANDNE    R2,R2,#0xFD
    432            else P |= 0x02;
   \   0000001C   02208203           ORREQ    R2,R2,#0x2
    433            if ( Y & 0x80 ) P |= 0x80;
   \   00000020   800011E3           TST      R1,#0x80
   \   00000024   80108213           ORRNE    R1,R2,#0x80
    434            else P &= 0x7f;
   \   00000028   7F100202           ANDEQ    R1,R2,#0x7F
   \   0000002C   171CC0E5           STRB     R1,[R0, #+3095]
    435          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
    436          

   \                                 In segment CODE, align 4, keep-with-next
    437          void eor6502()
    438          {
   \                     eor6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    439            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    440            A ^= gameImage[savepc];
   \   00000018   B210D4E1           LDRH     R1,[R4, #+2]
   \   0000001C   ........           LDR      R2,??DataTable72  ;; gameImage
   \   00000020   140CD4E5           LDRB     R0,[R4, #+3092]
   \   00000024   002092E5           LDR      R2,[R2, #+0]
   \   00000028   0210D1E7           LDRB     R1,[R1, +R2]
   \   0000002C   000021E0           EOR      R0,R1,R0
    441            if ( A ) P &= 0xfd;
   \   00000030   171CD4E5           LDRB     R1,[R4, #+3095]
   \   00000034   140CC4E5           STRB     R0,[R4, #+3092]
   \   00000038   FF0010E2           ANDS     R0,R0,#0xFF
   \   0000003C   FD100112           ANDNE    R1,R1,#0xFD
    442            else P |= 0x02;
   \   00000040   02108103           ORREQ    R1,R1,#0x2
    443            if ( A & 0x80 ) P |= 0x80;
   \   00000044   800010E3           TST      R0,#0x80
   \   00000048   80008113           ORRNE    R0,R1,#0x80
    444            else P &= 0x7f;
   \   0000004C   7F000102           ANDEQ    R0,R1,#0x7F
   \   00000050   170CC4E5           STRB     R0,[R4, #+3095]
    445          }
   \   00000054   1080BDE8           POP      {R4,PC}          ;; return
    446          

   \                                 In segment CODE, align 4, keep-with-next
    447          void inc6502()
    448          {
   \                     inc6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    449            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    450            gameImage[savepc] ++;
   \   00000018   ........           LDR      R0,??DataTable72  ;; gameImage
   \   0000001C   B210D4E1           LDRH     R1,[R4, #+2]
   \   00000020   002090E5           LDR      R2,[R0, #+0]
   \   00000024   021081E0           ADD      R1,R1,R2
   \   00000028   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000002C   012082E2           ADD      R2,R2,#+1
   \   00000030   0020C1E5           STRB     R2,[R1, #+0]
    451            value = gameImage[savepc];
   \   00000034   B210D4E1           LDRH     R1,[R4, #+2]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   0000D1E7           LDRB     R0,[R1, +R0]
    452            if ( value ) P &= 0xfd;
   \   00000040   171CD4E5           LDRB     R1,[R4, #+3095]
   \   00000044   1A0CC4E5           STRB     R0,[R4, #+3098]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   FD100112           ANDNE    R1,R1,#0xFD
    453            else P |= 0x02;
   \   00000050   02108103           ORREQ    R1,R1,#0x2
    454            if ( value & 0x80 ) P |= 0x80;
   \   00000054   800010E3           TST      R0,#0x80
   \   00000058   80008113           ORRNE    R0,R1,#0x80
    455            else P &= 0x7f;
   \   0000005C   7F000102           ANDEQ    R0,R1,#0x7F
   \   00000060   170CC4E5           STRB     R0,[R4, #+3095]
    456          }
   \   00000064   1080BDE8           POP      {R4,PC}          ;; return
    457          

   \                                 In segment CODE, align 4, keep-with-next
    458          void inx6502()
    459          {
    460            X++;
   \                     inx6502:
   \   00000000   ........           LDR      R0,??DataTable91  ;; pc_reg
   \   00000004   151CD0E5           LDRB     R1,[R0, #+3093]
    461            if ( X ) P &= 0xfd;
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   011081E2           ADD      R1,R1,#+1
   \   00000010   151CC0E5           STRB     R1,[R0, #+3093]
   \   00000014   FF1011E2           ANDS     R1,R1,#0xFF
   \   00000018   FD200212           ANDNE    R2,R2,#0xFD
    462            else P |= 0x02;
   \   0000001C   02208203           ORREQ    R2,R2,#0x2
    463            if ( X & 0x80 ) P |= 0x80;
   \   00000020   800011E3           TST      R1,#0x80
   \   00000024   80108213           ORRNE    R1,R2,#0x80
    464            else P &= 0x7f;
   \   00000028   7F100202           ANDEQ    R1,R2,#0x7F
   \   0000002C   171CC0E5           STRB     R1,[R0, #+3095]
    465          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
    466          

   \                                 In segment CODE, align 4, keep-with-next
    467          void iny6502()
    468          {
    469            Y++;
   \                     iny6502:
   \   00000000   ........           LDR      R0,??DataTable91  ;; pc_reg
   \   00000004   161CD0E5           LDRB     R1,[R0, #+3094]
    470            if ( Y ) P &= 0xfd;
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   011081E2           ADD      R1,R1,#+1
   \   00000010   161CC0E5           STRB     R1,[R0, #+3094]
   \   00000014   FF1011E2           ANDS     R1,R1,#0xFF
   \   00000018   FD200212           ANDNE    R2,R2,#0xFD
    471            else P |= 0x02;
   \   0000001C   02208203           ORREQ    R2,R2,#0x2
    472            if ( Y & 0x80 ) P |= 0x80;
   \   00000020   800011E3           TST      R1,#0x80
   \   00000024   80108213           ORRNE    R1,R2,#0x80
    473            else P &= 0x7f;
   \   00000028   7F100202           ANDEQ    R1,R2,#0x7F
   \   0000002C   171CC0E5           STRB     R1,[R0, #+3095]
    474          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
    475          

   \                                 In segment CODE, align 4, keep-with-next
    476          void jmp6502()
    477          {
   \                     jmp6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    478            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable124  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    479            PC = savepc;
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   B000C4E1           STRH     R0,[R4, #+0]
    480          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
    481          

   \                                 In segment CODE, align 4, keep-with-next
    482          void jsr6502()
    483          {
   \                     jsr6502:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    484            PC++;
   \   00000004   ........           LDR      R4,??DataTable124  ;; pc_reg
   \   00000008   B000D4E1           LDRH     R0,[R4, #+0]
    485            put6502memory( 0x0100 + S--, ( BYTE )( PC >> 8 ) );
   \   0000000C   182CD4E5           LDRB     R2,[R4, #+3096]
   \   00000010   ........           LDR      R6,??DataTable140  ;; gameImage
   \   00000014   010080E2           ADD      R0,R0,#+1
   \   00000018   B000C4E1           STRH     R0,[R4, #+0]
   \   0000001C   011042E2           SUB      R1,R2,#+1
   \   00000020   181CC4E5           STRB     R1,[R4, #+3096]
   \   00000024   2014A0E1           LSR      R1,R0,#+8
   \   00000028   400F82E2           ADD      R0,R2,#+256
   \   0000002C   2050A0E3           MOV      R5,#+32
   \   00000030   405C85E3           ORR      R5,R5,#0x4000
   \   00000034   0170A0E3           MOV      R7,#+1
   \   00000038   807C87E3           ORR      R7,R7,#0x8000
   \   0000003C   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000040   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000044   070050E1           CMP      R0,R7
   \   00000048   0700002A           BCS      ??jsr6502_0
   \   0000004C   003096E5           LDR      R3,[R6, #+0]
   \   00000050   400C50E3           CMP      R0,#+16384
   \   00000054   0310C0E7           STRB     R1,[R0, +R3]
   \   00000058   0300003A           BCC      ??jsr6502_0
   \   0000005C   050050E1           CMP      R0,R5
   \   00000060   0100002A           BCS      ??jsr6502_0
   \   00000064   FF1001E2           AND      R1,R1,#0xFF
   \   00000068   ........           _BLF     APUWrite,??APUWrite??rA
    486            put6502memory( 0x0100 + S--, ( BYTE )( PC & 0xff ) );
   \                     ??jsr6502_0:
   \   0000006C   180CD4E5           LDRB     R0,[R4, #+3096]
   \   00000070   011040E2           SUB      R1,R0,#+1
   \   00000074   181CC4E5           STRB     R1,[R4, #+3096]
   \   00000078   B010D4E1           LDRH     R1,[R4, #+0]
   \   0000007C   400F80E2           ADD      R0,R0,#+256
   \   00000080   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000084   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000088   070050E1           CMP      R0,R7
   \   0000008C   0700002A           BCS      ??jsr6502_1
   \   00000090   003096E5           LDR      R3,[R6, #+0]
   \   00000094   400C50E3           CMP      R0,#+16384
   \   00000098   0310C0E7           STRB     R1,[R0, +R3]
   \   0000009C   0300003A           BCC      ??jsr6502_1
   \   000000A0   050050E1           CMP      R0,R5
   \   000000A4   0100002A           BCS      ??jsr6502_1
   \   000000A8   FF1001E2           AND      R1,R1,#0xFF
   \   000000AC   ........           _BLF     APUWrite,??APUWrite??rA
    487            PC--;
   \                     ??jsr6502_1:
   \   000000B0   B000D4E1           LDRH     R0,[R4, #+0]
   \   000000B4   FF10A0E3           MOV      R1,#+255
   \   000000B8   FF1C81E3           ORR      R1,R1,#0xFF00
   \   000000BC   000081E0           ADD      R0,R1,R0
   \   000000C0   B000C4E1           STRH     R0,[R4, #+0]
    488            adrmode[opcode] ();
   \   000000C4   190CD4E5           LDRB     R0,[R4, #+3097]
   \   000000C8   000184E0           ADD      R0,R4,R0, LSL #+2
   \   000000CC   080090E5           LDR      R0,[R0, #+8]
   \   000000D0   30FF2FE1           BLX      R0
    489            PC = savepc;
   \   000000D4   B200D4E1           LDRH     R0,[R4, #+2]
   \   000000D8   B000C4E1           STRH     R0,[R4, #+0]
    490          }
   \   000000DC   F080BDE8           POP      {R4-R7,PC}       ;; return
    491          

   \                                 In segment CODE, align 4, keep-with-next
    492          void lda6502()
    493          {
   \                     lda6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    494            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    495            A = gameImage[savepc];
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   ........           LDR      R1,??DataTable140  ;; gameImage
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   0100D0E7           LDRB     R0,[R0, +R1]
    496            // set the zero flag
    497            if ( A ) P &= 0xfd;
   \   00000028   171CD4E5           LDRB     R1,[R4, #+3095]
   \   0000002C   140CC4E5           STRB     R0,[R4, #+3092]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   FD100112           ANDNE    R1,R1,#0xFD
    498            else P |= 0x02;
   \   00000038   02108103           ORREQ    R1,R1,#0x2
    499            // set the negative flag
    500            if ( A & 0x80 ) P |= 0x80;
   \   0000003C   800010E3           TST      R0,#0x80
   \   00000040   80008113           ORRNE    R0,R1,#0x80
    501            else P &= 0x7f;
   \   00000044   7F000102           ANDEQ    R0,R1,#0x7F
   \   00000048   170CC4E5           STRB     R0,[R4, #+3095]
    502          }
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
    503          

   \                                 In segment CODE, align 4, keep-with-next
    504          void ldx6502()
    505          {
   \                     ldx6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    506            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    507            X = gameImage[savepc];
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   ........           LDR      R1,??DataTable140  ;; gameImage
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   0100D0E7           LDRB     R0,[R0, +R1]
    508            if ( X ) P &= 0xfd;
   \   00000028   171CD4E5           LDRB     R1,[R4, #+3095]
   \   0000002C   150CC4E5           STRB     R0,[R4, #+3093]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   FD100112           ANDNE    R1,R1,#0xFD
    509            else P |= 0x02;
   \   00000038   02108103           ORREQ    R1,R1,#0x2
    510            if ( X & 0x80 ) P |= 0x80;
   \   0000003C   800010E3           TST      R0,#0x80
   \   00000040   80008113           ORRNE    R0,R1,#0x80
    511            else P &= 0x7f;
   \   00000044   7F000102           ANDEQ    R0,R1,#0x7F
   \   00000048   170CC4E5           STRB     R0,[R4, #+3095]
    512          }
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
    513          

   \                                 In segment CODE, align 4, keep-with-next
    514          void ldy6502()
    515          {
   \                     ldy6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    516            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    517            Y = gameImage[savepc];
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   ........           LDR      R1,??DataTable140  ;; gameImage
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   0100D0E7           LDRB     R0,[R0, +R1]
    518            if ( Y ) P &= 0xfd;
   \   00000028   171CD4E5           LDRB     R1,[R4, #+3095]
   \   0000002C   160CC4E5           STRB     R0,[R4, #+3094]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   FD100112           ANDNE    R1,R1,#0xFD
    519            else P |= 0x02;
   \   00000038   02108103           ORREQ    R1,R1,#0x2
    520            if ( Y & 0x80 ) P |= 0x80;
   \   0000003C   800010E3           TST      R0,#0x80
   \   00000040   80008113           ORRNE    R0,R1,#0x80
    521            else P &= 0x7f;
   \   00000044   7F000102           ANDEQ    R0,R1,#0x7F
   \   00000048   170CC4E5           STRB     R0,[R4, #+3095]
    522          }
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
    523          

   \                                 In segment CODE, align 4, keep-with-next
    524          void lsr6502()
    525          {
   \                     lsr6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    526            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    527            value = gameImage[savepc];
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   ........           LDR      R2,??DataTable140  ;; gameImage
    528          
    529            /* set carry flag if shifting right causes a bit to be lost */
    530            P = ( P & 0xfe ) | ( value & 0x01 );
   \   00000020   173CD4E5           LDRB     R3,[R4, #+3095]
   \   00000024   002092E5           LDR      R2,[R2, #+0]
   \   00000028   022080E0           ADD      R2,R0,R2
   \   0000002C   0010D2E5           LDRB     R1,[R2, #+0]
   \   00000030   FE3003E2           AND      R3,R3,#0xFE
   \   00000034   1A1CC4E5           STRB     R1,[R4, #+3098]
   \   00000038   01C001E2           AND      R12,R1,#0x1
   \   0000003C   03308CE1           ORR      R3,R12,R3
   \   00000040   173CC4E5           STRB     R3,[R4, #+3095]
    531          
    532            value = value >> 1;
   \   00000044   A110A0E1           LSR      R1,R1,#+1
   \   00000048   1A1CC4E5           STRB     R1,[R4, #+3098]
    533            put6502memory( savepc, value );
   \   0000004C   0130A0E3           MOV      R3,#+1
   \   00000050   803C83E3           ORR      R3,R3,#0x8000
   \   00000054   030050E1           CMP      R0,R3
   \   00000058   0700002A           BCS      ??lsr6502_0
   \   0000005C   0010C2E5           STRB     R1,[R2, #+0]
   \   00000060   400C50E3           CMP      R0,#+16384
   \   00000064   0400003A           BCC      ??lsr6502_0
   \   00000068   2020A0E3           MOV      R2,#+32
   \   0000006C   402C82E3           ORR      R2,R2,#0x4000
   \   00000070   020050E1           CMP      R0,R2
   \   00000074   0000002A           BCS      ??lsr6502_0
   \   00000078   ........           _BLF     APUWrite,??APUWrite??rA
    534          
    535            /* set zero flag if value is zero */
    536            if ( value != 0 ) P &= 0xfd;
   \                     ??lsr6502_0:
   \   0000007C   170CD4E5           LDRB     R0,[R4, #+3095]
   \   00000080   1A1CD4E5           LDRB     R1,[R4, #+3098]
   \   00000084   000051E3           CMP      R1,#+0
   \   00000088   FD000012           ANDNE    R0,R0,#0xFD
    537            else P |= 0x02;
   \   0000008C   02008003           ORREQ    R0,R0,#0x2
    538          
    539            /* set negative flag if bit 8 set??? can this happen on an LSR? */
    540            if ( ( value & 0x80 ) == 0x80 )
   \   00000090   800011E3           TST      R1,#0x80
    541              P |= 0x80;
   \   00000094   80008013           ORRNE    R0,R0,#0x80
    542            else
    543              P &= 0x7f;
   \   00000098   7F000002           ANDEQ    R0,R0,#0x7F
   \   0000009C   170CC4E5           STRB     R0,[R4, #+3095]
    544          }
   \   000000A0   1080BDE8           POP      {R4,PC}          ;; return
    545          

   \                                 In segment CODE, align 4, keep-with-next
    546          void lsra6502()
    547          {
    548            P = ( P & 0xfe ) | ( A & 0x01 );
   \                     lsra6502:
   \   00000000   ........           LDR      R0,??DataTable91  ;; pc_reg
   \   00000004   141CD0E5           LDRB     R1,[R0, #+3092]
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   013001E2           AND      R3,R1,#0x1
   \   00000010   FE2002E2           AND      R2,R2,#0xFE
   \   00000014   022083E1           ORR      R2,R3,R2
    549            A = A >> 1;
   \   00000018   A110B0E1           LSRS     R1,R1,#+1
   \   0000001C   141CC0E5           STRB     R1,[R0, #+3092]
    550            if ( A ) P &= 0xfd;
   \   00000020   FD200212           ANDNE    R2,R2,#0xFD
    551            else P |= 0x02;
   \   00000024   02208203           ORREQ    R2,R2,#0x2
    552            if ( A & 0x80 ) P |= 0x80;
   \   00000028   800011E3           TST      R1,#0x80
   \   0000002C   80108213           ORRNE    R1,R2,#0x80
    553            else P &= 0x7f;
   \   00000030   7F100202           ANDEQ    R1,R2,#0x7F
   \   00000034   171CC0E5           STRB     R1,[R0, #+3095]
    554          }
   \   00000038   1EFF2FE1           BX       LR               ;; return
    555          

   \                                 In segment CODE, align 4, keep-with-next
    556          void nop6502()
    557          {
    558          
    559          }
   \                     nop6502:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    560          

   \                                 In segment CODE, align 4, keep-with-next
    561          void ora6502()
    562          {
   \                     ora6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    563            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable91  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    564            A |= gameImage[savepc];
   \   00000018   B210D4E1           LDRH     R1,[R4, #+2]
   \   0000001C   ........           LDR      R2,??DataTable140  ;; gameImage
   \   00000020   140CD4E5           LDRB     R0,[R4, #+3092]
   \   00000024   002092E5           LDR      R2,[R2, #+0]
   \   00000028   0210D1E7           LDRB     R1,[R1, +R2]
   \   0000002C   000091E1           ORRS     R0,R1,R0
    565            if ( A ) P &= 0xfd;
   \   00000030   171CD4E5           LDRB     R1,[R4, #+3095]
   \   00000034   140CC4E5           STRB     R0,[R4, #+3092]
   \   00000038   FD100112           ANDNE    R1,R1,#0xFD
    566            else P |= 0x02;
   \   0000003C   02108103           ORREQ    R1,R1,#0x2
    567            if ( A & 0x80 ) P |= 0x80;
   \   00000040   800010E3           TST      R0,#0x80
   \   00000044   80008113           ORRNE    R0,R1,#0x80
    568            else P &= 0x7f;
   \   00000048   7F000102           ANDEQ    R0,R1,#0x7F
   \   0000004C   170CC4E5           STRB     R0,[R4, #+3095]
    569          }
   \   00000050   1080BDE8           POP      {R4,PC}          ;; return
    570          

   \                                 In segment CODE, align 4, keep-with-next
    571          void pha6502()
    572          {
    573            gameImage[0x100 + S--] = A;
   \                     pha6502:
   \   00000000   ........           LDR      R0,??DataTable91  ;; pc_reg
   \   00000004   ........           LDR      R2,??DataTable140  ;; gameImage
   \   00000008   181CD0E5           LDRB     R1,[R0, #+3096]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   021081E0           ADD      R1,R1,R2
   \   00000014   142CD0E5           LDRB     R2,[R0, #+3092]
   \   00000018   0021C1E5           STRB     R2,[R1, #+256]
   \   0000001C   181CD0E5           LDRB     R1,[R0, #+3096]
   \   00000020   011041E2           SUB      R1,R1,#+1
   \   00000024   181CC0E5           STRB     R1,[R0, #+3096]
    574          }
   \   00000028   1EFF2FE1           BX       LR               ;; return
    575          

   \                                 In segment CODE, align 4, keep-with-next
    576          void php6502()
    577          {
    578            gameImage[0x100 + S--] = P;
   \                     php6502:
   \   00000000   ........           LDR      R0,??DataTable91  ;; pc_reg
   \   00000004   ........           LDR      R2,??DataTable140  ;; gameImage
   \   00000008   181CD0E5           LDRB     R1,[R0, #+3096]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   021081E0           ADD      R1,R1,R2
   \   00000014   172CD0E5           LDRB     R2,[R0, #+3095]
   \   00000018   0021C1E5           STRB     R2,[R1, #+256]
   \   0000001C   181CD0E5           LDRB     R1,[R0, #+3096]
   \   00000020   011041E2           SUB      R1,R1,#+1
   \   00000024   181CC0E5           STRB     R1,[R0, #+3096]
    579          }
   \   00000028   1EFF2FE1           BX       LR               ;; return
    580          

   \                                 In segment CODE, align 4, keep-with-next
    581          void pla6502()
    582          {
    583            A = gameImage[++S + 0x100];
   \                     pla6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   ........           LDR      R2,??DataTable140  ;; gameImage
   \   00000008   181CD0E5           LDRB     R1,[R0, #+3096]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   011081E2           ADD      R1,R1,#+1
   \   00000014   181CC0E5           STRB     R1,[R0, #+3096]
   \   00000018   FF1001E2           AND      R1,R1,#0xFF
   \   0000001C   021081E0           ADD      R1,R1,R2
   \   00000020   0011D1E5           LDRB     R1,[R1, #+256]
    584            if ( A ) P &= 0xfd;
   \   00000024   172CD0E5           LDRB     R2,[R0, #+3095]
   \   00000028   141CC0E5           STRB     R1,[R0, #+3092]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   FD200212           ANDNE    R2,R2,#0xFD
    585            else P |= 0x02;
   \   00000034   02208203           ORREQ    R2,R2,#0x2
    586            if ( A & 0x80 ) P |= 0x80;
   \   00000038   800011E3           TST      R1,#0x80
   \   0000003C   80108213           ORRNE    R1,R2,#0x80
    587            else P &= 0x7f;
   \   00000040   7F100202           ANDEQ    R1,R2,#0x7F
   \   00000044   171CC0E5           STRB     R1,[R0, #+3095]
    588          }
   \   00000048   1EFF2FE1           BX       LR               ;; return
    589          

   \                                 In segment CODE, align 4, keep-with-next
    590          void plp6502()
    591          {
    592            P = gameImage[++S + 0x100] | 0x20;
   \                     plp6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   ........           LDR      R2,??DataTable140  ;; gameImage
   \   00000008   181CD0E5           LDRB     R1,[R0, #+3096]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   011081E2           ADD      R1,R1,#+1
   \   00000014   181CC0E5           STRB     R1,[R0, #+3096]
   \   00000018   FF1001E2           AND      R1,R1,#0xFF
   \   0000001C   021081E0           ADD      R1,R1,R2
   \   00000020   0011D1E5           LDRB     R1,[R1, #+256]
   \   00000024   201081E3           ORR      R1,R1,#0x20
   \   00000028   171CC0E5           STRB     R1,[R0, #+3095]
    593          }
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    594          

   \                                 In segment CODE, align 4, keep-with-next
    595          void rol6502()
    596          {
   \                     rol6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    597            saveflags = ( P & 0x01 );
   \   00000004   ........           LDR      R4,??DataTable139  ;; pc_reg
   \   00000008   170CD4E5           LDRB     R0,[R4, #+3095]
   \   0000000C   010000E2           AND      R0,R0,#0x1
   \   00000010   100C84E5           STR      R0,[R4, #+3088]
    598            adrmode[opcode] ();
   \   00000014   190CD4E5           LDRB     R0,[R4, #+3097]
   \   00000018   000184E0           ADD      R0,R4,R0, LSL #+2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   30FF2FE1           BLX      R0
    599            value = gameImage[savepc];
   \   00000024   B200D4E1           LDRH     R0,[R4, #+2]
   \   00000028   ........           LDR      R2,??DataTable140  ;; gameImage
    600            P = ( P & 0xfe ) | ( ( value >> 7 ) & 0x01 );
   \   0000002C   173CD4E5           LDRB     R3,[R4, #+3095]
   \   00000030   002092E5           LDR      R2,[R2, #+0]
   \   00000034   022080E0           ADD      R2,R0,R2
   \   00000038   0010D2E5           LDRB     R1,[R2, #+0]
   \   0000003C   FE3003E2           AND      R3,R3,#0xFE
   \   00000040   1A1CC4E5           STRB     R1,[R4, #+3098]
   \   00000044   A13383E1           ORR      R3,R3,R1, LSR #+7
   \   00000048   173CC4E5           STRB     R3,[R4, #+3095]
    601            value = value << 1;
    602            value |= saveflags;
   \   0000004C   103C94E5           LDR      R3,[R4, #+3088]
   \   00000050   811083E1           ORR      R1,R3,R1, LSL #+1
   \   00000054   1A1CC4E5           STRB     R1,[R4, #+3098]
    603            put6502memory( savepc, value );
   \   00000058   0130A0E3           MOV      R3,#+1
   \   0000005C   803C83E3           ORR      R3,R3,#0x8000
   \   00000060   030050E1           CMP      R0,R3
   \   00000064   0800002A           BCS      ??rol6502_0
   \   00000068   0010C2E5           STRB     R1,[R2, #+0]
   \   0000006C   400C50E3           CMP      R0,#+16384
   \   00000070   0500003A           BCC      ??rol6502_0
   \   00000074   2020A0E3           MOV      R2,#+32
   \   00000078   402C82E3           ORR      R2,R2,#0x4000
   \   0000007C   020050E1           CMP      R0,R2
   \   00000080   0100002A           BCS      ??rol6502_0
   \   00000084   FF1001E2           AND      R1,R1,#0xFF
   \   00000088   ........           _BLF     APUWrite,??APUWrite??rA
    604            if ( value ) P &= 0xfd;
   \                     ??rol6502_0:
   \   0000008C   170CD4E5           LDRB     R0,[R4, #+3095]
   \   00000090   1A1CD4E5           LDRB     R1,[R4, #+3098]
   \   00000094   000051E3           CMP      R1,#+0
   \   00000098   FD000012           ANDNE    R0,R0,#0xFD
    605            else P |= 0x02;
   \   0000009C   02008003           ORREQ    R0,R0,#0x2
    606            if ( value & 0x80 ) P |= 0x80;
   \   000000A0   800011E3           TST      R1,#0x80
   \   000000A4   80008013           ORRNE    R0,R0,#0x80
    607            else P &= 0x7f;
   \   000000A8   7F000002           ANDEQ    R0,R0,#0x7F
   \   000000AC   170CC4E5           STRB     R0,[R4, #+3095]
    608          }
   \   000000B0   1080BDE8           POP      {R4,PC}          ;; return
    609          

   \                                 In segment CODE, align 4, keep-with-next
    610          void rola6502()
    611          {
    612            saveflags = ( P & 0x01 );
   \                     rola6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   171CD0E5           LDRB     R1,[R0, #+3095]
    613            P = ( P & 0xfe ) | ( ( A >> 7 ) & 0x01 );
   \   00000008   143CD0E5           LDRB     R3,[R0, #+3092]
   \   0000000C   012001E2           AND      R2,R1,#0x1
   \   00000010   102C80E5           STR      R2,[R0, #+3088]
   \   00000014   FE1001E2           AND      R1,R1,#0xFE
   \   00000018   A31381E1           ORR      R1,R1,R3, LSR #+7
    614            A = A << 1;
    615            A |= saveflags;
   \   0000001C   832082E1           ORR      R2,R2,R3, LSL #+1
   \   00000020   142CC0E5           STRB     R2,[R0, #+3092]
    616            if ( A ) P &= 0xfd;
   \   00000024   FF2012E2           ANDS     R2,R2,#0xFF
   \   00000028   FD100112           ANDNE    R1,R1,#0xFD
    617            else P |= 0x02;
   \   0000002C   02108103           ORREQ    R1,R1,#0x2
    618            if ( A & 0x80 ) P |= 0x80;
   \   00000030   800012E3           TST      R2,#0x80
   \   00000034   80108113           ORRNE    R1,R1,#0x80
    619            else P &= 0x7f;
   \   00000038   7F100102           ANDEQ    R1,R1,#0x7F
   \   0000003C   171CC0E5           STRB     R1,[R0, #+3095]
    620          }
   \   00000040   1EFF2FE1           BX       LR               ;; return
    621          

   \                                 In segment CODE, align 4, keep-with-next
    622          void ror6502()
    623          {
   \                     ror6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    624            saveflags = ( P & 0x01 );
   \   00000004   ........           LDR      R4,??DataTable139  ;; pc_reg
   \   00000008   170CD4E5           LDRB     R0,[R4, #+3095]
   \   0000000C   010000E2           AND      R0,R0,#0x1
   \   00000010   100C84E5           STR      R0,[R4, #+3088]
    625            adrmode[opcode] ();
   \   00000014   190CD4E5           LDRB     R0,[R4, #+3097]
   \   00000018   000184E0           ADD      R0,R4,R0, LSL #+2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   30FF2FE1           BLX      R0
    626            value = gameImage[savepc];
   \   00000024   B200D4E1           LDRH     R0,[R4, #+2]
   \   00000028   ........           LDR      R2,??DataTable140  ;; gameImage
    627            P = ( P & 0xfe ) | ( value & 0x01 );
   \   0000002C   173CD4E5           LDRB     R3,[R4, #+3095]
   \   00000030   002092E5           LDR      R2,[R2, #+0]
   \   00000034   022080E0           ADD      R2,R0,R2
   \   00000038   0010D2E5           LDRB     R1,[R2, #+0]
   \   0000003C   FE3003E2           AND      R3,R3,#0xFE
   \   00000040   01C001E2           AND      R12,R1,#0x1
   \   00000044   03308CE1           ORR      R3,R12,R3
   \   00000048   173CC4E5           STRB     R3,[R4, #+3095]
    628            value = value >> 1;
    629            if ( saveflags ) value |= 0x80;
   \   0000004C   103C94E5           LDR      R3,[R4, #+3088]
   \   00000050   A110A0E1           LSR      R1,R1,#+1
   \   00000054   000053E3           CMP      R3,#+0
   \   00000058   80108113           ORRNE    R1,R1,#0x80
   \   0000005C   1A1CC4E5           STRB     R1,[R4, #+3098]
    630            put6502memory( savepc, value );
   \   00000060   0130A0E3           MOV      R3,#+1
   \   00000064   803C83E3           ORR      R3,R3,#0x8000
   \   00000068   030050E1           CMP      R0,R3
   \   0000006C   0700002A           BCS      ??ror6502_0
   \   00000070   0010C2E5           STRB     R1,[R2, #+0]
   \   00000074   400C50E3           CMP      R0,#+16384
   \   00000078   0400003A           BCC      ??ror6502_0
   \   0000007C   2020A0E3           MOV      R2,#+32
   \   00000080   402C82E3           ORR      R2,R2,#0x4000
   \   00000084   020050E1           CMP      R0,R2
   \   00000088   0000002A           BCS      ??ror6502_0
   \   0000008C   ........           _BLF     APUWrite,??APUWrite??rA
    631            if ( value ) P &= 0xfd;
   \                     ??ror6502_0:
   \   00000090   170CD4E5           LDRB     R0,[R4, #+3095]
   \   00000094   1A1CD4E5           LDRB     R1,[R4, #+3098]
   \   00000098   000051E3           CMP      R1,#+0
   \   0000009C   FD000012           ANDNE    R0,R0,#0xFD
    632            else P |= 0x02;
   \   000000A0   02008003           ORREQ    R0,R0,#0x2
    633            if ( value & 0x80 ) P |= 0x80;
   \   000000A4   800011E3           TST      R1,#0x80
   \   000000A8   80008013           ORRNE    R0,R0,#0x80
    634            else P &= 0x7f;
   \   000000AC   7F000002           ANDEQ    R0,R0,#0x7F
   \   000000B0   170CC4E5           STRB     R0,[R4, #+3095]
    635          }
   \   000000B4   1080BDE8           POP      {R4,PC}          ;; return
    636          

   \                                 In segment CODE, align 4, keep-with-next
    637          void rora6502()
    638          {
    639            saveflags = ( P & 0x01 );
   \                     rora6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   171CD0E5           LDRB     R1,[R0, #+3095]
    640            P = ( P & 0xfe ) | ( A & 0x01 );
   \   00000008   143CD0E5           LDRB     R3,[R0, #+3092]
   \   0000000C   012001E2           AND      R2,R1,#0x1
   \   00000010   102C80E5           STR      R2,[R0, #+3088]
   \   00000014   01C003E2           AND      R12,R3,#0x1
    641            A = A >> 1;
   \   00000018   A330A0E1           LSR      R3,R3,#+1
    642            if ( saveflags ) A |= 0x80;
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   80308313           ORRNE    R3,R3,#0x80
   \   00000024   143CC0E5           STRB     R3,[R0, #+3092]
    643            if ( A ) P &= 0xfd;
    644            else P |= 0x02;
    645            if ( A & 0x80 ) P |= 0x80;
   \   00000028   142CD0E5           LDRB     R2,[R0, #+3092]
   \   0000002C   FE1001E2           AND      R1,R1,#0xFE
   \   00000030   01108CE1           ORR      R1,R12,R1
   \   00000034   000053E3           CMP      R3,#+0
   \   00000038   FD100112           ANDNE    R1,R1,#0xFD
   \   0000003C   02108103           ORREQ    R1,R1,#0x2
   \   00000040   800012E3           TST      R2,#0x80
   \   00000044   80108113           ORRNE    R1,R1,#0x80
    646            else P &= 0x7f;
   \   00000048   7F100102           ANDEQ    R1,R1,#0x7F
   \   0000004C   171CC0E5           STRB     R1,[R0, #+3095]
    647          }
   \   00000050   1EFF2FE1           BX       LR               ;; return
    648          

   \                                 In segment CODE, align 4, keep-with-next
    649          void rti6502()
    650          {
    651            P = gameImage[++S + 0x100] | 0x20;
   \                     rti6502:
   \   00000000   ........           LDR      R0,??DataTable124  ;; pc_reg
   \   00000004   ........           LDR      R2,??DataTable140  ;; gameImage
   \   00000008   181CD0E5           LDRB     R1,[R0, #+3096]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   011081E2           ADD      R1,R1,#+1
   \   00000014   181CC0E5           STRB     R1,[R0, #+3096]
   \   00000018   FF3001E2           AND      R3,R1,#0xFF
   \   0000001C   023083E0           ADD      R3,R3,R2
   \   00000020   0031D3E5           LDRB     R3,[R3, #+256]
    652            PC = gameImage[++S + 0x100];
   \   00000024   011081E2           ADD      R1,R1,#+1
   \   00000028   181CC0E5           STRB     R1,[R0, #+3096]
   \   0000002C   203083E3           ORR      R3,R3,#0x20
   \   00000030   173CC0E5           STRB     R3,[R0, #+3095]
   \   00000034   FF3001E2           AND      R3,R1,#0xFF
   \   00000038   023083E0           ADD      R3,R3,R2
   \   0000003C   0031D3E5           LDRB     R3,[R3, #+256]
    653            PC |= ( gameImage[++S + 0x100] << 8 );
   \   00000040   011081E2           ADD      R1,R1,#+1
   \   00000044   181CC0E5           STRB     R1,[R0, #+3096]
   \   00000048   B030C0E1           STRH     R3,[R0, #+0]
   \   0000004C   FF1001E2           AND      R1,R1,#0xFF
   \   00000050   021081E0           ADD      R1,R1,R2
   \   00000054   0011D1E5           LDRB     R1,[R1, #+256]
   \   00000058   011483E1           ORR      R1,R3,R1, LSL #+8
   \   0000005C   B010C0E1           STRH     R1,[R0, #+0]
    654          }
   \   00000060   1EFF2FE1           BX       LR               ;; return
    655          

   \                                 In segment CODE, align 4, keep-with-next
    656          void rts6502()
    657          {
    658            PC = gameImage[++S + 0x100];
   \                     rts6502:
   \   00000000   ........           LDR      R0,??DataTable124  ;; pc_reg
   \   00000004   ........           LDR      R2,??DataTable140  ;; gameImage
   \   00000008   181CD0E5           LDRB     R1,[R0, #+3096]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   011081E2           ADD      R1,R1,#+1
   \   00000014   181CC0E5           STRB     R1,[R0, #+3096]
   \   00000018   FF3001E2           AND      R3,R1,#0xFF
   \   0000001C   023083E0           ADD      R3,R3,R2
   \   00000020   0031D3E5           LDRB     R3,[R3, #+256]
    659            PC |= ( gameImage[++S + 0x100] << 8 );
   \   00000024   011081E2           ADD      R1,R1,#+1
   \   00000028   181CC0E5           STRB     R1,[R0, #+3096]
   \   0000002C   B030C0E1           STRH     R3,[R0, #+0]
    660            PC++;
   \   00000030   FF1001E2           AND      R1,R1,#0xFF
   \   00000034   021081E0           ADD      R1,R1,R2
   \   00000038   0011D1E5           LDRB     R1,[R1, #+256]
   \   0000003C   011483E1           ORR      R1,R3,R1, LSL #+8
   \   00000040   011081E2           ADD      R1,R1,#+1
   \   00000044   B010C0E1           STRH     R1,[R0, #+0]
    661          }
   \   00000048   1EFF2FE1           BX       LR               ;; return
    662          

   \                                 In segment CODE, align 4, keep-with-next
    663          void sbc6502()
    664          {
   \                     sbc6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    665            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable139  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    666            value = gameImage[savepc] ^ 0xff;
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   ........           LDR      R1,??DataTable140  ;; gameImage
    667            saveflags = ( P & 0x01 );
    668            sum = ( ( char )A ) + ( ( char )value ) + ( saveflags << 4 );
   \   00000020   143CD4E5           LDRB     R3,[R4, #+3092]
   \   00000024   001091E5           LDR      R1,[R1, #+0]
   \   00000028   0100D0E7           LDRB     R0,[R0, +R1]
   \   0000002C   171CD4E5           LDRB     R1,[R4, #+3095]
   \   00000030   FF0020E2           EOR      R0,R0,#0xFF
   \   00000034   1A0CC4E5           STRB     R0,[R4, #+3098]
   \   00000038   012001E2           AND      R2,R1,#0x1
   \   0000003C   102C84E5           STR      R2,[R4, #+3088]
   \   00000040   030080E0           ADD      R0,R0,R3
   \   00000044   023280E0           ADD      R3,R0,R2, LSL #+4
   \   00000048   0C3C84E5           STR      R3,[R4, #+3084]
    669            if ( ( sum > 0x7f ) || ( sum < -0x80 ) ) P |= 0x40;
   \   0000004C   800053E3           CMP      R3,#+128
   \   00000050   020000AA           BGE      ??sbc6502_0
   \   00000054   7FC0E0E3           MVN      R12,#+127
   \   00000058   0C0053E1           CMP      R3,R12
   \   0000005C   010000AA           BGE      ??sbc6502_1
   \                     ??sbc6502_0:
   \   00000060   401081E3           ORR      R1,R1,#0x40
   \   00000064   000000EA           B        ??sbc6502_2
    670            else P &= 0xbf;
   \                     ??sbc6502_1:
   \   00000068   BF1001E2           AND      R1,R1,#0xBF
    671            sum = A + value + saveflags;
   \                     ??sbc6502_2:
   \   0000006C   000082E0           ADD      R0,R2,R0
   \   00000070   0C0C84E5           STR      R0,[R4, #+3084]
    672            if ( sum > 0xff ) P |= 0x01;
   \   00000074   400F50E3           CMP      R0,#+256
   \   00000078   011081A3           ORRGE    R1,R1,#0x1
    673            else P &= 0xfe;
   \   0000007C   FE1001B2           ANDLT    R1,R1,#0xFE
    674            A = sum;
    675            if ( P & 0x08 )
   \   00000080   080011E3           TST      R1,#0x8
   \   00000084   0C00000A           BEQ      ??sbc6502_3
    676            {
    677              A -= 0x66;
   \   00000088   9A0080E2           ADD      R0,R0,#+154
    678              P &= 0xfe;
   \   0000008C   FE1001E2           AND      R1,R1,#0xFE
    679              if ( ( A & 0x0f ) > 0x09 )
   \   00000090   FF2000E2           AND      R2,R0,#0xFF
   \   00000094   0F2002E2           AND      R2,R2,#0xF
   \   00000098   0A0052E3           CMP      R2,#+10
    680                A += 0x06;
   \   0000009C   060080A2           ADDGE    R0,R0,#+6
    681              if ( ( A & 0xf0 ) > 0x90 )
   \   000000A0   FF2000E2           AND      R2,R0,#0xFF
   \   000000A4   F02002E2           AND      R2,R2,#0xF0
   \   000000A8   910052E3           CMP      R2,#+145
   \   000000AC   050000BA           BLT      ??sbc6502_4
    682              {
    683                A += 0x60;
   \   000000B0   600080E2           ADD      R0,R0,#+96
    684                P |= 0x01;
   \   000000B4   011081E3           ORR      R1,R1,#0x1
   \   000000B8   020000EA           B        ??sbc6502_4
    685              }
    686            }
    687            else
    688            {
    689              clockticks6502++;
   \                     ??sbc6502_3:
   \   000000BC   082C94E5           LDR      R2,[R4, #+3080]
   \   000000C0   012082E2           ADD      R2,R2,#+1
   \   000000C4   082C84E5           STR      R2,[R4, #+3080]
   \                     ??sbc6502_4:
   \   000000C8   140CC4E5           STRB     R0,[R4, #+3092]
    690            }
    691            if ( A ) P &= 0xfd;
   \   000000CC   000CB0E1           LSLS     R0,R0,#+24
   \   000000D0   FD000112           ANDNE    R0,R1,#0xFD
    692            else P |= 0x02;
   \   000000D4   02008103           ORREQ    R0,R1,#0x2
    693            if ( A & 0x80 ) P |= 0x80;
   \   000000D8   141CD4E5           LDRB     R1,[R4, #+3092]
   \   000000DC   800011E3           TST      R1,#0x80
   \   000000E0   80008013           ORRNE    R0,R0,#0x80
    694            else P &= 0x7f;
   \   000000E4   7F000002           ANDEQ    R0,R0,#0x7F
   \   000000E8   170CC4E5           STRB     R0,[R4, #+3095]
    695          }
   \   000000EC   1080BDE8           POP      {R4,PC}          ;; return
    696          

   \                                 In segment CODE, align 4, keep-with-next
    697          void sec6502()
    698          {
    699            P |= 0x01;
   \                     sec6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   171CD0E5           LDRB     R1,[R0, #+3095]
   \   00000008   011081E3           ORR      R1,R1,#0x1
   \   0000000C   171CC0E5           STRB     R1,[R0, #+3095]
    700          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    701          

   \                                 In segment CODE, align 4, keep-with-next
    702          void sed6502()
    703          {
    704            P |= 0x08;
   \                     sed6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   171CD0E5           LDRB     R1,[R0, #+3095]
   \   00000008   081081E3           ORR      R1,R1,#0x8
   \   0000000C   171CC0E5           STRB     R1,[R0, #+3095]
    705          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    706          

   \                                 In segment CODE, align 4, keep-with-next
    707          void sei6502()
    708          {
    709            P |= 0x04;
   \                     sei6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   171CD0E5           LDRB     R1,[R0, #+3095]
   \   00000008   041081E3           ORR      R1,R1,#0x4
   \   0000000C   171CC0E5           STRB     R1,[R0, #+3095]
    710          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    711          

   \                                 In segment CODE, align 4, keep-with-next
    712          void sta6502()
    713          {
   \                     sta6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    714            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable139  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    715            put6502memory( savepc, A );
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   141CD4E5           LDRB     R1,[R4, #+3092]
   \   00000020   0120A0E3           MOV      R2,#+1
   \   00000024   802C82E3           ORR      R2,R2,#0x8000
   \   00000028   020050E1           CMP      R0,R2
   \   0000002C   1080BD28           POPCS    {R4,PC}
   \   00000030   ........           LDR      R3,??DataTable140  ;; gameImage
   \   00000034   400C50E3           CMP      R0,#+16384
   \   00000038   003093E5           LDR      R3,[R3, #+0]
   \   0000003C   0310C0E7           STRB     R1,[R0, +R3]
   \   00000040   1080BD38           POPCC    {R4,PC}
   \   00000044   2020A0E3           MOV      R2,#+32
   \   00000048   402C82E3           ORR      R2,R2,#0x4000
   \   0000004C   020050E1           CMP      R0,R2
   \   00000050   1080BD28           POPCS    {R4,PC}
   \   00000054   ........           _BLF     APUWrite,??APUWrite??rA
    716          }
   \   00000058   1080BDE8           POP      {R4,PC}          ;; return
    717          

   \                                 In segment CODE, align 4, keep-with-next
    718          void stx6502()
    719          {
   \                     stx6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    720            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable139  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    721            put6502memory( savepc, X );
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   151CD4E5           LDRB     R1,[R4, #+3093]
   \   00000020   0120A0E3           MOV      R2,#+1
   \   00000024   802C82E3           ORR      R2,R2,#0x8000
   \   00000028   020050E1           CMP      R0,R2
   \   0000002C   1080BD28           POPCS    {R4,PC}
   \   00000030   ........           LDR      R3,??DataTable140  ;; gameImage
   \   00000034   400C50E3           CMP      R0,#+16384
   \   00000038   003093E5           LDR      R3,[R3, #+0]
   \   0000003C   0310C0E7           STRB     R1,[R0, +R3]
   \   00000040   1080BD38           POPCC    {R4,PC}
   \   00000044   2020A0E3           MOV      R2,#+32
   \   00000048   402C82E3           ORR      R2,R2,#0x4000
   \   0000004C   020050E1           CMP      R0,R2
   \   00000050   1080BD28           POPCS    {R4,PC}
   \   00000054   ........           _BLF     APUWrite,??APUWrite??rA
    722          }
   \   00000058   1080BDE8           POP      {R4,PC}          ;; return
    723          

   \                                 In segment CODE, align 4, keep-with-next
    724          void sty6502()
    725          {
   \                     sty6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    726            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable139  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    727            put6502memory( savepc, Y );
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   161CD4E5           LDRB     R1,[R4, #+3094]
   \   00000020   0120A0E3           MOV      R2,#+1
   \   00000024   802C82E3           ORR      R2,R2,#0x8000
   \   00000028   020050E1           CMP      R0,R2
   \   0000002C   1080BD28           POPCS    {R4,PC}
   \   00000030   ........           LDR      R3,??DataTable140  ;; gameImage
   \   00000034   400C50E3           CMP      R0,#+16384
   \   00000038   003093E5           LDR      R3,[R3, #+0]
   \   0000003C   0310C0E7           STRB     R1,[R0, +R3]
   \   00000040   1080BD38           POPCC    {R4,PC}
   \   00000044   2020A0E3           MOV      R2,#+32
   \   00000048   402C82E3           ORR      R2,R2,#0x4000
   \   0000004C   020050E1           CMP      R0,R2
   \   00000050   1080BD28           POPCS    {R4,PC}
   \   00000054   ........           _BLF     APUWrite,??APUWrite??rA
    728          }
   \   00000058   1080BDE8           POP      {R4,PC}          ;; return
    729          

   \                                 In segment CODE, align 4, keep-with-next
    730          void tax6502()
    731          {
    732            X = A;
   \                     tax6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   141CD0E5           LDRB     R1,[R0, #+3092]
    733            if ( X ) P &= 0xfd;
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   151CC0E5           STRB     R1,[R0, #+3093]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   FD200212           ANDNE    R2,R2,#0xFD
    734            else P |= 0x02;
   \   00000018   02208203           ORREQ    R2,R2,#0x2
    735            if ( X & 0x80 ) P |= 0x80;
   \   0000001C   800011E3           TST      R1,#0x80
   \   00000020   80108213           ORRNE    R1,R2,#0x80
    736            else P &= 0x7f;
   \   00000024   7F100202           ANDEQ    R1,R2,#0x7F
   \   00000028   171CC0E5           STRB     R1,[R0, #+3095]
    737          }
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    738          

   \                                 In segment CODE, align 4, keep-with-next
    739          void tay6502()
    740          {
    741            Y = A;
   \                     tay6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   141CD0E5           LDRB     R1,[R0, #+3092]
    742            if ( Y ) P &= 0xfd;
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   161CC0E5           STRB     R1,[R0, #+3094]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   FD200212           ANDNE    R2,R2,#0xFD
    743            else P |= 0x02;
   \   00000018   02208203           ORREQ    R2,R2,#0x2
    744            if ( Y & 0x80 ) P |= 0x80;
   \   0000001C   800011E3           TST      R1,#0x80
   \   00000020   80108213           ORRNE    R1,R2,#0x80
    745            else P &= 0x7f;
   \   00000024   7F100202           ANDEQ    R1,R2,#0x7F
   \   00000028   171CC0E5           STRB     R1,[R0, #+3095]
    746          }
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    747          

   \                                 In segment CODE, align 4, keep-with-next
    748          void tsx6502()
    749          {
    750            X = S;
   \                     tsx6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   181CD0E5           LDRB     R1,[R0, #+3096]
    751            if ( X ) P &= 0xfd;
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   151CC0E5           STRB     R1,[R0, #+3093]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   FD200212           ANDNE    R2,R2,#0xFD
    752            else P |= 0x02;
   \   00000018   02208203           ORREQ    R2,R2,#0x2
    753            if ( X & 0x80 ) P |= 0x80;
   \   0000001C   800011E3           TST      R1,#0x80
   \   00000020   80108213           ORRNE    R1,R2,#0x80
    754            else P &= 0x7f;
   \   00000024   7F100202           ANDEQ    R1,R2,#0x7F
   \   00000028   171CC0E5           STRB     R1,[R0, #+3095]
    755          }
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    756          

   \                                 In segment CODE, align 4, keep-with-next
    757          void txa6502()
    758          {
    759            A = X;
   \                     txa6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   151CD0E5           LDRB     R1,[R0, #+3093]
    760            if ( A ) P &= 0xfd;
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   141CC0E5           STRB     R1,[R0, #+3092]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   FD200212           ANDNE    R2,R2,#0xFD
    761            else P |= 0x02;
   \   00000018   02208203           ORREQ    R2,R2,#0x2
    762            if ( A & 0x80 ) P |= 0x80;
   \   0000001C   800011E3           TST      R1,#0x80
   \   00000020   80108213           ORRNE    R1,R2,#0x80
    763            else P &= 0x7f;
   \   00000024   7F100202           ANDEQ    R1,R2,#0x7F
   \   00000028   171CC0E5           STRB     R1,[R0, #+3095]
    764          }
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    765          

   \                                 In segment CODE, align 4, keep-with-next
    766          void txs6502()
    767          {
    768            S = X;
   \                     txs6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   151CD0E5           LDRB     R1,[R0, #+3093]
   \   00000008   181CC0E5           STRB     R1,[R0, #+3096]
    769          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    770          

   \                                 In segment CODE, align 4, keep-with-next
    771          void tya6502()
    772          {
    773            A = Y;
   \                     tya6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   161CD0E5           LDRB     R1,[R0, #+3094]
    774            if ( A ) P &= 0xfd;
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   141CC0E5           STRB     R1,[R0, #+3092]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   FD200212           ANDNE    R2,R2,#0xFD
    775            else P |= 0x02;
   \   00000018   02208203           ORREQ    R2,R2,#0x2
    776            if ( A & 0x80 ) P |= 0x80;
   \   0000001C   800011E3           TST      R1,#0x80
   \   00000020   80108213           ORRNE    R1,R2,#0x80
    777            else P &= 0x7f;
   \   00000024   7F100202           ANDEQ    R1,R2,#0x7F
   \   00000028   171CC0E5           STRB     R1,[R0, #+3095]
    778          }
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    779          

   \                                 In segment CODE, align 4, keep-with-next
    780          void bra6502()
    781          {
   \                     bra6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    782            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable124  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    783            PC += savepc;
   \   00000018   B000D4E1           LDRH     R0,[R4, #+0]
   \   0000001C   B210D4E1           LDRH     R1,[R4, #+2]
   \   00000020   000081E0           ADD      R0,R1,R0
   \   00000024   B000C4E1           STRH     R0,[R4, #+0]
    784            clockticks6502++;
   \   00000028   080C94E5           LDR      R0,[R4, #+3080]
   \   0000002C   010080E2           ADD      R0,R0,#+1
   \   00000030   080C84E5           STR      R0,[R4, #+3080]
    785          }
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
    786          

   \                                 In segment CODE, align 4, keep-with-next
    787          void dea6502()
    788          {
    789            A--;
   \                     dea6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   141CD0E5           LDRB     R1,[R0, #+3092]
    790            if ( A ) P &= 0xfd;
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   011041E2           SUB      R1,R1,#+1
   \   00000010   141CC0E5           STRB     R1,[R0, #+3092]
   \   00000014   FF1011E2           ANDS     R1,R1,#0xFF
   \   00000018   FD200212           ANDNE    R2,R2,#0xFD
    791            else P |= 0x02;
   \   0000001C   02208203           ORREQ    R2,R2,#0x2
    792            if ( A & 0x80 ) P |= 0x80;
   \   00000020   800011E3           TST      R1,#0x80
   \   00000024   80108213           ORRNE    R1,R2,#0x80
    793            else P &= 0x7f;
   \   00000028   7F100202           ANDEQ    R1,R2,#0x7F
   \   0000002C   171CC0E5           STRB     R1,[R0, #+3095]
    794          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
    795          

   \                                 In segment CODE, align 4, keep-with-next
    796          void ina6502()
    797          {
    798            A++;
   \                     ina6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   141CD0E5           LDRB     R1,[R0, #+3092]
    799            if ( A ) P &= 0xfd;
   \   00000008   172CD0E5           LDRB     R2,[R0, #+3095]
   \   0000000C   011081E2           ADD      R1,R1,#+1
   \   00000010   141CC0E5           STRB     R1,[R0, #+3092]
   \   00000014   FF1011E2           ANDS     R1,R1,#0xFF
   \   00000018   FD200212           ANDNE    R2,R2,#0xFD
    800            else P |= 0x02;
   \   0000001C   02208203           ORREQ    R2,R2,#0x2
    801            if ( A & 0x80 ) P |= 0x80;
   \   00000020   800011E3           TST      R1,#0x80
   \   00000024   80108213           ORRNE    R1,R2,#0x80
    802            else P &= 0x7f;
   \   00000028   7F100202           ANDEQ    R1,R2,#0x7F
   \   0000002C   171CC0E5           STRB     R1,[R0, #+3095]
    803          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
    804          

   \                                 In segment CODE, align 4, keep-with-next
    805          void phx6502()
    806          {
    807            put6502memory( 0x100 + S--, X );
   \                     phx6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   182CD0E5           LDRB     R2,[R0, #+3096]
   \   0000000C   011042E2           SUB      R1,R2,#+1
   \   00000010   181CC0E5           STRB     R1,[R0, #+3096]
   \   00000014   151CD0E5           LDRB     R1,[R0, #+3093]
   \   00000018   400F82E2           ADD      R0,R2,#+256
   \   0000001C   0120A0E3           MOV      R2,#+1
   \   00000020   802C82E3           ORR      R2,R2,#0x8000
   \   00000024   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000028   2008A0E1           MOV      R0,R0, LSR #+16
   \   0000002C   020050E1           CMP      R0,R2
   \   00000030   0080BD28           POPCS    {PC}
   \   00000034   ........           LDR      R3,??DataTable140  ;; gameImage
   \   00000038   400C50E3           CMP      R0,#+16384
   \   0000003C   003093E5           LDR      R3,[R3, #+0]
   \   00000040   0310C0E7           STRB     R1,[R0, +R3]
   \   00000044   0080BD38           POPCC    {PC}
   \   00000048   2020A0E3           MOV      R2,#+32
   \   0000004C   402C82E3           ORR      R2,R2,#0x4000
   \   00000050   020050E1           CMP      R0,R2
   \   00000054   0080BD28           POPCS    {PC}
   \   00000058   ........           _BLF     APUWrite,??APUWrite??rA
    808          }
   \   0000005C   0080BDE8           POP      {PC}             ;; return
    809          

   \                                 In segment CODE, align 4, keep-with-next
    810          void plx6502()
    811          {
    812            X = gameImage[++S + 0x100];
   \                     plx6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   ........           LDR      R2,??DataTable140  ;; gameImage
   \   00000008   181CD0E5           LDRB     R1,[R0, #+3096]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   011081E2           ADD      R1,R1,#+1
   \   00000014   181CC0E5           STRB     R1,[R0, #+3096]
   \   00000018   FF1001E2           AND      R1,R1,#0xFF
   \   0000001C   021081E0           ADD      R1,R1,R2
   \   00000020   0011D1E5           LDRB     R1,[R1, #+256]
    813            if ( X ) P &= 0xfd;
   \   00000024   172CD0E5           LDRB     R2,[R0, #+3095]
   \   00000028   151CC0E5           STRB     R1,[R0, #+3093]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   FD200212           ANDNE    R2,R2,#0xFD
    814            else P |= 0x02;
   \   00000034   02208203           ORREQ    R2,R2,#0x2
    815            if ( X & 0x80 ) P |= 0x80;
   \   00000038   800011E3           TST      R1,#0x80
   \   0000003C   80108213           ORRNE    R1,R2,#0x80
    816            else P &= 0x7f;
   \   00000040   7F100202           ANDEQ    R1,R2,#0x7F
   \   00000044   171CC0E5           STRB     R1,[R0, #+3095]
    817          }
   \   00000048   1EFF2FE1           BX       LR               ;; return
    818          

   \                                 In segment CODE, align 4, keep-with-next
    819          void phy6502()
    820          {
    821            put6502memory( 0x100 + S--, Y );
   \                     phy6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   182CD0E5           LDRB     R2,[R0, #+3096]
   \   0000000C   011042E2           SUB      R1,R2,#+1
   \   00000010   181CC0E5           STRB     R1,[R0, #+3096]
   \   00000014   161CD0E5           LDRB     R1,[R0, #+3094]
   \   00000018   400F82E2           ADD      R0,R2,#+256
   \   0000001C   0120A0E3           MOV      R2,#+1
   \   00000020   802C82E3           ORR      R2,R2,#0x8000
   \   00000024   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000028   2008A0E1           MOV      R0,R0, LSR #+16
   \   0000002C   020050E1           CMP      R0,R2
   \   00000030   0080BD28           POPCS    {PC}
   \   00000034   ........           LDR      R3,??DataTable140  ;; gameImage
   \   00000038   400C50E3           CMP      R0,#+16384
   \   0000003C   003093E5           LDR      R3,[R3, #+0]
   \   00000040   0310C0E7           STRB     R1,[R0, +R3]
   \   00000044   0080BD38           POPCC    {PC}
   \   00000048   2020A0E3           MOV      R2,#+32
   \   0000004C   402C82E3           ORR      R2,R2,#0x4000
   \   00000050   020050E1           CMP      R0,R2
   \   00000054   0080BD28           POPCS    {PC}
   \   00000058   ........           _BLF     APUWrite,??APUWrite??rA
    822          }
   \   0000005C   0080BDE8           POP      {PC}             ;; return
    823          

   \                                 In segment CODE, align 4, keep-with-next
    824          void ply6502()
    825          {
    826            Y = gameImage[++S + 0x100];
   \                     ply6502:
   \   00000000   ........           LDR      R0,??DataTable139  ;; pc_reg
   \   00000004   ........           LDR      R2,??DataTable140  ;; gameImage
   \   00000008   181CD0E5           LDRB     R1,[R0, #+3096]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   011081E2           ADD      R1,R1,#+1
   \   00000014   181CC0E5           STRB     R1,[R0, #+3096]
   \   00000018   FF1001E2           AND      R1,R1,#0xFF
   \   0000001C   021081E0           ADD      R1,R1,R2
   \   00000020   0011D1E5           LDRB     R1,[R1, #+256]
    827            if ( Y ) P &= 0xfd;
   \   00000024   172CD0E5           LDRB     R2,[R0, #+3095]
   \   00000028   161CC0E5           STRB     R1,[R0, #+3094]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   FD200212           ANDNE    R2,R2,#0xFD
    828            else P |= 0x02;
   \   00000034   02208203           ORREQ    R2,R2,#0x2
    829            if ( Y & 0x80 ) P |= 0x80;
   \   00000038   800011E3           TST      R1,#0x80
   \   0000003C   80108213           ORRNE    R1,R2,#0x80
    830            else P &= 0x7f;
   \   00000040   7F100202           ANDEQ    R1,R2,#0x7F
   \   00000044   171CC0E5           STRB     R1,[R0, #+3095]
    831          }
   \   00000048   1EFF2FE1           BX       LR               ;; return
    832          

   \                                 In segment CODE, align 4, keep-with-next
    833          void stz6502()
    834          {
   \                     stz6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    835            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable139  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    836            put6502memory( savepc, 0 );
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   801C81E3           ORR      R1,R1,#0x8000
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   1080BD28           POPCS    {R4,PC}
   \   0000002C   ........           LDR      R2,??DataTable140  ;; gameImage
   \   00000030   0030A0E3           MOV      R3,#+0
   \   00000034   002092E5           LDR      R2,[R2, #+0]
   \   00000038   400C50E3           CMP      R0,#+16384
   \   0000003C   0230C0E7           STRB     R3,[R0, +R2]
   \   00000040   1080BD38           POPCC    {R4,PC}
   \   00000044   2010A0E3           MOV      R1,#+32
   \   00000048   401C81E3           ORR      R1,R1,#0x4000
   \   0000004C   010050E1           CMP      R0,R1
   \   00000050   1080BD28           POPCS    {R4,PC}
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   ........           _BLF     APUWrite,??APUWrite??rA
    837          }
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
    838          

   \                                 In segment CODE, align 4, keep-with-next
    839          void tsb6502()
    840          {
   \                     tsb6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    841            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable139  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    842            gameImage[savepc] |= A;
   \   00000018   ........           LDR      R0,??DataTable140  ;; gameImage
   \   0000001C   B210D4E1           LDRH     R1,[R4, #+2]
   \   00000020   002090E5           LDR      R2,[R0, #+0]
   \   00000024   143CD4E5           LDRB     R3,[R4, #+3092]
   \   00000028   021081E0           ADD      R1,R1,R2
   \   0000002C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000030   022083E1           ORR      R2,R3,R2
   \   00000034   0020C1E5           STRB     R2,[R1, #+0]
    843            if ( gameImage[savepc] ) P &= 0xfd;
   \   00000038   B210D4E1           LDRH     R1,[R4, #+2]
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   0000D1E7           LDRB     R0,[R1, +R0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   170CD4E5           LDRB     R0,[R4, #+3095]
   \   0000004C   FD000012           ANDNE    R0,R0,#0xFD
    844            else P |= 0x02;
   \   00000050   02008003           ORREQ    R0,R0,#0x2
   \   00000054   170CC4E5           STRB     R0,[R4, #+3095]
    845          }
   \   00000058   1080BDE8           POP      {R4,PC}          ;; return
    846          

   \                                 In segment CODE, align 4, keep-with-next
    847          void trb6502()
    848          {
   \                     trb6502:
   \   00000000   10402DE9           PUSH     {R4,LR}
    849            adrmode[opcode] ();
   \   00000004   ........           LDR      R4,??DataTable139  ;; pc_reg
   \   00000008   190CD4E5           LDRB     R0,[R4, #+3097]
   \   0000000C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   30FF2FE1           BLX      R0
    850            gameImage[savepc] = gameImage[savepc] & ( A ^ 0xff );
   \   00000018   ........           LDR      R0,??DataTable140  ;; gameImage
   \   0000001C   B210D4E1           LDRH     R1,[R4, #+2]
   \   00000020   002090E5           LDR      R2,[R0, #+0]
   \   00000024   143CD4E5           LDRB     R3,[R4, #+3092]
   \   00000028   021081E0           ADD      R1,R1,R2
   \   0000002C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000030   FF3023E2           EOR      R3,R3,#0xFF
   \   00000034   022003E0           AND      R2,R3,R2
   \   00000038   0020C1E5           STRB     R2,[R1, #+0]
    851            if ( gameImage[savepc] ) P &= 0xfd;
   \   0000003C   B210D4E1           LDRH     R1,[R4, #+2]
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   0000D1E7           LDRB     R0,[R1, +R0]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   170CD4E5           LDRB     R0,[R4, #+3095]
   \   00000050   FD000012           ANDNE    R0,R0,#0xFD
    852            else P |= 0x02;
   \   00000054   02008003           ORREQ    R0,R0,#0x2
   \   00000058   170CC4E5           STRB     R0,[R4, #+3095]
    853          }
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
    854          
    855          /* Init CPU */

   \                                 In segment CODE, align 4, keep-with-next
    856          void init6502()
    857          {
    858            ticks[0x00] = 7; instruction[0x00] = brk6502; adrmode[0x00] = implied6502;
   \                     init6502:
   \   00000000   E40E9FE5           LDR      R0,??init6502_0+0x4  ;; pc_reg
    859            ticks[0x01] = 6; instruction[0x01] = ora6502; adrmode[0x01] = indx6502;
   \   00000004   DC3E9FE5           LDR      R3,??init6502_0  ;; indx6502
    860            ticks[0x02] = 2; instruction[0x02] = nop6502; adrmode[0x02] = implied6502;
   \   00000008   E0CE9FE5           LDR      R12,??init6502_0+0x8  ;; nop6502
   \   0000000C   F04F2DE9           PUSH     {R4-R11,LR}
    861            ticks[0x03] = 2; instruction[0x03] = nop6502; adrmode[0x03] = implied6502;
    862            ticks[0x04] = 3; instruction[0x04] = tsb6502; adrmode[0x04] = zp6502;
    863            ticks[0x05] = 3; instruction[0x05] = ora6502; adrmode[0x05] = zp6502;
    864            ticks[0x06] = 5; instruction[0x06] = asl6502; adrmode[0x06] = zp6502;
    865            ticks[0x07] = 2; instruction[0x07] = nop6502; adrmode[0x07] = implied6502;
    866            ticks[0x08] = 3; instruction[0x08] = php6502; adrmode[0x08] = implied6502;
   \   00000010   DC8E9FE5           LDR      R8,??init6502_0+0xC  ;; php6502
    867            ticks[0x09] = 3; instruction[0x09] = ora6502; adrmode[0x09] = immediate6502;
    868            ticks[0x0a] = 2; instruction[0x0a] = asla6502; adrmode[0x0a] = implied6502;
    869            ticks[0x0b] = 2; instruction[0x0b] = nop6502; adrmode[0x0b] = implied6502;
    870            ticks[0x0c] = 4; instruction[0x0c] = tsb6502; adrmode[0x0c] = abs6502;
    871            ticks[0x0d] = 4; instruction[0x0d] = ora6502; adrmode[0x0d] = abs6502;
    872            ticks[0x0e] = 6; instruction[0x0e] = asl6502; adrmode[0x0e] = abs6502;
    873            ticks[0x0f] = 2; instruction[0x0f] = nop6502; adrmode[0x0f] = implied6502;
    874            ticks[0x10] = 2; instruction[0x10] = bpl6502; adrmode[0x10] = relative6502;
   \   00000014   DCAE9FE5           LDR      R10,??init6502_0+0x10  ;; bpl6502
   \   00000018   DCBE9FE5           LDR      R11,??init6502_0+0x14  ;; ora6502
   \   0000001C   DC9E9FE5           LDR      R9,??init6502_0+0x18  ;; tsb6502
   \   00000020   DC5E9FE5           LDR      R5,??init6502_0+0x1C  ;; zp6502
   \   00000024   DC7E9FE5           LDR      R7,??init6502_0+0x20  ;; asl6502
    875            ticks[0x11] = 5; instruction[0x11] = ora6502; adrmode[0x11] = indy6502;
    876            ticks[0x12] = 3; instruction[0x12] = ora6502; adrmode[0x12] = indzp6502;
    877            ticks[0x13] = 2; instruction[0x13] = nop6502; adrmode[0x13] = implied6502;
    878            ticks[0x14] = 3; instruction[0x14] = trb6502; adrmode[0x14] = zp6502;
    879            ticks[0x15] = 4; instruction[0x15] = ora6502; adrmode[0x15] = zpx6502;
    880            ticks[0x16] = 6; instruction[0x16] = asl6502; adrmode[0x16] = zpx6502;
    881            ticks[0x17] = 2; instruction[0x17] = nop6502; adrmode[0x17] = implied6502;
    882            ticks[0x18] = 2; instruction[0x18] = clc6502; adrmode[0x18] = implied6502;
   \   00000028   DCEE9FE5           LDR      LR,??init6502_0+0x24  ;; clc6502
   \   0000002C   48A480E5           STR      R10,[R0, #+1096]
   \   00000030   D8AE9FE5           LDR      R10,??init6502_0+0x28  ;; relative6502
   \   00000034   68E480E5           STR      LR,[R0, #+1128]
    883            ticks[0x19] = 4; instruction[0x19] = ora6502; adrmode[0x19] = absy6502;
   \   00000038   D4EE9FE5           LDR      LR,??init6502_0+0x2C  ;; absy6502
   \   0000003C   48A080E5           STR      R10,[R0, #+72]
   \   00000040   D0AE9FE5           LDR      R10,??init6502_0+0x30  ;; indy6502
   \   00000044   0710A0E3           MOV      R1,#+7
   \   00000048   4CA080E5           STR      R10,[R0, #+76]
   \   0000004C   C8AE9FE5           LDR      R10,??init6502_0+0x34  ;; indzp6502
   \   00000050   081880E5           STR      R1,[R0, #+2056]
   \   00000054   C41E9FE5           LDR      R1,??init6502_0+0x38  ;; brk6502
   \   00000058   288480E5           STR      R8,[R0, #+1064]
   \   0000005C   C08E9FE5           LDR      R8,??init6502_0+0x3C  ;; immediate6502
   \   00000060   50A080E5           STR      R10,[R0, #+80]
   \   00000064   BCAE9FE5           LDR      R10,??init6502_0+0x40  ;; trb6502
   \   00000068   6CE080E5           STR      LR,[R0, #+108]
    884            ticks[0x1a] = 2; instruction[0x1a] = ina6502; adrmode[0x1a] = implied6502;
   \   0000006C   B8EE9FE5           LDR      LR,??init6502_0+0x44  ;; ina6502
   \   00000070   081480E5           STR      R1,[R0, #+1032]
   \   00000074   B41E9FE5           LDR      R1,??init6502_0+0x48  ;; implied6502
   \   00000078   0CB480E5           STR      R11,[R0, #+1036]
   \   0000007C   189480E5           STR      R9,[R0, #+1048]
   \   00000080   1CB480E5           STR      R11,[R0, #+1052]
   \   00000084   2CB480E5           STR      R11,[R0, #+1068]
   \   00000088   2C8080E5           STR      R8,[R0, #+44]
   \   0000008C   A08E9FE5           LDR      R8,??init6502_0+0x4C  ;; asla6502
   \   00000090   389480E5           STR      R9,[R0, #+1080]
   \   00000094   9C9E9FE5           LDR      R9,??init6502_0+0x50  ;; abs6502
   \   00000098   3CB480E5           STR      R11,[R0, #+1084]
   \   0000009C   4CB480E5           STR      R11,[R0, #+1100]
   \   000000A0   50B480E5           STR      R11,[R0, #+1104]
   \   000000A4   58A480E5           STR      R10,[R0, #+1112]
   \   000000A8   8CAE9FE5           LDR      R10,??init6502_0+0x54  ;; zpx6502
   \   000000AC   5CB480E5           STR      R11,[R0, #+1116]
   \   000000B0   6CB480E5           STR      R11,[R0, #+1132]
   \   000000B4   70E480E5           STR      LR,[R0, #+1136]
    885            ticks[0x1b] = 2; instruction[0x1b] = nop6502; adrmode[0x1b] = implied6502;
    886            ticks[0x1c] = 4; instruction[0x1c] = trb6502; adrmode[0x1c] = abs6502;
   \   000000B8   68EE9FE5           LDR      LR,??init6502_0+0x40  ;; trb6502
    887            ticks[0x1d] = 4; instruction[0x1d] = ora6502; adrmode[0x1d] = absx6502;
   \   000000BC   7CB480E5           STR      R11,[R0, #+1148]
   \   000000C0   78BE9FE5           LDR      R11,??init6502_0+0x58  ;; absx6502
   \   000000C4   081080E5           STR      R1,[R0, #+8]
   \   000000C8   0620A0E3           MOV      R2,#+6
   \   000000CC   0C2880E5           STR      R2,[R0, #+2060]
   \   000000D0   0C3080E5           STR      R3,[R0, #+12]
   \   000000D4   0230A0E3           MOV      R3,#+2
   \   000000D8   103880E5           STR      R3,[R0, #+2064]
   \   000000DC   10C480E5           STR      R12,[R0, #+1040]
   \   000000E0   101080E5           STR      R1,[R0, #+16]
   \   000000E4   143880E5           STR      R3,[R0, #+2068]
   \   000000E8   14C480E5           STR      R12,[R0, #+1044]
   \   000000EC   141080E5           STR      R1,[R0, #+20]
   \   000000F0   0340A0E3           MOV      R4,#+3
   \   000000F4   184880E5           STR      R4,[R0, #+2072]
   \   000000F8   185080E5           STR      R5,[R0, #+24]
   \   000000FC   1C4880E5           STR      R4,[R0, #+2076]
   \   00000100   1C5080E5           STR      R5,[R0, #+28]
   \   00000104   0560A0E3           MOV      R6,#+5
   \   00000108   206880E5           STR      R6,[R0, #+2080]
   \   0000010C   207480E5           STR      R7,[R0, #+1056]
   \   00000110   205080E5           STR      R5,[R0, #+32]
   \   00000114   243880E5           STR      R3,[R0, #+2084]
   \   00000118   24C480E5           STR      R12,[R0, #+1060]
   \   0000011C   241080E5           STR      R1,[R0, #+36]
   \   00000120   284880E5           STR      R4,[R0, #+2088]
   \   00000124   281080E5           STR      R1,[R0, #+40]
   \   00000128   2C4880E5           STR      R4,[R0, #+2092]
   \   0000012C   303880E5           STR      R3,[R0, #+2096]
   \   00000130   308480E5           STR      R8,[R0, #+1072]
   \   00000134   301080E5           STR      R1,[R0, #+48]
   \   00000138   343880E5           STR      R3,[R0, #+2100]
   \   0000013C   34C480E5           STR      R12,[R0, #+1076]
   \   00000140   341080E5           STR      R1,[R0, #+52]
   \   00000144   0480A0E3           MOV      R8,#+4
   \   00000148   388880E5           STR      R8,[R0, #+2104]
   \   0000014C   389080E5           STR      R9,[R0, #+56]
   \   00000150   3C8880E5           STR      R8,[R0, #+2108]
   \   00000154   3C9080E5           STR      R9,[R0, #+60]
   \   00000158   402880E5           STR      R2,[R0, #+2112]
   \   0000015C   407480E5           STR      R7,[R0, #+1088]
   \   00000160   409080E5           STR      R9,[R0, #+64]
   \   00000164   443880E5           STR      R3,[R0, #+2116]
   \   00000168   44C480E5           STR      R12,[R0, #+1092]
   \   0000016C   441080E5           STR      R1,[R0, #+68]
   \   00000170   483880E5           STR      R3,[R0, #+2120]
   \   00000174   4C6880E5           STR      R6,[R0, #+2124]
   \   00000178   504880E5           STR      R4,[R0, #+2128]
   \   0000017C   543880E5           STR      R3,[R0, #+2132]
   \   00000180   54C480E5           STR      R12,[R0, #+1108]
   \   00000184   541080E5           STR      R1,[R0, #+84]
   \   00000188   584880E5           STR      R4,[R0, #+2136]
   \   0000018C   585080E5           STR      R5,[R0, #+88]
   \   00000190   5C8880E5           STR      R8,[R0, #+2140]
   \   00000194   5CA080E5           STR      R10,[R0, #+92]
   \   00000198   602880E5           STR      R2,[R0, #+2144]
   \   0000019C   607480E5           STR      R7,[R0, #+1120]
   \   000001A0   60A080E5           STR      R10,[R0, #+96]
   \   000001A4   643880E5           STR      R3,[R0, #+2148]
   \   000001A8   64C480E5           STR      R12,[R0, #+1124]
   \   000001AC   641080E5           STR      R1,[R0, #+100]
   \   000001B0   683880E5           STR      R3,[R0, #+2152]
   \   000001B4   681080E5           STR      R1,[R0, #+104]
   \   000001B8   6C8880E5           STR      R8,[R0, #+2156]
   \   000001BC   703880E5           STR      R3,[R0, #+2160]
   \   000001C0   701080E5           STR      R1,[R0, #+112]
   \   000001C4   743880E5           STR      R3,[R0, #+2164]
   \   000001C8   74C480E5           STR      R12,[R0, #+1140]
   \   000001CC   741080E5           STR      R1,[R0, #+116]
   \   000001D0   788880E5           STR      R8,[R0, #+2168]
   \   000001D4   78E480E5           STR      LR,[R0, #+1144]
   \   000001D8   789080E5           STR      R9,[R0, #+120]
   \   000001DC   7C8880E5           STR      R8,[R0, #+2172]
   \   000001E0   7CB080E5           STR      R11,[R0, #+124]
    888            ticks[0x1e] = 7; instruction[0x1e] = asl6502; adrmode[0x1e] = absx6502;
   \   000001E4   07E0A0E3           MOV      LR,#+7
   \   000001E8   80E880E5           STR      LR,[R0, #+2176]
   \   000001EC   807480E5           STR      R7,[R0, #+1152]
   \   000001F0   80B080E5           STR      R11,[R0, #+128]
    889            ticks[0x1f] = 2; instruction[0x1f] = nop6502; adrmode[0x1f] = implied6502;
   \   000001F4   843880E5           STR      R3,[R0, #+2180]
   \   000001F8   84C480E5           STR      R12,[R0, #+1156]
   \   000001FC   841080E5           STR      R1,[R0, #+132]
    890            ticks[0x20] = 6; instruction[0x20] = jsr6502; adrmode[0x20] = abs6502;
    891            ticks[0x21] = 6; instruction[0x21] = and6502; adrmode[0x21] = indx6502;
   \   00000200   E0EC9FE5           LDR      LR,??init6502_0  ;; indx6502
   \   00000204   387D9FE5           LDR      R7,??init6502_0+0x5C  ;; jsr6502
   \   00000208   8CE080E5           STR      LR,[R0, #+140]
    892            ticks[0x22] = 2; instruction[0x22] = nop6502; adrmode[0x22] = implied6502;
    893            ticks[0x23] = 2; instruction[0x23] = nop6502; adrmode[0x23] = implied6502;
    894            ticks[0x24] = 3; instruction[0x24] = bit6502; adrmode[0x24] = zp6502;
   \   0000020C   34ED9FE5           LDR      LR,??init6502_0+0x60  ;; bit6502
   \   00000210   887480E5           STR      R7,[R0, #+1160]
   \   00000214   307D9FE5           LDR      R7,??init6502_0+0x64  ;; and6502
   \   00000218   98E480E5           STR      LR,[R0, #+1176]
    895            ticks[0x25] = 3; instruction[0x25] = and6502; adrmode[0x25] = zp6502;
    896            ticks[0x26] = 5; instruction[0x26] = rol6502; adrmode[0x26] = zp6502;
   \   0000021C   2CED9FE5           LDR      LR,??init6502_0+0x68  ;; rol6502
   \   00000220   8C7480E5           STR      R7,[R0, #+1164]
   \   00000224   A0E480E5           STR      LR,[R0, #+1184]
    897            ticks[0x27] = 2; instruction[0x27] = nop6502; adrmode[0x27] = implied6502;
    898            ticks[0x28] = 4; instruction[0x28] = plp6502; adrmode[0x28] = implied6502;
   \   00000228   24ED9FE5           LDR      LR,??init6502_0+0x6C  ;; plp6502
   \   0000022C   9C7480E5           STR      R7,[R0, #+1180]
   \   00000230   A8E480E5           STR      LR,[R0, #+1192]
    899            ticks[0x29] = 3; instruction[0x29] = and6502; adrmode[0x29] = immediate6502;
   \   00000234   E8EC9FE5           LDR      LR,??init6502_0+0x3C  ;; immediate6502
   \   00000238   AC7480E5           STR      R7,[R0, #+1196]
   \   0000023C   ACE080E5           STR      LR,[R0, #+172]
    900            ticks[0x2a] = 2; instruction[0x2a] = rola6502; adrmode[0x2a] = implied6502;
   \   00000240   10ED9FE5           LDR      LR,??init6502_0+0x70  ;; rola6502
    901            ticks[0x2b] = 2; instruction[0x2b] = nop6502; adrmode[0x2b] = implied6502;
    902            ticks[0x2c] = 4; instruction[0x2c] = bit6502; adrmode[0x2c] = abs6502;
    903            ticks[0x2d] = 4; instruction[0x2d] = and6502; adrmode[0x2d] = abs6502;
   \   00000244   BC7480E5           STR      R7,[R0, #+1212]
   \   00000248   B0E480E5           STR      LR,[R0, #+1200]
   \   0000024C   F4EC9FE5           LDR      LR,??init6502_0+0x60  ;; bit6502
    904            ticks[0x2e] = 6; instruction[0x2e] = rol6502; adrmode[0x2e] = abs6502;
    905            ticks[0x2f] = 2; instruction[0x2f] = nop6502; adrmode[0x2f] = implied6502;
    906            ticks[0x30] = 2; instruction[0x30] = bmi6502; adrmode[0x30] = relative6502;
    907            ticks[0x31] = 5; instruction[0x31] = and6502; adrmode[0x31] = indy6502;
   \   00000250   CC7480E5           STR      R7,[R0, #+1228]
   \   00000254   B8E480E5           STR      LR,[R0, #+1208]
   \   00000258   F0EC9FE5           LDR      LR,??init6502_0+0x68  ;; rol6502
    908            ticks[0x32] = 3; instruction[0x32] = and6502; adrmode[0x32] = indzp6502;
   \   0000025C   D07480E5           STR      R7,[R0, #+1232]
   \   00000260   C0E480E5           STR      LR,[R0, #+1216]
   \   00000264   F0EC9FE5           LDR      LR,??init6502_0+0x74  ;; bmi6502
    909            ticks[0x33] = 2; instruction[0x33] = nop6502; adrmode[0x33] = implied6502;
    910            ticks[0x34] = 4; instruction[0x34] = bit6502; adrmode[0x34] = zpx6502;
    911            ticks[0x35] = 4; instruction[0x35] = and6502; adrmode[0x35] = zpx6502;
   \   00000268   DC7480E5           STR      R7,[R0, #+1244]
   \   0000026C   C8E480E5           STR      LR,[R0, #+1224]
   \   00000270   98EC9FE5           LDR      LR,??init6502_0+0x28  ;; relative6502
    912            ticks[0x36] = 6; instruction[0x36] = rol6502; adrmode[0x36] = zpx6502;
    913            ticks[0x37] = 2; instruction[0x37] = nop6502; adrmode[0x37] = implied6502;
    914            ticks[0x38] = 2; instruction[0x38] = sec6502; adrmode[0x38] = implied6502;
    915            ticks[0x39] = 4; instruction[0x39] = and6502; adrmode[0x39] = absy6502;
   \   00000274   EC7480E5           STR      R7,[R0, #+1260]
   \   00000278   C8E080E5           STR      LR,[R0, #+200]
   \   0000027C   94EC9FE5           LDR      LR,??init6502_0+0x30  ;; indy6502
    916            ticks[0x3a] = 2; instruction[0x3a] = dea6502; adrmode[0x3a] = implied6502;
    917            ticks[0x3b] = 2; instruction[0x3b] = nop6502; adrmode[0x3b] = implied6502;
    918            ticks[0x3c] = 4; instruction[0x3c] = bit6502; adrmode[0x3c] = absx6502;
    919            ticks[0x3d] = 4; instruction[0x3d] = and6502; adrmode[0x3d] = absx6502;
   \   00000280   FC7480E5           STR      R7,[R0, #+1276]
   \   00000284   CCE080E5           STR      LR,[R0, #+204]
   \   00000288   8CEC9FE5           LDR      LR,??init6502_0+0x34  ;; indzp6502
    920            ticks[0x3e] = 7; instruction[0x3e] = rol6502; adrmode[0x3e] = absx6502;
   \   0000028C   0770A0E3           MOV      R7,#+7
   \   00000290   D0E080E5           STR      LR,[R0, #+208]
   \   00000294   ACEC9FE5           LDR      LR,??init6502_0+0x60  ;; bit6502
   \   00000298   007980E5           STR      R7,[R0, #+2304]
   \   0000029C   AC7C9FE5           LDR      R7,??init6502_0+0x68  ;; rol6502
   \   000002A0   D8E480E5           STR      LR,[R0, #+1240]
   \   000002A4   A4EC9FE5           LDR      LR,??init6502_0+0x68  ;; rol6502
   \   000002A8   007580E5           STR      R7,[R0, #+1280]
    921            ticks[0x3f] = 2; instruction[0x3f] = nop6502; adrmode[0x3f] = implied6502;
    922            ticks[0x40] = 6; instruction[0x40] = rti6502; adrmode[0x40] = implied6502;
   \   000002AC   AC7C9FE5           LDR      R7,??init6502_0+0x78  ;; rti6502
   \   000002B0   E0E480E5           STR      LR,[R0, #+1248]
   \   000002B4   A8EC9FE5           LDR      LR,??init6502_0+0x7C  ;; sec6502
   \   000002B8   087580E5           STR      R7,[R0, #+1288]
    923            ticks[0x41] = 6; instruction[0x41] = eor6502; adrmode[0x41] = indx6502;
   \   000002BC   A47C9FE5           LDR      R7,??init6502_0+0x80  ;; eor6502
   \   000002C0   E8E480E5           STR      LR,[R0, #+1256]
   \   000002C4   48EC9FE5           LDR      LR,??init6502_0+0x2C  ;; absy6502
   \   000002C8   882880E5           STR      R2,[R0, #+2184]
   \   000002CC   ECE080E5           STR      LR,[R0, #+236]
   \   000002D0   94EC9FE5           LDR      LR,??init6502_0+0x84  ;; dea6502
   \   000002D4   889080E5           STR      R9,[R0, #+136]
   \   000002D8   F0E480E5           STR      LR,[R0, #+1264]
   \   000002DC   64EC9FE5           LDR      LR,??init6502_0+0x60  ;; bit6502
   \   000002E0   8C2880E5           STR      R2,[R0, #+2188]
   \   000002E4   F8E480E5           STR      LR,[R0, #+1272]
   \   000002E8   F8EB9FE5           LDR      LR,??init6502_0  ;; indx6502
   \   000002EC   903880E5           STR      R3,[R0, #+2192]
   \   000002F0   90C480E5           STR      R12,[R0, #+1168]
   \   000002F4   901080E5           STR      R1,[R0, #+144]
   \   000002F8   943880E5           STR      R3,[R0, #+2196]
   \   000002FC   94C480E5           STR      R12,[R0, #+1172]
   \   00000300   941080E5           STR      R1,[R0, #+148]
   \   00000304   984880E5           STR      R4,[R0, #+2200]
   \   00000308   985080E5           STR      R5,[R0, #+152]
   \   0000030C   9C4880E5           STR      R4,[R0, #+2204]
   \   00000310   9C5080E5           STR      R5,[R0, #+156]
   \   00000314   A06880E5           STR      R6,[R0, #+2208]
   \   00000318   A05080E5           STR      R5,[R0, #+160]
   \   0000031C   A43880E5           STR      R3,[R0, #+2212]
   \   00000320   A4C480E5           STR      R12,[R0, #+1188]
   \   00000324   A41080E5           STR      R1,[R0, #+164]
   \   00000328   A88880E5           STR      R8,[R0, #+2216]
   \   0000032C   A81080E5           STR      R1,[R0, #+168]
   \   00000330   AC4880E5           STR      R4,[R0, #+2220]
   \   00000334   B03880E5           STR      R3,[R0, #+2224]
   \   00000338   B01080E5           STR      R1,[R0, #+176]
   \   0000033C   B43880E5           STR      R3,[R0, #+2228]
   \   00000340   B4C480E5           STR      R12,[R0, #+1204]
   \   00000344   B41080E5           STR      R1,[R0, #+180]
   \   00000348   B88880E5           STR      R8,[R0, #+2232]
   \   0000034C   B89080E5           STR      R9,[R0, #+184]
   \   00000350   BC8880E5           STR      R8,[R0, #+2236]
   \   00000354   BC9080E5           STR      R9,[R0, #+188]
   \   00000358   C02880E5           STR      R2,[R0, #+2240]
   \   0000035C   C09080E5           STR      R9,[R0, #+192]
   \   00000360   C43880E5           STR      R3,[R0, #+2244]
   \   00000364   C4C480E5           STR      R12,[R0, #+1220]
   \   00000368   C41080E5           STR      R1,[R0, #+196]
   \   0000036C   C83880E5           STR      R3,[R0, #+2248]
   \   00000370   CC6880E5           STR      R6,[R0, #+2252]
   \   00000374   D04880E5           STR      R4,[R0, #+2256]
   \   00000378   D43880E5           STR      R3,[R0, #+2260]
   \   0000037C   D4C480E5           STR      R12,[R0, #+1236]
   \   00000380   D41080E5           STR      R1,[R0, #+212]
   \   00000384   D88880E5           STR      R8,[R0, #+2264]
   \   00000388   D8A080E5           STR      R10,[R0, #+216]
   \   0000038C   DC8880E5           STR      R8,[R0, #+2268]
   \   00000390   DCA080E5           STR      R10,[R0, #+220]
   \   00000394   E02880E5           STR      R2,[R0, #+2272]
   \   00000398   E0A080E5           STR      R10,[R0, #+224]
   \   0000039C   E43880E5           STR      R3,[R0, #+2276]
   \   000003A0   E4C480E5           STR      R12,[R0, #+1252]
   \   000003A4   E41080E5           STR      R1,[R0, #+228]
   \   000003A8   E83880E5           STR      R3,[R0, #+2280]
   \   000003AC   E81080E5           STR      R1,[R0, #+232]
   \   000003B0   EC8880E5           STR      R8,[R0, #+2284]
   \   000003B4   F03880E5           STR      R3,[R0, #+2288]
   \   000003B8   F01080E5           STR      R1,[R0, #+240]
   \   000003BC   F43880E5           STR      R3,[R0, #+2292]
   \   000003C0   F4C480E5           STR      R12,[R0, #+1268]
   \   000003C4   F41080E5           STR      R1,[R0, #+244]
   \   000003C8   F88880E5           STR      R8,[R0, #+2296]
   \   000003CC   F8B080E5           STR      R11,[R0, #+248]
   \   000003D0   FC8880E5           STR      R8,[R0, #+2300]
   \   000003D4   FCB080E5           STR      R11,[R0, #+252]
   \   000003D8   00B180E5           STR      R11,[R0, #+256]
   \   000003DC   043980E5           STR      R3,[R0, #+2308]
   \   000003E0   04C580E5           STR      R12,[R0, #+1284]
   \   000003E4   041180E5           STR      R1,[R0, #+260]
   \   000003E8   082980E5           STR      R2,[R0, #+2312]
   \   000003EC   081180E5           STR      R1,[R0, #+264]
   \   000003F0   0C2980E5           STR      R2,[R0, #+2316]
   \   000003F4   0C7580E5           STR      R7,[R0, #+1292]
   \   000003F8   0CE180E5           STR      LR,[R0, #+268]
    924            ticks[0x42] = 2; instruction[0x42] = nop6502; adrmode[0x42] = implied6502;
   \   000003FC   103980E5           STR      R3,[R0, #+2320]
    925            ticks[0x43] = 2; instruction[0x43] = nop6502; adrmode[0x43] = implied6502;
    926            ticks[0x44] = 2; instruction[0x44] = nop6502; adrmode[0x44] = implied6502;
    927            ticks[0x45] = 3; instruction[0x45] = eor6502; adrmode[0x45] = zp6502;
    928            ticks[0x46] = 5; instruction[0x46] = lsr6502; adrmode[0x46] = zp6502;
   \   00000400   68EB9FE5           LDR      LR,??init6502_0+0x88  ;; lsr6502
   \   00000404   1C7580E5           STR      R7,[R0, #+1308]
   \   00000408   20E580E5           STR      LR,[R0, #+1312]
    929            ticks[0x47] = 2; instruction[0x47] = nop6502; adrmode[0x47] = implied6502;
    930            ticks[0x48] = 3; instruction[0x48] = pha6502; adrmode[0x48] = implied6502;
   \   0000040C   60EB9FE5           LDR      LR,??init6502_0+0x8C  ;; pha6502
    931            ticks[0x49] = 3; instruction[0x49] = eor6502; adrmode[0x49] = immediate6502;
   \   00000410   2C7580E5           STR      R7,[R0, #+1324]
   \   00000414   28E580E5           STR      LR,[R0, #+1320]
   \   00000418   04EB9FE5           LDR      LR,??init6502_0+0x3C  ;; immediate6502
    932            ticks[0x4a] = 2; instruction[0x4a] = lsra6502; adrmode[0x4a] = implied6502;
    933            ticks[0x4b] = 2; instruction[0x4b] = nop6502; adrmode[0x4b] = implied6502;
    934            ticks[0x4c] = 3; instruction[0x4c] = jmp6502; adrmode[0x4c] = abs6502;
    935            ticks[0x4d] = 4; instruction[0x4d] = eor6502; adrmode[0x4d] = abs6502;
   \   0000041C   3C7580E5           STR      R7,[R0, #+1340]
   \   00000420   2CE180E5           STR      LR,[R0, #+300]
   \   00000424   4CEB9FE5           LDR      LR,??init6502_0+0x90  ;; lsra6502
    936            ticks[0x4e] = 6; instruction[0x4e] = lsr6502; adrmode[0x4e] = abs6502;
    937            ticks[0x4f] = 2; instruction[0x4f] = nop6502; adrmode[0x4f] = implied6502;
    938            ticks[0x50] = 2; instruction[0x50] = bvc6502; adrmode[0x50] = relative6502;
    939            ticks[0x51] = 5; instruction[0x51] = eor6502; adrmode[0x51] = indy6502;
   \   00000428   4C7580E5           STR      R7,[R0, #+1356]
   \   0000042C   30E580E5           STR      LR,[R0, #+1328]
   \   00000430   44EB9FE5           LDR      LR,??init6502_0+0x94  ;; jmp6502
    940            ticks[0x52] = 3; instruction[0x52] = eor6502; adrmode[0x52] = indzp6502;
   \   00000434   507580E5           STR      R7,[R0, #+1360]
   \   00000438   38E580E5           STR      LR,[R0, #+1336]
   \   0000043C   2CEB9FE5           LDR      LR,??init6502_0+0x88  ;; lsr6502
    941            ticks[0x53] = 2; instruction[0x53] = nop6502; adrmode[0x53] = implied6502;
    942            ticks[0x54] = 2; instruction[0x54] = nop6502; adrmode[0x54] = implied6502;
    943            ticks[0x55] = 4; instruction[0x55] = eor6502; adrmode[0x55] = zpx6502;
   \   00000440   5C7580E5           STR      R7,[R0, #+1372]
   \   00000444   40E580E5           STR      LR,[R0, #+1344]
   \   00000448   30EB9FE5           LDR      LR,??init6502_0+0x98  ;; bvc6502
    944            ticks[0x56] = 6; instruction[0x56] = lsr6502; adrmode[0x56] = zpx6502;
    945            ticks[0x57] = 2; instruction[0x57] = nop6502; adrmode[0x57] = implied6502;
    946            ticks[0x58] = 2; instruction[0x58] = cli6502; adrmode[0x58] = implied6502;
    947            ticks[0x59] = 4; instruction[0x59] = eor6502; adrmode[0x59] = absy6502;
   \   0000044C   6C7580E5           STR      R7,[R0, #+1388]
   \   00000450   48E580E5           STR      LR,[R0, #+1352]
   \   00000454   B4EA9FE5           LDR      LR,??init6502_0+0x28  ;; relative6502
    948            ticks[0x5a] = 3; instruction[0x5a] = phy6502; adrmode[0x5a] = implied6502;
    949            ticks[0x5b] = 2; instruction[0x5b] = nop6502; adrmode[0x5b] = implied6502;
    950            ticks[0x5c] = 2; instruction[0x5c] = nop6502; adrmode[0x5c] = implied6502;
    951            ticks[0x5d] = 4; instruction[0x5d] = eor6502; adrmode[0x5d] = absx6502;
   \   00000458   7C7580E5           STR      R7,[R0, #+1404]
   \   0000045C   48E180E5           STR      LR,[R0, #+328]
   \   00000460   B0EA9FE5           LDR      LR,??init6502_0+0x30  ;; indy6502
    952            ticks[0x5e] = 7; instruction[0x5e] = lsr6502; adrmode[0x5e] = absx6502;
   \   00000464   0770A0E3           MOV      R7,#+7
   \   00000468   4CE180E5           STR      LR,[R0, #+332]
   \   0000046C   A8EA9FE5           LDR      LR,??init6502_0+0x34  ;; indzp6502
   \   00000470   807980E5           STR      R7,[R0, #+2432]
   \   00000474   F47A9FE5           LDR      R7,??init6502_0+0x88  ;; lsr6502
   \   00000478   50E180E5           STR      LR,[R0, #+336]
   \   0000047C   ECEA9FE5           LDR      LR,??init6502_0+0x88  ;; lsr6502
   \   00000480   807580E5           STR      R7,[R0, #+1408]
    953            ticks[0x5f] = 2; instruction[0x5f] = nop6502; adrmode[0x5f] = implied6502;
    954            ticks[0x60] = 6; instruction[0x60] = rts6502; adrmode[0x60] = implied6502;
   \   00000484   F87A9FE5           LDR      R7,??init6502_0+0x9C  ;; rts6502
   \   00000488   60E580E5           STR      LR,[R0, #+1376]
   \   0000048C   F4EA9FE5           LDR      LR,??init6502_0+0xA0  ;; cli6502
   \   00000490   887580E5           STR      R7,[R0, #+1416]
    955            ticks[0x61] = 6; instruction[0x61] = adc6502; adrmode[0x61] = indx6502;
   \   00000494   F07A9FE5           LDR      R7,??init6502_0+0xA4  ;; adc6502
   \   00000498   68E580E5           STR      LR,[R0, #+1384]
   \   0000049C   70EA9FE5           LDR      LR,??init6502_0+0x2C  ;; absy6502
   \   000004A0   10C580E5           STR      R12,[R0, #+1296]
   \   000004A4   6CE180E5           STR      LR,[R0, #+364]
   \   000004A8   E0EA9FE5           LDR      LR,??init6502_0+0xA8  ;; phy6502
   \   000004AC   101180E5           STR      R1,[R0, #+272]
   \   000004B0   70E580E5           STR      LR,[R0, #+1392]
   \   000004B4   2CEA9FE5           LDR      LR,??init6502_0  ;; indx6502
   \   000004B8   143980E5           STR      R3,[R0, #+2324]
   \   000004BC   8CE180E5           STR      LR,[R0, #+396]
    956            ticks[0x62] = 2; instruction[0x62] = nop6502; adrmode[0x62] = implied6502;
    957            ticks[0x63] = 2; instruction[0x63] = nop6502; adrmode[0x63] = implied6502;
    958            ticks[0x64] = 3; instruction[0x64] = stz6502; adrmode[0x64] = zp6502;
   \   000004C0   CCEA9FE5           LDR      LR,??init6502_0+0xAC  ;; stz6502
   \   000004C4   14C580E5           STR      R12,[R0, #+1300]
   \   000004C8   141180E5           STR      R1,[R0, #+276]
   \   000004CC   183980E5           STR      R3,[R0, #+2328]
   \   000004D0   18C580E5           STR      R12,[R0, #+1304]
   \   000004D4   181180E5           STR      R1,[R0, #+280]
   \   000004D8   1C4980E5           STR      R4,[R0, #+2332]
   \   000004DC   1C5180E5           STR      R5,[R0, #+284]
   \   000004E0   206980E5           STR      R6,[R0, #+2336]
   \   000004E4   205180E5           STR      R5,[R0, #+288]
   \   000004E8   243980E5           STR      R3,[R0, #+2340]
   \   000004EC   24C580E5           STR      R12,[R0, #+1316]
   \   000004F0   241180E5           STR      R1,[R0, #+292]
   \   000004F4   284980E5           STR      R4,[R0, #+2344]
   \   000004F8   281180E5           STR      R1,[R0, #+296]
   \   000004FC   2C4980E5           STR      R4,[R0, #+2348]
   \   00000500   303980E5           STR      R3,[R0, #+2352]
   \   00000504   301180E5           STR      R1,[R0, #+304]
   \   00000508   343980E5           STR      R3,[R0, #+2356]
   \   0000050C   34C580E5           STR      R12,[R0, #+1332]
   \   00000510   341180E5           STR      R1,[R0, #+308]
   \   00000514   384980E5           STR      R4,[R0, #+2360]
   \   00000518   389180E5           STR      R9,[R0, #+312]
   \   0000051C   3C8980E5           STR      R8,[R0, #+2364]
   \   00000520   3C9180E5           STR      R9,[R0, #+316]
   \   00000524   402980E5           STR      R2,[R0, #+2368]
   \   00000528   409180E5           STR      R9,[R0, #+320]
   \   0000052C   443980E5           STR      R3,[R0, #+2372]
   \   00000530   44C580E5           STR      R12,[R0, #+1348]
   \   00000534   441180E5           STR      R1,[R0, #+324]
   \   00000538   483980E5           STR      R3,[R0, #+2376]
   \   0000053C   4C6980E5           STR      R6,[R0, #+2380]
   \   00000540   504980E5           STR      R4,[R0, #+2384]
   \   00000544   543980E5           STR      R3,[R0, #+2388]
   \   00000548   54C580E5           STR      R12,[R0, #+1364]
   \   0000054C   541180E5           STR      R1,[R0, #+340]
   \   00000550   583980E5           STR      R3,[R0, #+2392]
   \   00000554   58C580E5           STR      R12,[R0, #+1368]
   \   00000558   581180E5           STR      R1,[R0, #+344]
   \   0000055C   5C8980E5           STR      R8,[R0, #+2396]
   \   00000560   5CA180E5           STR      R10,[R0, #+348]
   \   00000564   602980E5           STR      R2,[R0, #+2400]
   \   00000568   60A180E5           STR      R10,[R0, #+352]
   \   0000056C   643980E5           STR      R3,[R0, #+2404]
   \   00000570   64C580E5           STR      R12,[R0, #+1380]
   \   00000574   641180E5           STR      R1,[R0, #+356]
   \   00000578   683980E5           STR      R3,[R0, #+2408]
   \   0000057C   681180E5           STR      R1,[R0, #+360]
   \   00000580   6C8980E5           STR      R8,[R0, #+2412]
   \   00000584   704980E5           STR      R4,[R0, #+2416]
   \   00000588   701180E5           STR      R1,[R0, #+368]
   \   0000058C   743980E5           STR      R3,[R0, #+2420]
   \   00000590   74C580E5           STR      R12,[R0, #+1396]
   \   00000594   741180E5           STR      R1,[R0, #+372]
   \   00000598   783980E5           STR      R3,[R0, #+2424]
   \   0000059C   78C580E5           STR      R12,[R0, #+1400]
   \   000005A0   781180E5           STR      R1,[R0, #+376]
   \   000005A4   7C8980E5           STR      R8,[R0, #+2428]
   \   000005A8   7CB180E5           STR      R11,[R0, #+380]
   \   000005AC   80B180E5           STR      R11,[R0, #+384]
   \   000005B0   843980E5           STR      R3,[R0, #+2436]
   \   000005B4   84C580E5           STR      R12,[R0, #+1412]
   \   000005B8   841180E5           STR      R1,[R0, #+388]
   \   000005BC   882980E5           STR      R2,[R0, #+2440]
   \   000005C0   881180E5           STR      R1,[R0, #+392]
   \   000005C4   8C2980E5           STR      R2,[R0, #+2444]
   \   000005C8   8C7580E5           STR      R7,[R0, #+1420]
   \   000005CC   903980E5           STR      R3,[R0, #+2448]
   \   000005D0   90C580E5           STR      R12,[R0, #+1424]
   \   000005D4   901180E5           STR      R1,[R0, #+400]
   \   000005D8   943980E5           STR      R3,[R0, #+2452]
   \   000005DC   94C580E5           STR      R12,[R0, #+1428]
   \   000005E0   941180E5           STR      R1,[R0, #+404]
   \   000005E4   984980E5           STR      R4,[R0, #+2456]
   \   000005E8   98E580E5           STR      LR,[R0, #+1432]
   \   000005EC   985180E5           STR      R5,[R0, #+408]
    959            ticks[0x65] = 3; instruction[0x65] = adc6502; adrmode[0x65] = zp6502;
   \   000005F0   9C4980E5           STR      R4,[R0, #+2460]
   \   000005F4   9C7580E5           STR      R7,[R0, #+1436]
   \   000005F8   9C5180E5           STR      R5,[R0, #+412]
    960            ticks[0x66] = 5; instruction[0x66] = ror6502; adrmode[0x66] = zp6502;
   \   000005FC   A06980E5           STR      R6,[R0, #+2464]
   \   00000600   90E99FE5           LDR      LR,??init6502_0+0xB0  ;; ror6502
    961            ticks[0x67] = 2; instruction[0x67] = nop6502; adrmode[0x67] = implied6502;
    962            ticks[0x68] = 4; instruction[0x68] = pla6502; adrmode[0x68] = implied6502;
    963            ticks[0x69] = 3; instruction[0x69] = adc6502; adrmode[0x69] = immediate6502;
   \   00000604   AC7580E5           STR      R7,[R0, #+1452]
   \   00000608   A0E580E5           STR      LR,[R0, #+1440]
   \   0000060C   88E99FE5           LDR      LR,??init6502_0+0xB4  ;; pla6502
    964            ticks[0x6a] = 2; instruction[0x6a] = rora6502; adrmode[0x6a] = implied6502;
    965            ticks[0x6b] = 2; instruction[0x6b] = nop6502; adrmode[0x6b] = implied6502;
    966            ticks[0x6c] = 5; instruction[0x6c] = jmp6502; adrmode[0x6c] = indirect6502;
    967            ticks[0x6d] = 4; instruction[0x6d] = adc6502; adrmode[0x6d] = abs6502;
   \   00000610   BC7580E5           STR      R7,[R0, #+1468]
   \   00000614   A8E580E5           STR      LR,[R0, #+1448]
   \   00000618   04E99FE5           LDR      LR,??init6502_0+0x3C  ;; immediate6502
    968            ticks[0x6e] = 6; instruction[0x6e] = ror6502; adrmode[0x6e] = abs6502;
    969            ticks[0x6f] = 2; instruction[0x6f] = nop6502; adrmode[0x6f] = implied6502;
    970            ticks[0x70] = 2; instruction[0x70] = bvs6502; adrmode[0x70] = relative6502;
    971            ticks[0x71] = 5; instruction[0x71] = adc6502; adrmode[0x71] = indy6502;
   \   0000061C   CC7580E5           STR      R7,[R0, #+1484]
   \   00000620   ACE180E5           STR      LR,[R0, #+428]
   \   00000624   74E99FE5           LDR      LR,??init6502_0+0xB8  ;; rora6502
    972            ticks[0x72] = 3; instruction[0x72] = adc6502; adrmode[0x72] = indzp6502;
   \   00000628   D07580E5           STR      R7,[R0, #+1488]
   \   0000062C   B0E580E5           STR      LR,[R0, #+1456]
   \   00000630   44E99FE5           LDR      LR,??init6502_0+0x94  ;; jmp6502
    973            ticks[0x73] = 2; instruction[0x73] = nop6502; adrmode[0x73] = implied6502;
    974            ticks[0x74] = 4; instruction[0x74] = stz6502; adrmode[0x74] = zpx6502;
    975            ticks[0x75] = 4; instruction[0x75] = adc6502; adrmode[0x75] = zpx6502;
   \   00000634   DC7580E5           STR      R7,[R0, #+1500]
   \   00000638   B8E580E5           STR      LR,[R0, #+1464]
   \   0000063C   60E99FE5           LDR      LR,??init6502_0+0xBC  ;; indirect6502
    976            ticks[0x76] = 6; instruction[0x76] = ror6502; adrmode[0x76] = zpx6502;
    977            ticks[0x77] = 2; instruction[0x77] = nop6502; adrmode[0x77] = implied6502;
    978            ticks[0x78] = 2; instruction[0x78] = sei6502; adrmode[0x78] = implied6502;
    979            ticks[0x79] = 4; instruction[0x79] = adc6502; adrmode[0x79] = absy6502;
   \   00000640   EC7580E5           STR      R7,[R0, #+1516]
   \   00000644   B8E180E5           STR      LR,[R0, #+440]
   \   00000648   48E99FE5           LDR      LR,??init6502_0+0xB0  ;; ror6502
    980            ticks[0x7a] = 4; instruction[0x7a] = ply6502; adrmode[0x7a] = implied6502;
    981            ticks[0x7b] = 2; instruction[0x7b] = nop6502; adrmode[0x7b] = implied6502;
    982            ticks[0x7c] = 6; instruction[0x7c] = jmp6502; adrmode[0x7c] = indabsx6502;
    983            ticks[0x7d] = 4; instruction[0x7d] = adc6502; adrmode[0x7d] = absx6502;
   \   0000064C   FC7580E5           STR      R7,[R0, #+1532]
   \   00000650   C0E580E5           STR      LR,[R0, #+1472]
   \   00000654   4CE99FE5           LDR      LR,??init6502_0+0xC0  ;; bvs6502
    984            ticks[0x7e] = 7; instruction[0x7e] = ror6502; adrmode[0x7e] = absx6502;
   \   00000658   0770A0E3           MOV      R7,#+7
   \   0000065C   C8E580E5           STR      LR,[R0, #+1480]
   \   00000660   A8E89FE5           LDR      LR,??init6502_0+0x28  ;; relative6502
   \   00000664   007A80E5           STR      R7,[R0, #+2560]
   \   00000668   28799FE5           LDR      R7,??init6502_0+0xB0  ;; ror6502
   \   0000066C   C8E180E5           STR      LR,[R0, #+456]
   \   00000670   A0E89FE5           LDR      LR,??init6502_0+0x30  ;; indy6502
   \   00000674   007680E5           STR      R7,[R0, #+1536]
    985            ticks[0x7f] = 2; instruction[0x7f] = nop6502; adrmode[0x7f] = implied6502;
    986            ticks[0x80] = 2; instruction[0x80] = bra6502; adrmode[0x80] = relative6502;
   \   00000678   2C799FE5           LDR      R7,??init6502_0+0xC4  ;; bra6502
   \   0000067C   CCE180E5           STR      LR,[R0, #+460]
   \   00000680   94E89FE5           LDR      LR,??init6502_0+0x34  ;; indzp6502
   \   00000684   087680E5           STR      R7,[R0, #+1544]
   \   00000688   80789FE5           LDR      R7,??init6502_0+0x28  ;; relative6502
   \   0000068C   D0E180E5           STR      LR,[R0, #+464]
   \   00000690   FCE89FE5           LDR      LR,??init6502_0+0xAC  ;; stz6502
   \   00000694   087280E5           STR      R7,[R0, #+520]
    987            ticks[0x81] = 6; instruction[0x81] = sta6502; adrmode[0x81] = indx6502;
   \   00000698   10799FE5           LDR      R7,??init6502_0+0xC8  ;; sta6502
   \   0000069C   D8E580E5           STR      LR,[R0, #+1496]
   \   000006A0   F0E89FE5           LDR      LR,??init6502_0+0xB0  ;; ror6502
   \   000006A4   A05180E5           STR      R5,[R0, #+416]
   \   000006A8   E0E580E5           STR      LR,[R0, #+1504]
   \   000006AC   00E99FE5           LDR      LR,??init6502_0+0xCC  ;; sei6502
   \   000006B0   A43980E5           STR      R3,[R0, #+2468]
   \   000006B4   E8E580E5           STR      LR,[R0, #+1512]
   \   000006B8   54E89FE5           LDR      LR,??init6502_0+0x2C  ;; absy6502
   \   000006BC   A4C580E5           STR      R12,[R0, #+1444]
   \   000006C0   ECE180E5           STR      LR,[R0, #+492]
   \   000006C4   ECE89FE5           LDR      LR,??init6502_0+0xD0  ;; ply6502
   \   000006C8   A41180E5           STR      R1,[R0, #+420]
   \   000006CC   F0E580E5           STR      LR,[R0, #+1520]
   \   000006D0   A4E89FE5           LDR      LR,??init6502_0+0x94  ;; jmp6502
   \   000006D4   A88980E5           STR      R8,[R0, #+2472]
   \   000006D8   F8E580E5           STR      LR,[R0, #+1528]
   \   000006DC   D8E89FE5           LDR      LR,??init6502_0+0xD4  ;; indabsx6502
   \   000006E0   A81180E5           STR      R1,[R0, #+424]
   \   000006E4   F8E180E5           STR      LR,[R0, #+504]
   \   000006E8   F8E79FE5           LDR      LR,??init6502_0  ;; indx6502
   \   000006EC   AC4980E5           STR      R4,[R0, #+2476]
   \   000006F0   0CE280E5           STR      LR,[R0, #+524]
    988            ticks[0x82] = 2; instruction[0x82] = nop6502; adrmode[0x82] = implied6502;
    989            ticks[0x83] = 2; instruction[0x83] = nop6502; adrmode[0x83] = implied6502;
    990            ticks[0x84] = 2; instruction[0x84] = sty6502; adrmode[0x84] = zp6502;
   \   000006F4   C4E89FE5           LDR      LR,??init6502_0+0xD8  ;; sty6502
   \   000006F8   B03980E5           STR      R3,[R0, #+2480]
   \   000006FC   18E680E5           STR      LR,[R0, #+1560]
    991            ticks[0x85] = 2; instruction[0x85] = sta6502; adrmode[0x85] = zp6502;
    992            ticks[0x86] = 2; instruction[0x86] = stx6502; adrmode[0x86] = zp6502;
   \   00000700   BCE89FE5           LDR      LR,??init6502_0+0xDC  ;; stx6502
   \   00000704   B01180E5           STR      R1,[R0, #+432]
   \   00000708   B43980E5           STR      R3,[R0, #+2484]
   \   0000070C   B4C580E5           STR      R12,[R0, #+1460]
   \   00000710   B41180E5           STR      R1,[R0, #+436]
   \   00000714   B86980E5           STR      R6,[R0, #+2488]
   \   00000718   BC8980E5           STR      R8,[R0, #+2492]
   \   0000071C   BC9180E5           STR      R9,[R0, #+444]
   \   00000720   C02980E5           STR      R2,[R0, #+2496]
   \   00000724   C09180E5           STR      R9,[R0, #+448]
   \   00000728   C43980E5           STR      R3,[R0, #+2500]
   \   0000072C   C4C580E5           STR      R12,[R0, #+1476]
   \   00000730   C41180E5           STR      R1,[R0, #+452]
   \   00000734   C83980E5           STR      R3,[R0, #+2504]
   \   00000738   CC6980E5           STR      R6,[R0, #+2508]
   \   0000073C   D04980E5           STR      R4,[R0, #+2512]
   \   00000740   D43980E5           STR      R3,[R0, #+2516]
   \   00000744   D4C580E5           STR      R12,[R0, #+1492]
   \   00000748   D41180E5           STR      R1,[R0, #+468]
   \   0000074C   D88980E5           STR      R8,[R0, #+2520]
   \   00000750   D8A180E5           STR      R10,[R0, #+472]
   \   00000754   DC8980E5           STR      R8,[R0, #+2524]
   \   00000758   DCA180E5           STR      R10,[R0, #+476]
   \   0000075C   E02980E5           STR      R2,[R0, #+2528]
   \   00000760   E0A180E5           STR      R10,[R0, #+480]
   \   00000764   E43980E5           STR      R3,[R0, #+2532]
   \   00000768   E4C580E5           STR      R12,[R0, #+1508]
   \   0000076C   E41180E5           STR      R1,[R0, #+484]
   \   00000770   E83980E5           STR      R3,[R0, #+2536]
   \   00000774   E81180E5           STR      R1,[R0, #+488]
   \   00000778   EC8980E5           STR      R8,[R0, #+2540]
   \   0000077C   F08980E5           STR      R8,[R0, #+2544]
   \   00000780   F01180E5           STR      R1,[R0, #+496]
   \   00000784   F43980E5           STR      R3,[R0, #+2548]
   \   00000788   F4C580E5           STR      R12,[R0, #+1524]
   \   0000078C   F41180E5           STR      R1,[R0, #+500]
   \   00000790   F82980E5           STR      R2,[R0, #+2552]
   \   00000794   FC8980E5           STR      R8,[R0, #+2556]
   \   00000798   FCB180E5           STR      R11,[R0, #+508]
   \   0000079C   00B280E5           STR      R11,[R0, #+512]
   \   000007A0   043A80E5           STR      R3,[R0, #+2564]
   \   000007A4   04C680E5           STR      R12,[R0, #+1540]
   \   000007A8   041280E5           STR      R1,[R0, #+516]
   \   000007AC   083A80E5           STR      R3,[R0, #+2568]
   \   000007B0   0C2A80E5           STR      R2,[R0, #+2572]
   \   000007B4   0C7680E5           STR      R7,[R0, #+1548]
   \   000007B8   103A80E5           STR      R3,[R0, #+2576]
   \   000007BC   10C680E5           STR      R12,[R0, #+1552]
   \   000007C0   101280E5           STR      R1,[R0, #+528]
   \   000007C4   143A80E5           STR      R3,[R0, #+2580]
   \   000007C8   14C680E5           STR      R12,[R0, #+1556]
   \   000007CC   141280E5           STR      R1,[R0, #+532]
   \   000007D0   183A80E5           STR      R3,[R0, #+2584]
   \   000007D4   185280E5           STR      R5,[R0, #+536]
   \   000007D8   1C3A80E5           STR      R3,[R0, #+2588]
   \   000007DC   1C7680E5           STR      R7,[R0, #+1564]
   \   000007E0   1C5280E5           STR      R5,[R0, #+540]
   \   000007E4   203A80E5           STR      R3,[R0, #+2592]
   \   000007E8   20E680E5           STR      LR,[R0, #+1568]
   \   000007EC   205280E5           STR      R5,[R0, #+544]
    993            ticks[0x87] = 2; instruction[0x87] = nop6502; adrmode[0x87] = implied6502;
   \   000007F0   243A80E5           STR      R3,[R0, #+2596]
   \   000007F4   24C680E5           STR      R12,[R0, #+1572]
   \   000007F8   241280E5           STR      R1,[R0, #+548]
    994            ticks[0x88] = 2; instruction[0x88] = dey6502; adrmode[0x88] = implied6502;
   \   000007FC   283A80E5           STR      R3,[R0, #+2600]
   \   00000800   C0E79FE5           LDR      LR,??init6502_0+0xE0  ;; dey6502
    995            ticks[0x89] = 2; instruction[0x89] = bit6502; adrmode[0x89] = immediate6502;
    996            ticks[0x8a] = 2; instruction[0x8a] = txa6502; adrmode[0x8a] = implied6502;
    997            ticks[0x8b] = 2; instruction[0x8b] = nop6502; adrmode[0x8b] = implied6502;
    998            ticks[0x8c] = 4; instruction[0x8c] = sty6502; adrmode[0x8c] = abs6502;
    999            ticks[0x8d] = 4; instruction[0x8d] = sta6502; adrmode[0x8d] = abs6502;
   \   00000804   3C7680E5           STR      R7,[R0, #+1596]
   \   00000808   28E680E5           STR      LR,[R0, #+1576]
   \   0000080C   34E79FE5           LDR      LR,??init6502_0+0x60  ;; bit6502
   1000            ticks[0x8e] = 4; instruction[0x8e] = stx6502; adrmode[0x8e] = abs6502;
   1001            ticks[0x8f] = 2; instruction[0x8f] = nop6502; adrmode[0x8f] = implied6502;
   1002            ticks[0x90] = 2; instruction[0x90] = bcc6502; adrmode[0x90] = relative6502;
   1003            ticks[0x91] = 6; instruction[0x91] = sta6502; adrmode[0x91] = indy6502;
   \   00000810   4C7680E5           STR      R7,[R0, #+1612]
   \   00000814   2CE680E5           STR      LR,[R0, #+1580]
   \   00000818   04E79FE5           LDR      LR,??init6502_0+0x3C  ;; immediate6502
   1004            ticks[0x92] = 3; instruction[0x92] = sta6502; adrmode[0x92] = indzp6502;
   \   0000081C   507680E5           STR      R7,[R0, #+1616]
   \   00000820   2CE280E5           STR      LR,[R0, #+556]
   \   00000824   A0E79FE5           LDR      LR,??init6502_0+0xE4  ;; txa6502
   1005            ticks[0x93] = 2; instruction[0x93] = nop6502; adrmode[0x93] = implied6502;
   1006            ticks[0x94] = 4; instruction[0x94] = sty6502; adrmode[0x94] = zpx6502;
   1007            ticks[0x95] = 4; instruction[0x95] = sta6502; adrmode[0x95] = zpx6502;
   \   00000828   5C7680E5           STR      R7,[R0, #+1628]
   \   0000082C   30E680E5           STR      LR,[R0, #+1584]
   \   00000830   88E79FE5           LDR      LR,??init6502_0+0xD8  ;; sty6502
   1008            ticks[0x96] = 4; instruction[0x96] = stx6502; adrmode[0x96] = zpy6502;
   1009            ticks[0x97] = 2; instruction[0x97] = nop6502; adrmode[0x97] = implied6502;
   1010            ticks[0x98] = 2; instruction[0x98] = tya6502; adrmode[0x98] = implied6502;
   1011            ticks[0x99] = 5; instruction[0x99] = sta6502; adrmode[0x99] = absy6502;
   \   00000834   6C7680E5           STR      R7,[R0, #+1644]
   \   00000838   38E680E5           STR      LR,[R0, #+1592]
   \   0000083C   80E79FE5           LDR      LR,??init6502_0+0xDC  ;; stx6502
   1012            ticks[0x9a] = 2; instruction[0x9a] = txs6502; adrmode[0x9a] = implied6502;
   1013            ticks[0x9b] = 2; instruction[0x9b] = nop6502; adrmode[0x9b] = implied6502;
   1014            ticks[0x9c] = 4; instruction[0x9c] = stz6502; adrmode[0x9c] = abs6502;
   1015            ticks[0x9d] = 5; instruction[0x9d] = sta6502; adrmode[0x9d] = absx6502;
   \   00000840   7C7680E5           STR      R7,[R0, #+1660]
   1016            ticks[0x9e] = 5; instruction[0x9e] = stz6502; adrmode[0x9e] = absx6502;
   \   00000844   48779FE5           LDR      R7,??init6502_0+0xAC  ;; stz6502
   \   00000848   40E680E5           STR      LR,[R0, #+1600]
   \   0000084C   7CE79FE5           LDR      LR,??init6502_0+0xE8  ;; bcc6502
   \   00000850   807680E5           STR      R7,[R0, #+1664]
   1017            ticks[0x9f] = 2; instruction[0x9f] = nop6502; adrmode[0x9f] = implied6502;
   1018            ticks[0xa0] = 3; instruction[0xa0] = ldy6502; adrmode[0xa0] = immediate6502;
   \   00000854   78779FE5           LDR      R7,??init6502_0+0xEC  ;; ldy6502
   \   00000858   48E680E5           STR      LR,[R0, #+1608]
   \   0000085C   ACE69FE5           LDR      LR,??init6502_0+0x28  ;; relative6502
   \   00000860   887680E5           STR      R7,[R0, #+1672]
   \   00000864   B8769FE5           LDR      R7,??init6502_0+0x3C  ;; immediate6502
   \   00000868   48E280E5           STR      LR,[R0, #+584]
   \   0000086C   A4E69FE5           LDR      LR,??init6502_0+0x30  ;; indy6502
   \   00000870   887280E5           STR      R7,[R0, #+648]
   1019            ticks[0xa1] = 6; instruction[0xa1] = lda6502; adrmode[0xa1] = indx6502;
   \   00000874   5C779FE5           LDR      R7,??init6502_0+0xF0  ;; lda6502
   \   00000878   4CE280E5           STR      LR,[R0, #+588]
   \   0000087C   98E69FE5           LDR      LR,??init6502_0+0x34  ;; indzp6502
   \   00000880   281280E5           STR      R1,[R0, #+552]
   \   00000884   50E280E5           STR      LR,[R0, #+592]
   \   00000888   30E79FE5           LDR      LR,??init6502_0+0xD8  ;; sty6502
   \   0000088C   2C3A80E5           STR      R3,[R0, #+2604]
   \   00000890   58E680E5           STR      LR,[R0, #+1624]
   \   00000894   28E79FE5           LDR      LR,??init6502_0+0xDC  ;; stx6502
   \   00000898   303A80E5           STR      R3,[R0, #+2608]
   \   0000089C   60E680E5           STR      LR,[R0, #+1632]
   \   000008A0   34E79FE5           LDR      LR,??init6502_0+0xF4  ;; zpy6502
   \   000008A4   301280E5           STR      R1,[R0, #+560]
   \   000008A8   60E280E5           STR      LR,[R0, #+608]
   \   000008AC   2CE79FE5           LDR      LR,??init6502_0+0xF8  ;; tya6502
   \   000008B0   343A80E5           STR      R3,[R0, #+2612]
   \   000008B4   68E680E5           STR      LR,[R0, #+1640]
   \   000008B8   54E69FE5           LDR      LR,??init6502_0+0x2C  ;; absy6502
   \   000008BC   34C680E5           STR      R12,[R0, #+1588]
   \   000008C0   6CE280E5           STR      LR,[R0, #+620]
   \   000008C4   18E79FE5           LDR      LR,??init6502_0+0xFC  ;; txs6502
   \   000008C8   341280E5           STR      R1,[R0, #+564]
   \   000008CC   70E680E5           STR      LR,[R0, #+1648]
   \   000008D0   BCE69FE5           LDR      LR,??init6502_0+0xAC  ;; stz6502
   \   000008D4   388A80E5           STR      R8,[R0, #+2616]
   \   000008D8   78E680E5           STR      LR,[R0, #+1656]
   \   000008DC   04E69FE5           LDR      LR,??init6502_0  ;; indx6502
   \   000008E0   389280E5           STR      R9,[R0, #+568]
   \   000008E4   8CE280E5           STR      LR,[R0, #+652]
   1020            ticks[0xa2] = 3; instruction[0xa2] = ldx6502; adrmode[0xa2] = immediate6502;
   \   000008E8   F8E69FE5           LDR      LR,??init6502_0+0x100  ;; ldx6502
   \   000008EC   3C8A80E5           STR      R8,[R0, #+2620]
   \   000008F0   90E680E5           STR      LR,[R0, #+1680]
   \   000008F4   28E69FE5           LDR      LR,??init6502_0+0x3C  ;; immediate6502
   \   000008F8   3C9280E5           STR      R9,[R0, #+572]
   \   000008FC   90E280E5           STR      LR,[R0, #+656]
   1021            ticks[0xa3] = 2; instruction[0xa3] = nop6502; adrmode[0xa3] = implied6502;
   1022            ticks[0xa4] = 3; instruction[0xa4] = ldy6502; adrmode[0xa4] = zp6502;
   \   00000900   CCE69FE5           LDR      LR,??init6502_0+0xEC  ;; ldy6502
   \   00000904   408A80E5           STR      R8,[R0, #+2624]
   \   00000908   98E680E5           STR      LR,[R0, #+1688]
   1023            ticks[0xa5] = 3; instruction[0xa5] = lda6502; adrmode[0xa5] = zp6502;
   1024            ticks[0xa6] = 3; instruction[0xa6] = ldx6502; adrmode[0xa6] = zp6502;
   \   0000090C   D4E69FE5           LDR      LR,??init6502_0+0x100  ;; ldx6502
   \   00000910   409280E5           STR      R9,[R0, #+576]
   \   00000914   A0E680E5           STR      LR,[R0, #+1696]
   1025            ticks[0xa7] = 2; instruction[0xa7] = nop6502; adrmode[0xa7] = implied6502;
   1026            ticks[0xa8] = 2; instruction[0xa8] = tay6502; adrmode[0xa8] = implied6502;
   \   00000918   CCE69FE5           LDR      LR,??init6502_0+0x104  ;; tay6502
   \   0000091C   443A80E5           STR      R3,[R0, #+2628]
   \   00000920   44C680E5           STR      R12,[R0, #+1604]
   \   00000924   441280E5           STR      R1,[R0, #+580]
   \   00000928   483A80E5           STR      R3,[R0, #+2632]
   \   0000092C   4C2A80E5           STR      R2,[R0, #+2636]
   \   00000930   504A80E5           STR      R4,[R0, #+2640]
   \   00000934   543A80E5           STR      R3,[R0, #+2644]
   \   00000938   54C680E5           STR      R12,[R0, #+1620]
   \   0000093C   541280E5           STR      R1,[R0, #+596]
   \   00000940   588A80E5           STR      R8,[R0, #+2648]
   \   00000944   58A280E5           STR      R10,[R0, #+600]
   \   00000948   5C8A80E5           STR      R8,[R0, #+2652]
   \   0000094C   5CA280E5           STR      R10,[R0, #+604]
   \   00000950   608A80E5           STR      R8,[R0, #+2656]
   \   00000954   643A80E5           STR      R3,[R0, #+2660]
   \   00000958   64C680E5           STR      R12,[R0, #+1636]
   \   0000095C   641280E5           STR      R1,[R0, #+612]
   \   00000960   683A80E5           STR      R3,[R0, #+2664]
   \   00000964   681280E5           STR      R1,[R0, #+616]
   \   00000968   6C6A80E5           STR      R6,[R0, #+2668]
   \   0000096C   703A80E5           STR      R3,[R0, #+2672]
   \   00000970   701280E5           STR      R1,[R0, #+624]
   \   00000974   743A80E5           STR      R3,[R0, #+2676]
   \   00000978   74C680E5           STR      R12,[R0, #+1652]
   \   0000097C   741280E5           STR      R1,[R0, #+628]
   \   00000980   788A80E5           STR      R8,[R0, #+2680]
   \   00000984   789280E5           STR      R9,[R0, #+632]
   \   00000988   7C6A80E5           STR      R6,[R0, #+2684]
   \   0000098C   7CB280E5           STR      R11,[R0, #+636]
   \   00000990   806A80E5           STR      R6,[R0, #+2688]
   \   00000994   80B280E5           STR      R11,[R0, #+640]
   \   00000998   843A80E5           STR      R3,[R0, #+2692]
   \   0000099C   84C680E5           STR      R12,[R0, #+1668]
   \   000009A0   841280E5           STR      R1,[R0, #+644]
   \   000009A4   884A80E5           STR      R4,[R0, #+2696]
   \   000009A8   8C2A80E5           STR      R2,[R0, #+2700]
   \   000009AC   8C7680E5           STR      R7,[R0, #+1676]
   \   000009B0   904A80E5           STR      R4,[R0, #+2704]
   \   000009B4   943A80E5           STR      R3,[R0, #+2708]
   \   000009B8   94C680E5           STR      R12,[R0, #+1684]
   \   000009BC   941280E5           STR      R1,[R0, #+660]
   \   000009C0   984A80E5           STR      R4,[R0, #+2712]
   \   000009C4   985280E5           STR      R5,[R0, #+664]
   \   000009C8   9C4A80E5           STR      R4,[R0, #+2716]
   \   000009CC   9C7680E5           STR      R7,[R0, #+1692]
   \   000009D0   9C5280E5           STR      R5,[R0, #+668]
   \   000009D4   A04A80E5           STR      R4,[R0, #+2720]
   \   000009D8   A05280E5           STR      R5,[R0, #+672]
   \   000009DC   A43A80E5           STR      R3,[R0, #+2724]
   \   000009E0   A4C680E5           STR      R12,[R0, #+1700]
   \   000009E4   A41280E5           STR      R1,[R0, #+676]
   \   000009E8   A83A80E5           STR      R3,[R0, #+2728]
   \   000009EC   A8E680E5           STR      LR,[R0, #+1704]
   1027            ticks[0xa9] = 3; instruction[0xa9] = lda6502; adrmode[0xa9] = immediate6502;
   \   000009F0   2CE59FE5           LDR      LR,??init6502_0+0x3C  ;; immediate6502
   \   000009F4   A81280E5           STR      R1,[R0, #+680]
   \   000009F8   AC4A80E5           STR      R4,[R0, #+2732]
   \   000009FC   AC7680E5           STR      R7,[R0, #+1708]
   \   00000A00   ACE280E5           STR      LR,[R0, #+684]
   1028            ticks[0xaa] = 2; instruction[0xaa] = tax6502; adrmode[0xaa] = implied6502;
   \   00000A04   E4E59FE5           LDR      LR,??init6502_0+0x108  ;; tax6502
   1029            ticks[0xab] = 2; instruction[0xab] = nop6502; adrmode[0xab] = implied6502;
   1030            ticks[0xac] = 4; instruction[0xac] = ldy6502; adrmode[0xac] = abs6502;
   1031            ticks[0xad] = 4; instruction[0xad] = lda6502; adrmode[0xad] = abs6502;
   \   00000A08   BC7680E5           STR      R7,[R0, #+1724]
   \   00000A0C   B0E680E5           STR      LR,[R0, #+1712]
   \   00000A10   BCE59FE5           LDR      LR,??init6502_0+0xEC  ;; ldy6502
   1032            ticks[0xae] = 4; instruction[0xae] = ldx6502; adrmode[0xae] = abs6502;
   1033            ticks[0xaf] = 2; instruction[0xaf] = nop6502; adrmode[0xaf] = implied6502;
   1034            ticks[0xb0] = 2; instruction[0xb0] = bcs6502; adrmode[0xb0] = relative6502;
   1035            ticks[0xb1] = 5; instruction[0xb1] = lda6502; adrmode[0xb1] = indy6502;
   \   00000A14   CC7680E5           STR      R7,[R0, #+1740]
   \   00000A18   B8E680E5           STR      LR,[R0, #+1720]
   \   00000A1C   C4E59FE5           LDR      LR,??init6502_0+0x100  ;; ldx6502
   1036            ticks[0xb2] = 3; instruction[0xb2] = lda6502; adrmode[0xb2] = indzp6502;
   \   00000A20   D07680E5           STR      R7,[R0, #+1744]
   \   00000A24   C0E680E5           STR      LR,[R0, #+1728]
   \   00000A28   C4E59FE5           LDR      LR,??init6502_0+0x10C  ;; bcs6502
   1037            ticks[0xb3] = 2; instruction[0xb3] = nop6502; adrmode[0xb3] = implied6502;
   1038            ticks[0xb4] = 4; instruction[0xb4] = ldy6502; adrmode[0xb4] = zpx6502;
   1039            ticks[0xb5] = 4; instruction[0xb5] = lda6502; adrmode[0xb5] = zpx6502;
   \   00000A2C   DC7680E5           STR      R7,[R0, #+1756]
   \   00000A30   C8E680E5           STR      LR,[R0, #+1736]
   \   00000A34   D4E49FE5           LDR      LR,??init6502_0+0x28  ;; relative6502
   1040            ticks[0xb6] = 4; instruction[0xb6] = ldx6502; adrmode[0xb6] = zpy6502;
   1041            ticks[0xb7] = 2; instruction[0xb7] = nop6502; adrmode[0xb7] = implied6502;
   1042            ticks[0xb8] = 2; instruction[0xb8] = clv6502; adrmode[0xb8] = implied6502;
   1043            ticks[0xb9] = 4; instruction[0xb9] = lda6502; adrmode[0xb9] = absy6502;
   \   00000A38   EC7680E5           STR      R7,[R0, #+1772]
   \   00000A3C   C8E280E5           STR      LR,[R0, #+712]
   \   00000A40   D0E49FE5           LDR      LR,??init6502_0+0x30  ;; indy6502
   1044            ticks[0xba] = 2; instruction[0xba] = tsx6502; adrmode[0xba] = implied6502;
   1045            ticks[0xbb] = 2; instruction[0xbb] = nop6502; adrmode[0xbb] = implied6502;
   1046            ticks[0xbc] = 4; instruction[0xbc] = ldy6502; adrmode[0xbc] = absx6502;
   1047            ticks[0xbd] = 4; instruction[0xbd] = lda6502; adrmode[0xbd] = absx6502;
   \   00000A44   FC7680E5           STR      R7,[R0, #+1788]
   1048            ticks[0xbe] = 4; instruction[0xbe] = ldx6502; adrmode[0xbe] = absy6502;
   \   00000A48   98759FE5           LDR      R7,??init6502_0+0x100  ;; ldx6502
   \   00000A4C   CCE280E5           STR      LR,[R0, #+716]
   \   00000A50   C4E49FE5           LDR      LR,??init6502_0+0x34  ;; indzp6502
   \   00000A54   007780E5           STR      R7,[R0, #+1792]
   \   00000A58   B4749FE5           LDR      R7,??init6502_0+0x2C  ;; absy6502
   \   00000A5C   D0E280E5           STR      LR,[R0, #+720]
   \   00000A60   6CE59FE5           LDR      LR,??init6502_0+0xEC  ;; ldy6502
   \   00000A64   007380E5           STR      R7,[R0, #+768]
   1049            ticks[0xbf] = 2; instruction[0xbf] = nop6502; adrmode[0xbf] = implied6502;
   1050            ticks[0xc0] = 3; instruction[0xc0] = cpy6502; adrmode[0xc0] = immediate6502;
   \   00000A68   88759FE5           LDR      R7,??init6502_0+0x110  ;; cpy6502
   \   00000A6C   D8E680E5           STR      LR,[R0, #+1752]
   \   00000A70   70E59FE5           LDR      LR,??init6502_0+0x100  ;; ldx6502
   \   00000A74   087780E5           STR      R7,[R0, #+1800]
   \   00000A78   A4749FE5           LDR      R7,??init6502_0+0x3C  ;; immediate6502
   \   00000A7C   E0E680E5           STR      LR,[R0, #+1760]
   \   00000A80   54E59FE5           LDR      LR,??init6502_0+0xF4  ;; zpy6502
   \   00000A84   087380E5           STR      R7,[R0, #+776]
   1051            ticks[0xc1] = 6; instruction[0xc1] = cmp6502; adrmode[0xc1] = indx6502;
   \   00000A88   6C759FE5           LDR      R7,??init6502_0+0x114  ;; cmp6502
   \   00000A8C   E0E280E5           STR      LR,[R0, #+736]
   \   00000A90   68E59FE5           LDR      LR,??init6502_0+0x118  ;; clv6502
   \   00000A94   B03A80E5           STR      R3,[R0, #+2736]
   \   00000A98   E8E680E5           STR      LR,[R0, #+1768]
   \   00000A9C   70E49FE5           LDR      LR,??init6502_0+0x2C  ;; absy6502
   \   00000AA0   B01280E5           STR      R1,[R0, #+688]
   \   00000AA4   ECE280E5           STR      LR,[R0, #+748]
   \   00000AA8   54E59FE5           LDR      LR,??init6502_0+0x11C  ;; tsx6502
   \   00000AAC   B43A80E5           STR      R3,[R0, #+2740]
   \   00000AB0   F0E680E5           STR      LR,[R0, #+1776]
   \   00000AB4   18E59FE5           LDR      LR,??init6502_0+0xEC  ;; ldy6502
   \   00000AB8   B4C680E5           STR      R12,[R0, #+1716]
   \   00000ABC   F8E680E5           STR      LR,[R0, #+1784]
   \   00000AC0   20E49FE5           LDR      LR,??init6502_0  ;; indx6502
   \   00000AC4   B41280E5           STR      R1,[R0, #+692]
   \   00000AC8   0CE380E5           STR      LR,[R0, #+780]
   1052            ticks[0xc2] = 2; instruction[0xc2] = nop6502; adrmode[0xc2] = implied6502;
   1053            ticks[0xc3] = 2; instruction[0xc3] = nop6502; adrmode[0xc3] = implied6502;
   1054            ticks[0xc4] = 3; instruction[0xc4] = cpy6502; adrmode[0xc4] = zp6502;
   \   00000ACC   24E59FE5           LDR      LR,??init6502_0+0x110  ;; cpy6502
   \   00000AD0   B88A80E5           STR      R8,[R0, #+2744]
   \   00000AD4   18E780E5           STR      LR,[R0, #+1816]
   1055            ticks[0xc5] = 3; instruction[0xc5] = cmp6502; adrmode[0xc5] = zp6502;
   1056            ticks[0xc6] = 5; instruction[0xc6] = dec6502; adrmode[0xc6] = zp6502;
   \   00000AD8   28E59FE5           LDR      LR,??init6502_0+0x120  ;; dec6502
   \   00000ADC   B89280E5           STR      R9,[R0, #+696]
   \   00000AE0   20E780E5           STR      LR,[R0, #+1824]
   1057            ticks[0xc7] = 2; instruction[0xc7] = nop6502; adrmode[0xc7] = implied6502;
   1058            ticks[0xc8] = 2; instruction[0xc8] = iny6502; adrmode[0xc8] = implied6502;
   \   00000AE4   20E59FE5           LDR      LR,??init6502_0+0x124  ;; iny6502
   \   00000AE8   BC8A80E5           STR      R8,[R0, #+2748]
   \   00000AEC   28E780E5           STR      LR,[R0, #+1832]
   1059            ticks[0xc9] = 3; instruction[0xc9] = cmp6502; adrmode[0xc9] = immediate6502;
   \   00000AF0   2CE49FE5           LDR      LR,??init6502_0+0x3C  ;; immediate6502
   \   00000AF4   BC9280E5           STR      R9,[R0, #+700]
   \   00000AF8   2CE380E5           STR      LR,[R0, #+812]
   1060            ticks[0xca] = 2; instruction[0xca] = dex6502; adrmode[0xca] = implied6502;
   \   00000AFC   0CE59FE5           LDR      LR,??init6502_0+0x128  ;; dex6502
   \   00000B00   C08A80E5           STR      R8,[R0, #+2752]
   \   00000B04   C09280E5           STR      R9,[R0, #+704]
   \   00000B08   C43A80E5           STR      R3,[R0, #+2756]
   \   00000B0C   C4C680E5           STR      R12,[R0, #+1732]
   \   00000B10   C41280E5           STR      R1,[R0, #+708]
   \   00000B14   C83A80E5           STR      R3,[R0, #+2760]
   \   00000B18   CC6A80E5           STR      R6,[R0, #+2764]
   \   00000B1C   D04A80E5           STR      R4,[R0, #+2768]
   \   00000B20   D43A80E5           STR      R3,[R0, #+2772]
   \   00000B24   D4C680E5           STR      R12,[R0, #+1748]
   \   00000B28   D41280E5           STR      R1,[R0, #+724]
   \   00000B2C   D88A80E5           STR      R8,[R0, #+2776]
   \   00000B30   D8A280E5           STR      R10,[R0, #+728]
   \   00000B34   DC8A80E5           STR      R8,[R0, #+2780]
   \   00000B38   DCA280E5           STR      R10,[R0, #+732]
   \   00000B3C   E08A80E5           STR      R8,[R0, #+2784]
   \   00000B40   E43A80E5           STR      R3,[R0, #+2788]
   \   00000B44   E4C680E5           STR      R12,[R0, #+1764]
   \   00000B48   E41280E5           STR      R1,[R0, #+740]
   \   00000B4C   E83A80E5           STR      R3,[R0, #+2792]
   \   00000B50   E81280E5           STR      R1,[R0, #+744]
   \   00000B54   EC8A80E5           STR      R8,[R0, #+2796]
   \   00000B58   F03A80E5           STR      R3,[R0, #+2800]
   \   00000B5C   F01280E5           STR      R1,[R0, #+752]
   \   00000B60   F43A80E5           STR      R3,[R0, #+2804]
   \   00000B64   F4C680E5           STR      R12,[R0, #+1780]
   \   00000B68   F41280E5           STR      R1,[R0, #+756]
   \   00000B6C   F88A80E5           STR      R8,[R0, #+2808]
   \   00000B70   F8B280E5           STR      R11,[R0, #+760]
   \   00000B74   FC8A80E5           STR      R8,[R0, #+2812]
   \   00000B78   FCB280E5           STR      R11,[R0, #+764]
   \   00000B7C   008B80E5           STR      R8,[R0, #+2816]
   \   00000B80   043B80E5           STR      R3,[R0, #+2820]
   \   00000B84   04C780E5           STR      R12,[R0, #+1796]
   \   00000B88   041380E5           STR      R1,[R0, #+772]
   \   00000B8C   084B80E5           STR      R4,[R0, #+2824]
   \   00000B90   0C2B80E5           STR      R2,[R0, #+2828]
   \   00000B94   0C7780E5           STR      R7,[R0, #+1804]
   \   00000B98   103B80E5           STR      R3,[R0, #+2832]
   \   00000B9C   10C780E5           STR      R12,[R0, #+1808]
   \   00000BA0   101380E5           STR      R1,[R0, #+784]
   \   00000BA4   143B80E5           STR      R3,[R0, #+2836]
   \   00000BA8   14C780E5           STR      R12,[R0, #+1812]
   \   00000BAC   141380E5           STR      R1,[R0, #+788]
   \   00000BB0   184B80E5           STR      R4,[R0, #+2840]
   \   00000BB4   185380E5           STR      R5,[R0, #+792]
   \   00000BB8   1C4B80E5           STR      R4,[R0, #+2844]
   \   00000BBC   1C7780E5           STR      R7,[R0, #+1820]
   \   00000BC0   1C5380E5           STR      R5,[R0, #+796]
   \   00000BC4   206B80E5           STR      R6,[R0, #+2848]
   \   00000BC8   205380E5           STR      R5,[R0, #+800]
   \   00000BCC   243B80E5           STR      R3,[R0, #+2852]
   \   00000BD0   24C780E5           STR      R12,[R0, #+1828]
   \   00000BD4   241380E5           STR      R1,[R0, #+804]
   \   00000BD8   283B80E5           STR      R3,[R0, #+2856]
   \   00000BDC   281380E5           STR      R1,[R0, #+808]
   \   00000BE0   2C4B80E5           STR      R4,[R0, #+2860]
   \   00000BE4   2C7780E5           STR      R7,[R0, #+1836]
   \   00000BE8   303B80E5           STR      R3,[R0, #+2864]
   \   00000BEC   30E780E5           STR      LR,[R0, #+1840]
   \   00000BF0   301380E5           STR      R1,[R0, #+816]
   1061            ticks[0xcb] = 2; instruction[0xcb] = nop6502; adrmode[0xcb] = implied6502;
   \   00000BF4   343B80E5           STR      R3,[R0, #+2868]
   \   00000BF8   34C780E5           STR      R12,[R0, #+1844]
   \   00000BFC   341380E5           STR      R1,[R0, #+820]
   1062            ticks[0xcc] = 4; instruction[0xcc] = cpy6502; adrmode[0xcc] = abs6502;
   \   00000C00   F0E39FE5           LDR      LR,??init6502_0+0x110  ;; cpy6502
   1063            ticks[0xcd] = 4; instruction[0xcd] = cmp6502; adrmode[0xcd] = abs6502;
   \   00000C04   3C7780E5           STR      R7,[R0, #+1852]
   \   00000C08   38E780E5           STR      LR,[R0, #+1848]
   1064            ticks[0xce] = 6; instruction[0xce] = dec6502; adrmode[0xce] = abs6502;
   \   00000C0C   F4E39FE5           LDR      LR,??init6502_0+0x120  ;; dec6502
   1065            ticks[0xcf] = 2; instruction[0xcf] = nop6502; adrmode[0xcf] = implied6502;
   1066            ticks[0xd0] = 2; instruction[0xd0] = bne6502; adrmode[0xd0] = relative6502;
   1067            ticks[0xd1] = 5; instruction[0xd1] = cmp6502; adrmode[0xd1] = indy6502;
   \   00000C10   4C7780E5           STR      R7,[R0, #+1868]
   \   00000C14   40E780E5           STR      LR,[R0, #+1856]
   \   00000C18   F4E39FE5           LDR      LR,??init6502_0+0x12C  ;; bne6502
   1068            ticks[0xd2] = 3; instruction[0xd2] = cmp6502; adrmode[0xd2] = indzp6502;
   \   00000C1C   507780E5           STR      R7,[R0, #+1872]
   \   00000C20   48E780E5           STR      LR,[R0, #+1864]
   \   00000C24   E4E29FE5           LDR      LR,??init6502_0+0x28  ;; relative6502
   1069            ticks[0xd3] = 2; instruction[0xd3] = nop6502; adrmode[0xd3] = implied6502;
   1070            ticks[0xd4] = 2; instruction[0xd4] = nop6502; adrmode[0xd4] = implied6502;
   1071            ticks[0xd5] = 4; instruction[0xd5] = cmp6502; adrmode[0xd5] = zpx6502;
   \   00000C28   5C7780E5           STR      R7,[R0, #+1884]
   \   00000C2C   48E380E5           STR      LR,[R0, #+840]
   \   00000C30   E0E29FE5           LDR      LR,??init6502_0+0x30  ;; indy6502
   1072            ticks[0xd6] = 6; instruction[0xd6] = dec6502; adrmode[0xd6] = zpx6502;
   1073            ticks[0xd7] = 2; instruction[0xd7] = nop6502; adrmode[0xd7] = implied6502;
   1074            ticks[0xd8] = 2; instruction[0xd8] = cld6502; adrmode[0xd8] = implied6502;
   1075            ticks[0xd9] = 4; instruction[0xd9] = cmp6502; adrmode[0xd9] = absy6502;
   \   00000C34   6C7780E5           STR      R7,[R0, #+1900]
   \   00000C38   4CE380E5           STR      LR,[R0, #+844]
   \   00000C3C   D8E29FE5           LDR      LR,??init6502_0+0x34  ;; indzp6502
   1076            ticks[0xda] = 3; instruction[0xda] = phx6502; adrmode[0xda] = implied6502;
   1077            ticks[0xdb] = 2; instruction[0xdb] = nop6502; adrmode[0xdb] = implied6502;
   1078            ticks[0xdc] = 2; instruction[0xdc] = nop6502; adrmode[0xdc] = implied6502;
   1079            ticks[0xdd] = 4; instruction[0xdd] = cmp6502; adrmode[0xdd] = absx6502;
   \   00000C40   7C7780E5           STR      R7,[R0, #+1916]
   \   00000C44   50E380E5           STR      LR,[R0, #+848]
   \   00000C48   B8E39FE5           LDR      LR,??init6502_0+0x120  ;; dec6502
   1080            ticks[0xde] = 7; instruction[0xde] = dec6502; adrmode[0xde] = absx6502;
   \   00000C4C   0770A0E3           MOV      R7,#+7
   \   00000C50   60E780E5           STR      LR,[R0, #+1888]
   \   00000C54   BCE39FE5           LDR      LR,??init6502_0+0x130  ;; cld6502
   \   00000C58   807B80E5           STR      R7,[R0, #+2944]
   \   00000C5C   A4739FE5           LDR      R7,??init6502_0+0x120  ;; dec6502
   \   00000C60   68E780E5           STR      LR,[R0, #+1896]
   \   00000C64   A8E29FE5           LDR      LR,??init6502_0+0x2C  ;; absy6502
   \   00000C68   807780E5           STR      R7,[R0, #+1920]
   1081            ticks[0xdf] = 2; instruction[0xdf] = nop6502; adrmode[0xdf] = implied6502;
   1082            ticks[0xe0] = 3; instruction[0xe0] = cpx6502; adrmode[0xe0] = immediate6502;
   \   00000C6C   A8739FE5           LDR      R7,??init6502_0+0x134  ;; cpx6502
   \   00000C70   6CE380E5           STR      LR,[R0, #+876]
   \   00000C74   A4E39FE5           LDR      LR,??init6502_0+0x138  ;; phx6502
   1083            ticks[0xe1] = 6; instruction[0xe1] = sbc6502; adrmode[0xe1] = indx6502;
   1084            ticks[0xe2] = 2; instruction[0xe2] = nop6502; adrmode[0xe2] = implied6502;
   1085            ticks[0xe3] = 2; instruction[0xe3] = nop6502; adrmode[0xe3] = implied6502;
   1086            ticks[0xe4] = 3; instruction[0xe4] = cpx6502; adrmode[0xe4] = zp6502;
   \   00000C78   985380E5           STR      R5,[R0, #+920]
   \   00000C7C   70E780E5           STR      LR,[R0, #+1904]
   \   00000C80   60E29FE5           LDR      LR,??init6502_0  ;; indx6502
   1087            ticks[0xe5] = 3; instruction[0xe5] = sbc6502; adrmode[0xe5] = zp6502;
   \   00000C84   9C5380E5           STR      R5,[R0, #+924]
   1088            ticks[0xe6] = 5; instruction[0xe6] = inc6502; adrmode[0xe6] = zp6502;
   \   00000C88   A05380E5           STR      R5,[R0, #+928]
   1089            ticks[0xe7] = 2; instruction[0xe7] = nop6502; adrmode[0xe7] = implied6502;
   1090            ticks[0xe8] = 2; instruction[0xe8] = inx6502; adrmode[0xe8] = implied6502;
   \   00000C8C   90539FE5           LDR      R5,??init6502_0+0x13C  ;; inx6502
   \   00000C90   887780E5           STR      R7,[R0, #+1928]
   \   00000C94   88729FE5           LDR      R7,??init6502_0+0x3C  ;; immediate6502
   \   00000C98   8CE380E5           STR      LR,[R0, #+908]
   \   00000C9C   78E39FE5           LDR      LR,??init6502_0+0x134  ;; cpx6502
   \   00000CA0   A85780E5           STR      R5,[R0, #+1960]
   1091            ticks[0xe9] = 3; instruction[0xe9] = sbc6502; adrmode[0xe9] = immediate6502;
   \   00000CA4   78529FE5           LDR      R5,??init6502_0+0x3C  ;; immediate6502
   \   00000CA8   887380E5           STR      R7,[R0, #+904]
   \   00000CAC   74739FE5           LDR      R7,??init6502_0+0x140  ;; sbc6502
   \   00000CB0   98E780E5           STR      LR,[R0, #+1944]
   \   00000CB4   70E39FE5           LDR      LR,??init6502_0+0x144  ;; inc6502
   \   00000CB8   AC5380E5           STR      R5,[R0, #+940]
   1092            ticks[0xea] = 2; instruction[0xea] = nop6502; adrmode[0xea] = implied6502;
   1093            ticks[0xeb] = 2; instruction[0xeb] = nop6502; adrmode[0xeb] = implied6502;
   1094            ticks[0xec] = 4; instruction[0xec] = cpx6502; adrmode[0xec] = abs6502;
   \   00000CBC   58539FE5           LDR      R5,??init6502_0+0x134  ;; cpx6502
   \   00000CC0   388B80E5           STR      R8,[R0, #+2872]
   \   00000CC4   389380E5           STR      R9,[R0, #+824]
   \   00000CC8   3C8B80E5           STR      R8,[R0, #+2876]
   \   00000CCC   3C9380E5           STR      R9,[R0, #+828]
   \   00000CD0   402B80E5           STR      R2,[R0, #+2880]
   \   00000CD4   409380E5           STR      R9,[R0, #+832]
   \   00000CD8   443B80E5           STR      R3,[R0, #+2884]
   \   00000CDC   44C780E5           STR      R12,[R0, #+1860]
   \   00000CE0   441380E5           STR      R1,[R0, #+836]
   \   00000CE4   483B80E5           STR      R3,[R0, #+2888]
   \   00000CE8   4C6B80E5           STR      R6,[R0, #+2892]
   \   00000CEC   504B80E5           STR      R4,[R0, #+2896]
   \   00000CF0   543B80E5           STR      R3,[R0, #+2900]
   \   00000CF4   54C780E5           STR      R12,[R0, #+1876]
   \   00000CF8   541380E5           STR      R1,[R0, #+852]
   \   00000CFC   583B80E5           STR      R3,[R0, #+2904]
   \   00000D00   58C780E5           STR      R12,[R0, #+1880]
   \   00000D04   581380E5           STR      R1,[R0, #+856]
   \   00000D08   5C8B80E5           STR      R8,[R0, #+2908]
   \   00000D0C   5CA380E5           STR      R10,[R0, #+860]
   \   00000D10   602B80E5           STR      R2,[R0, #+2912]
   \   00000D14   60A380E5           STR      R10,[R0, #+864]
   \   00000D18   643B80E5           STR      R3,[R0, #+2916]
   \   00000D1C   64C780E5           STR      R12,[R0, #+1892]
   \   00000D20   641380E5           STR      R1,[R0, #+868]
   \   00000D24   683B80E5           STR      R3,[R0, #+2920]
   \   00000D28   681380E5           STR      R1,[R0, #+872]
   \   00000D2C   6C8B80E5           STR      R8,[R0, #+2924]
   \   00000D30   704B80E5           STR      R4,[R0, #+2928]
   \   00000D34   701380E5           STR      R1,[R0, #+880]
   \   00000D38   743B80E5           STR      R3,[R0, #+2932]
   \   00000D3C   74C780E5           STR      R12,[R0, #+1908]
   \   00000D40   741380E5           STR      R1,[R0, #+884]
   \   00000D44   783B80E5           STR      R3,[R0, #+2936]
   \   00000D48   78C780E5           STR      R12,[R0, #+1912]
   \   00000D4C   781380E5           STR      R1,[R0, #+888]
   \   00000D50   7C8B80E5           STR      R8,[R0, #+2940]
   \   00000D54   7CB380E5           STR      R11,[R0, #+892]
   \   00000D58   80B380E5           STR      R11,[R0, #+896]
   \   00000D5C   843B80E5           STR      R3,[R0, #+2948]
   \   00000D60   84C780E5           STR      R12,[R0, #+1924]
   \   00000D64   841380E5           STR      R1,[R0, #+900]
   \   00000D68   884B80E5           STR      R4,[R0, #+2952]
   \   00000D6C   8C2B80E5           STR      R2,[R0, #+2956]
   \   00000D70   8C7780E5           STR      R7,[R0, #+1932]
   \   00000D74   903B80E5           STR      R3,[R0, #+2960]
   \   00000D78   90C780E5           STR      R12,[R0, #+1936]
   \   00000D7C   901380E5           STR      R1,[R0, #+912]
   \   00000D80   943B80E5           STR      R3,[R0, #+2964]
   \   00000D84   94C780E5           STR      R12,[R0, #+1940]
   \   00000D88   941380E5           STR      R1,[R0, #+916]
   \   00000D8C   984B80E5           STR      R4,[R0, #+2968]
   \   00000D90   9C4B80E5           STR      R4,[R0, #+2972]
   \   00000D94   9C7780E5           STR      R7,[R0, #+1948]
   \   00000D98   A06B80E5           STR      R6,[R0, #+2976]
   \   00000D9C   A0E780E5           STR      LR,[R0, #+1952]
   \   00000DA0   A43B80E5           STR      R3,[R0, #+2980]
   \   00000DA4   A4C780E5           STR      R12,[R0, #+1956]
   \   00000DA8   A41380E5           STR      R1,[R0, #+932]
   \   00000DAC   A83B80E5           STR      R3,[R0, #+2984]
   \   00000DB0   A81380E5           STR      R1,[R0, #+936]
   \   00000DB4   AC4B80E5           STR      R4,[R0, #+2988]
   \   00000DB8   AC7780E5           STR      R7,[R0, #+1964]
   \   00000DBC   B03B80E5           STR      R3,[R0, #+2992]
   \   00000DC0   B0C780E5           STR      R12,[R0, #+1968]
   \   00000DC4   B01380E5           STR      R1,[R0, #+944]
   \   00000DC8   B43B80E5           STR      R3,[R0, #+2996]
   \   00000DCC   B4C780E5           STR      R12,[R0, #+1972]
   \   00000DD0   B41380E5           STR      R1,[R0, #+948]
   \   00000DD4   B88B80E5           STR      R8,[R0, #+3000]
   \   00000DD8   B85780E5           STR      R5,[R0, #+1976]
   \   00000DDC   B89380E5           STR      R9,[R0, #+952]
   1095            ticks[0xed] = 4; instruction[0xed] = sbc6502; adrmode[0xed] = abs6502;
   \   00000DE0   BC8B80E5           STR      R8,[R0, #+3004]
   \   00000DE4   BC7780E5           STR      R7,[R0, #+1980]
   \   00000DE8   BC9380E5           STR      R9,[R0, #+956]
   1096            ticks[0xee] = 6; instruction[0xee] = inc6502; adrmode[0xee] = abs6502;
   \   00000DEC   C02B80E5           STR      R2,[R0, #+3008]
   \   00000DF0   C0E780E5           STR      LR,[R0, #+1984]
   \   00000DF4   C09380E5           STR      R9,[R0, #+960]
   1097            ticks[0xef] = 2; instruction[0xef] = nop6502; adrmode[0xef] = implied6502;
   \   00000DF8   C43B80E5           STR      R3,[R0, #+3012]
   \   00000DFC   C4C780E5           STR      R12,[R0, #+1988]
   1098            ticks[0xf0] = 2; instruction[0xf0] = beq6502; adrmode[0xf0] = relative6502;
   \   00000E00   28529FE5           LDR      R5,??init6502_0+0x148  ;; beq6502
   1099            ticks[0xf1] = 5; instruction[0xf1] = sbc6502; adrmode[0xf1] = indy6502;
   1100            ticks[0xf2] = 3; instruction[0xf2] = sbc6502; adrmode[0xf2] = indzp6502;
   1101            ticks[0xf3] = 2; instruction[0xf3] = nop6502; adrmode[0xf3] = implied6502;
   1102            ticks[0xf4] = 2; instruction[0xf4] = nop6502; adrmode[0xf4] = implied6502;
   1103            ticks[0xf5] = 4; instruction[0xf5] = sbc6502; adrmode[0xf5] = zpx6502;
   1104            ticks[0xf6] = 6; instruction[0xf6] = inc6502; adrmode[0xf6] = zpx6502;
   \   00000E04   E02B80E5           STR      R2,[R0, #+3040]
   1105            ticks[0xf7] = 2; instruction[0xf7] = nop6502; adrmode[0xf7] = implied6502;
   1106            ticks[0xf8] = 2; instruction[0xf8] = sed6502; adrmode[0xf8] = implied6502;
   \   00000E08   24229FE5           LDR      R2,??init6502_0+0x14C  ;; sed6502
   \   00000E0C   C85780E5           STR      R5,[R0, #+1992]
   \   00000E10   F8509FE5           LDR      R5,??init6502_0+0x28  ;; relative6502
   \   00000E14   E82780E5           STR      R2,[R0, #+2024]
   1107            ticks[0xf9] = 4; instruction[0xf9] = sbc6502; adrmode[0xf9] = absy6502;
   \   00000E18   F4209FE5           LDR      R2,??init6502_0+0x2C  ;; absy6502
   \   00000E1C   C85380E5           STR      R5,[R0, #+968]
   \   00000E20   F0509FE5           LDR      R5,??init6502_0+0x30  ;; indy6502
   \   00000E24   D04B80E5           STR      R4,[R0, #+3024]
   \   00000E28   EC409FE5           LDR      R4,??init6502_0+0x34  ;; indzp6502
   \   00000E2C   EC2380E5           STR      R2,[R0, #+1004]
   1108            ticks[0xfa] = 4; instruction[0xfa] = plx6502; adrmode[0xfa] = implied6502;
   \   00000E30   00229FE5           LDR      R2,??init6502_0+0x150  ;; plx6502
   \   00000E34   C41380E5           STR      R1,[R0, #+964]
   \   00000E38   C83B80E5           STR      R3,[R0, #+3016]
   \   00000E3C   CC6B80E5           STR      R6,[R0, #+3020]
   \   00000E40   CC7780E5           STR      R7,[R0, #+1996]
   \   00000E44   CC5380E5           STR      R5,[R0, #+972]
   \   00000E48   D07780E5           STR      R7,[R0, #+2000]
   \   00000E4C   D04380E5           STR      R4,[R0, #+976]
   \   00000E50   D43B80E5           STR      R3,[R0, #+3028]
   \   00000E54   D4C780E5           STR      R12,[R0, #+2004]
   \   00000E58   D41380E5           STR      R1,[R0, #+980]
   \   00000E5C   D83B80E5           STR      R3,[R0, #+3032]
   \   00000E60   D8C780E5           STR      R12,[R0, #+2008]
   \   00000E64   D81380E5           STR      R1,[R0, #+984]
   \   00000E68   DC8B80E5           STR      R8,[R0, #+3036]
   \   00000E6C   DC7780E5           STR      R7,[R0, #+2012]
   \   00000E70   DCA380E5           STR      R10,[R0, #+988]
   \   00000E74   E0E780E5           STR      LR,[R0, #+2016]
   \   00000E78   E0A380E5           STR      R10,[R0, #+992]
   \   00000E7C   E43B80E5           STR      R3,[R0, #+3044]
   \   00000E80   E4C780E5           STR      R12,[R0, #+2020]
   \   00000E84   E41380E5           STR      R1,[R0, #+996]
   \   00000E88   E83B80E5           STR      R3,[R0, #+3048]
   \   00000E8C   E81380E5           STR      R1,[R0, #+1000]
   \   00000E90   EC8B80E5           STR      R8,[R0, #+3052]
   \   00000E94   EC7780E5           STR      R7,[R0, #+2028]
   \   00000E98   F08B80E5           STR      R8,[R0, #+3056]
   \   00000E9C   F02780E5           STR      R2,[R0, #+2032]
   \   00000EA0   F01380E5           STR      R1,[R0, #+1008]
   1109            ticks[0xfb] = 2; instruction[0xfb] = nop6502; adrmode[0xfb] = implied6502;
   \   00000EA4   F43B80E5           STR      R3,[R0, #+3060]
   \   00000EA8   F4C780E5           STR      R12,[R0, #+2036]
   \   00000EAC   F41380E5           STR      R1,[R0, #+1012]
   1110            ticks[0xfc] = 2; instruction[0xfc] = nop6502; adrmode[0xfc] = implied6502;
   \   00000EB0   F83B80E5           STR      R3,[R0, #+3064]
   \   00000EB4   F8C780E5           STR      R12,[R0, #+2040]
   \   00000EB8   F81380E5           STR      R1,[R0, #+1016]
   1111            ticks[0xfd] = 4; instruction[0xfd] = sbc6502; adrmode[0xfd] = absx6502;
   \   00000EBC   FC8B80E5           STR      R8,[R0, #+3068]
   \   00000EC0   FC7780E5           STR      R7,[R0, #+2044]
   \   00000EC4   FCB380E5           STR      R11,[R0, #+1020]
   1112            ticks[0xfe] = 7; instruction[0xfe] = inc6502; adrmode[0xfe] = absx6502;
   \   00000EC8   0720A0E3           MOV      R2,#+7
   \   00000ECC   002C80E5           STR      R2,[R0, #+3072]
   \   00000ED0   00E880E5           STR      LR,[R0, #+2048]
   \   00000ED4   00B480E5           STR      R11,[R0, #+1024]
   1113            ticks[0xff] = 2; instruction[0xff] = nop6502; adrmode[0xff] = implied6502;
   \   00000ED8   043C80E5           STR      R3,[R0, #+3076]
   \   00000EDC   04C880E5           STR      R12,[R0, #+2052]
   \   00000EE0   041480E5           STR      R1,[R0, #+1028]
   1114          }
   \   00000EE4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??init6502_0:
   \   00000EE8   ........           DC32     indx6502
   \   00000EEC   ........           DC32     pc_reg
   \   00000EF0   ........           DC32     nop6502
   \   00000EF4   ........           DC32     php6502
   \   00000EF8   ........           DC32     bpl6502
   \   00000EFC   ........           DC32     ora6502
   \   00000F00   ........           DC32     tsb6502
   \   00000F04   ........           DC32     zp6502
   \   00000F08   ........           DC32     asl6502
   \   00000F0C   ........           DC32     clc6502
   \   00000F10   ........           DC32     relative6502
   \   00000F14   ........           DC32     absy6502
   \   00000F18   ........           DC32     indy6502
   \   00000F1C   ........           DC32     indzp6502
   \   00000F20   ........           DC32     brk6502
   \   00000F24   ........           DC32     immediate6502
   \   00000F28   ........           DC32     trb6502
   \   00000F2C   ........           DC32     ina6502
   \   00000F30   ........           DC32     implied6502
   \   00000F34   ........           DC32     asla6502
   \   00000F38   ........           DC32     abs6502
   \   00000F3C   ........           DC32     zpx6502
   \   00000F40   ........           DC32     absx6502
   \   00000F44   ........           DC32     jsr6502
   \   00000F48   ........           DC32     bit6502
   \   00000F4C   ........           DC32     and6502
   \   00000F50   ........           DC32     rol6502
   \   00000F54   ........           DC32     plp6502
   \   00000F58   ........           DC32     rola6502
   \   00000F5C   ........           DC32     bmi6502
   \   00000F60   ........           DC32     rti6502
   \   00000F64   ........           DC32     sec6502
   \   00000F68   ........           DC32     eor6502
   \   00000F6C   ........           DC32     dea6502
   \   00000F70   ........           DC32     lsr6502
   \   00000F74   ........           DC32     pha6502
   \   00000F78   ........           DC32     lsra6502
   \   00000F7C   ........           DC32     jmp6502
   \   00000F80   ........           DC32     bvc6502
   \   00000F84   ........           DC32     rts6502
   \   00000F88   ........           DC32     cli6502
   \   00000F8C   ........           DC32     adc6502
   \   00000F90   ........           DC32     phy6502
   \   00000F94   ........           DC32     stz6502
   \   00000F98   ........           DC32     ror6502
   \   00000F9C   ........           DC32     pla6502
   \   00000FA0   ........           DC32     rora6502
   \   00000FA4   ........           DC32     indirect6502
   \   00000FA8   ........           DC32     bvs6502
   \   00000FAC   ........           DC32     bra6502
   \   00000FB0   ........           DC32     sta6502
   \   00000FB4   ........           DC32     sei6502
   \   00000FB8   ........           DC32     ply6502
   \   00000FBC   ........           DC32     indabsx6502
   \   00000FC0   ........           DC32     sty6502
   \   00000FC4   ........           DC32     stx6502
   \   00000FC8   ........           DC32     dey6502
   \   00000FCC   ........           DC32     txa6502
   \   00000FD0   ........           DC32     bcc6502
   \   00000FD4   ........           DC32     ldy6502
   \   00000FD8   ........           DC32     lda6502
   \   00000FDC   ........           DC32     zpy6502
   \   00000FE0   ........           DC32     tya6502
   \   00000FE4   ........           DC32     txs6502
   \   00000FE8   ........           DC32     ldx6502
   \   00000FEC   ........           DC32     tay6502
   \   00000FF0   ........           DC32     tax6502
   \   00000FF4   ........           DC32     bcs6502
   \   00000FF8   ........           DC32     cpy6502
   \   00000FFC   ........           DC32     cmp6502
   \   00001000   ........           DC32     clv6502
   \   00001004   ........           DC32     tsx6502
   \   00001008   ........           DC32     dec6502
   \   0000100C   ........           DC32     iny6502
   \   00001010   ........           DC32     dex6502
   \   00001014   ........           DC32     bne6502
   \   00001018   ........           DC32     cld6502
   \   0000101C   ........           DC32     cpx6502
   \   00001020   ........           DC32     phx6502
   \   00001024   ........           DC32     inx6502
   \   00001028   ........           DC32     sbc6502
   \   0000102C   ........           DC32     inc6502
   \   00001030   ........           DC32     beq6502
   \   00001034   ........           DC32     sed6502
   \   00001038   ........           DC32     plx6502
   1115          
   1116          /* Reset CPU */

   \                                 In segment CODE, align 4, keep-with-next
   1117          void reset6502()
   1118          {
   1119            A = X = Y = P = 0;
   \                     reset6502:
   \   00000000   ........           LDR      R0,??DataTable150  ;; pc_reg
   1120            P |= 0x20;
   1121            S = 0xff;
   1122            PC = get6502memory( 0xfffc & addrmask );
   \   00000004   ........           LDR      R2,??DataTable151  ;; gameImage
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   161CC0E5           STRB     R1,[R0, #+3094]
   \   00000010   151CC0E5           STRB     R1,[R0, #+3093]
   \   00000014   002092E5           LDR      R2,[R2, #+0]
   \   00000018   141CC0E5           STRB     R1,[R0, #+3092]
   \   0000001C   2010A0E3           MOV      R1,#+32
   \   00000020   171CC0E5           STRB     R1,[R0, #+3095]
   \   00000024   FF10A0E3           MOV      R1,#+255
   \   00000028   181CC0E5           STRB     R1,[R0, #+3096]
   \   0000002C   ........           LDR      R1,??DataTable149  ;; addrmask
   \   00000030   FC30A0E3           MOV      R3,#+252
   \   00000034   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000038   FF3C83E3           ORR      R3,R3,#0xFF00
   1123            PC |= get6502memory( 0xfffd & addrmask ) << 8;
   \   0000003C   FDC0A0E3           MOV      R12,#+253
   \   00000040   013003E0           AND      R3,R3,R1
   \   00000044   0230D3E7           LDRB     R3,[R3, +R2]
   \   00000048   FFCC8CE3           ORR      R12,R12,#0xFF00
   \   0000004C   01100CE0           AND      R1,R12,R1
   \   00000050   B030C0E1           STRH     R3,[R0, #+0]
   \   00000054   0210D1E7           LDRB     R1,[R1, +R2]
   \   00000058   011483E1           ORR      R1,R3,R1, LSL #+8
   \   0000005C   B010C0E1           STRH     R1,[R0, #+0]
   1124          }
   \   00000060   1EFF2FE1           BX       LR               ;; return
   1125          
   1126          /* Non maskerable interrupt */

   \                                 In segment CODE, align 4, keep-with-next
   1127          void nmi6502()
   1128          {
   \                     nmi6502:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1129            put6502memory( 0x0100 + S--, ( BYTE )( PC >> 8 ) );
   \   00000004   ........           LDR      R4,??DataTable150  ;; pc_reg
   \   00000008   ........           LDR      R6,??DataTable151  ;; gameImage
   \   0000000C   180CD4E5           LDRB     R0,[R4, #+3096]
   \   00000010   2050A0E3           MOV      R5,#+32
   \   00000014   405C85E3           ORR      R5,R5,#0x4000
   \   00000018   011040E2           SUB      R1,R0,#+1
   \   0000001C   181CC4E5           STRB     R1,[R4, #+3096]
   \   00000020   B010D4E1           LDRH     R1,[R4, #+0]
   \   00000024   400F80E2           ADD      R0,R0,#+256
   \   00000028   0170A0E3           MOV      R7,#+1
   \   0000002C   2114A0E1           LSR      R1,R1,#+8
   \   00000030   807C87E3           ORR      R7,R7,#0x8000
   \   00000034   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000038   2008A0E1           MOV      R0,R0, LSR #+16
   \   0000003C   070050E1           CMP      R0,R7
   \   00000040   0600002A           BCS      ??nmi6502_0
   \   00000044   003096E5           LDR      R3,[R6, #+0]
   \   00000048   400C50E3           CMP      R0,#+16384
   \   0000004C   0310C0E7           STRB     R1,[R0, +R3]
   \   00000050   0200003A           BCC      ??nmi6502_0
   \   00000054   050050E1           CMP      R0,R5
   \   00000058   0000002A           BCS      ??nmi6502_0
   \   0000005C   ........           _BLF     APUWrite,??APUWrite??rA
   1130            put6502memory( 0x0100 + S--, ( BYTE )( PC & 0xff ) );
   \                     ??nmi6502_0:
   \   00000060   180CD4E5           LDRB     R0,[R4, #+3096]
   \   00000064   011040E2           SUB      R1,R0,#+1
   \   00000068   181CC4E5           STRB     R1,[R4, #+3096]
   \   0000006C   B010D4E1           LDRH     R1,[R4, #+0]
   \   00000070   400F80E2           ADD      R0,R0,#+256
   \   00000074   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000078   2008A0E1           MOV      R0,R0, LSR #+16
   \   0000007C   070050E1           CMP      R0,R7
   \   00000080   0700002A           BCS      ??nmi6502_1
   \   00000084   003096E5           LDR      R3,[R6, #+0]
   \   00000088   400C50E3           CMP      R0,#+16384
   \   0000008C   0310C0E7           STRB     R1,[R0, +R3]
   \   00000090   0300003A           BCC      ??nmi6502_1
   \   00000094   050050E1           CMP      R0,R5
   \   00000098   0100002A           BCS      ??nmi6502_1
   \   0000009C   FF1001E2           AND      R1,R1,#0xFF
   \   000000A0   ........           _BLF     APUWrite,??APUWrite??rA
   1131            put6502memory( 0x0100 + S--, P );
   \                     ??nmi6502_1:
   \   000000A4   180CD4E5           LDRB     R0,[R4, #+3096]
   \   000000A8   011040E2           SUB      R1,R0,#+1
   \   000000AC   181CC4E5           STRB     R1,[R4, #+3096]
   \   000000B0   171CD4E5           LDRB     R1,[R4, #+3095]
   \   000000B4   400F80E2           ADD      R0,R0,#+256
   \   000000B8   0008A0E1           MOV      R0,R0, LSL #+16
   \   000000BC   2008A0E1           MOV      R0,R0, LSR #+16
   \   000000C0   070050E1           CMP      R0,R7
   \   000000C4   0600002A           BCS      ??nmi6502_2
   \   000000C8   003096E5           LDR      R3,[R6, #+0]
   \   000000CC   400C50E3           CMP      R0,#+16384
   \   000000D0   0310C0E7           STRB     R1,[R0, +R3]
   \   000000D4   0200003A           BCC      ??nmi6502_2
   \   000000D8   050050E1           CMP      R0,R5
   \   000000DC   0000002A           BCS      ??nmi6502_2
   \   000000E0   ........           _BLF     APUWrite,??APUWrite??rA
   1132            P |= 0x04;
   \                     ??nmi6502_2:
   \   000000E4   170CD4E5           LDRB     R0,[R4, #+3095]
   1133            PC = get6502memory( 0xfffa & addrmask );
   \   000000E8   001096E5           LDR      R1,[R6, #+0]
   \   000000EC   FA20A0E3           MOV      R2,#+250
   \   000000F0   040080E3           ORR      R0,R0,#0x4
   \   000000F4   170CC4E5           STRB     R0,[R4, #+3095]
   \   000000F8   ........           LDR      R0,??DataTable149  ;; addrmask
   \   000000FC   FF2C82E3           ORR      R2,R2,#0xFF00
   \   00000100   B000D0E1           LDRH     R0,[R0, #+0]
   1134            PC |= get6502memory( 0xfffb & addrmask ) << 8;
   \   00000104   FB30A0E3           MOV      R3,#+251
   \   00000108   FF3C83E3           ORR      R3,R3,#0xFF00
   \   0000010C   002002E0           AND      R2,R2,R0
   \   00000110   0120D2E7           LDRB     R2,[R2, +R1]
   \   00000114   000003E0           AND      R0,R3,R0
   \   00000118   B020C4E1           STRH     R2,[R4, #+0]
   \   0000011C   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000120   000482E1           ORR      R0,R2,R0, LSL #+8
   \   00000124   B000C4E1           STRH     R0,[R4, #+0]
   1135          }
   \   00000128   F080BDE8           POP      {R4-R7,PC}       ;; return
   1136          
   1137          /* Maskerable Interrupt */

   \                                 In segment CODE, align 4, keep-with-next
   1138          void irq6502()
   1139          {
   \                     irq6502:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1140            put6502memory( 0x0100 + S--, ( BYTE )( PC >> 8 ) );
   \   00000004   ........           LDR      R4,??DataTable150  ;; pc_reg
   \   00000008   ........           LDR      R6,??DataTable151  ;; gameImage
   \   0000000C   180CD4E5           LDRB     R0,[R4, #+3096]
   \   00000010   2050A0E3           MOV      R5,#+32
   \   00000014   405C85E3           ORR      R5,R5,#0x4000
   \   00000018   011040E2           SUB      R1,R0,#+1
   \   0000001C   181CC4E5           STRB     R1,[R4, #+3096]
   \   00000020   B010D4E1           LDRH     R1,[R4, #+0]
   \   00000024   400F80E2           ADD      R0,R0,#+256
   \   00000028   0170A0E3           MOV      R7,#+1
   \   0000002C   2114A0E1           LSR      R1,R1,#+8
   \   00000030   807C87E3           ORR      R7,R7,#0x8000
   \   00000034   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000038   2008A0E1           MOV      R0,R0, LSR #+16
   \   0000003C   070050E1           CMP      R0,R7
   \   00000040   0600002A           BCS      ??irq6502_0
   \   00000044   003096E5           LDR      R3,[R6, #+0]
   \   00000048   400C50E3           CMP      R0,#+16384
   \   0000004C   0310C0E7           STRB     R1,[R0, +R3]
   \   00000050   0200003A           BCC      ??irq6502_0
   \   00000054   050050E1           CMP      R0,R5
   \   00000058   0000002A           BCS      ??irq6502_0
   \   0000005C   ........           _BLF     APUWrite,??APUWrite??rA
   1141            put6502memory( 0x0100 + S--, ( BYTE )( PC & 0xff ) );
   \                     ??irq6502_0:
   \   00000060   180CD4E5           LDRB     R0,[R4, #+3096]
   \   00000064   011040E2           SUB      R1,R0,#+1
   \   00000068   181CC4E5           STRB     R1,[R4, #+3096]
   \   0000006C   B010D4E1           LDRH     R1,[R4, #+0]
   \   00000070   400F80E2           ADD      R0,R0,#+256
   \   00000074   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000078   2008A0E1           MOV      R0,R0, LSR #+16
   \   0000007C   070050E1           CMP      R0,R7
   \   00000080   0700002A           BCS      ??irq6502_1
   \   00000084   003096E5           LDR      R3,[R6, #+0]
   \   00000088   400C50E3           CMP      R0,#+16384
   \   0000008C   0310C0E7           STRB     R1,[R0, +R3]
   \   00000090   0300003A           BCC      ??irq6502_1
   \   00000094   050050E1           CMP      R0,R5
   \   00000098   0100002A           BCS      ??irq6502_1
   \   0000009C   FF1001E2           AND      R1,R1,#0xFF
   \   000000A0   ........           _BLF     APUWrite,??APUWrite??rA
   1142            put6502memory( 0x0100 + S--, P );
   \                     ??irq6502_1:
   \   000000A4   180CD4E5           LDRB     R0,[R4, #+3096]
   \   000000A8   011040E2           SUB      R1,R0,#+1
   \   000000AC   181CC4E5           STRB     R1,[R4, #+3096]
   \   000000B0   171CD4E5           LDRB     R1,[R4, #+3095]
   \   000000B4   400F80E2           ADD      R0,R0,#+256
   \   000000B8   0008A0E1           MOV      R0,R0, LSL #+16
   \   000000BC   2008A0E1           MOV      R0,R0, LSR #+16
   \   000000C0   070050E1           CMP      R0,R7
   \   000000C4   0600002A           BCS      ??irq6502_2
   \   000000C8   003096E5           LDR      R3,[R6, #+0]
   \   000000CC   400C50E3           CMP      R0,#+16384
   \   000000D0   0310C0E7           STRB     R1,[R0, +R3]
   \   000000D4   0200003A           BCC      ??irq6502_2
   \   000000D8   050050E1           CMP      R0,R5
   \   000000DC   0000002A           BCS      ??irq6502_2
   \   000000E0   ........           _BLF     APUWrite,??APUWrite??rA
   1143            P |= 0x04;
   \                     ??irq6502_2:
   \   000000E4   170CD4E5           LDRB     R0,[R4, #+3095]
   1144            PC = get6502memory( 0xfffe & addrmask );
   \   000000E8   001096E5           LDR      R1,[R6, #+0]
   \   000000EC   FE20A0E3           MOV      R2,#+254
   \   000000F0   040080E3           ORR      R0,R0,#0x4
   \   000000F4   170CC4E5           STRB     R0,[R4, #+3095]
   \   000000F8   ........           LDR      R0,??DataTable149  ;; addrmask
   \   000000FC   FF2C82E3           ORR      R2,R2,#0xFF00
   \   00000100   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000104   002002E0           AND      R2,R2,R0
   \   00000108   0120D2E7           LDRB     R2,[R2, +R1]
   \   0000010C   B020C4E1           STRH     R2,[R4, #+0]
   1145            PC |= get6502memory( 0xffff & addrmask ) << 8;
   \   00000110   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000114   000482E1           ORR      R0,R2,R0, LSL #+8
   \   00000118   B000C4E1           STRH     R0,[R4, #+0]
   1146          }
   \   0000011C   F080BDE8           POP      {R4-R7,PC}       ;; return
   1147          
   1148          
   1149          /* Execute Instruction */
   1150          

   \                                 In segment CODE, align 4, keep-with-next
   1151          void exec6502( int timerTicks )
   1152          {
   \                     exec6502:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   010054E3           CMP      R4,#+1
   \   0000000C   F080BDB8           POPLT    {R4-R7,PC}
   \   00000010   ........           LDR      R6,??DataTable150  ;; pc_reg
   \   00000014   ........           LDR      R7,??DataTable151  ;; gameImage
   \   00000018   0050A0E3           MOV      R5,#+0
   1153            while ( timerTicks > 0 )
   1154            {
   1155              // fetch instruction
   1156              opcode = gameImage[PC++];
   \                     ??exec6502_0:
   \   0000001C   B000D6E1           LDRH     R0,[R6, #+0]
   \   00000020   002097E5           LDR      R2,[R7, #+0]
   \   00000024   0210D0E7           LDRB     R1,[R0, +R2]
   \   00000028   010080E2           ADD      R0,R0,#+1
   \   0000002C   B000C6E1           STRH     R0,[R6, #+0]
   \   00000030   191CC6E5           STRB     R1,[R6, #+3097]
   1157          
   1158              // execute instruction
   1159              instruction[opcode] ();
   \   00000034   010186E0           ADD      R0,R6,R1, LSL #+2
   \   00000038   080490E5           LDR      R0,[R0, #+1032]
   \   0000003C   30FF2FE1           BLX      R0
   1160          
   1161              // calculate clock cycles
   1162              clockticks6502 += ticks[opcode];
   1163              timerTicks -= clockticks6502;
   \   00000040   191CD6E5           LDRB     R1,[R6, #+3097]
   \   00000044   080C96E5           LDR      R0,[R6, #+3080]
   \   00000048   000044E0           SUB      R0,R4,R0
   \   0000004C   011186E0           ADD      R1,R6,R1, LSL #+2
   \   00000050   081891E5           LDR      R1,[R1, #+2056]
   1164              clockticks6502 = 0;
   \   00000054   085C86E5           STR      R5,[R6, #+3080]
   \   00000058   014040E0           SUB      R4,R0,R1
   1165            }
   \   0000005C   010054E3           CMP      R4,#+1
   \   00000060   EDFFFFAA           BGE      ??exec6502_0
   1166          }
   \   00000064   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   ........           DC32     addrmask

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     pc_reg

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable72:
   \   00000000   ........           DC32     gameImage

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable91:
   \   00000000   ........           DC32     pc_reg

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable124:
   \   00000000   ........           DC32     pc_reg

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable139:
   \   00000000   ........           DC32     pc_reg

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable140:
   \   00000000   ........           DC32     gameImage

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable149:
   \   00000000   ........           DC32     addrmask

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable150:
   \   00000000   ........           DC32     pc_reg

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable151:
   \   00000000   ........           DC32     gameImage
   1167          
   1168          

   Maximum stack usage in bytes:

     Function      CSTACK
     --------      ------
     abs6502           0
     absx6502          0
     absy6502          0
     adc6502           8
     and6502           8
     asl6502           8
     asla6502          0
     bcc6502           8
     bcs6502           8
     beq6502           8
     bit6502           8
     bmi6502           8
     bne6502           8
     bpl6502           8
     bra6502           8
     brk6502          20
     bvc6502           8
     bvs6502           8
     clc6502           0
     cld6502           0
     cli6502           0
     clv6502           0
     cmp6502           8
     cpx6502           8
     cpy6502           8
     dea6502           0
     dec6502           8
     dex6502           0
     dey6502           0
     eor6502           8
     exec6502         20
     get6502memory     0
     immediate6502     0
     implied6502       0
     ina6502           0
     inc6502           8
     indabsx6502       0
     indirect6502      0
     indx6502          0
     indy6502          0
     indzp6502         0
     init6502         36
     inx6502           0
     iny6502           0
     irq6502          20
     jmp6502           8
     jsr6502          20
     lda6502           8
     ldx6502           8
     ldy6502           8
     lsr6502           8
     lsra6502          0
     nmi6502          20
     nop6502           0
     ora6502           8
     pha6502           0
     php6502           0
     phx6502           4
     phy6502           4
     pla6502           0
     plp6502           0
     plx6502           0
     ply6502           0
     put6502memory     4
     relative6502      0
     reset6502         0
     rol6502           8
     rola6502          0
     ror6502           8
     rora6502          0
     rti6502           0
     rts6502           0
     sbc6502           8
     sec6502           0
     sed6502           0
     sei6502           0
     sta6502           8
     stx6502           8
     sty6502           8
     stz6502           8
     tax6502           0
     tay6502           0
     trb6502           8
     tsb6502           8
     tsx6502           0
     txa6502           0
     txs6502           0
     tya6502           0
     zp6502            0
     zpx6502           0
     zpy6502           0


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     pc_reg         3099
     get6502memory    16
     put6502memory    64
     implied6502       4
     immediate6502    24
     abs6502          48
     relative6502     76
     indirect6502     72
     absx6502        112
     absy6502        112
     zp6502           36
     zpx6502          56
     zpy6502          56
     indx6502         68
     indy6502        120
     indabsx6502      76
     indzp6502        56
     adc6502         228
     and6502          88
     asl6502         164
     asla6502         60
     bcc6502         100
     bcs6502         100
     beq6502         100
     bit6502          92
     bmi6502         100
     bne6502         100
     bpl6502         100
     brk6502         296
     bvc6502         100
     bvs6502         100
     clc6502          20
     cld6502          20
     cli6502          20
     clv6502          20
     cmp6502         112
     cpx6502         112
     cpy6502         112
     dec6502         104
     dex6502          52
     dey6502          52
     eor6502          88
     inc6502         104
     inx6502          52
     iny6502          52
     jmp6502          36
     jsr6502         224
     lda6502          80
     ldx6502          80
     ldy6502          80
     lsr6502         164
     lsra6502         60
     nop6502           4
     ora6502          84
     pha6502          44
     php6502          44
     pla6502          76
     plp6502          48
     rol6502         180
     rola6502         68
     ror6502         184
     rora6502         84
     rti6502         100
     rts6502          76
     sbc6502         240
     sec6502          20
     sed6502          20
     sei6502          20
     sta6502          92
     stx6502          92
     sty6502          92
     tax6502          48
     tay6502          48
     tsx6502          48
     txa6502          48
     txs6502          16
     tya6502          48
     bra6502          56
     dea6502          52
     ina6502          52
     phx6502          96
     plx6502          76
     phy6502          96
     ply6502          76
     stz6502          96
     tsb6502          92
     trb6502          96
     init6502       4156
     reset6502       100
     nmi6502         300
     irq6502         288
     exec6502        104
     ??DataTable50     4
     ??DataTable53     4
     ??DataTable72     4
     ??DataTable91     4
     ??DataTable124    4
     ??DataTable139    4
     ??DataTable140    4
     ??DataTable149    4
     ??DataTable150    4
     ??DataTable151    4
      Others         388

 
 12 344 bytes in segment CODE
  3 099 bytes in segment DATA_Z
     12 bytes in segment INITTAB
 
 11 968 bytes of CODE memory (+ 388 bytes shared)
  3 099 bytes of DATA memory

Errors: none
Warnings: none
