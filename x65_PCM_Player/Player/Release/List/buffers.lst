##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Feb/2012  15:39:35 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\MP3\mp3de #
#                       c\buffers.c                                          #
#    Command line    =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\MP3\mp3de #
#                       c\buffers.c -D NDEBUG -lC                            #
#                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\ #
#                       Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player #
#                       \Player\Release\Obj\ -s9 --cpu_mode arm --endian     #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Program              #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude       #
#                       swilib.h -I "D:\Program Files\IAR\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=16                                #
#    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\buffers.lst                                      #
#    Object file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\buffers.r79                                       #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\MP3\mp3dec\buffers.c
      1          /* ***** BEGIN LICENSE BLOCK ***** 
      2           * Version: RCSL 1.0/RPSL 1.0 
      3           *  
      4           * Portions Copyright (c) 1995-2002 RealNetworks, Inc. All Rights Reserved. 
      5           *      
      6           * The contents of this file, and the files included with this file, are 
      7           * subject to the current version of the RealNetworks Public Source License 
      8           * Version 1.0 (the "RPSL") available at 
      9           * http://www.helixcommunity.org/content/rpsl unless you have licensed 
     10           * the file under the RealNetworks Community Source License Version 1.0 
     11           * (the "RCSL") available at http://www.helixcommunity.org/content/rcsl, 
     12           * in which case the RCSL will apply. You may also obtain the license terms 
     13           * directly from RealNetworks.  You may not use this file except in 
     14           * compliance with the RPSL or, if you have a valid RCSL with RealNetworks 
     15           * applicable to this file, the RCSL.  Please see the applicable RPSL or 
     16           * RCSL for the rights, obligations and limitations governing use of the 
     17           * contents of the file.  
     18           *  
     19           * This file is part of the Helix DNA Technology. RealNetworks is the 
     20           * developer of the Original Code and owns the copyrights in the portions 
     21           * it created. 
     22           *  
     23           * This file, and the files included with this file, is distributed and made 
     24           * available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER 
     25           * EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS ALL SUCH WARRANTIES, 
     26           * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS 
     27           * FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. 
     28           * 
     29           * Technology Compatibility Kit Test Suite(s) Location: 
     30           *    http://www.helixcommunity.org/content/tck 
     31           * 
     32           * Contributor(s): 
     33           *  
     34           * ***** END LICENSE BLOCK ***** */ 
     35          
     36          /**************************************************************************************
     37           * Fixed-point MP3 decoder
     38           * Jon Recker (jrecker@real.com), Ken Cooke (kenc@real.com)
     39           * June 2003
     40           *
     41           * buffers.c - allocation and freeing of internal MP3 decoder buffers
     42           *
     43           * All memory allocation for the codec is done in this file, so if you don't want 
     44           *  to use other the default system malloc() and free() for heap management this is 
     45           *  the only file you'll need to change.
     46           **************************************************************************************/
     47          
     48          //#include "hlxclib/stdlib.h"		/* for malloc, free */ 
     49          //#include <stdlib.h>
     50          //#include "..\..\..\swilib.h"
     51          #include "coder.h"

  /* ***** BEGIN LICENSE BLOCK ***** 
                                    ^
"D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\MP3\mp3dec\coder.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
     52          
     53          /**************************************************************************************
     54           * Function:    ClearBuffer
     55           *
     56           * Description: fill buffer with 0's
     57           *
     58           * Inputs:      pointer to buffer
     59           *              number of bytes to fill with 0
     60           *
     61           * Outputs:     cleared buffer
     62           *
     63           * Return:      none
     64           *
     65           * Notes:       slow, platform-independent equivalent to memset(buf, 0, nBytes)
     66           **************************************************************************************/
     67          static void ClearBuffer(void *buf, int nBytes)
     68          {
     69          	int i;
     70          	unsigned char *cbuf = (unsigned char *)buf;
     71          
     72          	for (i = 0; i < nBytes; i++)
     73          		cbuf[i] = 0;
     74          
     75          	return;
     76          }
     77          
     78          /**************************************************************************************
     79           * Function:    AllocateBuffers
     80           *
     81           * Description: allocate all the memory needed for the MP3 decoder
     82           *
     83           * Inputs:      none
     84           *
     85           * Outputs:     none
     86           *
     87           * Return:      pointer to MP3DecInfo structure (initialized with pointers to all 
     88           *                the internal buffers needed for decoding, all other members of 
     89           *                MP3DecInfo structure set to 0)
     90           *
     91           * Notes:       if one or more mallocs fail, function frees any buffers already
     92           *                allocated before returning
     93           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
     94          MP3DecInfo *AllocateBuffers(void)
     95          {
     96          #ifdef xxx	
     97          	MP3DecInfo *mp3DecInfo;
     98          	FrameHeader *fh;
     99          	SideInfo *si;
    100          	ScaleFactorInfo *sfi;
    101          	HuffmanInfo *hi;
    102          	DequantInfo *di;
    103          	IMDCTInfo *mi;
    104          	SubbandInfo *sbi;
    105          
    106          	mp3DecInfo = (MP3DecInfo *)malloc(sizeof(MP3DecInfo));
    107          	if (!mp3DecInfo)
    108          		return 0;
    109          	ClearBuffer(mp3DecInfo, sizeof(MP3DecInfo));
    110          	
    111          	fh =  (FrameHeader *)     malloc(sizeof(FrameHeader));
    112          	si =  (SideInfo *)        malloc(sizeof(SideInfo));
    113          	sfi = (ScaleFactorInfo *) malloc(sizeof(ScaleFactorInfo));
    114          	hi =  (HuffmanInfo *)     malloc(sizeof(HuffmanInfo));
    115          	di =  (DequantInfo *)     malloc(sizeof(DequantInfo));
    116          	mi =  (IMDCTInfo *)       malloc(sizeof(IMDCTInfo));
    117          	sbi = (SubbandInfo *)     malloc(sizeof(SubbandInfo));
    118          
    119          	mp3DecInfo->FrameHeaderPS =     (void *)fh;
    120          	mp3DecInfo->SideInfoPS =        (void *)si;
    121          	mp3DecInfo->ScaleFactorInfoPS = (void *)sfi;
    122          	mp3DecInfo->HuffmanInfoPS =     (void *)hi;
    123          	mp3DecInfo->DequantInfoPS =     (void *)di;
    124          	mp3DecInfo->IMDCTInfoPS =       (void *)mi;
    125          	mp3DecInfo->SubbandInfoPS =     (void *)sbi;
    126          
    127          	if (!fh || !si || !sfi || !hi || !di || !mi || !sbi) {
    128          		FreeBuffers(mp3DecInfo);	/* safe to call - only frees memory that was successfully allocated */
    129          		return 0;
    130          	}
    131          
    132          	/* important to do this - DSP primitives assume a bunch of state variables are 0 on first use */
    133          	ClearBuffer(fh,  sizeof(FrameHeader));
    134          	ClearBuffer(si,  sizeof(SideInfo));
    135          	ClearBuffer(sfi, sizeof(ScaleFactorInfo));
    136          	ClearBuffer(hi,  sizeof(HuffmanInfo));
    137          	ClearBuffer(di,  sizeof(DequantInfo));
    138          	ClearBuffer(mi,  sizeof(IMDCTInfo));
    139          	ClearBuffer(sbi, sizeof(SubbandInfo));
    140          
    141          	return mp3DecInfo;
    142          #endif // xxx
    143          
    144          
    145          //---------------------------------------------------------------------------------
    146          	static MP3DecInfo mp3DecInfo;
    147          	static FrameHeader fh;
    148          	static SideInfo si;
    149          	static ScaleFactorInfo sfi;
    150          	static HuffmanInfo hi;
    151          	static DequantInfo di;
    152          	static IMDCTInfo mi;
    153          	static SubbandInfo sbi;
    154          	
    155          
    156          	mp3DecInfo.FrameHeaderPS =     (void *)&fh;
   \                     xmp3_AllocateBuffers:
   \   00000000   08019FE5           LDR      R0,??xmp3_AllocateBuffers_0  ;; ??mp3DecInfo
    157          	mp3DecInfo.SideInfoPS =        (void *)&si;
    158          	mp3DecInfo.ScaleFactorInfoPS = (void *)&sfi;
    159          	mp3DecInfo.HuffmanInfoPS =     (void *)&hi;
   \   00000004   08C19FE5           LDR      R12,??xmp3_AllocateBuffers_0+0x4  ;; ??hi
    160          	mp3DecInfo.DequantInfoPS =     (void *)&di;
    161          	mp3DecInfo.IMDCTInfoPS =       (void *)&mi;
   \   00000008   08319FE5           LDR      R3,??xmp3_AllocateBuffers_0+0x8  ;; ??mi
   \   0000000C   30002DE9           PUSH     {R4,R5}
   \   00000010   7F1E80E2           ADD      R1,R0,#+2032
   \   00000014   001080E5           STR      R1,[R0, #+0]
   \   00000018   2810A0E3           MOV      R1,#+40
   \   0000001C   801E81E3           ORR      R1,R1,#0x800
   \   00000020   001081E0           ADD      R1,R1,R0
   \   00000024   041080E5           STR      R1,[R0, #+4]
   \   00000028   971E80E2           ADD      R1,R0,#+2416
   \   0000002C   081080E5           STR      R1,[R0, #+8]
   \   00000030   8C10A0E3           MOV      R1,#+140
   \   00000034   A01E81E3           ORR      R1,R1,#0xA00
   \   00000038   001081E0           ADD      R1,R1,R0
   \   0000003C   101080E5           STR      R1,[R0, #+16]
    162          	mp3DecInfo.SubbandInfoPS =     (void *)&sbi;
   \   00000040   D4109FE5           LDR      R1,??xmp3_AllocateBuffers_0+0xC  ;; ??sbi
   \   00000044   0CC080E5           STR      R12,[R0, #+12]
   \   00000048   143080E5           STR      R3,[R0, #+20]
   \   0000004C   181080E5           STR      R1,[R0, #+24]
    163          
    164          	/* important to do this - DSP primitives assume a bunch of state variables are 0 on first use */
    165          	ClearBuffer((void *)&fh,  sizeof(FrameHeader));
   \   00000050   0040A0E3           MOV      R4,#+0
   \   00000054   0020A0E3           MOV      R2,#+0
   \                     ??xmp3_AllocateBuffers_1:
   \   00000058   005084E0           ADD      R5,R4,R0
   \   0000005C   F027C5E5           STRB     R2,[R5, #+2032]
   \   00000060   014084E2           ADD      R4,R4,#+1
   \   00000064   380054E3           CMP      R4,#+56
   \   00000068   FAFFFFBA           BLT      ??xmp3_AllocateBuffers_1
    166          	ClearBuffer((void *)&si,  sizeof(SideInfo));
   \   0000006C   0040A0E3           MOV      R4,#+0
   \                     ??xmp3_AllocateBuffers_2:
   \   00000070   005084E0           ADD      R5,R4,R0
   \   00000074   2828C5E5           STRB     R2,[R5, #+2088]
   \   00000078   014084E2           ADD      R4,R4,#+1
   \   0000007C   520F54E3           CMP      R4,#+328
   \   00000080   FAFFFFBA           BLT      ??xmp3_AllocateBuffers_2
    167          	ClearBuffer((void *)&sfi, sizeof(ScaleFactorInfo));
   \   00000084   0040A0E3           MOV      R4,#+0
   \                     ??xmp3_AllocateBuffers_3:
   \   00000088   005084E0           ADD      R5,R4,R0
   \   0000008C   7029C5E5           STRB     R2,[R5, #+2416]
   \   00000090   014084E2           ADD      R4,R4,#+1
   \   00000094   470F54E3           CMP      R4,#+284
   \   00000098   FAFFFFBA           BLT      ??xmp3_AllocateBuffers_3
    168          	ClearBuffer((void *)&hi,  sizeof(HuffmanInfo));
   \   0000009C   0040A0E3           MOV      R4,#+0
   \   000000A0   1050A0E3           MOV      R5,#+16
   \   000000A4   485D85E3           ORR      R5,R5,#0x1200
   \                     ??xmp3_AllocateBuffers_4:
   \   000000A8   0C20C4E7           STRB     R2,[R4, +R12]
   \   000000AC   014084E2           ADD      R4,R4,#+1
   \   000000B0   050054E1           CMP      R4,R5
   \   000000B4   FBFFFFBA           BLT      ??xmp3_AllocateBuffers_4
    169          	ClearBuffer((void *)&di,  sizeof(DequantInfo));
   \   000000B8   0040A0E3           MOV      R4,#+0
   \                     ??xmp3_AllocateBuffers_5:
   \   000000BC   005084E0           ADD      R5,R4,R0
   \   000000C0   8C2AC5E5           STRB     R2,[R5, #+2700]
   \   000000C4   014084E2           ADD      R4,R4,#+1
   \   000000C8   D20F54E3           CMP      R4,#+840
   \   000000CC   FAFFFFBA           BLT      ??xmp3_AllocateBuffers_5
    170          	ClearBuffer((void *)&mi,  sizeof(IMDCTInfo));
   \   000000D0   0040A0E3           MOV      R4,#+0
   \   000000D4   2050A0E3           MOV      R5,#+32
   \   000000D8   6C5D85E3           ORR      R5,R5,#0x1B00
   \                     ??xmp3_AllocateBuffers_6:
   \   000000DC   0320C4E7           STRB     R2,[R4, +R3]
   \   000000E0   014084E2           ADD      R4,R4,#+1
   \   000000E4   050054E1           CMP      R4,R5
   \   000000E8   FBFFFFBA           BLT      ??xmp3_AllocateBuffers_6
    171          	ClearBuffer((void *)&sbi, sizeof(SubbandInfo));
   \   000000EC   0030A0E3           MOV      R3,#+0
   \   000000F0   0440A0E3           MOV      R4,#+4
   \   000000F4   884D84E3           ORR      R4,R4,#0x2200
   \                     ??xmp3_AllocateBuffers_7:
   \   000000F8   0120C3E7           STRB     R2,[R3, +R1]
   \   000000FC   013083E2           ADD      R3,R3,#+1
   \   00000100   040053E1           CMP      R3,R4
   \   00000104   FBFFFFBA           BLT      ??xmp3_AllocateBuffers_7
    172          
    173          	return &mp3DecInfo;	
   \   00000108   3000BDE8           POP      {R4,R5}
   \   0000010C   1EFF2FE1           BX       LR               ;; return
   \                     ??xmp3_AllocateBuffers_0:
   \   00000110   ........           DC32     ??mp3DecInfo
   \   00000114   ........           DC32     ??hi
   \   00000118   ........           DC32     ??mi
   \   0000011C   ........           DC32     ??sbi
    174          }

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??mp3DecInfo:
   \   00000000                      DS8 2032
   \   000007F0                      DS8 56
   \   00000828                      DS8 328
   \   00000970                      DS8 284
   \   00000A8C                      DS8 840

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??hi:
   \   00000000                      DS8 4624

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??mi:
   \   00000000                      DS8 6944

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??sbi:
   \   00000000                      DS8 8708
    175          
    176          #define SAFE_FREE(x)	{if (x)	mfree(x);	(x) = 0;}	/* helper macro */
    177          
    178          /**************************************************************************************
    179           * Function:    FreeBuffers
    180           *
    181           * Description: frees all the memory used by the MP3 decoder
    182           *
    183           * Inputs:      pointer to initialized MP3DecInfo structure
    184           *
    185           * Outputs:     none
    186           *
    187           * Return:      none
    188           *
    189           * Notes:       safe to call even if some buffers were not allocated (uses SAFE_FREE)
    190           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    191          void FreeBuffers(MP3DecInfo *mp3DecInfo)
    192          {
   \                     xmp3_FreeBuffers:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    193          	if (!mp3DecInfo)
   \   00000008   3080BD08           POPEQ    {R4,R5,PC}
    194          		return;
    195          
    196          	SAFE_FREE(mp3DecInfo->FrameHeaderPS);
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000000A           BEQ      ??xmp3_FreeBuffers_0
   \   00000018   150000EF           SWI      +21
   \                     ??xmp3_FreeBuffers_0:
   \   0000001C   0050A0E3           MOV      R5,#+0
   \   00000020   005084E5           STR      R5,[R4, #+0]
    197          	SAFE_FREE(mp3DecInfo->SideInfoPS);
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0000000A           BEQ      ??xmp3_FreeBuffers_1
   \   00000030   150000EF           SWI      +21
   \                     ??xmp3_FreeBuffers_1:
   \   00000034   045084E5           STR      R5,[R4, #+4]
    198          	SAFE_FREE(mp3DecInfo->ScaleFactorInfoPS);
   \   00000038   080094E5           LDR      R0,[R4, #+8]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0000000A           BEQ      ??xmp3_FreeBuffers_2
   \   00000044   150000EF           SWI      +21
   \                     ??xmp3_FreeBuffers_2:
   \   00000048   085084E5           STR      R5,[R4, #+8]
    199          	SAFE_FREE(mp3DecInfo->HuffmanInfoPS);
   \   0000004C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0000000A           BEQ      ??xmp3_FreeBuffers_3
   \   00000058   150000EF           SWI      +21
   \                     ??xmp3_FreeBuffers_3:
   \   0000005C   0C5084E5           STR      R5,[R4, #+12]
    200          	SAFE_FREE(mp3DecInfo->DequantInfoPS);
   \   00000060   100094E5           LDR      R0,[R4, #+16]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0000000A           BEQ      ??xmp3_FreeBuffers_4
   \   0000006C   150000EF           SWI      +21
   \                     ??xmp3_FreeBuffers_4:
   \   00000070   105084E5           STR      R5,[R4, #+16]
    201          	SAFE_FREE(mp3DecInfo->IMDCTInfoPS);
   \   00000074   140094E5           LDR      R0,[R4, #+20]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0000000A           BEQ      ??xmp3_FreeBuffers_5
   \   00000080   150000EF           SWI      +21
   \                     ??xmp3_FreeBuffers_5:
   \   00000084   145084E5           STR      R5,[R4, #+20]
    202          	SAFE_FREE(mp3DecInfo->SubbandInfoPS);
   \   00000088   180094E5           LDR      R0,[R4, #+24]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0000000A           BEQ      ??xmp3_FreeBuffers_6
   \   00000094   150000EF           SWI      +21
   \                     ??xmp3_FreeBuffers_6:
   \   00000098   185084E5           STR      R5,[R4, #+24]
    203          
    204          	SAFE_FREE(mp3DecInfo);
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   150000EF           SWI      +21
   \   000000A4   3080BDE8           POP      {R4,R5,PC}       ;; return
    205          }
    206          

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     xmp3_AllocateBuffers     8
     xmp3_FreeBuffers        12


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     xmp3_AllocateBuffers  288
     mp3DecInfo           3540
     hi                   4624
     mi                   6944
     sbi                  8708
     xmp3_FreeBuffers      168
      Others                20

 
    464 bytes in segment CODE
 23 816 bytes in segment DATA_Z
     12 bytes in segment INITTAB
 
    456 bytes of CODE memory (+ 20 bytes shared)
 23 816 bytes of DATA memory

Errors: none
Warnings: 1
