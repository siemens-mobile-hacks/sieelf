##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Feb/2012  15:39:17 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDE #
#                       C\AAC_FILE (16).c                                    #
#    Command line    =  "D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACD #
#                       EC\AAC_FILE (16).c" -D NDEBUG -lC                    #
#                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\ #
#                       Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player #
#                       \Player\Release\Obj\ -s9 --cpu_mode arm --endian     #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Program              #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude       #
#                       swilib.h -I "D:\Program Files\IAR\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=16                                #
#    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\AAC_FILE (16).lst                                #
#    Object file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\AAC_FILE (16).r79                                 #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDEC\AAC_FILE (16).c
      1          /* ***** BEGIN LICENSE BLOCK *****  
      2           * Source last modified: $Id: decelmnt.c,v 1.1 2005/02/26 01:47:34 jrecker Exp $ 
      3           *   
      4           * Portions Copyright (c) 1995-2005 RealNetworks, Inc. All Rights Reserved.  
      5           *       
      6           * The contents of this file, and the files included with this file, 
      7           * are subject to the current version of the RealNetworks Public 
      8           * Source License (the "RPSL") available at 
      9           * http://www.helixcommunity.org/content/rpsl unless you have licensed 
     10           * the file under the current version of the RealNetworks Community 
     11           * Source License (the "RCSL") available at 
     12           * http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
     13           * will apply. You may also obtain the license terms directly from 
     14           * RealNetworks.  You may not use this file except in compliance with 
     15           * the RPSL or, if you have a valid RCSL with RealNetworks applicable 
     16           * to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
     17           * the rights, obligations and limitations governing use of the 
     18           * contents of the file. 
     19           *   
     20           * This file is part of the Helix DNA Technology. RealNetworks is the 
     21           * developer of the Original Code and owns the copyrights in the 
     22           * portions it created. 
     23           *   
     24           * This file, and the files included with this file, is distributed 
     25           * and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY 
     26           * KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS 
     27           * ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES 
     28           * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET 
     29           * ENJOYMENT OR NON-INFRINGEMENT. 
     30           *  
     31           * Technology Compatibility Kit Test Suite(s) Location:  
     32           *    http://www.helixcommunity.org/content/tck  
     33           *  
     34           * Contributor(s):  
     35           *   
     36           * ***** END LICENSE BLOCK ***** */  
     37          
     38          /**************************************************************************************
     39           * Fixed-point HE-AAC decoder
     40           * Jon Recker (jrecker@real.com)
     41           * February 2005
     42           *
     43           * decelmnt.c - syntactic element decoding
     44           **************************************************************************************/
     45          
     46          #include "coder_aac.h"
     47          
     48          /**************************************************************************************
     49           * Function:    DecodeSingleChannelElement
     50           *
     51           * Description: decode one SCE
     52           *
     53           * Inputs:      BitStreamInfo struct pointing to start of SCE (14496-3, table 4.4.4) 
     54           *
     55           * Outputs:     updated element instance tag
     56           *
     57           * Return:      0 if successful, -1 if error
     58           *
     59           * Notes:       doesn't decode individual channel stream (part of DecodeNoiselessData)
     60           **************************************************************************************/
     61          static int DecodeSingleChannelElement(AACDecInfo *aacDecInfo, BitStreamInfo *bsi)
     62          {
     63          	/* validate pointers */
     64          	if (!aacDecInfo || !aacDecInfo->psInfoBase)
     65          		return -1;
     66          
     67          	/* read instance tag */
     68          	aacDecInfo->currInstTag = GetBits(bsi, NUM_INST_TAG_BITS);
     69          
     70          	return 0;
     71          }
     72          
     73          /**************************************************************************************
     74           * Function:    DecodeChannelPairElement
     75           *
     76           * Description: decode one CPE
     77           *
     78           * Inputs:      BitStreamInfo struct pointing to start of CPE (14496-3, table 4.4.5) 
     79           *
     80           * Outputs:     updated element instance tag
     81           *              updated commonWin
     82           *              updated ICS info, if commonWin == 1
     83           *              updated mid-side stereo info, if commonWin == 1
     84           *
     85           * Return:      0 if successful, -1 if error
     86           *
     87           * Notes:       doesn't decode individual channel stream (part of DecodeNoiselessData)
     88           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
     89          static int DecodeChannelPairElement(AACDecInfo *aacDecInfo, BitStreamInfo *bsi)
     90          {
   \                     DecodeChannelPairElement:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0060A0E1           MOV      R6,R0
     91          	int sfb, gp, maskOffset;
     92          	unsigned char currBit, *maskPtr;
     93          	PSInfoBase *psi;
     94          	ICSInfo *icsInfo;
     95          
     96          	/* validate pointers */
     97          	if (!aacDecInfo || !aacDecInfo->psInfoBase)
   \   00000008   000056E3           CMP      R6,#+0
   \   0000000C   00709615           LDRNE    R7,[R6, #+0]
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   00005713           CMPNE    R7,#+0
     98          		return -1;
   \   00000018   0000E003           MVNEQ    R0,#+0
   \   0000001C   F087BD08           POPEQ    {R4-R10,PC}
     99          	psi = (PSInfoBase *)(aacDecInfo->psInfoBase);
    100          	icsInfo = psi->icsInfo;
   \   00000020   7C00A0E3           MOV      R0,#+124
   \   00000024   800E80E3           ORR      R0,R0,#0x800
   \   00000028   075080E0           ADD      R5,R0,R7
    101          
    102          	/* read instance tag */
    103          	aacDecInfo->currInstTag = GetBits(bsi, NUM_INST_TAG_BITS);
   \   0000002C   0410A0E3           MOV      R1,#+4
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000038   2C0086E5           STR      R0,[R6, #+44]
    104          
    105          	/* read common window flag and mid-side info (if present) 
    106          	 * store msMask bits in psi->msMaskBits[] as follows:
    107          	 *  long blocks -  pack bits for each SFB in range [0, maxSFB) starting with lsb of msMaskBits[0]
    108          	 *  short blocks - pack bits for each SFB in range [0, maxSFB), for each group [0, 7]
    109          	 * msMaskPresent = 0 means no M/S coding
    110          	 *               = 1 means psi->msMaskBits contains 1 bit per SFB to toggle M/S coding
    111          	 *               = 2 means all SFB's are M/S coded (so psi->msMaskBits is not needed)
    112          	 */
    113          	psi->commonWin = GetBits(bsi, 1);
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000048   F00887E5           STR      R0,[R7, #+2288]
    114          	if (psi->commonWin) {
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   F087BD08           POPEQ    {R4-R10,PC}
    115          		DecodeICSInfo(bsi, icsInfo, psi->sampRateIdx);
   \   00000054   782897E5           LDR      R2,[R7, #+2168]
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     raac_DecodeICSInfo,??raac_DecodeICSInfo??rA
    116          		psi->msMaskPresent = GetBits(bsi, 2);
   \   00000064   0210A0E3           MOV      R1,#+2
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000070   C40B87E5           STR      R0,[R7, #+3012]
    117          		if (psi->msMaskPresent == 1) {
   \   00000074   010050E3           CMP      R0,#+1
   \   00000078   0900001A           BNE      ??DecodeChannelPairElement_0
    118          			maskPtr = psi->msMaskBits;
   \   0000007C   C800A0E3           MOV      R0,#+200
   \   00000080   B00E80E3           ORR      R0,R0,#0xB00
   \   00000084   076080E0           ADD      R6,R0,R7
    119          			*maskPtr = 0;
   \   00000088   0070A0E3           MOV      R7,#+0
   \   0000008C   0070C6E5           STRB     R7,[R6, #+0]
    120          			maskOffset = 0;
    121          			for (gp = 0; gp < icsInfo->numWinGroup; gp++) {
   \   00000090   3100D5E5           LDRB     R0,[R5, #+49]
   \   00000094   0080A0E3           MOV      R8,#+0
   \   00000098   0790A0E1           MOV      R9,R7
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   1200001A           BNE      ??DecodeChannelPairElement_1
    122          				for (sfb = 0; sfb < icsInfo->maxSFB; sfb++) {
    123          					currBit = (unsigned char)GetBits(bsi, 1);
    124          					*maskPtr |= currBit << maskOffset;
    125          					if (++maskOffset == 8) {
    126          						maskPtr++;
    127          						*maskPtr = 0;
    128          						maskOffset = 0;
    129          					}
    130          				}		
    131          			}
    132          		}
    133          	}
    134          
    135          	return 0;
   \                     ??DecodeChannelPairElement_0:
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??DecodeChannelPairElement_2:
   \   000000AC   0110A0E3           MOV      R1,#+1
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   000000B8   0010D6E5           LDRB     R1,[R6, #+0]
   \   000000BC   FF0000E2           AND      R0,R0,#0xFF
   \   000000C0   1008A0E1           LSL      R0,R0,R8
   \   000000C4   010080E1           ORR      R0,R0,R1
   \   000000C8   0000C6E5           STRB     R0,[R6, #+0]
   \   000000CC   018088E2           ADD      R8,R8,#+1
   \   000000D0   080058E3           CMP      R8,#+8
   \   000000D4   0170E605           STRBEQ   R7,[R6, #+1]!
   \   000000D8   0080A003           MOVEQ    R8,#+0
   \   000000DC   01A08AE2           ADD      R10,R10,#+1
   \                     ??DecodeChannelPairElement_3:
   \   000000E0   0300D5E5           LDRB     R0,[R5, #+3]
   \   000000E4   00005AE1           CMP      R10,R0
   \   000000E8   EFFFFFBA           BLT      ??DecodeChannelPairElement_2
   \                     ??DecodeChannelPairElement_4:
   \   000000EC   019089E2           ADD      R9,R9,#+1
   \                     ??DecodeChannelPairElement_1:
   \   000000F0   3100D5E5           LDRB     R0,[R5, #+49]
   \   000000F4   000059E1           CMP      R9,R0
   \   000000F8   E9FFFFAA           BGE      ??DecodeChannelPairElement_0
   \   000000FC   0300D5E5           LDRB     R0,[R5, #+3]
   \   00000100   00A0A0E3           MOV      R10,#+0
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   F4FFFF1A           BNE      ??DecodeChannelPairElement_3
   \   0000010C   F6FFFFEA           B        ??DecodeChannelPairElement_4
    136          }
    137          
    138          /**************************************************************************************
    139           * Function:    DecodeLFEChannelElement
    140           *
    141           * Description: decode one LFE
    142           *
    143           * Inputs:      BitStreamInfo struct pointing to start of LFE (14496-3, table 4.4.9) 
    144           *
    145           * Outputs:     updated element instance tag
    146           *
    147           * Return:      0 if successful, -1 if error
    148           *
    149           * Notes:       doesn't decode individual channel stream (part of DecodeNoiselessData)
    150           **************************************************************************************/
    151          static int DecodeLFEChannelElement(AACDecInfo *aacDecInfo, BitStreamInfo *bsi)
    152          {
    153          	/* validate pointers */
    154          	if (!aacDecInfo || !aacDecInfo->psInfoBase)
    155          		return -1;
    156          
    157          	/* read instance tag */
    158          	aacDecInfo->currInstTag = GetBits(bsi, NUM_INST_TAG_BITS);
    159          
    160          	return 0;
    161          }
    162          
    163          /**************************************************************************************
    164           * Function:    DecodeDataStreamElement
    165           *
    166           * Description: decode one DSE
    167           *
    168           * Inputs:      BitStreamInfo struct pointing to start of DSE (14496-3, table 4.4.10) 
    169           *
    170           * Outputs:     updated element instance tag
    171           *              filled in data stream buffer
    172           *
    173           * Return:      0 if successful, -1 if error
    174           **************************************************************************************/
    175          static int DecodeDataStreamElement(AACDecInfo *aacDecInfo, BitStreamInfo *bsi)
    176          {
    177          	unsigned int byteAlign, dataCount;
    178          	unsigned char *dataBuf;
    179          	PSInfoBase *psi;
    180          
    181          	/* validate pointers */
    182          	if (!aacDecInfo || !aacDecInfo->psInfoBase)
    183          		return -1;
    184          	psi = (PSInfoBase *)(aacDecInfo->psInfoBase);
    185          
    186          	aacDecInfo->currInstTag = GetBits(bsi, NUM_INST_TAG_BITS);
    187          	byteAlign = GetBits(bsi, 1);
    188          	dataCount = GetBits(bsi, 8);
    189          	if (dataCount == 255)
    190          		dataCount += GetBits(bsi, 8);
    191          
    192          	if (byteAlign)
    193          		ByteAlignBitstream(bsi);
    194          
    195          	psi->dataCount = dataCount;
    196          	dataBuf = psi->dataBuf;
    197          	while (dataCount--)
    198          		*dataBuf++ = GetBits(bsi, 8);
    199          
    200          	return 0;
    201          }
    202          
    203          /**************************************************************************************
    204           * Function:    DecodeProgramConfigElement
    205           *
    206           * Description: decode one PCE
    207           *
    208           * Inputs:      BitStreamInfo struct pointing to start of PCE (14496-3, table 4.4.2) 
    209           *
    210           * Outputs:     filled-in ProgConfigElement struct
    211           *              updated BitStreamInfo struct
    212           *
    213           * Return:      0 if successful, error code (< 0) if error
    214           *
    215           * Notes:       #define KEEP_PCE_COMMENTS to save the comment field of the PCE
    216           *                (otherwise we just skip it in the bitstream, to save memory)
    217           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    218          int DecodeProgramConfigElement(ProgConfigElement *pce, BitStreamInfo *bsi)
    219          {
   \                     raac_DecodeProgramConfigElement:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0140A0E1           MOV      R4,R1
    220          	int i;
    221          
    222          	pce->elemInstTag =   GetBits(bsi, 4);
   \   0000000C   0410A0E3           MOV      R1,#+4
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000018   0000C5E5           STRB     R0,[R5, #+0]
    223          	pce->profile =       GetBits(bsi, 2);
   \   0000001C   0210A0E3           MOV      R1,#+2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000028   0100C5E5           STRB     R0,[R5, #+1]
    224          	pce->sampRateIdx =   GetBits(bsi, 4);
   \   0000002C   0410A0E3           MOV      R1,#+4
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000038   0200C5E5           STRB     R0,[R5, #+2]
    225          	pce->numFCE =        GetBits(bsi, 4);
   \   0000003C   0410A0E3           MOV      R1,#+4
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000048   0300C5E5           STRB     R0,[R5, #+3]
    226          	pce->numSCE =        GetBits(bsi, 4);
   \   0000004C   0410A0E3           MOV      R1,#+4
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000058   0400C5E5           STRB     R0,[R5, #+4]
    227          	pce->numBCE =        GetBits(bsi, 4);
   \   0000005C   0410A0E3           MOV      R1,#+4
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000068   0500C5E5           STRB     R0,[R5, #+5]
    228          	pce->numLCE =        GetBits(bsi, 2);
   \   0000006C   0210A0E3           MOV      R1,#+2
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000078   0600C5E5           STRB     R0,[R5, #+6]
    229          	pce->numADE =        GetBits(bsi, 3);
   \   0000007C   0310A0E3           MOV      R1,#+3
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000088   0700C5E5           STRB     R0,[R5, #+7]
    230          	pce->numCCE =        GetBits(bsi, 4);
   \   0000008C   0410A0E3           MOV      R1,#+4
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000098   0800C5E5           STRB     R0,[R5, #+8]
    231          
    232          	pce->monoMixdown = GetBits(bsi, 1) << 4;	/* present flag */
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   000000A8   0002A0E1           LSL      R0,R0,#+4
   \   000000AC   0900C5E5           STRB     R0,[R5, #+9]
    233          	if (pce->monoMixdown)
   \   000000B0   0900D5E5           LDRB     R0,[R5, #+9]
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0500000A           BEQ      ??raac_DecodeProgramConfigElement_0
    234          		pce->monoMixdown |= GetBits(bsi, 4);	/* element number */
   \   000000BC   0060A0E1           MOV      R6,R0
   \   000000C0   0410A0E3           MOV      R1,#+4
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   000000CC   060080E1           ORR      R0,R0,R6
   \   000000D0   0900C5E5           STRB     R0,[R5, #+9]
    235          
    236          	pce->stereoMixdown = GetBits(bsi, 1) << 4;	/* present flag */
   \                     ??raac_DecodeProgramConfigElement_0:
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   000000E0   0002A0E1           LSL      R0,R0,#+4
   \   000000E4   0A00C5E5           STRB     R0,[R5, #+10]
    237          	if (pce->stereoMixdown)
   \   000000E8   0A00D5E5           LDRB     R0,[R5, #+10]
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   0500000A           BEQ      ??raac_DecodeProgramConfigElement_1
    238          		pce->stereoMixdown  |= GetBits(bsi, 4);	/* element number */
   \   000000F4   0060A0E1           MOV      R6,R0
   \   000000F8   0410A0E3           MOV      R1,#+4
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000104   060080E1           ORR      R0,R0,R6
   \   00000108   0A00C5E5           STRB     R0,[R5, #+10]
    239          
    240          	pce->matrixMixdown = GetBits(bsi, 1) << 4;	/* present flag */
   \                     ??raac_DecodeProgramConfigElement_1:
   \   0000010C   0110A0E3           MOV      R1,#+1
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000118   0002A0E1           LSL      R0,R0,#+4
   \   0000011C   0B00C5E5           STRB     R0,[R5, #+11]
    241          	if (pce->matrixMixdown) {
   \   00000120   0B00D5E5           LDRB     R0,[R5, #+11]
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   0B00000A           BEQ      ??raac_DecodeProgramConfigElement_2
    242          		pce->matrixMixdown  |= GetBits(bsi, 2) << 1;	/* index */
   \   0000012C   0060A0E1           MOV      R6,R0
   \   00000130   0210A0E3           MOV      R1,#+2
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   0000013C   800086E1           ORR      R0,R6,R0, LSL #+1
   \   00000140   0B00C5E5           STRB     R0,[R5, #+11]
    243          		pce->matrixMixdown  |= GetBits(bsi, 1);			/* pseudo-surround enable */
   \   00000144   0B60D5E5           LDRB     R6,[R5, #+11]
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   0400A0E1           MOV      R0,R4
   \   00000150   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000154   060080E1           ORR      R0,R0,R6
   \   00000158   0B00C5E5           STRB     R0,[R5, #+11]
    244          	}
    245          
    246          	for (i = 0; i < pce->numFCE; i++) {
   \                     ??raac_DecodeProgramConfigElement_2:
   \   0000015C   0300D5E5           LDRB     R0,[R5, #+3]
   \   00000160   0060A0E3           MOV      R6,#+0
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   0F00001A           BNE      ??raac_DecodeProgramConfigElement_3
   \   0000016C   110000EA           B        ??raac_DecodeProgramConfigElement_4
    247          		pce->fce[i]  = GetBits(bsi, 1) << 4;	/* is_cpe flag */
   \                     ??raac_DecodeProgramConfigElement_5:
   \   00000170   0110A0E3           MOV      R1,#+1
   \   00000174   0400A0E1           MOV      R0,R4
   \   00000178   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   0000017C   0002A0E1           LSL      R0,R0,#+4
   \   00000180   051086E0           ADD      R1,R6,R5
   \   00000184   0C00C1E5           STRB     R0,[R1, #+12]
    248          		pce->fce[i] |= GetBits(bsi, 4);			/* tag select */
   \   00000188   050086E0           ADD      R0,R6,R5
   \   0000018C   0C70D0E5           LDRB     R7,[R0, #+12]
   \   00000190   0410A0E3           MOV      R1,#+4
   \   00000194   0400A0E1           MOV      R0,R4
   \   00000198   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   0000019C   070080E1           ORR      R0,R0,R7
   \   000001A0   051086E0           ADD      R1,R6,R5
   \   000001A4   0C00C1E5           STRB     R0,[R1, #+12]
    249          	}
   \   000001A8   016086E2           ADD      R6,R6,#+1
   \                     ??raac_DecodeProgramConfigElement_3:
   \   000001AC   0300D5E5           LDRB     R0,[R5, #+3]
   \   000001B0   000056E1           CMP      R6,R0
   \   000001B4   EDFFFFBA           BLT      ??raac_DecodeProgramConfigElement_5
    250          
    251          	for (i = 0; i < pce->numSCE; i++) {
   \                     ??raac_DecodeProgramConfigElement_4:
   \   000001B8   0400D5E5           LDRB     R0,[R5, #+4]
   \   000001BC   0060A0E3           MOV      R6,#+0
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   0F00001A           BNE      ??raac_DecodeProgramConfigElement_6
   \   000001C8   110000EA           B        ??raac_DecodeProgramConfigElement_7
    252          		pce->sce[i]  = GetBits(bsi, 1) << 4;	/* is_cpe flag */
   \                     ??raac_DecodeProgramConfigElement_8:
   \   000001CC   0110A0E3           MOV      R1,#+1
   \   000001D0   0400A0E1           MOV      R0,R4
   \   000001D4   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   000001D8   0002A0E1           LSL      R0,R0,#+4
   \   000001DC   051086E0           ADD      R1,R6,R5
   \   000001E0   1B00C1E5           STRB     R0,[R1, #+27]
    253          		pce->sce[i] |= GetBits(bsi, 4);			/* tag select */
   \   000001E4   050086E0           ADD      R0,R6,R5
   \   000001E8   1B70D0E5           LDRB     R7,[R0, #+27]
   \   000001EC   0410A0E3           MOV      R1,#+4
   \   000001F0   0400A0E1           MOV      R0,R4
   \   000001F4   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   000001F8   070080E1           ORR      R0,R0,R7
   \   000001FC   051086E0           ADD      R1,R6,R5
   \   00000200   1B00C1E5           STRB     R0,[R1, #+27]
    254          	}
   \   00000204   016086E2           ADD      R6,R6,#+1
   \                     ??raac_DecodeProgramConfigElement_6:
   \   00000208   0400D5E5           LDRB     R0,[R5, #+4]
   \   0000020C   000056E1           CMP      R6,R0
   \   00000210   EDFFFFBA           BLT      ??raac_DecodeProgramConfigElement_8
    255          
    256          	for (i = 0; i < pce->numBCE; i++) {
   \                     ??raac_DecodeProgramConfigElement_7:
   \   00000214   0500D5E5           LDRB     R0,[R5, #+5]
   \   00000218   0060A0E3           MOV      R6,#+0
   \   0000021C   000050E3           CMP      R0,#+0
   \   00000220   0F00001A           BNE      ??raac_DecodeProgramConfigElement_9
   \   00000224   110000EA           B        ??raac_DecodeProgramConfigElement_10
    257          		pce->bce[i]  = GetBits(bsi, 1) << 4;	/* is_cpe flag */
   \                     ??raac_DecodeProgramConfigElement_11:
   \   00000228   0110A0E3           MOV      R1,#+1
   \   0000022C   0400A0E1           MOV      R0,R4
   \   00000230   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000234   0002A0E1           LSL      R0,R0,#+4
   \   00000238   051086E0           ADD      R1,R6,R5
   \   0000023C   2A00C1E5           STRB     R0,[R1, #+42]
    258          		pce->bce[i] |= GetBits(bsi, 4);			/* tag select */
   \   00000240   050086E0           ADD      R0,R6,R5
   \   00000244   2A70D0E5           LDRB     R7,[R0, #+42]
   \   00000248   0410A0E3           MOV      R1,#+4
   \   0000024C   0400A0E1           MOV      R0,R4
   \   00000250   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000254   070080E1           ORR      R0,R0,R7
   \   00000258   051086E0           ADD      R1,R6,R5
   \   0000025C   2A00C1E5           STRB     R0,[R1, #+42]
    259          	}
   \   00000260   016086E2           ADD      R6,R6,#+1
   \                     ??raac_DecodeProgramConfigElement_9:
   \   00000264   0500D5E5           LDRB     R0,[R5, #+5]
   \   00000268   000056E1           CMP      R6,R0
   \   0000026C   EDFFFFBA           BLT      ??raac_DecodeProgramConfigElement_11
    260          
    261          	for (i = 0; i < pce->numLCE; i++)
   \                     ??raac_DecodeProgramConfigElement_10:
   \   00000270   0600D5E5           LDRB     R0,[R5, #+6]
   \   00000274   0060A0E3           MOV      R6,#+0
   \   00000278   000050E3           CMP      R0,#+0
   \   0000027C   0600001A           BNE      ??raac_DecodeProgramConfigElement_12
   \   00000280   080000EA           B        ??raac_DecodeProgramConfigElement_13
    262          		pce->lce[i] = GetBits(bsi, 4);			/* tag select */
   \                     ??raac_DecodeProgramConfigElement_14:
   \   00000284   0410A0E3           MOV      R1,#+4
   \   00000288   0400A0E1           MOV      R0,R4
   \   0000028C   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000290   051086E0           ADD      R1,R6,R5
   \   00000294   3900C1E5           STRB     R0,[R1, #+57]
   \   00000298   016086E2           ADD      R6,R6,#+1
   \                     ??raac_DecodeProgramConfigElement_12:
   \   0000029C   0600D5E5           LDRB     R0,[R5, #+6]
   \   000002A0   000056E1           CMP      R6,R0
   \   000002A4   F6FFFFBA           BLT      ??raac_DecodeProgramConfigElement_14
    263          
    264          	for (i = 0; i < pce->numADE; i++)
   \                     ??raac_DecodeProgramConfigElement_13:
   \   000002A8   0700D5E5           LDRB     R0,[R5, #+7]
   \   000002AC   0060A0E3           MOV      R6,#+0
   \   000002B0   000050E3           CMP      R0,#+0
   \   000002B4   0600001A           BNE      ??raac_DecodeProgramConfigElement_15
   \   000002B8   080000EA           B        ??raac_DecodeProgramConfigElement_16
    265          		pce->ade[i] = GetBits(bsi, 4);			/* tag select */
   \                     ??raac_DecodeProgramConfigElement_17:
   \   000002BC   0410A0E3           MOV      R1,#+4
   \   000002C0   0400A0E1           MOV      R0,R4
   \   000002C4   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   000002C8   051086E0           ADD      R1,R6,R5
   \   000002CC   3C00C1E5           STRB     R0,[R1, #+60]
   \   000002D0   016086E2           ADD      R6,R6,#+1
   \                     ??raac_DecodeProgramConfigElement_15:
   \   000002D4   0700D5E5           LDRB     R0,[R5, #+7]
   \   000002D8   000056E1           CMP      R6,R0
   \   000002DC   F6FFFFBA           BLT      ??raac_DecodeProgramConfigElement_17
    266          
    267          	for (i = 0; i < pce->numCCE; i++) {
   \                     ??raac_DecodeProgramConfigElement_16:
   \   000002E0   0800D5E5           LDRB     R0,[R5, #+8]
   \   000002E4   0060A0E3           MOV      R6,#+0
   \   000002E8   000050E3           CMP      R0,#+0
   \   000002EC   0F00001A           BNE      ??raac_DecodeProgramConfigElement_18
   \   000002F0   110000EA           B        ??raac_DecodeProgramConfigElement_19
    268          		pce->cce[i]  = GetBits(bsi, 1) << 4;	/* independent/dependent flag */
   \                     ??raac_DecodeProgramConfigElement_20:
   \   000002F4   0110A0E3           MOV      R1,#+1
   \   000002F8   0400A0E1           MOV      R0,R4
   \   000002FC   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000300   0002A0E1           LSL      R0,R0,#+4
   \   00000304   051086E0           ADD      R1,R6,R5
   \   00000308   4300C1E5           STRB     R0,[R1, #+67]
    269          		pce->cce[i] |= GetBits(bsi, 4);			/* tag select */
   \   0000030C   050086E0           ADD      R0,R6,R5
   \   00000310   4370D0E5           LDRB     R7,[R0, #+67]
   \   00000314   0410A0E3           MOV      R1,#+4
   \   00000318   0400A0E1           MOV      R0,R4
   \   0000031C   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000320   070080E1           ORR      R0,R0,R7
   \   00000324   051086E0           ADD      R1,R6,R5
   \   00000328   4300C1E5           STRB     R0,[R1, #+67]
    270          	}
   \   0000032C   016086E2           ADD      R6,R6,#+1
   \                     ??raac_DecodeProgramConfigElement_18:
   \   00000330   0800D5E5           LDRB     R0,[R5, #+8]
   \   00000334   000056E1           CMP      R6,R0
   \   00000338   EDFFFFBA           BLT      ??raac_DecodeProgramConfigElement_20
    271          
    272          
    273          	ByteAlignBitstream(bsi);
   \                     ??raac_DecodeProgramConfigElement_19:
   \   0000033C   0400A0E1           MOV      R0,R4
   \   00000340   ........           _BLF     raac_ByteAlignBitstream,??raac_ByteAlignBitstream??rA
    274          
    275          #ifdef KEEP_PCE_COMMENTS
    276          	pce->commentBytes = GetBits(bsi, 8);
    277          	for (i = 0; i < pce->commentBytes; i++)
    278          		pce->commentField[i] = GetBits(bsi, 8);
    279          #else
    280          	/* eat comment bytes and throw away */
    281          	i = GetBits(bsi, 8);
   \   00000344   0810A0E3           MOV      R1,#+8
   \   00000348   0400A0E1           MOV      R0,R4
   \   0000034C   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000350   0050A0E1           MOV      R5,R0
   \   00000354   020000EA           B        ??raac_DecodeProgramConfigElement_21
    282          	while (i--)
    283          		GetBits(bsi, 8);
   \                     ??raac_DecodeProgramConfigElement_22:
   \   00000358   0810A0E3           MOV      R1,#+8
   \   0000035C   0400A0E1           MOV      R0,R4
   \   00000360   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \                     ??raac_DecodeProgramConfigElement_21:
   \   00000364   0500A0E1           MOV      R0,R5
   \   00000368   015040E2           SUB      R5,R0,#+1
   \   0000036C   000050E3           CMP      R0,#+0
   \   00000370   F8FFFF1A           BNE      ??raac_DecodeProgramConfigElement_22
    284          #endif
    285          
    286          	return 0;
   \   00000374   F080BDE8           POP      {R4-R7,PC}       ;; return
    287          }
    288          
    289          /**************************************************************************************
    290           * Function:    DecodeFillElement
    291           *
    292           * Description: decode one fill element
    293           *
    294           * Inputs:      BitStreamInfo struct pointing to start of fill element
    295           *                (14496-3, table 4.4.11) 
    296           *
    297           * Outputs:     updated element instance tag
    298           *              unpacked extension payload
    299           *
    300           * Return:      0 if successful, -1 if error
    301           **************************************************************************************/
    302          static int DecodeFillElement(AACDecInfo *aacDecInfo, BitStreamInfo *bsi)
    303          {
    304          	unsigned int fillCount;
    305          	unsigned char *fillBuf;
    306          	PSInfoBase *psi;
    307          
    308          	/* validate pointers */
    309          	if (!aacDecInfo || !aacDecInfo->psInfoBase)
    310          		return -1;
    311          	psi = (PSInfoBase *)(aacDecInfo->psInfoBase);
    312          
    313          	fillCount = GetBits(bsi, 4);
    314          	if (fillCount == 15)
    315          		fillCount += (GetBits(bsi, 8) - 1);
    316          
    317          	psi->fillCount = fillCount;
    318          	fillBuf = psi->fillBuf;
    319          	while (fillCount--)
    320          		*fillBuf++ = GetBits(bsi, 8);
    321          
    322          	aacDecInfo->currInstTag = -1;	/* fill elements don't have instance tag */
    323          	aacDecInfo->fillExtType = 0;
    324          
    325          #ifdef AAC_ENABLE_SBR
    326          	/* check for SBR 
    327          	 * aacDecInfo->sbrEnabled is sticky (reset each raw_data_block), so for multichannel 
    328          	 *    need to verify that all SCE/CPE/ICCE have valid SBR fill element following, and 
    329          	 *    must upsample by 2 for LFE
    330          	 */
    331          	if (psi->fillCount > 0) {
    332          		aacDecInfo->fillExtType = (int)((psi->fillBuf[0] >> 4) & 0x0f);
    333          		if (aacDecInfo->fillExtType == EXT_SBR_DATA || aacDecInfo->fillExtType == EXT_SBR_DATA_CRC)
    334          			aacDecInfo->sbrEnabled = 1;
    335          	}
    336          #endif
    337          
    338          	aacDecInfo->fillBuf = psi->fillBuf;
    339          	aacDecInfo->fillCount = psi->fillCount;
    340          
    341          	return 0;
    342          }
    343          
    344          /**************************************************************************************
    345           * Function:    DecodeNextElement
    346           *
    347           * Description: decode next syntactic element in AAC frame
    348           *
    349           * Inputs:      valid AACDecInfo struct
    350           *              double pointer to buffer containing next element
    351           *              pointer to bit offset
    352           *              pointer to number of valid bits remaining in buf
    353           *
    354           * Outputs:     type of element decoded (aacDecInfo->currBlockID)
    355           *              type of element decoded last time (aacDecInfo->prevBlockID)
    356           *              updated aacDecInfo state, depending on which element was decoded
    357           *              updated buffer pointer
    358           *              updated bit offset
    359           *              updated number of available bits
    360           *
    361           * Return:      0 if successful, error code (< 0) if error
    362           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    363          int DecodeNextElement(AACDecInfo *aacDecInfo, unsigned char **buf, int *bitOffset, int *bitsAvail)
    364          {
   \                     raac_DecodeNextElement:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0060A0E1           MOV      R6,R0
    365          	int err, bitsUsed;
    366          	PSInfoBase *psi;
    367          	BitStreamInfo bsi;
    368          
    369          	/* validate pointers */
    370          	if (!aacDecInfo || !aacDecInfo->psInfoBase)
   \   0000000C   000056E3           CMP      R6,#+0
   \   00000010   00809615           LDRNE    R8,[R6, #+0]
   \   00000014   0140A0E1           MOV      R4,R1
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   00005813           CMPNE    R8,#+0
    371          		return ERR_AAC_NULL_POINTER;
   \   00000020   0100E003           MVNEQ    R0,#+1
   \   00000024   8600000A           BEQ      ??raac_DecodeNextElement_1
    372          	psi = (PSInfoBase *)(aacDecInfo->psInfoBase);
    373          
    374          	/* init bitstream reader */
    375          	SetBitstreamPointer(&bsi, (*bitsAvail + 7) >> 3, *buf);
   \   00000028   000093E5           LDR      R0,[R3, #+0]
   \   0000002C   002094E5           LDR      R2,[R4, #+0]
   \   00000030   070080E2           ADD      R0,R0,#+7
   \   00000034   C011A0E1           ASR      R1,R0,#+3
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     raac_SetBitstreamPointer,??raac_SetBitstreamPointer??rA
    376          	GetBits(&bsi, *bitOffset);
   \   00000040   001095E5           LDR      R1,[R5, #+0]
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   ........           _BLF     raac_GetBits,??raac_GetBits??rA
    377          
    378          	/* read element ID (save last ID for SBR purposes) */
    379          	aacDecInfo->prevBlockID = aacDecInfo->currBlockID;
   \   0000004C   280096E5           LDR      R0,[R6, #+40]
    380          	aacDecInfo->currBlockID = GetBits(&bsi, NUM_SYN_ID_BITS);
   \   00000050   0310A0E3           MOV      R1,#+3
   \   00000054   240086E5           STR      R0,[R6, #+36]
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000060   280086E5           STR      R0,[R6, #+40]
    381          
    382          	/* set defaults (could be overwritten by DecodeXXXElement(), depending on currBlockID) */
    383          	psi->commonWin = 0;
   \   00000064   0070A0E3           MOV      R7,#+0
   \   00000068   F07888E5           STR      R7,[R8, #+2288]
    384           
    385          	err = 0;
    386          	switch (aacDecInfo->currBlockID) {
   \   0000006C   281096E5           LDR      R1,[R6, #+40]
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   060051E3           CMP      R1,#+6
   \   00000078   2100008A           BHI      ??raac_DecodeNextElement_2
   \   0000007C   012F8FE2           ADR      R2,??raac_DecodeNextElement_0
   \   00000080   0120D2E7           LDRB     R2,[R2, R1]
   \   00000084   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??raac_DecodeNextElement_0:
   \   00000088   011B1E01           DC8      +1,+27,+30,+1
   \   0000008C   23494D00           DC8      +35,+73,+77,+0
    387          	case AAC_ID_SCE:
    388          		err = DecodeSingleChannelElement(aacDecInfo, &bsi);
   \                     ??raac_DecodeNextElement_3:
   \   00000090   000096E5           LDR      R0,[R6, #+0]
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   1B00000A           BEQ      ??raac_DecodeNextElement_4
   \   0000009C   0410A0E3           MOV      R1,#+4
   \   000000A0   0D00A0E1           MOV      R0,SP
   \   000000A4   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   000000A8   2C0086E5           STR      R0,[R6, #+44]
    389          		break;
    390          	case AAC_ID_CPE:
    391          		err = DecodeChannelPairElement(aacDecInfo, &bsi);
    392          		break;
    393          	case AAC_ID_CCE:
    394          		/* TODO - implement CCE decoding */
    395          		break;
    396          	case AAC_ID_LFE:
    397          		err = DecodeLFEChannelElement(aacDecInfo, &bsi);
    398          		break;
    399          	case AAC_ID_DSE:
    400          		err = DecodeDataStreamElement(aacDecInfo, &bsi);
    401          		break;
    402          	case AAC_ID_PCE:
    403          		err = DecodeProgramConfigElement(psi->pce + 0, &bsi);
    404          		break;
    405          	case AAC_ID_FIL:
    406          		err = DecodeFillElement(aacDecInfo, &bsi);
    407          		break;
    408          	case AAC_ID_END:
    409          		break;
    410          	}
    411          	if (err)
    412          		return ERR_AAC_SYNTAX_ELEMENT;
    413          
    414          	/* update bitstream reader */
    415          	bitsUsed = CalcBitsUsed(&bsi, *buf, *bitOffset);
   \                     ??raac_DecodeNextElement_5:
   \   000000AC   002095E5           LDR      R2,[R5, #+0]
   \   000000B0   001094E5           LDR      R1,[R4, #+0]
   \   000000B4   0D00A0E1           MOV      R0,SP
   \   000000B8   ........           _BLF     raac_CalcBitsUsed,??raac_CalcBitsUsed??rA
    416          	*buf += (bitsUsed + *bitOffset) >> 3;
   \   000000BC   001095E5           LDR      R1,[R5, #+0]
   \   000000C0   002094E5           LDR      R2,[R4, #+0]
   \   000000C4   001081E0           ADD      R1,R1,R0
   \   000000C8   C12182E0           ADD      R2,R2,R1, ASR #+3
   \   000000CC   002084E5           STR      R2,[R4, #+0]
    417          	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
   \   000000D0   071001E2           AND      R1,R1,#0x7
   \   000000D4   001085E5           STR      R1,[R5, #+0]
    418          	*bitsAvail -= bitsUsed;
   \   000000D8   10109DE5           LDR      R1,[SP, #+16]
   \   000000DC   001091E5           LDR      R1,[R1, #+0]
   \   000000E0   000051E0           SUBS     R0,R1,R0
   \   000000E4   10109DE5           LDR      R1,[SP, #+16]
   \   000000E8   000081E5           STR      R0,[R1, #+0]
    419          
    420          	if (*bitsAvail < 0)
   \   000000EC   0000A053           MOVPL    R0,#+0
    421          		return ERR_AAC_INDATA_UNDERFLOW;
   \   000000F0   0000E043           MVNMI    R0,#+0
   \   000000F4   050000EA           B        ??raac_DecodeNextElement_6
   \                     ??raac_DecodeNextElement_7:
   \   000000F8   0D10A0E1           MOV      R1,SP
   \   000000FC   0600A0E1           MOV      R0,R6
   \   00000100   ........           BL       DecodeChannelPairElement
   \                     ??raac_DecodeNextElement_2:
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   E7FFFF0A           BEQ      ??raac_DecodeNextElement_5
   \                     ??raac_DecodeNextElement_4:
   \   0000010C   0700E0E3           MVN      R0,#+7
   \                     ??raac_DecodeNextElement_6:
   \   00000110   14D08DE2           ADD      SP,SP,#+20
   \   00000114   F08FBDE8           POP      {R4-R11,PC}
   \                     ??raac_DecodeNextElement_8:
   \   00000118   008096E5           LDR      R8,[R6, #+0]
   \   0000011C   000058E3           CMP      R8,#+0
   \   00000120   F9FFFF0A           BEQ      ??raac_DecodeNextElement_4
   \   00000124   0410A0E3           MOV      R1,#+4
   \   00000128   0D00A0E1           MOV      R0,SP
   \   0000012C   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000130   2C0086E5           STR      R0,[R6, #+44]
   \   00000134   0110A0E3           MOV      R1,#+1
   \   00000138   0D00A0E1           MOV      R0,SP
   \   0000013C   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000140   0060A0E1           MOV      R6,R0
   \   00000144   0810A0E3           MOV      R1,#+8
   \   00000148   0D00A0E1           MOV      R0,SP
   \   0000014C   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000150   0070A0E1           MOV      R7,R0
   \   00000154   FF0057E3           CMP      R7,#+255
   \   00000158   0300001A           BNE      ??raac_DecodeNextElement_9
   \   0000015C   0810A0E3           MOV      R1,#+8
   \   00000160   0D00A0E1           MOV      R0,SP
   \   00000164   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000168   FF7080E2           ADD      R7,R0,#+255
   \                     ??raac_DecodeNextElement_9:
   \   0000016C   000056E3           CMP      R6,#+0
   \   00000170   0100000A           BEQ      ??raac_DecodeNextElement_10
   \   00000174   0D00A0E1           MOV      R0,SP
   \   00000178   ........           _BLF     raac_ByteAlignBitstream,??raac_ByteAlignBitstream??rA
   \                     ??raac_DecodeNextElement_10:
   \   0000017C   587588E5           STR      R7,[R8, #+1368]
   \   00000180   5C00A0E3           MOV      R0,#+92
   \   00000184   500E80E3           ORR      R0,R0,#0x500
   \   00000188   086080E0           ADD      R6,R0,R8
   \                     ??raac_DecodeNextElement_11:
   \   0000018C   0700A0E1           MOV      R0,R7
   \   00000190   017040E2           SUB      R7,R0,#+1
   \   00000194   000050E3           CMP      R0,#+0
   \   00000198   C3FFFF0A           BEQ      ??raac_DecodeNextElement_5
   \   0000019C   0810A0E3           MOV      R1,#+8
   \   000001A0   0D00A0E1           MOV      R0,SP
   \   000001A4   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   000001A8   ........           STRB     R0,[R6], #+1
   \   000001AC   F6FFFFEA           B        ??raac_DecodeNextElement_11
   \                     ??raac_DecodeNextElement_12:
   \   000001B0   0D10A0E1           MOV      R1,SP
   \   000001B4   380088E2           ADD      R0,R8,#+56
   \   000001B8   ........           BL       raac_DecodeProgramConfigElement
   \   000001BC   D0FFFFEA           B        ??raac_DecodeNextElement_2
   \                     ??raac_DecodeNextElement_13:
   \   000001C0   008096E5           LDR      R8,[R6, #+0]
   \   000001C4   000058E3           CMP      R8,#+0
   \   000001C8   CFFFFF0A           BEQ      ??raac_DecodeNextElement_4
   \   000001CC   0410A0E3           MOV      R1,#+4
   \   000001D0   0D00A0E1           MOV      R0,SP
   \   000001D4   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   000001D8   00B0A0E1           MOV      R11,R0
   \   000001DC   0F005BE3           CMP      R11,#+15
   \   000001E0   0300001A           BNE      ??raac_DecodeNextElement_14
   \   000001E4   0810A0E3           MOV      R1,#+8
   \   000001E8   0D00A0E1           MOV      R0,SP
   \   000001EC   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   000001F0   0EB080E2           ADD      R11,R0,#+14
   \                     ??raac_DecodeNextElement_14:
   \   000001F4   5CB788E5           STR      R11,[R8, #+1884]
   \   000001F8   769EA0E3           MOV      R9,#+1888
   \   000001FC   08A089E0           ADD      R10,R9,R8
   \   00000200   030000EA           B        ??raac_DecodeNextElement_15
   \                     ??raac_DecodeNextElement_16:
   \   00000204   0810A0E3           MOV      R1,#+8
   \   00000208   0D00A0E1           MOV      R0,SP
   \   0000020C   ........           _BLF     raac_GetBits,??raac_GetBits??rA
   \   00000210   ........           STRB     R0,[R10], #+1
   \                     ??raac_DecodeNextElement_15:
   \   00000214   0B00A0E1           MOV      R0,R11
   \   00000218   01B040E2           SUB      R11,R0,#+1
   \   0000021C   000050E3           CMP      R0,#+0
   \   00000220   F7FFFF1A           BNE      ??raac_DecodeNextElement_16
   \   00000224   0700E0E1           MVN      R0,R7
   \   00000228   2C0086E5           STR      R0,[R6, #+44]
   \   0000022C   207086E5           STR      R7,[R6, #+32]
   \   00000230   080089E0           ADD      R0,R9,R8
   \   00000234   180086E5           STR      R0,[R6, #+24]
   \   00000238   5C0798E5           LDR      R0,[R8, #+1884]
   \   0000023C   1C0086E5           STR      R0,[R6, #+28]
   \   00000240   99FFFFEA           B        ??raac_DecodeNextElement_5
   \                     ??raac_DecodeNextElement_1:
   \   00000244   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000248   F08FBDE8           POP      {R4-R11,PC}      ;; return
    422          
    423          	return ERR_AAC_NONE;
    424          }
    425          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     DecodeChannelPairElement          32
     raac_DecodeNextElement            56
     raac_DecodeProgramConfigElement
                                       20


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     DecodeChannelPairElement        272
     raac_DecodeProgramConfigElement
                                     888
     raac_DecodeNextElement          588
      Others                          72

 
 1 820 bytes in segment CODE
 
 1 748 bytes of CODE memory (+ 72 bytes shared)

Errors: none
Warnings: none
