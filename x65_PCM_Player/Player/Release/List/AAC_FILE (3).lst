##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Feb/2012  15:39:26 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDE #
#                       C\AAC_FILE (3).c                                     #
#    Command line    =  "D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACD #
#                       EC\AAC_FILE (3).c" -D NDEBUG -lC                     #
#                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\ #
#                       Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player #
#                       \Player\Release\Obj\ -s9 --cpu_mode arm --endian     #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Program              #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude       #
#                       swilib.h -I "D:\Program Files\IAR\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=16                                #
#    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\AAC_FILE (3).lst                                 #
#    Object file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\AAC_FILE (3).r79                                  #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDEC\AAC_FILE (3).c
      1          /* ***** BEGIN LICENSE BLOCK *****  
      2           * Source last modified: $Id: sbrhfgen.c,v 1.1 2005/02/26 01:47:35 jrecker Exp $ 
      3           *   
      4           * Portions Copyright (c) 1995-2005 RealNetworks, Inc. All Rights Reserved.  
      5           *       
      6           * The contents of this file, and the files included with this file, 
      7           * are subject to the current version of the RealNetworks Public 
      8           * Source License (the "RPSL") available at 
      9           * http://www.helixcommunity.org/content/rpsl unless you have licensed 
     10           * the file under the current version of the RealNetworks Community 
     11           * Source License (the "RCSL") available at 
     12           * http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
     13           * will apply. You may also obtain the license terms directly from 
     14           * RealNetworks.  You may not use this file except in compliance with 
     15           * the RPSL or, if you have a valid RCSL with RealNetworks applicable 
     16           * to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
     17           * the rights, obligations and limitations governing use of the 
     18           * contents of the file. 
     19           *   
     20           * This file is part of the Helix DNA Technology. RealNetworks is the 
     21           * developer of the Original Code and owns the copyrights in the 
     22           * portions it created. 
     23           *   
     24           * This file, and the files included with this file, is distributed 
     25           * and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY 
     26           * KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS 
     27           * ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES 
     28           * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET 
     29           * ENJOYMENT OR NON-INFRINGEMENT. 
     30           *  
     31           * Technology Compatibility Kit Test Suite(s) Location:  
     32           *    http://www.helixcommunity.org/content/tck  
     33           *  
     34           * Contributor(s):  
     35           *   
     36           * ***** END LICENSE BLOCK ***** */  
     37          
     38          /**************************************************************************************
     39           * Fixed-point HE-AAC decoder
     40           * Jon Recker (jrecker@real.com)
     41           * February 2005
     42           *
     43           * sbrhfgen.c - high frequency generation for SBR
     44           **************************************************************************************/
     45          
     46          #include "sbr_aac.h"
     47          #include "assembly_aac.h"
     48          
     49          #define FBITS_LPCOEFS	29	/* Q29 for range of (-4, 4) */
     50          #define MAG_16			(16 * (1 << (32 - (2*(32-FBITS_LPCOEFS)))))		/* i.e. 16 in Q26 format */
     51          #define RELAX_COEF		0x7ffff79c	/* 1.0 / (1.0 + 1e-6), Q31 */
     52          
     53          /* newBWTab[prev invfMode][curr invfMode], format = Q31 (table 4.158) 
     54           * sample file which uses all of these: al_sbr_sr_64_2_fsaac32.aac 
     55           */

   \                                 In segment DATA_C, align 4, align-sorted
     56          static const int newBWTab[4][4] = {
   \                     newBWTab:
   \   00000000   00000000CDCC       DC32 0, 1288490189, 1932735283, 2104533975, 1288490189, 1610612736
   \              CC4C33333373
   \              D7A3707DCDCC
   \              CC4C00000060
   \   00000018   33333373D7A3       DC32 1932735283, 2104533975, 0, 1610612736, 1932735283, 2104533975, 0
   \              707D00000000
   \              000000603333
   \              3373D7A3707D
   \              00000000    
   \   00000034   000000603333       DC32 1610612736, 1932735283, 2104533975
   \              3373D7A3707D
     57          	{0x00000000, 0x4ccccccd, 0x73333333, 0x7d70a3d7},
     58          	{0x4ccccccd, 0x60000000, 0x73333333, 0x7d70a3d7},
     59          	{0x00000000, 0x60000000, 0x73333333, 0x7d70a3d7},
     60          	{0x00000000, 0x60000000, 0x73333333, 0x7d70a3d7},
     61          };
     62          
     63          /**************************************************************************************
     64           * Function:    CVKernel1
     65           *
     66           * Description: kernel of covariance matrix calculation for p01, p11, p12, p22
     67           *
     68           * Inputs:      buffer of low-freq samples, starting at time index = 0, 
     69           *                freq index = patch subband
     70           *
     71           * Outputs:     64-bit accumulators for p01re, p01im, p12re, p12im, p11re, p22re
     72           *                stored in accBuf
     73           *
     74           * Return:      none
     75           *
     76           * Notes:       this is carefully written to be efficient on ARM
     77           *              use the assembly code version in sbrcov.s when building for ARM!
     78           **************************************************************************************/
     79          #if (defined (__arm) && defined (__ARMCC_VERSION)) || (defined (_WIN32) && defined (_WIN32_WCE) && defined (ARM)) || (defined(__GNUC__) && defined(__arm__))
     80          void CVKernel1(int *XBuf, int *accBuf);
     81          #else
     82          void CVKernel1(int *XBuf, int *accBuf)
     83          { return;
     84          	U64 p01re, p01im, p12re, p12im, p11re, p22re;
     85          	int n, x0re, x0im, x1re, x1im;
     86          
     87          	x0re = XBuf[0];
     88          	x0im = XBuf[1];
     89          	XBuf += (2*64);
     90          	x1re = XBuf[0];
     91          	x1im = XBuf[1];
     92          	XBuf += (2*64);
     93          
     94          	p01re.w64 = p01im.w64 = 0;
     95          	p12re.w64 = p12im.w64 = 0;
     96          	p11re.w64 = 0;
     97          	p22re.w64 = 0;
     98          
     99          	p12re.w64 = MADD64(p12re.w64,  x1re, x0re);
    100          	p12re.w64 = MADD64(p12re.w64,  x1im, x0im);
    101          	p12im.w64 = MADD64(p12im.w64,  x0re, x1im);
    102          	p12im.w64 = MADD64(p12im.w64, -x0im, x1re);
    103          	p22re.w64 = MADD64(p22re.w64,  x0re, x0re);
    104          	p22re.w64 = MADD64(p22re.w64,  x0im, x0im);
    105          	for (n = (NUM_TIME_SLOTS*SAMPLES_PER_SLOT + 6); n != 0; n--) {
    106          		/* 4 input, 3*2 acc, 1 ptr, 1 loop counter = 12 registers (use same for x0im, -x0im) */
    107          		x0re = x1re;
    108          		x0im = x1im;
    109          		x1re = XBuf[0];
    110          		x1im = XBuf[1];
    111          
    112          		p01re.w64 = MADD64(p01re.w64,  x1re, x0re);
    113          		p01re.w64 = MADD64(p01re.w64,  x1im, x0im);
    114          		p01im.w64 = MADD64(p01im.w64,  x0re, x1im);
    115          		p01im.w64 = MADD64(p01im.w64, -x0im, x1re);
    116          		p11re.w64 = MADD64(p11re.w64,  x0re, x0re);
    117          		p11re.w64 = MADD64(p11re.w64,  x0im, x0im);
    118          
    119          		XBuf += (2*64);
    120          	}
    121          	/* these can be derived by slight changes to account for boundary conditions */
    122          	p12re.w64 += p01re.w64;
    123          	p12re.w64 = MADD64(p12re.w64, x1re, -x0re);
    124          	p12re.w64 = MADD64(p12re.w64, x1im, -x0im);
    125          	p12im.w64 += p01im.w64;
    126          	p12im.w64 = MADD64(p12im.w64, x0re, -x1im);
    127          	p12im.w64 = MADD64(p12im.w64, x0im,  x1re);
    128          	p22re.w64 += p11re.w64;
    129          	p22re.w64 = MADD64(p22re.w64, x0re, -x0re);
    130          	p22re.w64 = MADD64(p22re.w64, x0im, -x0im);
    131          
    132          	accBuf[0]  = p01re.r.lo32;	accBuf[1]  = p01re.r.hi32;
    133          	accBuf[2]  = p01im.r.lo32;	accBuf[3]  = p01im.r.hi32;
    134          	accBuf[4]  = p11re.r.lo32;	accBuf[5]  = p11re.r.hi32;
    135          	accBuf[6]  = p12re.r.lo32;	accBuf[7]  = p12re.r.hi32;
    136          	accBuf[8]  = p12im.r.lo32;	accBuf[9]  = p12im.r.hi32;
    137          	accBuf[10] = p22re.r.lo32;	accBuf[11] = p22re.r.hi32;
    138          }
    139          #endif
    140          
    141          /**************************************************************************************
    142           * Function:    CalcCovariance1
    143           *
    144           * Description: calculate covariance matrix for p01, p12, p11, p22 (4.6.18.6.2)
    145           *
    146           * Inputs:      buffer of low-freq samples, starting at time index 0, 
    147           *                freq index = patch subband
    148           *
    149           * Outputs:     complex covariance elements p01re, p01im, p12re, p12im, p11re, p22re
    150           *                (p11im = p22im = 0)
    151           *              format = integer (Q0) * 2^N, with scalefactor N >= 0
    152           *
    153           * Return:      scalefactor N
    154           *
    155           * Notes:       outputs are normalized to have 1 GB (sign in at least top 2 bits)
    156           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    157          static int CalcCovariance1(int *XBuf, int *p01reN, int *p01imN, int *p12reN, int *p12imN, int *p11reN, int *p22reN)
    158          {
   \                     CalcCovariance1:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
   \   00000004   60D04DE2           SUB      SP,SP,#+96
    159          	int accBuf[2*6];
    160          	int n, z, s, loShift, hiShift, gbMask;
    161          	U64 p01re, p01im, p12re, p12im, p11re, p22re;
    162          
    163          	CVKernel1(XBuf, accBuf);
   \   00000008   30108DE2           ADD      R1,SP,#+48
   \   0000000C   ........           _BLF     raac_CVKernel1,??raac_CVKernel1??rA
    164          	p01re.r.lo32 = accBuf[0];	p01re.r.hi32 = accBuf[1];
   \   00000010   30109DE5           LDR      R1,[SP, #+48]
   \   00000014   00108DE5           STR      R1,[SP, #+0]
   \   00000018   34A09DE5           LDR      R10,[SP, #+52]
   \   0000001C   04A08DE5           STR      R10,[SP, #+4]
    165          	p01im.r.lo32 = accBuf[2];	p01im.r.hi32 = accBuf[3];
   \   00000020   38109DE5           LDR      R1,[SP, #+56]
    166          	p11re.r.lo32 = accBuf[4];	p11re.r.hi32 = accBuf[5];
    167          	p12re.r.lo32 = accBuf[6];	p12re.r.hi32 = accBuf[7];
    168          	p12im.r.lo32 = accBuf[8];	p12im.r.hi32 = accBuf[9];
    169          	p22re.r.lo32 = accBuf[10];	p22re.r.hi32 = accBuf[11];
    170          
    171          	/* 64-bit accumulators now have 2*FBITS_OUT_QMFA fraction bits
    172          	 * want to scale them down to integers (32-bit signed, Q0)
    173          	 *   with scale factor of 2^n, n >= 0
    174          	 * leave 2 GB's for calculating determinant, so take top 30 non-zero bits
    175          	 */
    176          	gbMask  = ((p01re.r.hi32) ^ (p01re.r.hi32 >> 31)) | ((p01im.r.hi32) ^ (p01im.r.hi32 >> 31));
    177          	gbMask |= ((p12re.r.hi32) ^ (p12re.r.hi32 >> 31)) | ((p12im.r.hi32) ^ (p12im.r.hi32 >> 31));
    178          	gbMask |= ((p11re.r.hi32) ^ (p11re.r.hi32 >> 31)) | ((p22re.r.hi32) ^ (p22re.r.hi32 >> 31));
    179          	if (gbMask == 0) {
   \   00000024   CA5FA0E1           ASR      R5,R10,#+31
   \   00000028   08108DE5           STR      R1,[SP, #+8]
   \   0000002C   3C209DE5           LDR      R2,[SP, #+60]
   \   00000030   0AB025E0           EOR      R11,R5,R10
   \   00000034   0C208DE5           STR      R2,[SP, #+12]
   \   00000038   40109DE5           LDR      R1,[SP, #+64]
   \   0000003C   C26FA0E1           ASR      R6,R2,#+31
   \   00000040   20108DE5           STR      R1,[SP, #+32]
   \   00000044   44309DE5           LDR      R3,[SP, #+68]
   \   00000048   02E026E0           EOR      LR,R6,R2
   \   0000004C   24308DE5           STR      R3,[SP, #+36]
   \   00000050   48109DE5           LDR      R1,[SP, #+72]
   \   00000054   C39FA0E1           ASR      R9,R3,#+31
   \   00000058   10108DE5           STR      R1,[SP, #+16]
   \   0000005C   4CC09DE5           LDR      R12,[SP, #+76]
   \   00000060   0BB08EE1           ORR      R11,LR,R11
   \   00000064   14C08DE5           STR      R12,[SP, #+20]
   \   00000068   50109DE5           LDR      R1,[SP, #+80]
   \   0000006C   CC7FA0E1           ASR      R7,R12,#+31
   \   00000070   18108DE5           STR      R1,[SP, #+24]
   \   00000074   54409DE5           LDR      R4,[SP, #+84]
   \   00000078   0CE027E0           EOR      LR,R7,R12
   \   0000007C   1C408DE5           STR      R4,[SP, #+28]
   \   00000080   58109DE5           LDR      R1,[SP, #+88]
   \   00000084   C48FA0E1           ASR      R8,R4,#+31
   \   00000088   28108DE5           STR      R1,[SP, #+40]
   \   0000008C   5C009DE5           LDR      R0,[SP, #+92]
   \   00000090   0BB08EE1           ORR      R11,LR,R11
   \   00000094   2C008DE5           STR      R0,[SP, #+44]
   \   00000098   C01FA0E1           ASR      R1,R0,#+31
   \   0000009C   04E028E0           EOR      LR,R8,R4
   \   000000A0   0BB08EE1           ORR      R11,LR,R11
   \   000000A4   03E029E0           EOR      LR,R9,R3
   \   000000A8   0BB08EE1           ORR      R11,LR,R11
   \   000000AC   00E021E0           EOR      LR,R1,R0
   \   000000B0   0BB09EE1           ORRS     R11,LR,R11
   \   000000B4   2800001A           BNE      ??CalcCovariance1_0
    180          		s = p01re.r.hi32 >> 31; gbMask  = (p01re.r.lo32 ^ s) - s;
   \   000000B8   00B09DE5           LDR      R11,[SP, #+0]
   \   000000BC   0BB025E0           EOR      R11,R5,R11
   \   000000C0   05504BE0           SUB      R5,R11,R5
    181          		s = p01im.r.hi32 >> 31; gbMask |= (p01im.r.lo32 ^ s) - s;
   \   000000C4   08B09DE5           LDR      R11,[SP, #+8]
   \   000000C8   0BB026E0           EOR      R11,R6,R11
   \   000000CC   06604BE0           SUB      R6,R11,R6
   \   000000D0   055086E1           ORR      R5,R6,R5
    182          		s = p12re.r.hi32 >> 31; gbMask |= (p12re.r.lo32 ^ s) - s;
   \   000000D4   10609DE5           LDR      R6,[SP, #+16]
   \   000000D8   066027E0           EOR      R6,R7,R6
   \   000000DC   076046E0           SUB      R6,R6,R7
   \   000000E0   055086E1           ORR      R5,R6,R5
    183          		s = p12im.r.hi32 >> 31; gbMask |= (p12im.r.lo32 ^ s) - s;
   \   000000E4   18609DE5           LDR      R6,[SP, #+24]
   \   000000E8   066028E0           EOR      R6,R8,R6
   \   000000EC   086046E0           SUB      R6,R6,R8
   \   000000F0   055086E1           ORR      R5,R6,R5
    184          		s = p11re.r.hi32 >> 31; gbMask |= (p11re.r.lo32 ^ s) - s;
   \   000000F4   20609DE5           LDR      R6,[SP, #+32]
   \   000000F8   066029E0           EOR      R6,R9,R6
   \   000000FC   096046E0           SUB      R6,R6,R9
   \   00000100   055086E1           ORR      R5,R6,R5
    185          		s = p22re.r.hi32 >> 31; gbMask |= (p22re.r.lo32 ^ s) - s;
    186          		z = 32 + CLZ(gbMask);
   \   00000104   28609DE5           LDR      R6,[SP, #+40]
   \   00000108   066021E0           EOR      R6,R1,R6
   \   0000010C   011046E0           SUB      R1,R6,R1
   \   00000110   051091E1           ORRS     R1,R1,R5
   \   00000114   2010A003           MOVEQ    R1,#+32
   \   00000118   0D00000A           BEQ      ??CalcCovariance1_1
   \   0000011C   0150A0E3           MOV      R5,#+1
   \   00000120   2168B0E1           LSRS     R6,R1,#+16
   \   00000124   1150A003           MOVEQ    R5,#+17
   \   00000128   0118A001           LSLEQ    R1,R1,#+16
   \   0000012C   216CB0E1           LSRS     R6,R1,#+24
   \   00000130   08508502           ADDEQ    R5,R5,#+8
   \   00000134   0114A001           LSLEQ    R1,R1,#+8
   \   00000138   216EB0E1           LSRS     R6,R1,#+28
   \   0000013C   04508502           ADDEQ    R5,R5,#+4
   \   00000140   0112A001           LSLEQ    R1,R1,#+4
   \   00000144   216FB0E1           LSRS     R6,R1,#+30
   \   00000148   02508502           ADDEQ    R5,R5,#+2
   \   0000014C   0111A001           LSLEQ    R1,R1,#+2
   \   00000150   A11F45E0           SUB      R1,R5,R1, LSR #+31
   \                     ??CalcCovariance1_1:
   \   00000154   201081E2           ADD      R1,R1,#+32
   \   00000158   200000EA           B        ??CalcCovariance1_2
    187          	} else {
    188          		gbMask  = FASTABS(p01re.r.hi32) | FASTABS(p01im.r.hi32);
    189          		gbMask |= FASTABS(p12re.r.hi32) | FASTABS(p12im.r.hi32);
    190          		gbMask |= FASTABS(p11re.r.hi32) | FASTABS(p22re.r.hi32);
    191          		z = CLZ(gbMask);
   \                     ??CalcCovariance1_0:
   \   0000015C   0AB025E0           EOR      R11,R5,R10
   \   00000160   05B04BE0           SUB      R11,R11,R5
   \   00000164   025026E0           EOR      R5,R6,R2
   \   00000168   065045E0           SUB      R5,R5,R6
   \   0000016C   0B6085E1           ORR      R6,R5,R11
   \   00000170   0C5027E0           EOR      R5,R7,R12
   \   00000174   075045E0           SUB      R5,R5,R7
   \   00000178   065085E1           ORR      R5,R5,R6
   \   0000017C   046028E0           EOR      R6,R8,R4
   \   00000180   086046E0           SUB      R6,R6,R8
   \   00000184   055086E1           ORR      R5,R6,R5
   \   00000188   036029E0           EOR      R6,R9,R3
   \   0000018C   096046E0           SUB      R6,R6,R9
   \   00000190   055086E1           ORR      R5,R6,R5
   \   00000194   006021E0           EOR      R6,R1,R0
   \   00000198   011046E0           SUB      R1,R6,R1
   \   0000019C   051091E1           ORRS     R1,R1,R5
   \   000001A0   2010A003           MOVEQ    R1,#+32
   \   000001A4   0D00000A           BEQ      ??CalcCovariance1_2
   \   000001A8   0150A0E3           MOV      R5,#+1
   \   000001AC   2168B0E1           LSRS     R6,R1,#+16
   \   000001B0   1150A003           MOVEQ    R5,#+17
   \   000001B4   0118A001           LSLEQ    R1,R1,#+16
   \   000001B8   216CB0E1           LSRS     R6,R1,#+24
   \   000001BC   08508502           ADDEQ    R5,R5,#+8
   \   000001C0   0114A001           LSLEQ    R1,R1,#+8
   \   000001C4   216EB0E1           LSRS     R6,R1,#+28
   \   000001C8   04508502           ADDEQ    R5,R5,#+4
   \   000001CC   0112A001           LSLEQ    R1,R1,#+4
   \   000001D0   216FB0E1           LSRS     R6,R1,#+30
   \   000001D4   02508502           ADDEQ    R5,R5,#+2
   \   000001D8   0111A001           LSLEQ    R1,R1,#+2
   \   000001DC   A11F45E0           SUB      R1,R5,R1, LSR #+31
    192          	}
    193          
    194          	n = 64 - z;	/* number of non-zero bits in bottom of 64-bit word */
   \                     ??CalcCovariance1_2:
   \   000001E0   401061E2           RSB      R1,R1,#+64
    195          	if (n <= 30) {
   \   000001E4   1F0051E3           CMP      R1,#+31
   \   000001E8   1B0000AA           BGE      ??CalcCovariance1_3
    196          		loShift = (30 - n);
    197          		*p01reN = p01re.r.lo32 << loShift;	*p01imN = p01im.r.lo32 << loShift;
   \   000001EC   60009DE5           LDR      R0,[SP, #+96]
   \   000001F0   00209DE5           LDR      R2,[SP, #+0]
   \   000001F4   1E1061E2           RSB      R1,R1,#+30
   \   000001F8   1221A0E1           LSL      R2,R2,R1
   \   000001FC   002080E5           STR      R2,[R0, #+0]
   \   00000200   64009DE5           LDR      R0,[SP, #+100]
   \   00000204   08209DE5           LDR      R2,[SP, #+8]
   \   00000208   1221A0E1           LSL      R2,R2,R1
   \   0000020C   002080E5           STR      R2,[R0, #+0]
    198          		*p12reN = p12re.r.lo32 << loShift;	*p12imN = p12im.r.lo32 << loShift;
   \   00000210   68009DE5           LDR      R0,[SP, #+104]
   \   00000214   10209DE5           LDR      R2,[SP, #+16]
   \   00000218   1221A0E1           LSL      R2,R2,R1
   \   0000021C   002080E5           STR      R2,[R0, #+0]
   \   00000220   90009DE5           LDR      R0,[SP, #+144]
   \   00000224   18209DE5           LDR      R2,[SP, #+24]
   \   00000228   1221A0E1           LSL      R2,R2,R1
   \   0000022C   002080E5           STR      R2,[R0, #+0]
    199          		*p11reN = p11re.r.lo32 << loShift;	*p22reN = p22re.r.lo32 << loShift;
   \   00000230   94009DE5           LDR      R0,[SP, #+148]
   \   00000234   20209DE5           LDR      R2,[SP, #+32]
   \   00000238   1221A0E1           LSL      R2,R2,R1
   \   0000023C   002080E5           STR      R2,[R0, #+0]
   \   00000240   98009DE5           LDR      R0,[SP, #+152]
   \   00000244   28209DE5           LDR      R2,[SP, #+40]
   \   00000248   1221A0E1           LSL      R2,R2,R1
   \   0000024C   002080E5           STR      R2,[R0, #+0]
    200          		return -(loShift + 2*FBITS_OUT_QMFA);
   \   00000250   0A0081E2           ADD      R0,R1,#+10
   \   00000254   000060E2           RSB      R0,R0,#+0
   \   00000258   220000EA           B        ??CalcCovariance1_4
    201          	} else if (n < 32 + 30) {
   \                     ??CalcCovariance1_3:
   \   0000025C   3E0051E3           CMP      R1,#+62
   \   00000260   220000AA           BGE      ??CalcCovariance1_5
    202          		loShift = (n - 30);
    203          		hiShift = 32 - loShift;
    204          		*p01reN = (p01re.r.hi32 << hiShift) | (p01re.r.lo32 >> loShift);
   \   00000264   60609DE5           LDR      R6,[SP, #+96]
   \   00000268   00709DE5           LDR      R7,[SP, #+0]
   \   0000026C   1E1041E2           SUB      R1,R1,#+30
   \   00000270   205061E2           RSB      R5,R1,#+32
   \   00000274   3771A0E1           LSR      R7,R7,R1
   \   00000278   1A7587E1           ORR      R7,R7,R10, LSL R5
   \   0000027C   007086E5           STR      R7,[R6, #+0]
    205          		*p01imN = (p01im.r.hi32 << hiShift) | (p01im.r.lo32 >> loShift);
   \   00000280   64609DE5           LDR      R6,[SP, #+100]
   \   00000284   08709DE5           LDR      R7,[SP, #+8]
   \   00000288   3771A0E1           LSR      R7,R7,R1
   \   0000028C   122587E1           ORR      R2,R7,R2, LSL R5
   \   00000290   002086E5           STR      R2,[R6, #+0]
    206          		*p12reN = (p12re.r.hi32 << hiShift) | (p12re.r.lo32 >> loShift);
   \   00000294   68209DE5           LDR      R2,[SP, #+104]
   \   00000298   10609DE5           LDR      R6,[SP, #+16]
   \   0000029C   3661A0E1           LSR      R6,R6,R1
   \   000002A0   1C6586E1           ORR      R6,R6,R12, LSL R5
   \   000002A4   006082E5           STR      R6,[R2, #+0]
    207          		*p12imN = (p12im.r.hi32 << hiShift) | (p12im.r.lo32 >> loShift);
   \   000002A8   90209DE5           LDR      R2,[SP, #+144]
   \   000002AC   18609DE5           LDR      R6,[SP, #+24]
   \   000002B0   3661A0E1           LSR      R6,R6,R1
   \   000002B4   144586E1           ORR      R4,R6,R4, LSL R5
   \   000002B8   004082E5           STR      R4,[R2, #+0]
    208          		*p11reN = (p11re.r.hi32 << hiShift) | (p11re.r.lo32 >> loShift);
   \   000002BC   94209DE5           LDR      R2,[SP, #+148]
   \   000002C0   20409DE5           LDR      R4,[SP, #+32]
   \   000002C4   3441A0E1           LSR      R4,R4,R1
   \   000002C8   133584E1           ORR      R3,R4,R3, LSL R5
   \   000002CC   003082E5           STR      R3,[R2, #+0]
    209          		*p22reN = (p22re.r.hi32 << hiShift) | (p22re.r.lo32 >> loShift);
   \   000002D0   98209DE5           LDR      R2,[SP, #+152]
   \   000002D4   28309DE5           LDR      R3,[SP, #+40]
   \   000002D8   3331A0E1           LSR      R3,R3,R1
   \   000002DC   100583E1           ORR      R0,R3,R0, LSL R5
   \   000002E0   000082E5           STR      R0,[R2, #+0]
    210          		return (loShift - 2*FBITS_OUT_QMFA);
   \   000002E4   0A0041E2           SUB      R0,R1,#+10
   \                     ??CalcCovariance1_4:
   \   000002E8   6CD08DE2           ADD      SP,SP,#+108
   \   000002EC   F08FBDE8           POP      {R4-R11,PC}
    211          	} else {
    212          		hiShift = n - (32 + 30);
   \                     ??CalcCovariance1_5:
   \   000002F0   3E5041E2           SUB      R5,R1,#+62
    213          		*p01reN = p01re.r.hi32 >> hiShift;	*p01imN = p01im.r.hi32 >> hiShift;
   \   000002F4   60109DE5           LDR      R1,[SP, #+96]
   \   000002F8   5A65A0E1           ASR      R6,R10,R5
   \   000002FC   006081E5           STR      R6,[R1, #+0]
   \   00000300   64109DE5           LDR      R1,[SP, #+100]
   \   00000304   5225A0E1           ASR      R2,R2,R5
   \   00000308   002081E5           STR      R2,[R1, #+0]
    214          		*p12reN = p12re.r.hi32 >> hiShift;	*p12imN = p12im.r.hi32 >> hiShift;
   \   0000030C   68109DE5           LDR      R1,[SP, #+104]
   \   00000310   5C25A0E1           ASR      R2,R12,R5
   \   00000314   002081E5           STR      R2,[R1, #+0]
   \   00000318   90109DE5           LDR      R1,[SP, #+144]
   \   0000031C   5425A0E1           ASR      R2,R4,R5
   \   00000320   002081E5           STR      R2,[R1, #+0]
    215          		*p11reN = p11re.r.hi32 >> hiShift;	*p22reN = p22re.r.hi32 >> hiShift;
   \   00000324   94109DE5           LDR      R1,[SP, #+148]
   \   00000328   5325A0E1           ASR      R2,R3,R5
   \   0000032C   002081E5           STR      R2,[R1, #+0]
   \   00000330   98109DE5           LDR      R1,[SP, #+152]
   \   00000334   5005A0E1           ASR      R0,R0,R5
   \   00000338   000081E5           STR      R0,[R1, #+0]
    216          		return (32 - 2*FBITS_OUT_QMFA - hiShift);
   \   0000033C   160065E2           RSB      R0,R5,#+22
   \   00000340   6CD08DE2           ADD      SP,SP,#+108
   \   00000344   F08FBDE8           POP      {R4-R11,PC}      ;; return
    217          	}
    218          
    219          	return 0;
                 	^
Warning[Pe111]: statement is unreachable
    220          }
    221          
    222          /**************************************************************************************
    223           * Function:    CVKernel2
    224           *
    225           * Description: kernel of covariance matrix calculation for p02
    226           *
    227           * Inputs:      buffer of low-freq samples, starting at time index = 0, 
    228           *                freq index = patch subband
    229           *
    230           * Outputs:     64-bit accumulators for p02re, p02im stored in accBuf
    231           *
    232           * Return:      none
    233           *
    234           * Notes:       this is carefully written to be efficient on ARM
    235           *              use the assembly code version in sbrcov.s when building for ARM!
    236           **************************************************************************************/
    237          #if (defined (__arm) && defined (__ARMCC_VERSION)) || (defined (_WIN32) && defined (_WIN32_WCE) && defined (ARM)) || (defined(__GNUC__) && defined(__arm__))
    238          void CVKernel2(int *XBuf, int *accBuf);
    239          #else
    240          void CVKernel2(int *XBuf, int *accBuf)
    241          { return;
    242          	U64 p02re, p02im;
    243          	int n, x0re, x0im, x1re, x1im, x2re, x2im;
    244          
    245          	p02re.w64 = p02im.w64 = 0;
    246          
    247          	x0re = XBuf[0];
    248          	x0im = XBuf[1];
    249          	XBuf += (2*64);
    250          	x1re = XBuf[0];
    251          	x1im = XBuf[1];
    252          	XBuf += (2*64);
    253          
    254          	for (n = (NUM_TIME_SLOTS*SAMPLES_PER_SLOT + 6); n != 0; n--) {
    255          		/* 6 input, 2*2 acc, 1 ptr, 1 loop counter = 12 registers (use same for x0im, -x0im) */
    256          		x2re = XBuf[0];
    257          		x2im = XBuf[1];
    258          
    259          		p02re.w64 = MADD64(p02re.w64,  x2re, x0re);
    260          		p02re.w64 = MADD64(p02re.w64,  x2im, x0im);
    261          		p02im.w64 = MADD64(p02im.w64,  x0re, x2im);
    262          		p02im.w64 = MADD64(p02im.w64, -x0im, x2re);
    263          
    264          		x0re = x1re;
    265          		x0im = x1im;
    266          		x1re = x2re;
    267          		x1im = x2im;
    268          		XBuf += (2*64);
    269          	}
    270          
    271          	accBuf[0] = p02re.r.lo32;
    272          	accBuf[1] = p02re.r.hi32;
    273          	accBuf[2] = p02im.r.lo32;
    274          	accBuf[3] = p02im.r.hi32;
    275          }
    276          #endif
    277          
    278          /**************************************************************************************
    279           * Function:    CalcCovariance2
    280           *
    281           * Description: calculate covariance matrix for p02 (4.6.18.6.2)
    282           *
    283           * Inputs:      buffer of low-freq samples, starting at time index = 0, 
    284           *                freq index = patch subband
    285           *
    286           * Outputs:     complex covariance element p02re, p02im
    287           *              format = integer (Q0) * 2^N, with scalefactor N >= 0
    288           *
    289           * Return:      scalefactor N
    290           *
    291           * Notes:       outputs are normalized to have 1 GB (sign in at least top 2 bits)
    292           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    293          static int CalcCovariance2(int *XBuf, int *p02reN, int *p02imN)
    294          {
   \                     CalcCovariance2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0250A0E1           MOV      R5,R2
    295          	U64 p02re, p02im;
    296          	int n, z, s, loShift, hiShift, gbMask;
    297          	int accBuf[2*2];
    298          
    299          	CVKernel2(XBuf, accBuf);
   \   00000010   10108DE2           ADD      R1,SP,#+16
   \   00000014   ........           _BLF     raac_CVKernel2,??raac_CVKernel2??rA
    300          	p02re.r.lo32 = accBuf[0];
   \   00000018   10109DE5           LDR      R1,[SP, #+16]
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
    301          	p02re.r.hi32 = accBuf[1];
   \   00000020   14009DE5           LDR      R0,[SP, #+20]
   \   00000024   04008DE5           STR      R0,[SP, #+4]
    302          	p02im.r.lo32 = accBuf[2];
   \   00000028   18209DE5           LDR      R2,[SP, #+24]
    303          	p02im.r.hi32 = accBuf[3];
    304          
    305          	/* 64-bit accumulators now have 2*FBITS_OUT_QMFA fraction bits
    306          	 * want to scale them down to integers (32-bit signed, Q0)
    307          	 *   with scale factor of 2^n, n >= 0
    308          	 * leave 1 GB for calculating determinant, so take top 30 non-zero bits
    309          	 */
    310          	gbMask  = ((p02re.r.hi32) ^ (p02re.r.hi32 >> 31)) | ((p02im.r.hi32) ^ (p02im.r.hi32 >> 31));
    311          	if (gbMask == 0) {
   \   0000002C   C0CFA0E1           ASR      R12,R0,#+31
   \   00000030   08208DE5           STR      R2,[SP, #+8]
   \   00000034   1C109DE5           LDR      R1,[SP, #+28]
   \   00000038   00E02CE0           EOR      LR,R12,R0
   \   0000003C   0C108DE5           STR      R1,[SP, #+12]
   \   00000040   C12FA0E1           ASR      R2,R1,#+31
   \   00000044   013022E0           EOR      R3,R2,R1
   \   00000048   0E6093E1           ORRS     R6,R3,LR
   \   0000004C   1800001A           BNE      ??CalcCovariance2_0
    312          		s = p02re.r.hi32 >> 31; gbMask  = (p02re.r.lo32 ^ s) - s;
   \   00000050   00309DE5           LDR      R3,[SP, #+0]
    313          		s = p02im.r.hi32 >> 31; gbMask |= (p02im.r.lo32 ^ s) - s;
    314          		z = 32 + CLZ(gbMask);
   \   00000054   08609DE5           LDR      R6,[SP, #+8]
   \   00000058   03302CE0           EOR      R3,R12,R3
   \   0000005C   0C3043E0           SUB      R3,R3,R12
   \   00000060   066022E0           EOR      R6,R2,R6
   \   00000064   022046E0           SUB      R2,R6,R2
   \   00000068   032092E1           ORRS     R2,R2,R3
   \   0000006C   2020A003           MOVEQ    R2,#+32
   \   00000070   0D00000A           BEQ      ??CalcCovariance2_1
   \   00000074   0130A0E3           MOV      R3,#+1
   \   00000078   2268B0E1           LSRS     R6,R2,#+16
   \   0000007C   1130A003           MOVEQ    R3,#+17
   \   00000080   0228A001           LSLEQ    R2,R2,#+16
   \   00000084   226CB0E1           LSRS     R6,R2,#+24
   \   00000088   08308302           ADDEQ    R3,R3,#+8
   \   0000008C   0224A001           LSLEQ    R2,R2,#+8
   \   00000090   226EB0E1           LSRS     R6,R2,#+28
   \   00000094   04308302           ADDEQ    R3,R3,#+4
   \   00000098   0222A001           LSLEQ    R2,R2,#+4
   \   0000009C   226FB0E1           LSRS     R6,R2,#+30
   \   000000A0   02308302           ADDEQ    R3,R3,#+2
   \   000000A4   0221A001           LSLEQ    R2,R2,#+2
   \   000000A8   A22F43E0           SUB      R2,R3,R2, LSR #+31
   \                     ??CalcCovariance2_1:
   \   000000AC   202082E2           ADD      R2,R2,#+32
   \   000000B0   120000EA           B        ??CalcCovariance2_2
    315          	} else {
    316          		gbMask  = FASTABS(p02re.r.hi32) | FASTABS(p02im.r.hi32);
    317          		z = CLZ(gbMask);
   \                     ??CalcCovariance2_0:
   \   000000B4   0C604EE0           SUB      R6,LR,R12
   \   000000B8   022043E0           SUB      R2,R3,R2
   \   000000BC   062092E1           ORRS     R2,R2,R6
   \   000000C0   2020A003           MOVEQ    R2,#+32
   \   000000C4   0D00000A           BEQ      ??CalcCovariance2_2
   \   000000C8   0130A0E3           MOV      R3,#+1
   \   000000CC   2268B0E1           LSRS     R6,R2,#+16
   \   000000D0   1130A003           MOVEQ    R3,#+17
   \   000000D4   0228A001           LSLEQ    R2,R2,#+16
   \   000000D8   226CB0E1           LSRS     R6,R2,#+24
   \   000000DC   08308302           ADDEQ    R3,R3,#+8
   \   000000E0   0224A001           LSLEQ    R2,R2,#+8
   \   000000E4   226EB0E1           LSRS     R6,R2,#+28
   \   000000E8   04308302           ADDEQ    R3,R3,#+4
   \   000000EC   0222A001           LSLEQ    R2,R2,#+4
   \   000000F0   226FB0E1           LSRS     R6,R2,#+30
   \   000000F4   02308302           ADDEQ    R3,R3,#+2
   \   000000F8   0221A001           LSLEQ    R2,R2,#+2
   \   000000FC   A22F43E0           SUB      R2,R3,R2, LSR #+31
    318          	}
    319          	n = 64 - z;	/* number of non-zero bits in bottom of 64-bit word */
   \                     ??CalcCovariance2_2:
   \   00000100   402062E2           RSB      R2,R2,#+64
    320          
    321          	if (n <= 30) {
   \   00000104   1F0052E3           CMP      R2,#+31
   \   00000108   090000AA           BGE      ??CalcCovariance2_3
    322          		loShift = (30 - n);
    323          		*p02reN = p02re.r.lo32 << loShift;	
   \   0000010C   00009DE5           LDR      R0,[SP, #+0]
   \   00000110   1E2062E2           RSB      R2,R2,#+30
   \   00000114   1002A0E1           LSL      R0,R0,R2
   \   00000118   000084E5           STR      R0,[R4, #+0]
    324          		*p02imN = p02im.r.lo32 << loShift;
   \   0000011C   08009DE5           LDR      R0,[SP, #+8]
   \   00000120   1002A0E1           LSL      R0,R0,R2
   \   00000124   000085E5           STR      R0,[R5, #+0]
    325          		return -(loShift + 2*FBITS_OUT_QMFA);
   \   00000128   0A0082E2           ADD      R0,R2,#+10
   \   0000012C   000060E2           RSB      R0,R0,#+0
   \   00000130   0C0000EA           B        ??CalcCovariance2_4
    326          	} else if (n < 32 + 30) {
   \                     ??CalcCovariance2_3:
   \   00000134   3E0052E3           CMP      R2,#+62
   \   00000138   0C0000AA           BGE      ??CalcCovariance2_5
    327          		loShift = (n - 30);
    328          		hiShift = 32 - loShift;
    329          		*p02reN = (p02re.r.hi32 << hiShift) | (p02re.r.lo32 >> loShift);
   \   0000013C   00609DE5           LDR      R6,[SP, #+0]
   \   00000140   1E2042E2           SUB      R2,R2,#+30
   \   00000144   203062E2           RSB      R3,R2,#+32
   \   00000148   3662A0E1           LSR      R6,R6,R2
   \   0000014C   100386E1           ORR      R0,R6,R0, LSL R3
   \   00000150   000084E5           STR      R0,[R4, #+0]
    330          		*p02imN = (p02im.r.hi32 << hiShift) | (p02im.r.lo32 >> loShift);
   \   00000154   08009DE5           LDR      R0,[SP, #+8]
   \   00000158   3002A0E1           LSR      R0,R0,R2
   \   0000015C   110380E1           ORR      R0,R0,R1, LSL R3
   \   00000160   000085E5           STR      R0,[R5, #+0]
    331          		return (loShift - 2*FBITS_OUT_QMFA);
   \   00000164   0A0042E2           SUB      R0,R2,#+10
   \                     ??CalcCovariance2_4:
   \   00000168   20D08DE2           ADD      SP,SP,#+32
   \   0000016C   7080BDE8           POP      {R4-R6,PC}
    332          	} else {
    333          		hiShift = n - (32 + 30);
   \                     ??CalcCovariance2_5:
   \   00000170   3E3042E2           SUB      R3,R2,#+62
    334          		*p02reN = p02re.r.hi32 >> hiShift;	
   \   00000174   5003A0E1           ASR      R0,R0,R3
   \   00000178   000084E5           STR      R0,[R4, #+0]
    335          		*p02imN = p02im.r.hi32 >> hiShift;
   \   0000017C   5103A0E1           ASR      R0,R1,R3
   \   00000180   000085E5           STR      R0,[R5, #+0]
    336          		return (32 - 2*FBITS_OUT_QMFA - hiShift);
   \   00000184   160063E2           RSB      R0,R3,#+22
   \   00000188   20D08DE2           ADD      SP,SP,#+32
   \   0000018C   7080BDE8           POP      {R4-R6,PC}       ;; return
    337          	}
    338          
    339          	return 0;
                 	^
Warning[Pe111]: statement is unreachable
    340          }
    341          
    342          /**************************************************************************************
    343           * Function:    CalcLPCoefs
    344           *
    345           * Description: calculate linear prediction coefficients for one subband (4.6.18.6.2)
    346           *
    347           * Inputs:      buffer of low-freq samples, starting at time index = 0, 
    348           *                freq index = patch subband
    349           *              number of guard bits in input sample buffer
    350           *
    351           * Outputs:     complex LP coefficients a0re, a0im, a1re, a1im, format = Q29
    352           *
    353           * Return:      none
    354           *
    355           * Notes:       output coefficients (a0re, a0im, a1re, a1im) clipped to range (-4, 4)
    356           *              if the comples coefficients have magnitude >= 4.0, they are all
    357           *                set to 0 (see spec)
    358           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    359          static void CalcLPCoefs(int *XBuf, int *a0re, int *a0im, int *a1re, int *a1im, int gb)
    360          {
   \                     CalcLPCoefs:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
    361          	int zFlag, n1, n2, nd, d, dInv, tre, tim;
    362          	int p01re, p01im, p02re, p02im, p12re, p12im, p11re, p22re;
    363          
    364          	/* pre-scale to avoid overflow - probably never happens in practice (see QMFA)
    365          	 *   max bit growth per accumulator = 38*2 = 76 mul-adds (X * X)
    366          	 *   using 64-bit MADD, so if X has n guard bits, X*X has 2n+1 guard bits
    367          	 *   gain 1 extra sign bit per multiply, so ensure ceil(log2(76/2) / 2) = 3 guard bits on inputs
    368          	 */
    369          	if (gb < 3) {
   \   00000008   5C109DE5           LDR      R1,[SP, #+92]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   5C009DE5           LDR      R0,[SP, #+92]
   \   00000014   031061E2           RSB      R1,R1,#+3
   \   00000018   24108DE5           STR      R1,[SP, #+36]
   \   0000001C   030050E3           CMP      R0,#+3
   \   00000020   0B0000AA           BGE      ??CalcLPCoefs_0
    370          		nd = 3 - gb;
   \   00000024   0150A0E1           MOV      R5,R1
    371          		for (n1 = (NUM_TIME_SLOTS*SAMPLES_PER_SLOT + 6 + 2); n1 != 0; n1--) {
   \   00000028   2800A0E3           MOV      R0,#+40
    372          			XBuf[0] >>= nd;	XBuf[1] >>= nd;
   \                     ??CalcLPCoefs_1:
   \   0000002C   001094E5           LDR      R1,[R4, #+0]
    373          			XBuf += (2*64);
    374          		}
   \   00000030   010050E2           SUBS     R0,R0,#+1
   \   00000034   5115A0E1           ASR      R1,R1,R5
   \   00000038   001084E5           STR      R1,[R4, #+0]
   \   0000003C   041094E5           LDR      R1,[R4, #+4]
   \   00000040   5115A0E1           ASR      R1,R1,R5
   \   00000044   041084E5           STR      R1,[R4, #+4]
   \   00000048   804F84E2           ADD      R4,R4,#+512
   \   0000004C   F6FFFF1A           BNE      ??CalcLPCoefs_1
    375          		XBuf -= (2*64*(NUM_TIME_SLOTS*SAMPLES_PER_SLOT + 6 + 2));
   \   00000050   504C44E2           SUB      R4,R4,#+20480
    376          	}
    377          	
    378          	/* calculate covariance elements */
    379          	n1 = CalcCovariance1(XBuf, &p01re, &p01im, &p12re, &p12im, &p11re, &p22re);
   \                     ??CalcLPCoefs_0:
   \   00000054   1C008DE2           ADD      R0,SP,#+28
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   04008DE2           ADD      R0,SP,#+4
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   14008DE2           ADD      R0,SP,#+20
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   10308DE2           ADD      R3,SP,#+16
   \   00000070   14208DE2           ADD      R2,SP,#+20
   \   00000074   1C108DE2           ADD      R1,SP,#+28
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           BL       CalcCovariance1
   \   00000080   0060A0E1           MOV      R6,R0
    380          	n2 = CalcCovariance2(XBuf, &p02re, &p02im);
   \   00000084   24208DE2           ADD      R2,SP,#+36
   \   00000088   20108DE2           ADD      R1,SP,#+32
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       CalcCovariance2
    381          
    382          	/* normalize everything to larger power of 2 scalefactor, call it n1 */
    383          	if (n1 < n2) {
   \   00000094   000056E1           CMP      R6,R0
   \   00000098   0CD08DE2           ADD      SP,SP,#+12
   \   0000009C   150000AA           BGE      ??CalcLPCoefs_2
    384          		nd = MIN(n2 - n1, 31);
    385          		p01re >>= nd;	p01im >>= nd;
   \   000000A0   10109DE5           LDR      R1,[SP, #+16]
   \   000000A4   065040E0           SUB      R5,R0,R6
   \   000000A8   1F0055E3           CMP      R5,#+31
   \   000000AC   1F50A0A3           MOVGE    R5,#+31
   \   000000B0   5115A0E1           ASR      R1,R1,R5
   \   000000B4   10108DE5           STR      R1,[SP, #+16]
   \   000000B8   08109DE5           LDR      R1,[SP, #+8]
   \   000000BC   5115A0E1           ASR      R1,R1,R5
   \   000000C0   08108DE5           STR      R1,[SP, #+8]
    386          		p12re >>= nd;	p12im >>= nd;
   \   000000C4   04109DE5           LDR      R1,[SP, #+4]
   \   000000C8   5115A0E1           ASR      R1,R1,R5
   \   000000CC   04108DE5           STR      R1,[SP, #+4]
   \   000000D0   0C109DE5           LDR      R1,[SP, #+12]
   \   000000D4   5115A0E1           ASR      R1,R1,R5
   \   000000D8   0C108DE5           STR      R1,[SP, #+12]
    387          		p11re >>= nd;	p22re >>= nd;
   \   000000DC   00109DE5           LDR      R1,[SP, #+0]
   \   000000E0   5115A0E1           ASR      R1,R1,R5
   \   000000E4   00108DE5           STR      R1,[SP, #+0]
   \   000000E8   1C109DE5           LDR      R1,[SP, #+28]
   \   000000EC   5115A0E1           ASR      R1,R1,R5
   \   000000F0   1C108DE5           STR      R1,[SP, #+28]
    388          		n1 = n2;
   \   000000F4   0A0000EA           B        ??CalcLPCoefs_3
    389          	} else if (n1 > n2) {
   \                     ??CalcLPCoefs_2:
   \   000000F8   060050E1           CMP      R0,R6
   \   000000FC   080000AA           BGE      ??CalcLPCoefs_3
    390          		nd = MIN(n1 - n2, 31);
    391          		p02re >>= nd;	p02im >>= nd;
   \   00000100   14109DE5           LDR      R1,[SP, #+20]
   \   00000104   005046E0           SUB      R5,R6,R0
   \   00000108   1F0055E3           CMP      R5,#+31
   \   0000010C   1F50A0A3           MOVGE    R5,#+31
   \   00000110   5115A0E1           ASR      R1,R1,R5
   \   00000114   14108DE5           STR      R1,[SP, #+20]
   \   00000118   18109DE5           LDR      R1,[SP, #+24]
   \   0000011C   5115A0E1           ASR      R1,R1,R5
   \   00000120   18108DE5           STR      R1,[SP, #+24]
    392          	}
    393          
    394          	/* calculate determinant of covariance matrix (at least 1 GB in pXX) */
    395          	d = MULSHIFT32(p12re, p12re) + MULSHIFT32(p12im, p12im);
    396          	d = MULSHIFT32(d, RELAX_COEF) << 1;
    397          	d = MULSHIFT32(p11re, p22re) - d;
   \                     ??CalcLPCoefs_3:
   \   00000124   0C209DE5           LDR      R2,[SP, #+12]
   \   00000128   04609DE5           LDR      R6,[SP, #+4]
   \   0000012C   00509DE5           LDR      R5,[SP, #+0]
   \   00000130   1C809DE5           LDR      R8,[SP, #+28]
   \   00000134   C23FA0E1           ASR      R3,R2,#+31
   \   00000138   C67FA0E1           ASR      R7,R6,#+31
   \   0000013C   9508C1E0           SMULL    R0,R1,R5,R8
   \   00000140   968689E0           UMULL    R8,R9,R6,R6
   \   00000144   8E81E0E3           MVN      R8,#-2147483613
   \   00000148   969729E0           MLA      R9,R6,R7,R9
   \   0000014C   848EC8E3           BIC      R8,R8,#0x840
   \   00000150   979629E0           MLA      R9,R7,R6,R9
   \   00000154   926287E0           UMULL    R6,R7,R2,R2
   \   00000158   927327E0           MLA      R7,R2,R3,R7
   \   0000015C   937227E0           MLA      R7,R3,R2,R7
   \   00000160   096087E0           ADD      R6,R7,R9
   \   00000164   C67FA0E1           ASR      R7,R6,#+31
   \   00000168   962883E0           UMULL    R2,R3,R6,R8
    398          	ASSERT(d >= 0);	/* should never be < 0 */
    399          
    400          	zFlag = 0;
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   973823E0           MLA      R3,R7,R8,R3
   \   00000174   20208DE5           STR      R2,[SP, #+32]
   \   00000178   830041E0           SUB      R0,R1,R3, LSL #+1
   \   0000017C   2C109DE5           LDR      R1,[SP, #+44]
    401          	*a0re = *a0im = 0;
    402          	*a1re = *a1im = 0;
    403          	if (d > 0) {
   \   00000180   010050E3           CMP      R0,#+1
   \   00000184   002081E5           STR      R2,[R1, #+0]
   \   00000188   28109DE5           LDR      R1,[SP, #+40]
   \   0000018C   002081E5           STR      R2,[R1, #+0]
   \   00000190   58109DE5           LDR      R1,[SP, #+88]
   \   00000194   002081E5           STR      R2,[R1, #+0]
   \   00000198   30109DE5           LDR      R1,[SP, #+48]
   \   0000019C   002081E5           STR      R2,[R1, #+0]
   \   000001A0   4F0000BA           BLT      ??CalcLPCoefs_4
    404          		/* input =   Q31  d    = Q(-2*n1 - 32 + nd) = Q31 * 2^(31 + 2*n1 + 32 - nd)
    405          		 * inverse = Q29  dInv = Q29 * 2^(-31 - 2*n1 - 32 + nd) = Q(29 + 31 + 2*n1 + 32 - nd)
    406          		 *
    407          		 * numerator has same Q format as d, since it's sum of normalized squares
    408          		 * so num * inverse = Q(-2*n1 - 32) * Q(29 + 31 + 2*n1 + 32 - nd)
    409          		 *                  = Q(29 + 31 - nd), drop low 32 in MULSHIFT32
    410          		 *                  = Q(29 + 31 - 32 - nd) = Q(28 - nd)
    411          		 */
    412          		nd = CLZ(d) - 1;
   \   000001A4   0010A0E1           MOV      R1,R0
   \   000001A8   0120A0E3           MOV      R2,#+1
   \   000001AC   2138B0E1           LSRS     R3,R1,#+16
   \   000001B0   1120A003           MOVEQ    R2,#+17
   \   000001B4   0118A001           LSLEQ    R1,R1,#+16
   \   000001B8   213CB0E1           LSRS     R3,R1,#+24
   \   000001BC   08208202           ADDEQ    R2,R2,#+8
   \   000001C0   0114A001           LSLEQ    R1,R1,#+8
   \   000001C4   213EB0E1           LSRS     R3,R1,#+28
   \   000001C8   04208202           ADDEQ    R2,R2,#+4
   \   000001CC   0112A001           LSLEQ    R1,R1,#+4
   \   000001D0   213FB0E1           LSRS     R3,R1,#+30
   \   000001D4   02208202           ADDEQ    R2,R2,#+2
   \   000001D8   0111A001           LSLEQ    R1,R1,#+2
   \   000001DC   A11F42E0           SUB      R1,R2,R1, LSR #+31
   \   000001E0   015041E2           SUB      R5,R1,#+1
    413          		d <<= nd;
    414          		dInv = InvRNormalized(d);
   \   000001E4   1005A0E1           LSL      R0,R0,R5
   \   000001E8   ........           _BLF     raac_InvRNormalized,??raac_InvRNormalized??rA
   \   000001EC   10609DE5           LDR      R6,[SP, #+16]
   \   000001F0   0C809DE5           LDR      R8,[SP, #+12]
   \   000001F4   00A09DE5           LDR      R10,[SP, #+0]
   \   000001F8   00C0A0E1           MOV      R12,R0
   \   000001FC   04009DE5           LDR      R0,[SP, #+4]
   \   00000200   C67FA0E1           ASR      R7,R6,#+31
   \   00000204   C01FA0E1           ASR      R1,R0,#+31
   \   00000208   962083E0           UMULL    R2,R3,R6,R0
   \   0000020C   C89FA0E1           ASR      R9,R8,#+31
   \   00000210   963123E0           MLA      R3,R6,R1,R3
    415          
    416          		/* 1 GB in pXX */
    417          		tre = MULSHIFT32(p01re, p12re) - MULSHIFT32(p01im, p12im) - MULSHIFT32(p02re, p11re);
    418          		tre = MULSHIFT32(tre, dInv);
    419          		tim = MULSHIFT32(p01re, p12im) + MULSHIFT32(p01im, p12re) - MULSHIFT32(p02im, p11re);
    420          		tim = MULSHIFT32(tim, dInv);
    421          
    422          		/* if d is extremely small, just set coefs to 0 (would have poor precision anyway) */
    423          		if (nd > 28 || (FASTABS(tre) >> (28 - nd)) >= 4 || (FASTABS(tim) >> (28 - nd)) >= 4) {
   \   00000214   1D0055E3           CMP      R5,#+29
   \   00000218   973023E0           MLA      R3,R7,R0,R3
   \   0000021C   08009DE5           LDR      R0,[SP, #+8]
   \   00000220   03E0A0E1           MOV      LR,R3
   \   00000224   C01FA0E1           ASR      R1,R0,#+31
   \   00000228   902883E0           UMULL    R2,R3,R0,R8
   \   0000022C   903923E0           MLA      R3,R0,R9,R3
   \   00000230   913823E0           MLA      R3,R1,R8,R3
   \   00000234   03204EE0           SUB      R2,LR,R3
   \   00000238   14309DE5           LDR      R3,[SP, #+20]
   \   0000023C   930AC1E0           SMULL    R0,R1,R3,R10
   \   00000240   08309DE5           LDR      R3,[SP, #+8]
   \   00000244   012042E0           SUB      R2,R2,R1
   \   00000248   920CC1E0           SMULL    R0,R1,R2,R12
   \   0000024C   01E0A0E1           MOV      LR,R1
   \   00000250   960881E0           UMULL    R0,R1,R6,R8
   \   00000254   961921E0           MLA      R1,R6,R9,R1
   \   00000258   04609DE5           LDR      R6,[SP, #+4]
   \   0000025C   971821E0           MLA      R1,R7,R8,R1
   \   00000260   0120A0E1           MOV      R2,R1
   \   00000264   9306C1E0           SMULL    R0,R1,R3,R6
   \   00000268   18309DE5           LDR      R3,[SP, #+24]
   \   0000026C   022081E0           ADD      R2,R1,R2
   \   00000270   930AC1E0           SMULL    R0,R1,R3,R10
   \   00000274   012042E0           SUB      R2,R2,R1
   \   00000278   920CC1E0           SMULL    R0,R1,R2,R12
   \   0000027C   0100A0E1           MOV      R0,R1
   \   00000280   0D0000AA           BGE      ??CalcLPCoefs_5
   \   00000284   CE1FA0E1           ASR      R1,LR,#+31
   \   00000288   0520A0E1           MOV      R2,R5
   \   0000028C   1C2062E2           RSB      R2,R2,#+28
   \   00000290   0E3021E0           EOR      R3,R1,LR
   \   00000294   011043E0           SUB      R1,R3,R1
   \   00000298   5112A0E1           ASR      R1,R1,R2
   \   0000029C   040051E3           CMP      R1,#+4
   \   000002A0   050000AA           BGE      ??CalcLPCoefs_5
   \   000002A4   C01FA0E1           ASR      R1,R0,#+31
   \   000002A8   003021E0           EOR      R3,R1,R0
   \   000002AC   011043E0           SUB      R1,R3,R1
   \   000002B0   5112A0E1           ASR      R1,R1,R2
   \   000002B4   040051E3           CMP      R1,#+4
   \   000002B8   020000BA           BLT      ??CalcLPCoefs_6
    424          			zFlag = 1;
   \                     ??CalcLPCoefs_5:
   \   000002BC   0110A0E3           MOV      R1,#+1
   \   000002C0   20108DE5           STR      R1,[SP, #+32]
   \   000002C4   060000EA           B        ??CalcLPCoefs_4
    425          		} else {
    426          			*a1re = tre << (FBITS_LPCOEFS - 28 + nd);	/* i.e. convert Q(28 - nd) to Q(29) */
   \                     ??CalcLPCoefs_6:
   \   000002C8   30209DE5           LDR      R2,[SP, #+48]
   \   000002CC   011085E2           ADD      R1,R5,#+1
   \   000002D0   1E31A0E1           LSL      R3,LR,R1
   \   000002D4   003082E5           STR      R3,[R2, #+0]
    427          			*a1im = tim << (FBITS_LPCOEFS - 28 + nd);
   \   000002D8   58209DE5           LDR      R2,[SP, #+88]
   \   000002DC   1001A0E1           LSL      R0,R0,R1
   \   000002E0   000082E5           STR      R0,[R2, #+0]
    428          		}
    429          	}
    430          
    431          	if (p11re) {
   \                     ??CalcLPCoefs_4:
   \   000002E4   00009DE5           LDR      R0,[SP, #+0]
   \   000002E8   000050E3           CMP      R0,#+0
   \   000002EC   4E00000A           BEQ      ??CalcLPCoefs_7
    432          		/* input =   Q31  p11re = Q(-n1 + nd) = Q31 * 2^(31 + n1 - nd)
    433          		 * inverse = Q29  dInv  = Q29 * 2^(-31 - n1 + nd) = Q(29 + 31 + n1 - nd)
    434          		 *
    435          		 * numerator is Q(-n1 - 3)
    436          		 * so num * inverse = Q(-n1 - 3) * Q(29 + 31 + n1 - nd)
    437          		 *                  = Q(29 + 31 - 3 - nd), drop low 32 in MULSHIFT32
    438          		 *                  = Q(29 + 31 - 3 - 32 - nd) = Q(25 - nd)
    439          		 */
    440          		nd = CLZ(p11re) - 1;	/* assume positive */
   \   000002F0   0110A0E3           MOV      R1,#+1
   \   000002F4   2028B0E1           LSRS     R2,R0,#+16
   \   000002F8   1110A003           MOVEQ    R1,#+17
   \   000002FC   0008A001           LSLEQ    R0,R0,#+16
   \   00000300   202CB0E1           LSRS     R2,R0,#+24
   \   00000304   08108102           ADDEQ    R1,R1,#+8
   \   00000308   0004A001           LSLEQ    R0,R0,#+8
   \   0000030C   202EB0E1           LSRS     R2,R0,#+28
   \   00000310   04108102           ADDEQ    R1,R1,#+4
   \   00000314   0002A001           LSLEQ    R0,R0,#+4
   \   00000318   202FB0E1           LSRS     R2,R0,#+30
   \   0000031C   02108102           ADDEQ    R1,R1,#+2
   \   00000320   0001A001           LSLEQ    R0,R0,#+2
   \   00000324   A00F41E0           SUB      R0,R1,R0, LSR #+31
    441          		p11re <<= nd;
   \   00000328   00109DE5           LDR      R1,[SP, #+0]
   \   0000032C   015040E2           SUB      R5,R0,#+1
   \   00000330   1115A0E1           LSL      R1,R1,R5
   \   00000334   00108DE5           STR      R1,[SP, #+0]
    442          		dInv = InvRNormalized(p11re);
   \   00000338   0100A0E1           MOV      R0,R1
   \   0000033C   ........           _BLF     raac_InvRNormalized,??raac_InvRNormalized??rA
   \   00000340   10E09DE5           LDR      LR,[SP, #+16]
   \   00000344   04209DE5           LDR      R2,[SP, #+4]
   \   00000348   00C0A0E1           MOV      R12,R0
   \   0000034C   58009DE5           LDR      R0,[SP, #+88]
   \   00000350   C23FA0E1           ASR      R3,R2,#+31
   \   00000354   00A090E5           LDR      R10,[R0, #+0]
   \   00000358   30009DE5           LDR      R0,[SP, #+48]
   \   0000035C   CABFA0E1           ASR      R11,R10,#+31
   \   00000360   008090E5           LDR      R8,[R0, #+0]
   \   00000364   0C009DE5           LDR      R0,[SP, #+12]
   \   00000368   C89FA0E1           ASR      R9,R8,#+31
   \   0000036C   C01FA0E1           ASR      R1,R0,#+31
   \   00000370   926887E0           UMULL    R6,R7,R2,R8
    443          
    444          		/* a1re, a1im = Q29, so scaled by (n1 + 3) */
    445          		tre = (p01re >> 3) + MULSHIFT32(p12re, *a1re) + MULSHIFT32(p12im, *a1im);
    446          		tre = -MULSHIFT32(tre, dInv);
    447          		tim = (p01im >> 3) - MULSHIFT32(p12im, *a1re) + MULSHIFT32(p12re, *a1im);
    448          		tim = -MULSHIFT32(tim, dInv);
    449          
    450          		if (nd > 25 || (FASTABS(tre) >> (25 - nd)) >= 4 || (FASTABS(tim) >> (25 - nd)) >= 4) {
   \   00000374   1A0055E3           CMP      R5,#+26
   \   00000378   927927E0           MLA      R7,R2,R9,R7
   \   0000037C   937827E0           MLA      R7,R3,R8,R7
   \   00000380   902A83E0           UMULL    R2,R3,R0,R10
   \   00000384   CEE187E0           ADD      LR,R7,LR, ASR #+3
   \   00000388   903B23E0           MLA      R3,R0,R11,R3
   \   0000038C   913A23E0           MLA      R3,R1,R10,R3
   \   00000390   0E6083E0           ADD      R6,R3,LR
   \   00000394   962CC3E0           SMULL    R2,R3,R6,R12
   \   00000398   08609DE5           LDR      R6,[SP, #+8]
   \   0000039C   00E063E2           RSB      LR,R3,#+0
   \   000003A0   902883E0           UMULL    R2,R3,R0,R8
   \   000003A4   903923E0           MLA      R3,R0,R9,R3
   \   000003A8   04009DE5           LDR      R0,[SP, #+4]
   \   000003AC   913823E0           MLA      R3,R1,R8,R3
   \   000003B0   C01FA0E1           ASR      R1,R0,#+31
   \   000003B4   C66163E0           RSB      R6,R3,R6, ASR #+3
   \   000003B8   902A83E0           UMULL    R2,R3,R0,R10
   \   000003BC   903B23E0           MLA      R3,R0,R11,R3
   \   000003C0   913A23E0           MLA      R3,R1,R10,R3
   \   000003C4   062083E0           ADD      R2,R3,R6
   \   000003C8   920CC1E0           SMULL    R0,R1,R2,R12
   \   000003CC   0100A0E1           MOV      R0,R1
   \   000003D0   000060E2           RSB      R0,R0,#+0
   \   000003D4   350000AA           BGE      ??CalcLPCoefs_8
   \   000003D8   CE1FA0E1           ASR      R1,LR,#+31
   \   000003DC   0520A0E1           MOV      R2,R5
   \   000003E0   192062E2           RSB      R2,R2,#+25
   \   000003E4   0E3021E0           EOR      R3,R1,LR
   \   000003E8   011043E0           SUB      R1,R3,R1
   \   000003EC   5112A0E1           ASR      R1,R1,R2
   \   000003F0   040051E3           CMP      R1,#+4
   \   000003F4   2D0000AA           BGE      ??CalcLPCoefs_8
   \   000003F8   C01FA0E1           ASR      R1,R0,#+31
   \   000003FC   003021E0           EOR      R3,R1,R0
   \   00000400   011043E0           SUB      R1,R3,R1
   \   00000404   5112A0E1           ASR      R1,R1,R2
   \   00000408   040051E3           CMP      R1,#+4
   \   0000040C   270000AA           BGE      ??CalcLPCoefs_8
    451          			zFlag = 1;
    452          		} else {
    453          			*a0re = tre << (FBITS_LPCOEFS - 25 + nd);	/* i.e. convert Q(25 - nd) to Q(29) */
   \   00000410   28209DE5           LDR      R2,[SP, #+40]
   \   00000414   041085E2           ADD      R1,R5,#+4
   \   00000418   1E31A0E1           LSL      R3,LR,R1
   \   0000041C   003082E5           STR      R3,[R2, #+0]
    454          			*a0im = tim << (FBITS_LPCOEFS - 25 + nd);
   \   00000420   2C209DE5           LDR      R2,[SP, #+44]
   \   00000424   1001A0E1           LSL      R0,R0,R1
   \   00000428   000082E5           STR      R0,[R2, #+0]
    455          		}
    456          	} 
    457          
    458          	/* see 4.6.18.6.2 - if magnitude of a0 or a1 >= 4 then a0 = a1 = 0 
    459          	 * i.e. a0re < 4, a0im < 4, a1re < 4, a1im < 4
    460          	 * Q29*Q29 = Q26
    461          	 */
    462          	if (zFlag || MULSHIFT32(*a0re, *a0re) + MULSHIFT32(*a0im, *a0im) >= MAG_16 || MULSHIFT32(*a1re, *a1re) + MULSHIFT32(*a1im, *a1im) >= MAG_16) {
   \                     ??CalcLPCoefs_7:
   \   0000042C   20009DE5           LDR      R0,[SP, #+32]
   \   00000430   000050E3           CMP      R0,#+0
   \   00000434   1D00001A           BNE      ??CalcLPCoefs_8
   \   00000438   2C009DE5           LDR      R0,[SP, #+44]
   \   0000043C   002090E5           LDR      R2,[R0, #+0]
   \   00000440   28009DE5           LDR      R0,[SP, #+40]
   \   00000444   C23FA0E1           ASR      R3,R2,#+31
   \   00000448   006090E5           LDR      R6,[R0, #+0]
   \   0000044C   C67FA0E1           ASR      R7,R6,#+31
   \   00000450   960681E0           UMULL    R0,R1,R6,R6
   \   00000454   961721E0           MLA      R1,R6,R7,R1
   \   00000458   971621E0           MLA      R1,R7,R6,R1
   \   0000045C   926287E0           UMULL    R6,R7,R2,R2
   \   00000460   927327E0           MLA      R7,R2,R3,R7
   \   00000464   937227E0           MLA      R7,R3,R2,R7
   \   00000468   010087E0           ADD      R0,R7,R1
   \   0000046C   400450E3           CMP      R0,#+1073741824
   \   00000470   0E0000AA           BGE      ??CalcLPCoefs_8
   \   00000474   58009DE5           LDR      R0,[SP, #+88]
   \   00000478   002090E5           LDR      R2,[R0, #+0]
   \   0000047C   30009DE5           LDR      R0,[SP, #+48]
   \   00000480   C23FA0E1           ASR      R3,R2,#+31
   \   00000484   006090E5           LDR      R6,[R0, #+0]
   \   00000488   C67FA0E1           ASR      R7,R6,#+31
   \   0000048C   960681E0           UMULL    R0,R1,R6,R6
   \   00000490   961721E0           MLA      R1,R6,R7,R1
   \   00000494   971621E0           MLA      R1,R7,R6,R1
   \   00000498   926287E0           UMULL    R6,R7,R2,R2
   \   0000049C   927327E0           MLA      R7,R2,R3,R7
   \   000004A0   937227E0           MLA      R7,R3,R2,R7
   \   000004A4   010087E0           ADD      R0,R7,R1
   \   000004A8   400450E3           CMP      R0,#+1073741824
   \   000004AC   080000BA           BLT      ??CalcLPCoefs_9
    463          		*a0re = *a0im = 0;
   \                     ??CalcLPCoefs_8:
   \   000004B0   2C009DE5           LDR      R0,[SP, #+44]
   \   000004B4   0010A0E3           MOV      R1,#+0
   \   000004B8   001080E5           STR      R1,[R0, #+0]
   \   000004BC   28009DE5           LDR      R0,[SP, #+40]
   \   000004C0   001080E5           STR      R1,[R0, #+0]
    464          		*a1re = *a1im = 0;
   \   000004C4   58009DE5           LDR      R0,[SP, #+88]
   \   000004C8   001080E5           STR      R1,[R0, #+0]
   \   000004CC   30009DE5           LDR      R0,[SP, #+48]
   \   000004D0   001080E5           STR      R1,[R0, #+0]
    465          	}
    466          
    467          	/* no need to clip - we never changed the XBuf data, just used it to calculate a0 and a1 */
    468          	if (gb < 3) {
   \                     ??CalcLPCoefs_9:
   \   000004D4   5C009DE5           LDR      R0,[SP, #+92]
   \   000004D8   030050E3           CMP      R0,#+3
   \   000004DC   0A0000AA           BGE      ??CalcLPCoefs_10
    469          		nd = 3 - gb;
   \   000004E0   24509DE5           LDR      R5,[SP, #+36]
    470          		for (n1 = (NUM_TIME_SLOTS*SAMPLES_PER_SLOT + 6 + 2); n1 != 0; n1--) {
   \   000004E4   2860A0E3           MOV      R6,#+40
    471          			XBuf[0] <<= nd;	XBuf[1] <<= nd;
   \                     ??CalcLPCoefs_11:
   \   000004E8   000094E5           LDR      R0,[R4, #+0]
    472          			XBuf += (2*64);
    473          		}
   \   000004EC   016056E2           SUBS     R6,R6,#+1
   \   000004F0   1005A0E1           LSL      R0,R0,R5
   \   000004F4   000084E5           STR      R0,[R4, #+0]
   \   000004F8   040094E5           LDR      R0,[R4, #+4]
   \   000004FC   1005A0E1           LSL      R0,R0,R5
   \   00000500   040084E5           STR      R0,[R4, #+4]
   \   00000504   804F84E2           ADD      R4,R4,#+512
   \   00000508   F6FFFF1A           BNE      ??CalcLPCoefs_11
    474          	}
    475          }
   \                     ??CalcLPCoefs_10:
   \   0000050C   34D08DE2           ADD      SP,SP,#+52       ;; stack cleaning
   \   00000510   F08FBDE8           POP      {R4-R11,PC}      ;; return
    476          
    477          /**************************************************************************************
    478           * Function:    GenerateHighFreq
    479           *
    480           * Description: generate high frequencies with SBR (4.6.18.6)
    481           *
    482           * Inputs:      initialized PSInfoSBR struct
    483           *              initialized SBRGrid struct for this channel
    484           *              initialized SBRFreq struct for this SCE/CPE block
    485           *              initialized SBRChan struct for this channel
    486           *              index of current channel (0 for SCE, 0 or 1 for CPE)
    487           *
    488           * Outputs:     new high frequency samples starting at frequency kStart
    489           *
    490           * Return:      none
    491           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    492          void GenerateHighFreq(PSInfoSBR *psi, SBRGrid *sbrGrid, SBRFreq *sbrFreq, SBRChan *sbrChan, int ch)
    493          {
   \                     raac_GenerateHighFreq:
   \   00000000   FD4F2DE9           PUSH     {R0,R2-R11,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   0150A0E1           MOV      R5,R1
    494          	int band, newBW, c, t, gb, gbMask, gbIdx;
    495          	int currPatch, p, x, k, g, i, iStart, iEnd, bw, bwsq;
    496          	int a0re, a0im, a1re, a1im;
    497          	int x1re, x1im, x2re, x2im;
    498          	int ACCre, ACCim;
    499          	int *XBufLo, *XBufHi;
    500          
    501          	/* calculate array of chirp factors */
    502          	for (band = 0; band < sbrFreq->numNoiseFloorBands; band++) {
   \   0000000C   181092E5           LDR      R1,[R2, #+24]
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   010051E3           CMP      R1,#+1
   \   00000018   2B0000AA           BGE      ??raac_GenerateHighFreq_0
    503          		c = sbrChan->chirpFact[band];	/* previous (bwArray') */
    504          		newBW = newBWTab[sbrChan->invfMode[0][band]][sbrChan->invfMode[1][band]];
    505          
    506          		/* weighted average of new and old (can't overflow - total gain = 1.0) */
    507          		if (newBW < c)
    508          			t = MULSHIFT32(newBW, 0x60000000) + MULSHIFT32(0x20000000, c);	/* new is smaller: 0.75*new + 0.25*old */
    509          		else
    510          			t = MULSHIFT32(newBW, 0x74000000) + MULSHIFT32(0x0c000000, c);	/* new is larger: 0.90625*new + 0.09375*old */
    511          		t <<= 1;
    512          
    513          		if (t < 0x02000000)	/* below 0.015625, clip to 0 */
    514          			t = 0;
    515          		if (t > 0x7f800000)	/* clip to 0.99609375 */  
    516          			t = 0x7f800000;
    517          
    518          		/* save curr as prev for next time */
    519          		sbrChan->chirpFact[band] = t;
    520          		sbrChan->invfMode[0][band] = sbrChan->invfMode[1][band];
    521          	}
    522          
    523          	iStart = sbrGrid->envTimeBorder[0] + HF_ADJ;
   \                     ??raac_GenerateHighFreq_1:
   \   0000001C   0410D5E5           LDRB     R1,[R5, #+4]
   \   00000020   021081E2           ADD      R1,R1,#+2
   \   00000024   24108DE5           STR      R1,[SP, #+36]
    524          	iEnd =   sbrGrid->envTimeBorder[sbrGrid->numEnv] + HF_ADJ;
   \   00000028   0310D5E5           LDRB     R1,[R5, #+3]
   \   0000002C   051081E0           ADD      R1,R1,R5
   \   00000030   0410D1E5           LDRB     R1,[R1, #+4]
   \   00000034   021081E2           ADD      R1,R1,#+2
   \   00000038   18108DE5           STR      R1,[SP, #+24]
    525          
    526          	/* generate new high freqs from low freqs, patches, and chirp factors */
    527          	k = sbrFreq->kStart;
   \   0000003C   44109DE5           LDR      R1,[SP, #+68]
   \   00000040   001091E5           LDR      R1,[R1, #+0]
   \   00000044   1C108DE5           STR      R1,[SP, #+28]
    528          	g = 0;
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   28108DE5           STR      R1,[SP, #+40]
    529          	bw = sbrChan->chirpFact[g];
   \   00000050   48109DE5           LDR      R1,[SP, #+72]
   \   00000054   101191E5           LDR      R1,[R1, #+272]
   \   00000058   0C108DE5           STR      R1,[SP, #+12]
    530          	bwsq = MULSHIFT32(bw, bw) << 1;
   \   0000005C   0120A0E1           MOV      R2,R1
   \   00000060   C23FA0E1           ASR      R3,R2,#+31
   \   00000064   920281E0           UMULL    R0,R1,R2,R2
   \   00000068   921321E0           MLA      R1,R2,R3,R1
   \   0000006C   931221E0           MLA      R1,R3,R2,R1
   \   00000070   0100A0E1           MOV      R0,R1
   \   00000074   48109DE5           LDR      R1,[SP, #+72]
   \   00000078   8000A0E1           LSL      R0,R0,#+1
   \   0000007C   30008DE5           STR      R0,[SP, #+48]
   \   00000080   48009DE5           LDR      R0,[SP, #+72]
   \   00000084   8C1191E5           LDR      R1,[R1, #+396]
   \   00000088   880190E5           LDR      R0,[R0, #+392]
   \   0000008C   000091E1           ORRS     R0,R1,R0
    531          	
    532          	gbMask = (sbrChan->gbMask[0] | sbrChan->gbMask[1]);	/* older 32 | newer 8 */
    533          	gb = CLZ(gbMask) - 1;
   \   00000090   3700001A           BNE      ??raac_GenerateHighFreq_2
   \   00000094   2000A0E3           MOV      R0,#+32
   \   00000098   430000EA           B        ??raac_GenerateHighFreq_3
   \                     ??raac_GenerateHighFreq_4:
   \   0000009C   5023A0E3           MOV      R2,#+1073741825
   \   000000A0   FE2582E3           ORR      R2,R2,#0x3F800000
   \   000000A4   020051E1           CMP      R1,R2
   \   000000A8   0110C2A3           BICGE    R1,R2,#0x1
   \                     ??raac_GenerateHighFreq_5:
   \   000000AC   101184E5           STR      R1,[R4, #+272]
   \   000000B0   48209DE5           LDR      R2,[SP, #+72]
   \   000000B4   48109DE5           LDR      R1,[SP, #+72]
   \   000000B8   022080E0           ADD      R2,R0,R2
   \   000000BC   0A21D2E5           LDRB     R2,[R2, #+266]
   \   000000C0   011080E0           ADD      R1,R0,R1
   \   000000C4   010080E2           ADD      R0,R0,#+1
   \   000000C8   0521C1E5           STRB     R2,[R1, #+261]
   \                     ??raac_GenerateHighFreq_0:
   \   000000CC   44109DE5           LDR      R1,[SP, #+68]
   \   000000D0   181091E5           LDR      R1,[R1, #+24]
   \   000000D4   010050E1           CMP      R0,R1
   \   000000D8   CFFFFFAA           BGE      ??raac_GenerateHighFreq_1
   \   000000DC   48209DE5           LDR      R2,[SP, #+72]
   \   000000E0   48309DE5           LDR      R3,[SP, #+72]
   \   000000E4   48109DE5           LDR      R1,[SP, #+72]
   \   000000E8   022080E0           ADD      R2,R0,R2
   \   000000EC   0A21D2E5           LDRB     R2,[R2, #+266]
   \   000000F0   78649FE5           LDR      R6,??raac_GenerateHighFreq_6  ;; newBWTab
   \   000000F4   033080E0           ADD      R3,R0,R3
   \   000000F8   0531D3E5           LDRB     R3,[R3, #+261]
   \   000000FC   004181E0           ADD      R4,R1,R0, LSL #+2
   \   00000100   101194E5           LDR      R1,[R4, #+272]
   \   00000104   033286E0           ADD      R3,R6,R3, LSL #+4
   \   00000108   026193E7           LDR      R6,[R3, +R2, LSL #+2]
   \   0000010C   010056E1           CMP      R6,R1
   \   00000110   C67FA0E1           ASR      R7,R6,#+31
   \   00000114   070000AA           BGE      ??raac_GenerateHighFreq_7
   \   00000118   6024A0E3           MOV      R2,#+1610612736
   \   0000011C   968289E0           UMULL    R8,R9,R6,R2
   \   00000120   979229E0           MLA      R9,R7,R2,R9
   \   00000124   C12FA0E1           ASR      R2,R1,#+31
   \   00000128   822EA0E1           LSL      R2,R2,#+29
   \   0000012C   A12182E1           ORR      R2,R2,R1, LSR #+3
   \   00000130   091082E0           ADD      R1,R2,R9
   \   00000134   090000EA           B        ??raac_GenerateHighFreq_8
   \                     ??raac_GenerateHighFreq_7:
   \   00000138   7424A0E3           MOV      R2,#+1946157056
   \   0000013C   968289E0           UMULL    R8,R9,R6,R2
   \   00000140   0160A0E1           MOV      R6,R1
   \   00000144   979229E0           MLA      R9,R7,R2,R9
   \   00000148   C17FA0E1           ASR      R7,R1,#+31
   \   0000014C   09A0A0E1           MOV      R10,R9
   \   00000150   C026A0E3           MOV      R2,#+201326592
   \   00000154   968289E0           UMULL    R8,R9,R6,R2
   \   00000158   979229E0           MLA      R9,R7,R2,R9
   \   0000015C   0A1089E0           ADD      R1,R9,R10
   \                     ??raac_GenerateHighFreq_8:
   \   00000160   8110A0E1           LSL      R1,R1,#+1
   \   00000164   800751E3           CMP      R1,#+33554432
   \   00000168   CBFFFFAA           BGE      ??raac_GenerateHighFreq_4
   \   0000016C   0010A0E3           MOV      R1,#+0
   \   00000170   CDFFFFEA           B        ??raac_GenerateHighFreq_5
   \                     ??raac_GenerateHighFreq_2:
   \   00000174   0110A0E3           MOV      R1,#+1
   \   00000178   2028B0E1           LSRS     R2,R0,#+16
   \   0000017C   1110A003           MOVEQ    R1,#+17
   \   00000180   0008A001           LSLEQ    R0,R0,#+16
   \   00000184   202CB0E1           LSRS     R2,R0,#+24
   \   00000188   08108102           ADDEQ    R1,R1,#+8
   \   0000018C   0004A001           LSLEQ    R0,R0,#+8
   \   00000190   202EB0E1           LSRS     R2,R0,#+28
   \   00000194   04108102           ADDEQ    R1,R1,#+4
   \   00000198   0002A001           LSLEQ    R0,R0,#+4
   \   0000019C   202FB0E1           LSRS     R2,R0,#+30
   \   000001A0   02108102           ADDEQ    R1,R1,#+2
   \   000001A4   0001A001           LSLEQ    R0,R0,#+2
   \   000001A8   A00F41E0           SUB      R0,R1,R0, LSR #+31
   \                     ??raac_GenerateHighFreq_3:
   \   000001AC   010040E2           SUB      R0,R0,#+1
   \   000001B0   3C008DE5           STR      R0,[SP, #+60]
    534          
    535          	for (currPatch = 0; currPatch < sbrFreq->numPatches; currPatch++) {
   \   000001B4   44009DE5           LDR      R0,[SP, #+68]
   \   000001B8   0010A0E3           MOV      R1,#+0
   \   000001BC   00108DE5           STR      R1,[SP, #+0]
   \   000001C0   C200D0E5           LDRB     R0,[R0, #+194]
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   0400001A           BNE      ??raac_GenerateHighFreq_9
    536          		for (x = 0; x < sbrFreq->patchNumSubbands[currPatch]; x++) {
    537          			/* map k to corresponding noise floor band */
    538          			if (k >= sbrFreq->freqNoise[g+1]) {
    539          				g++;
    540          				bw = sbrChan->chirpFact[g];		/* Q31 */
    541          				bwsq = MULSHIFT32(bw, bw) << 1;	/* Q31 */
    542          			}
    543          		
    544          			p = sbrFreq->patchStartSubband[currPatch] + x;	/* low QMF band */
    545          			XBufHi = psi->XBuf[iStart][k];
    546          			if (bw) {
    547          				CalcLPCoefs(psi->XBuf[0][p], &a0re, &a0im, &a1re, &a1im, gb);
    548          
    549          				a0re = MULSHIFT32(bw, a0re);	/* Q31 * Q29 = Q28 */
    550          				a0im = MULSHIFT32(bw, a0im);
    551          				a1re = MULSHIFT32(bwsq, a1re);
    552          				a1im = MULSHIFT32(bwsq, a1im);
    553          
    554          				XBufLo = psi->XBuf[iStart-2][p];
    555          
    556          				x2re = XBufLo[0];	/* RE{XBuf[n-2]} */
    557          				x2im = XBufLo[1];	/* IM{XBuf[n-2]} */
    558          				XBufLo += (64*2);
    559          
    560          				x1re = XBufLo[0];	/* RE{XBuf[n-1]} */
    561          				x1im = XBufLo[1];	/* IM{XBuf[n-1]} */
    562          				XBufLo += (64*2);
    563          
    564          				for (i = iStart; i < iEnd; i++) {
    565          					/* a0re/im, a1re/im are Q28 with at least 1 GB, 
    566          					 *   so the summing for AACre/im is fine (1 GB in, plus 1 from MULSHIFT32) 
    567          					 */
    568          					ACCre = MULSHIFT32(x2re, a1re) - MULSHIFT32(x2im, a1im);
    569          					ACCim = MULSHIFT32(x2re, a1im) + MULSHIFT32(x2im, a1re);
    570          					x2re = x1re;
    571          					x2im = x1im;
    572          					
    573          					ACCre += MULSHIFT32(x1re, a0re) - MULSHIFT32(x1im, a0im);
    574          					ACCim += MULSHIFT32(x1re, a0im) + MULSHIFT32(x1im, a0re);
    575          					x1re = XBufLo[0];	/* RE{XBuf[n]} */
    576          					x1im = XBufLo[1];	/* IM{XBuf[n]} */
    577          					XBufLo += (64*2);
    578          
    579          					/* lost 4 fbits when scaling by a0re/im, a1re/im (Q28) */
    580          					CLIP_2N_SHIFT30(ACCre, 4);
    581          					ACCre += x1re;
    582          					CLIP_2N_SHIFT30(ACCim, 4);
    583          					ACCim += x1im;
    584          
    585          					XBufHi[0] = ACCre;
    586          					XBufHi[1] = ACCim;
    587          					XBufHi += (64*2);
    588          
    589          					/* update guard bit masks */
    590          					gbMask  = FASTABS(ACCre);
    591          					gbMask |= FASTABS(ACCim);
    592          					gbIdx = (i >> 5) & 0x01;	/* 0 if i < 32, 1 if i >= 32 */
    593          					sbrChan->gbMask[gbIdx] |= gbMask;
    594          				}
    595          			} else {
    596          				XBufLo = (int *)psi->XBuf[iStart][p];
    597          				for (i = iStart; i < iEnd; i++) {
    598          					XBufHi[0] = XBufLo[0];
    599          					XBufHi[1] = XBufLo[1];
    600          					XBufLo += (64*2); 
    601          					XBufHi += (64*2);
    602          				}
    603          			}
    604          			k++;	/* high QMF band */
    605          		}
    606          	}
    607          }
   \                     ??raac_GenerateHighFreq_10:
   \   000001CC   4CD08DE2           ADD      SP,SP,#+76       ;; stack cleaning
   \   000001D0   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??raac_GenerateHighFreq_11:
   \   000001D4   00109DE5           LDR      R1,[SP, #+0]
   \   000001D8   011081E2           ADD      R1,R1,#+1
   \   000001DC   00108DE5           STR      R1,[SP, #+0]
   \                     ??raac_GenerateHighFreq_9:
   \   000001E0   44109DE5           LDR      R1,[SP, #+68]
   \   000001E4   00009DE5           LDR      R0,[SP, #+0]
   \   000001E8   C210D1E5           LDRB     R1,[R1, #+194]
   \   000001EC   010050E1           CMP      R0,R1
   \   000001F0   F5FFFFAA           BGE      ??raac_GenerateHighFreq_10
   \   000001F4   0010A0E3           MOV      R1,#+0
   \   000001F8   20108DE5           STR      R1,[SP, #+32]
   \   000001FC   44109DE5           LDR      R1,[SP, #+68]
   \   00000200   010080E0           ADD      R0,R0,R1
   \   00000204   C900D0E5           LDRB     R0,[R0, #+201]
   \   00000208   000050E3           CMP      R0,#+0
   \   0000020C   1600001A           BNE      ??raac_GenerateHighFreq_12
   \   00000210   EFFFFFEA           B        ??raac_GenerateHighFreq_11
   \                     ??raac_GenerateHighFreq_13:
   \   00000214   24E09DE5           LDR      LR,[SP, #+36]
   \   00000218   85118AE0           ADD      R1,R10,R5, LSL #+3
   \   0000021C   01C080E0           ADD      R12,R0,R1
   \   00000220   18009DE5           LDR      R0,[SP, #+24]
   \   00000224   00005EE1           CMP      LR,R0
   \   00000228   090000AA           BGE      ??raac_GenerateHighFreq_14
   \                     ??raac_GenerateHighFreq_15:
   \   0000022C   00009CE5           LDR      R0,[R12, #+0]
   \   00000230   01E08EE2           ADD      LR,LR,#+1
   \   00000234   000084E5           STR      R0,[R4, #+0]
   \   00000238   04009CE5           LDR      R0,[R12, #+4]
   \   0000023C   80CF8CE2           ADD      R12,R12,#+512
   \   00000240   040084E5           STR      R0,[R4, #+4]
   \   00000244   18009DE5           LDR      R0,[SP, #+24]
   \   00000248   804F84E2           ADD      R4,R4,#+512
   \   0000024C   00005EE1           CMP      LR,R0
   \   00000250   F5FFFFBA           BLT      ??raac_GenerateHighFreq_15
   \                     ??raac_GenerateHighFreq_14:
   \   00000254   1C109DE5           LDR      R1,[SP, #+28]
   \   00000258   011081E2           ADD      R1,R1,#+1
   \   0000025C   1C108DE5           STR      R1,[SP, #+28]
   \   00000260   20109DE5           LDR      R1,[SP, #+32]
   \   00000264   011081E2           ADD      R1,R1,#+1
   \   00000268   20108DE5           STR      R1,[SP, #+32]
   \                     ??raac_GenerateHighFreq_12:
   \   0000026C   00109DE5           LDR      R1,[SP, #+0]
   \   00000270   44209DE5           LDR      R2,[SP, #+68]
   \   00000274   20009DE5           LDR      R0,[SP, #+32]
   \   00000278   021081E0           ADD      R1,R1,R2
   \   0000027C   C910D1E5           LDRB     R1,[R1, #+201]
   \   00000280   010050E1           CMP      R0,R1
   \   00000284   D2FFFFAA           BGE      ??raac_GenerateHighFreq_11
   \   00000288   28009DE5           LDR      R0,[SP, #+40]
   \   0000028C   1C109DE5           LDR      R1,[SP, #+28]
   \   00000290   010080E2           ADD      R0,R0,#+1
   \   00000294   022080E0           ADD      R2,R0,R2
   \   00000298   9F20D2E5           LDRB     R2,[R2, #+159]
   \   0000029C   020051E1           CMP      R1,R2
   \   000002A0   0C0000BA           BLT      ??raac_GenerateHighFreq_16
   \   000002A4   28008DE5           STR      R0,[SP, #+40]
   \   000002A8   48209DE5           LDR      R2,[SP, #+72]
   \   000002AC   001182E0           ADD      R1,R2,R0, LSL #+2
   \   000002B0   101191E5           LDR      R1,[R1, #+272]
   \   000002B4   0C108DE5           STR      R1,[SP, #+12]
   \   000002B8   0120A0E1           MOV      R2,R1
   \   000002BC   C23FA0E1           ASR      R3,R2,#+31
   \   000002C0   920281E0           UMULL    R0,R1,R2,R2
   \   000002C4   921321E0           MLA      R1,R2,R3,R1
   \   000002C8   931221E0           MLA      R1,R3,R2,R1
   \   000002CC   0100A0E1           MOV      R0,R1
   \   000002D0   8000A0E1           LSL      R0,R0,#+1
   \   000002D4   30008DE5           STR      R0,[SP, #+48]
   \                     ??raac_GenerateHighFreq_16:
   \   000002D8   00009DE5           LDR      R0,[SP, #+0]
   \   000002DC   44109DE5           LDR      R1,[SP, #+68]
   \   000002E0   010080E0           ADD      R0,R0,R1
   \   000002E4   CE00D0E5           LDRB     R0,[R0, #+206]
   \   000002E8   20109DE5           LDR      R1,[SP, #+32]
   \   000002EC   005081E0           ADD      R5,R1,R0
   \   000002F0   24009DE5           LDR      R0,[SP, #+36]
   \   000002F4   40109DE5           LDR      R1,[SP, #+64]
   \   000002F8   80A481E0           ADD      R10,R1,R0, LSL #+9
   \   000002FC   1C109DE5           LDR      R1,[SP, #+28]
   \   00000300   2C00A0E3           MOV      R0,#+44
   \   00000304   760C80E3           ORR      R0,R0,#0x7600
   \   00000308   81118AE0           ADD      R1,R10,R1, LSL #+3
   \   0000030C   014080E0           ADD      R4,R0,R1
   \   00000310   0C109DE5           LDR      R1,[SP, #+12]
   \   00000314   000051E3           CMP      R1,#+0
   \   00000318   BDFFFF0A           BEQ      ??raac_GenerateHighFreq_13
   \   0000031C   3C109DE5           LDR      R1,[SP, #+60]
   \   00000320   02002DE9           PUSH     {R1}
   \   00000324   18108DE2           ADD      R1,SP,#+24
   \   00000328   02002DE9           PUSH     {R1}
   \   0000032C   48609DE5           LDR      R6,[SP, #+72]
   \   00000330   10308DE2           ADD      R3,SP,#+16
   \   00000334   18208DE2           ADD      R2,SP,#+24
   \   00000338   0C108DE2           ADD      R1,SP,#+12
   \   0000033C   856186E0           ADD      R6,R6,R5, LSL #+3
   \   00000340   060080E0           ADD      R0,R0,R6
   \   00000344   ........           BL       CalcLPCoefs
   \   00000348   14009DE5           LDR      R0,[SP, #+20]
   \   0000034C   0C209DE5           LDR      R2,[SP, #+12]
   \   00000350   C01FA0E1           ASR      R1,R0,#+31
   \   00000354   C23FA0E1           ASR      R3,R2,#+31
   \   00000358   906287E0           UMULL    R6,R7,R0,R2
   \   0000035C   907327E0           MLA      R7,R0,R3,R7
   \   00000360   917227E0           MLA      R7,R1,R2,R7
   \   00000364   0760A0E1           MOV      R6,R7
   \   00000368   0C608DE5           STR      R6,[SP, #+12]
   \   0000036C   18209DE5           LDR      R2,[SP, #+24]
   \   00000370   C23FA0E1           ASR      R3,R2,#+31
   \   00000374   906287E0           UMULL    R6,R7,R0,R2
   \   00000378   907327E0           MLA      R7,R0,R3,R7
   \   0000037C   917227E0           MLA      R7,R1,R2,R7
   \   00000380   0760A0E1           MOV      R6,R7
   \   00000384   18608DE5           STR      R6,[SP, #+24]
   \   00000388   38009DE5           LDR      R0,[SP, #+56]
   \   0000038C   10209DE5           LDR      R2,[SP, #+16]
   \   00000390   C01FA0E1           ASR      R1,R0,#+31
   \   00000394   C23FA0E1           ASR      R3,R2,#+31
   \   00000398   906287E0           UMULL    R6,R7,R0,R2
   \   0000039C   907327E0           MLA      R7,R0,R3,R7
   \   000003A0   917227E0           MLA      R7,R1,R2,R7
   \   000003A4   0760A0E1           MOV      R6,R7
   \   000003A8   10608DE5           STR      R6,[SP, #+16]
   \   000003AC   1C209DE5           LDR      R2,[SP, #+28]
   \   000003B0   C23FA0E1           ASR      R3,R2,#+31
   \   000003B4   906287E0           UMULL    R6,R7,R0,R2
   \   000003B8   907327E0           MLA      R7,R0,R3,R7
   \   000003BC   2C00A0E3           MOV      R0,#+44
   \   000003C0   917227E0           MLA      R7,R1,R2,R7
   \   000003C4   720C80E3           ORR      R0,R0,#0x7200
   \   000003C8   0760A0E1           MOV      R6,R7
   \   000003CC   1C608DE5           STR      R6,[SP, #+28]
   \   000003D0   85118AE0           ADD      R1,R10,R5, LSL #+3
   \   000003D4   010080E0           ADD      R0,R0,R1
   \   000003D8   002090E5           LDR      R2,[R0, #+0]
   \   000003DC   3C208DE5           STR      R2,[SP, #+60]
   \   000003E0   042090E5           LDR      R2,[R0, #+4]
   \   000003E4   34208DE5           STR      R2,[SP, #+52]
   \   000003E8   0052B0E5           LDR      R5,[R0, #+512]!
   \   000003EC   04A090E5           LDR      R10,[R0, #+4]
   \   000003F0   2CE09DE5           LDR      LR,[SP, #+44]
   \   000003F4   80CF80E2           ADD      R12,R0,#+512
   \   000003F8   20009DE5           LDR      R0,[SP, #+32]
   \   000003FC   08D08DE2           ADD      SP,SP,#+8
   \   00000400   00005EE1           CMP      LR,R0
   \   00000404   170000BA           BLT      ??raac_GenerateHighFreq_17
   \   00000408   91FFFFEA           B        ??raac_GenerateHighFreq_14
   \                     ??raac_GenerateHighFreq_18:
   \   0000040C   01108AE0           ADD      R1,R10,R1
   \   00000410   000084E5           STR      R0,[R4, #+0]
   \   00000414   041084E5           STR      R1,[R4, #+4]
   \   00000418   48809DE5           LDR      R8,[SP, #+72]
   \   0000041C   0160A0E3           MOV      R6,#+1
   \   00000420   CE6206E0           AND      R6,R6,LR, ASR #+5
   \   00000424   628F88E2           ADD      R8,R8,#+392
   \   00000428   066188E0           ADD      R6,R8,R6, LSL #+2
   \   0000042C   008096E5           LDR      R8,[R6, #+0]
   \   00000430   C02FA0E1           ASR      R2,R0,#+31
   \   00000434   C13FA0E1           ASR      R3,R1,#+31
   \   00000438   000022E0           EOR      R0,R2,R0
   \   0000043C   020040E0           SUB      R0,R0,R2
   \   00000440   011023E0           EOR      R1,R3,R1
   \   00000444   031041E0           SUB      R1,R1,R3
   \   00000448   000081E1           ORR      R0,R1,R0
   \   0000044C   080080E1           ORR      R0,R0,R8
   \   00000450   000086E5           STR      R0,[R6, #+0]
   \   00000454   18009DE5           LDR      R0,[SP, #+24]
   \   00000458   804F84E2           ADD      R4,R4,#+512
   \   0000045C   01E08EE2           ADD      LR,LR,#+1
   \   00000460   00005EE1           CMP      LR,R0
   \   00000464   7AFFFFAA           BGE      ??raac_GenerateHighFreq_14
   \                     ??raac_GenerateHighFreq_17:
   \   00000468   34609DE5           LDR      R6,[SP, #+52]
   \   0000046C   08009DE5           LDR      R0,[SP, #+8]
   \   00000470   14809DE5           LDR      R8,[SP, #+20]
   \   00000474   C67FA0E1           ASR      R7,R6,#+31
   \   00000478   C01FA0E1           ASR      R1,R0,#+31
   \   0000047C   962083E0           UMULL    R2,R3,R6,R0
   \   00000480   C89FA0E1           ASR      R9,R8,#+31
   \   00000484   963123E0           MLA      R3,R6,R1,R3
   \   00000488   973023E0           MLA      R3,R7,R0,R3
   \   0000048C   2C009DE5           LDR      R0,[SP, #+44]
   \   00000490   03B0A0E1           MOV      R11,R3
   \   00000494   C01FA0E1           ASR      R1,R0,#+31
   \   00000498   902883E0           UMULL    R2,R3,R0,R8
   \   0000049C   903923E0           MLA      R3,R0,R9,R3
   \   000004A0   913823E0           MLA      R3,R1,R8,R3
   \   000004A4   960881E0           UMULL    R0,R1,R6,R8
   \   000004A8   03B04BE0           SUB      R11,R11,R3
   \   000004AC   961921E0           MLA      R1,R6,R9,R1
   \   000004B0   2C609DE5           LDR      R6,[SP, #+44]
   \   000004B4   971821E0           MLA      R1,R7,R8,R1
   \   000004B8   08809DE5           LDR      R8,[SP, #+8]
   \   000004BC   0130A0E1           MOV      R3,R1
   \   000004C0   9608C1E0           SMULL    R0,R1,R6,R8
   \   000004C4   030081E0           ADD      R0,R1,R3
   \   000004C8   38008DE5           STR      R0,[SP, #+56]
   \   000004CC   34508DE5           STR      R5,[SP, #+52]
   \   000004D0   2CA08DE5           STR      R10,[SP, #+44]
   \   000004D4   04209DE5           LDR      R2,[SP, #+4]
   \   000004D8   10809DE5           LDR      R8,[SP, #+16]
   \   000004DC   0500A0E1           MOV      R0,R5
   \   000004E0   C51FA0E1           ASR      R1,R5,#+31
   \   000004E4   C23FA0E1           ASR      R3,R2,#+31
   \   000004E8   906287E0           UMULL    R6,R7,R0,R2
   \   000004EC   C89FA0E1           ASR      R9,R8,#+31
   \   000004F0   907327E0           MLA      R7,R0,R3,R7
   \   000004F4   917227E0           MLA      R7,R1,R2,R7
   \   000004F8   0A20A0E1           MOV      R2,R10
   \   000004FC   0B5087E0           ADD      R5,R7,R11
   \   00000500   C23FA0E1           ASR      R3,R2,#+31
   \   00000504   926887E0           UMULL    R6,R7,R2,R8
   \   00000508   927927E0           MLA      R7,R2,R9,R7
   \   0000050C   937827E0           MLA      R7,R3,R8,R7
   \   00000510   902883E0           UMULL    R2,R3,R0,R8
   \   00000514   076045E0           SUB      R6,R5,R7
   \   00000518   38509DE5           LDR      R5,[SP, #+56]
   \   0000051C   903923E0           MLA      R3,R0,R9,R3
   \   00000520   913823E0           MLA      R3,R1,R8,R3
   \   00000524   0320A0E1           MOV      R2,R3
   \   00000528   04309DE5           LDR      R3,[SP, #+4]
   \   0000052C   9A03C1E0           SMULL    R0,R1,R10,R3
   \   00000530   04A09CE5           LDR      R10,[R12, #+4]
   \   00000534   020081E0           ADD      R0,R1,R2
   \   00000538   051080E0           ADD      R1,R0,R5
   \   0000053C   00509CE5           LDR      R5,[R12, #+0]
   \   00000540   80CF8CE2           ADD      R12,R12,#+512
   \   00000544   C60FA0E1           ASR      R0,R6,#+31
   \   00000548   C024E0E3           MVN      R2,#-1073741824
   \   0000054C   460D50E1           CMP      R0,R6, ASR #+26
   \   00000550   00002210           EORNE    R0,R2,R0
   \   00000554   0602A001           LSLEQ    R0,R6,#+4
   \   00000558   000085E0           ADD      R0,R5,R0
   \   0000055C   C13FA0E1           ASR      R3,R1,#+31
   \   00000560   410D53E1           CMP      R3,R1, ASR #+26
   \   00000564   0112A001           LSLEQ    R1,R1,#+4
   \   00000568   03102210           EORNE    R1,R2,R3
   \   0000056C   A6FFFFEA           B        ??raac_GenerateHighFreq_18
   \                     ??raac_GenerateHighFreq_6:
   \   00000570   ........           DC32     newBWTab
    608          
    609          

   Maximum stack usage in bytes:

     Function              CSTACK
     --------              ------
     CalcCovariance1         144
     CalcCovariance2          48
     CalcLPCoefs             100
     raac_GenerateHighFreq   120


   Segment part sizes:

     Function/Label        Bytes
     --------------        -----
     newBWTab                64
     CalcCovariance1        840
     CalcCovariance2        400
     CalcLPCoefs           1300
     raac_GenerateHighFreq 1396
      Others                 52

 
 3 988 bytes in segment CODE
    64 bytes in segment DATA_C
 
 3 936 bytes of CODE  memory (+ 52 bytes shared)
    64 bytes of CONST memory

Errors: none
Warnings: 2
