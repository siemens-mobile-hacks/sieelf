##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Feb/2012  15:39:16 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDE #
#                       C\AAC_FILE (14).c                                    #
#    Command line    =  "D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACD #
#                       EC\AAC_FILE (14).c" -D NDEBUG -lC                    #
#                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\ #
#                       Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player #
#                       \Player\Release\Obj\ -s9 --cpu_mode arm --endian     #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Program              #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude       #
#                       swilib.h -I "D:\Program Files\IAR\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=16                                #
#    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\AAC_FILE (14).lst                                #
#    Object file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\AAC_FILE (14).r79                                 #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDEC\AAC_FILE (14).c
      1          /* ***** BEGIN LICENSE BLOCK *****  
      2           * Source last modified: $Id: buffers.c,v 1.1 2005/02/26 01:47:34 jrecker Exp $ 
      3           *   
      4           * Portions Copyright (c) 1995-2005 RealNetworks, Inc. All Rights Reserved.  
      5           *       
      6           * The contents of this file, and the files included with this file, 
      7           * are subject to the current version of the RealNetworks Public 
      8           * Source License (the "RPSL") available at 
      9           * http://www.helixcommunity.org/content/rpsl unless you have licensed 
     10           * the file under the current version of the RealNetworks Community 
     11           * Source License (the "RCSL") available at 
     12           * http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
     13           * will apply. You may also obtain the license terms directly from 
     14           * RealNetworks.  You may not use this file except in compliance with 
     15           * the RPSL or, if you have a valid RCSL with RealNetworks applicable 
     16           * to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
     17           * the rights, obligations and limitations governing use of the 
     18           * contents of the file. 
     19           *   
     20           * This file is part of the Helix DNA Technology. RealNetworks is the 
     21           * developer of the Original Code and owns the copyrights in the 
     22           * portions it created. 
     23           *   
     24           * This file, and the files included with this file, is distributed 
     25           * and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY 
     26           * KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS 
     27           * ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES 
     28           * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET 
     29           * ENJOYMENT OR NON-INFRINGEMENT. 
     30           *  
     31           * Technology Compatibility Kit Test Suite(s) Location:  
     32           *    http://www.helixcommunity.org/content/tck  
     33           *  
     34           * Contributor(s):  
     35           *   
     36           * ***** END LICENSE BLOCK ***** */  
     37          
     38          /**************************************************************************************
     39           * Fixed-point HE-AAC decoder
     40           * Jon Recker (jrecker@real.com)
     41           * February 2005
     42           *
     43           * buffers.c - allocation and deallocation of internal AAC decoder buffers
     44           **************************************************************************************/
     45          
     46          
     47          #include "coder_aac.h"
     48          //#include "..\..\..\swilib.h"
     49          
     50          /**************************************************************************************
     51           * Function:    ClearBuffer
     52           *
     53           * Description: fill buffer with 0's
     54           *
     55           * Inputs:      pointer to buffer
     56           *              number of bytes to fill with 0
     57           *
     58           * Outputs:     cleared buffer
     59           *
     60           * Return:      none
     61           *
     62           * Notes:       slow, platform-independent equivalent to memset(buf, 0, nBytes)
     63           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
     64          void ClearBuffer(void *buf, int nBytes)
     65          {
     66          	int i;
     67          	unsigned char *cbuf = (unsigned char *)buf;
     68          
     69          	for (i = 0; i < nBytes; i++)
   \                     raac_ClearBuffer:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   010051E3           CMP      R1,#+1
   \   00000008   0030A0E3           MOV      R3,#+0
   \   0000000C   020000AA           BGE      ??raac_ClearBuffer_0
   \   00000010   1EFF2FE1           BX       LR
     70          		cbuf[i] = 0;
   \                     ??raac_ClearBuffer_1:
   \   00000014   0030C2E7           STRB     R3,[R2, +R0]
   \   00000018   012082E2           ADD      R2,R2,#+1
   \                     ??raac_ClearBuffer_0:
   \   0000001C   010052E1           CMP      R2,R1
   \   00000020   FBFFFFBA           BLT      ??raac_ClearBuffer_1
     71          
     72          	return;
   \   00000024   1EFF2FE1           BX       LR               ;; return
     73          }
     74          
     75          /**************************************************************************************
     76           * Function:    AllocateBuffers
     77           *
     78           * Description: allocate all the memory needed for the AAC decoder
     79           *
     80           * Inputs:      none
     81           *
     82           * Outputs:     none
     83           *
     84           * Return:      pointer to AACDecInfo structure, cleared to all 0's (except for
     85           *                pointer to platform-specific data structure)
     86           *
     87           * Notes:       if one or more mallocs fail, function frees any buffers already
     88           *                allocated before returning
     89           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
     90          AACDecInfo *aacAllocateBuffers(void)
     91          {
   \                     aacAllocateBuffers:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     92          	AACDecInfo *aacDecInfo;
     93          
     94          	aacDecInfo = (AACDecInfo *)malloc(sizeof(AACDecInfo));
   \   00000004   6000A0E3           MOV      R0,#+96
   \   00000008   140000EF           SWI      +20
   \   0000000C   0040B0E1           MOVS     R4,R0
     95          	if (!aacDecInfo)
     96          		return 0;
   \   00000010   0000A003           MOVEQ    R0,#+0
   \   00000014   7080BD08           POPEQ    {R4-R6,PC}
     97          	ClearBuffer(aacDecInfo, sizeof(AACDecInfo));
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0050A0E3           MOV      R5,#+0
   \                     ??aacAllocateBuffers_0:
   \   00000020   0450C0E7           STRB     R5,[R0, +R4]
   \   00000024   010080E2           ADD      R0,R0,#+1
   \   00000028   600050E3           CMP      R0,#+96
   \   0000002C   FBFFFFBA           BLT      ??aacAllocateBuffers_0
     98          
     99          	aacDecInfo->psInfoBase = malloc(sizeof(PSInfoBase));
   \   00000030   5060A0E3           MOV      R6,#+80
   \   00000034   506C86E3           ORR      R6,R6,#0x5000
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   140000EF           SWI      +20
   \   00000040   000084E5           STR      R0,[R4, #+0]
    100          	if (!aacDecInfo->psInfoBase) {
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0600001A           BNE      ??aacAllocateBuffers_1
   \   0000004C   0000000A           BEQ      ??aacAllocateBuffers_2
   \   00000050   150000EF           SWI      +21
   \                     ??aacAllocateBuffers_2:
   \   00000054   005084E5           STR      R5,[R4, #+0]
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   150000EF           SWI      +21
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   7080BDE8           POP      {R4-R6,PC}
    101          		aacFreeBuffers(aacDecInfo);
    102          		return 0;
    103          	}
    104          	ClearBuffer(aacDecInfo->psInfoBase, sizeof(PSInfoBase));
   \                     ??aacAllocateBuffers_1:
   \   00000068   0010A0E3           MOV      R1,#+0
   \                     ??aacAllocateBuffers_3:
   \   0000006C   0050C1E7           STRB     R5,[R1, +R0]
   \   00000070   011081E2           ADD      R1,R1,#+1
   \   00000074   060051E1           CMP      R1,R6
   \   00000078   FBFFFFBA           BLT      ??aacAllocateBuffers_3
    105          
    106          	return aacDecInfo;
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
    107          }
    108          
    109          #ifndef SAFE_FREE
    110          #define SAFE_FREE(x)	{if (x)	mfree(x);	(x) = 0;}	/* helper macro */
    111          #endif
    112          
    113          /**************************************************************************************
    114           * Function:    FreeBuffers
    115           *
    116           * Description: frees all the memory used by the AAC decoder
    117           *
    118           * Inputs:      pointer to initialized AACDecInfo structure
    119           *
    120           * Outputs:     none
    121           *
    122           * Return:      none
    123           *
    124           * Notes:       safe to call even if some buffers were not allocated (uses SAFE_FREE)
    125           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    126          void aacFreeBuffers(AACDecInfo *aacDecInfo)
    127          {
   \                     aacFreeBuffers:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    128          	if (!aacDecInfo)
   \   00000008   1080BD08           POPEQ    {R4,PC}
    129          		return;
    130          
    131          	SAFE_FREE(aacDecInfo->psInfoBase);
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      ??aacFreeBuffers_0
   \   00000018   150000EF           SWI      +21
   \   0000001C   0000A0E3           MOV      R0,#+0
   \                     ??aacFreeBuffers_0:
   \   00000020   000084E5           STR      R0,[R4, #+0]
    132          	SAFE_FREE(aacDecInfo);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   150000EF           SWI      +21
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
    133          }

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     aacAllocateBuffers    16
     aacFreeBuffers         8
     raac_ClearBuffer       0


   Segment part sizes:

     Function/Label     Bytes
     --------------     -----
     raac_ClearBuffer     40
     aacAllocateBuffers  132
     aacFreeBuffers       48
      Others              12

 
 232 bytes in segment CODE
 
 220 bytes of CODE memory (+ 12 bytes shared)

Errors: none
Warnings: none
