//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   14/Feb/2012  15:39:15 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACD /
//                       EC\AAC_FILE (11).c                                  /
//    Command line    =  "D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AAC /
//                       DEC\AAC_FILE (11).c" -D NDEBUG -lC                  /
//                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Playe /
//                       r\Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Pla /
//                       yer\Player\Release\Obj\ -s9 --cpu_mode arm          /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "D:\Program Files\IAR\Embedded Workbench 4.0        /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude      /
//                       swilib.h -I "D:\Program Files\IAR\Embedded          /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=16                               /
//    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\AAC_FILE (11).s79                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME `AAC_FILE (11)`

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??raac_TNSFilter??rT
        FUNCTION FilterRegion,0203H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC raac_TNSFilter
        FUNCTION raac_TNSFilter,0203H
        LOCFRAME CSTACK, 120, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
raac_TNSFilter      SYMBOL "raac_TNSFilter"
??raac_TNSFilter??rT SYMBOL "??rT", raac_TNSFilter

        EXTERN raac_sfBandTabLong
        EXTERN raac_sfBandTabLongOffset
        EXTERN raac_sfBandTabShort
        EXTERN raac_sfBandTabShortOffset
        EXTERN raac_sfBandTotalLong
        EXTERN raac_sfBandTotalShort
        EXTERN raac_tnsMaxBandsLong
        EXTERN raac_tnsMaxBandsLongOffset
        EXTERN raac_tnsMaxBandsShort
        EXTERN raac_tnsMaxBandsShortOffset
        EXTERN raac_tnsMaxOrderLong
        EXTERN raac_tnsMaxOrderShort

// D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDEC\AAC_FILE (11).c
//    1 /* ***** BEGIN LICENSE BLOCK *****  
//    2  * Source last modified: $Id: tns.c,v 1.1 2005/02/26 01:47:35 jrecker Exp $ 
//    3  *   
//    4  * Portions Copyright (c) 1995-2005 RealNetworks, Inc. All Rights Reserved.  
//    5  *       
//    6  * The contents of this file, and the files included with this file, 
//    7  * are subject to the current version of the RealNetworks Public 
//    8  * Source License (the "RPSL") available at 
//    9  * http://www.helixcommunity.org/content/rpsl unless you have licensed 
//   10  * the file under the current version of the RealNetworks Community 
//   11  * Source License (the "RCSL") available at 
//   12  * http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
//   13  * will apply. You may also obtain the license terms directly from 
//   14  * RealNetworks.  You may not use this file except in compliance with 
//   15  * the RPSL or, if you have a valid RCSL with RealNetworks applicable 
//   16  * to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
//   17  * the rights, obligations and limitations governing use of the 
//   18  * contents of the file. 
//   19  *   
//   20  * This file is part of the Helix DNA Technology. RealNetworks is the 
//   21  * developer of the Original Code and owns the copyrights in the 
//   22  * portions it created. 
//   23  *   
//   24  * This file, and the files included with this file, is distributed 
//   25  * and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY 
//   26  * KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS 
//   27  * ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES 
//   28  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET 
//   29  * ENJOYMENT OR NON-INFRINGEMENT. 
//   30  *  
//   31  * Technology Compatibility Kit Test Suite(s) Location:  
//   32  *    http://www.helixcommunity.org/content/tck  
//   33  *  
//   34  * Contributor(s):  
//   35  *   
//   36  * ***** END LICENSE BLOCK ***** */  
//   37 
//   38 /**************************************************************************************
//   39  * Fixed-point HE-AAC decoder
//   40  * Jon Recker (jrecker@real.com)
//   41  * February 2005
//   42  *
//   43  * tns.c - apply TNS to spectrum
//   44  **************************************************************************************/
//   45 
//   46 #include "coder_aac.h"
//   47 #include "assembly_aac.h"
//   48 
//   49 #define FBITS_LPC_COEFS	20
//   50 
//   51 /* inverse quantization tables for TNS filter coefficients, format = Q31
//   52  * see bottom of file for table generation
//   53  * negative (vs. spec) since we use MADD for filter kernel
//   54  */

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//   55 static const int invQuant3[16] = {
invQuant3:
        DATA
        DC32 0, -931758235, -1678970324, -2093641749, -2093641749, -1678970324
        DC32 -931758235, 0, 734482665, 1380375881, 1859775393, 2114858546
        DC32 2114858546, 1859775393, 1380375881, 734482665
        DC32 0, -446486956, -873460290, -1262259218, -1595891361, -1859775393
        DC32 -2042378317, -2135719508, 2138322861, 2065504841, 1922348530
        DC32 1713728946, 1446750378, 1130504462, 775760571, 394599085

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??FilterRegion??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE FilterRegion
//   56 	0x00000000, 0xc8767f65, 0x9becf22c, 0x83358feb, 0x83358feb, 0x9becf22c, 0xc8767f65, 0x00000000,
//   57 	0x2bc750e9, 0x5246dd49, 0x6ed9eba1, 0x7e0e2e32, 0x7e0e2e32, 0x6ed9eba1, 0x5246dd49, 0x2bc750e9,
//   58 };
//   59 
//   60 static const int invQuant4[16] = {
//   61 	0x00000000, 0xe5632654, 0xcbf00dbe, 0xb4c373ee, 0xa0e0a15f, 0x9126145f, 0x8643c7b3, 0x80b381ac,
//   62 	0x7f7437ad, 0x7b1d1a49, 0x7294b5f2, 0x66256db2, 0x563ba8aa, 0x4362210e, 0x2e3d2abb, 0x17851aad,
//   63 };
//   64 
//   65 /**************************************************************************************
//   66  * Function:    DecodeLPCCoefs
//   67  *
//   68  * Description: decode LPC coefficients for TNS
//   69  *
//   70  * Inputs:      order of TNS filter
//   71  *              resolution of coefficients (3 or 4 bits)
//   72  *              coefficients unpacked from bitstream
//   73  *              scratch buffer (b) of size >= order
//   74  *
//   75  * Outputs:     LPC coefficients in Q(FBITS_LPC_COEFS), in 'a'
//   76  *
//   77  * Return:      none
//   78  * 
//   79  * Notes:       assumes no guard bits in input transform coefficients
//   80  *              a[i] = Q(FBITS_LPC_COEFS), don't store a0 = 1.0 
//   81  *                (so a[0] = first delay tap, etc.) 
//   82  *              max abs(a[i]) < log2(order), so for max order = 20 a[i] < 4.4 
//   83  *                (up to 3 bits of gain) so a[i] has at least 31 - FBITS_LPC_COEFS - 3 
//   84  *                guard bits
//   85  *              to ensure no intermediate overflow in all-pole filter, set 
//   86  *                FBITS_LPC_COEFS such that number of guard bits >= log2(max order)
//   87  **************************************************************************************/
//   88 static void DecodeLPCCoefs(int order, int res, signed char *filtCoef, int *a, int *b)
//   89 {
//   90 	int i, m, t;
//   91 	const int *invQuantTab;
//   92 
//   93 	if (res == 3)			invQuantTab = invQuant3;
//   94 	else if (res == 4)		invQuantTab = invQuant4;
//   95 	else					return;
//   96 
//   97 	for (m = 0; m < order; m++) {
//   98 		t = invQuantTab[filtCoef[m] & 0x0f];	/* t = Q31 */
//   99 		for (i = 0; i < m; i++)
//  100 			b[i] = a[i] - (MULSHIFT32(t, a[m-i-1]) << 1);
//  101 		for (i = 0; i < m; i++) 
//  102 			a[i] = b[i];
//  103 		a[m] = t >> (31 - FBITS_LPC_COEFS);
//  104 	}
//  105 }
//  106 
//  107 /**************************************************************************************
//  108  * Function:    FilterRegion
//  109  *
//  110  * Description: apply LPC filter to one region of coefficients
//  111  *
//  112  * Inputs:      number of transform coefficients in this region
//  113  *              direction flag (forward = 1, backward = -1)
//  114  *              order of filter
//  115  *              'size' transform coefficients
//  116  *              'order' LPC coefficients in Q(FBITS_LPC_COEFS)
//  117  *              scratch buffer for history (must be >= order samples long)
//  118  *
//  119  * Outputs:     filtered transform coefficients
//  120  *
//  121  * Return:      guard bit mask (OR of abs value of all filtered transform coefs)
//  122  * 
//  123  * Notes:       assumes no guard bits in input transform coefficients
//  124  *              gains 0 int bits
//  125  *              history buffer does not need to be preserved between regions
//  126  **************************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function FilterRegion
        ARM
//  127 static int FilterRegion(int size, int dir, int order, int *audioCoef, int *a, int *hist)
//  128 {
FilterRegion:
        PUSH     {R4-R11}
        CFI R11 Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        SUB      SP,SP,#+8
        CFI CFA R13+40
        LDR      R4,[SP, #+40]
        LDR      R5,[SP, #+44]
        MOV      R12,R0
        MOV      R7,R2
//  129 	int i, j, y, hi32, inc, gbMask;
//  130 	U64 sum64;
//  131 
//  132 	/* init history to 0 every time */
//  133 	for (i = 0; i < order; i++)
        MOV      R0,#+0
        CMP      R7,#+1
        MOV      R2,#+0
        BGE      ??FilterRegion_0
        B        ??FilterRegion_1
//  134 		hist[i] = 0;
??FilterRegion_2:
        STR      R2,[R5, +R0, LSL #+2]
        ADD      R0,R0,#+1
??FilterRegion_0:
        CMP      R0,R7
        BLT      ??FilterRegion_2
//  135 
//  136 	gbMask = 0;
//  137 	inc = (dir ? -1 : 1);
??FilterRegion_1:
        CMP      R1,#+0
        MVNNE    R6,R2
        MOVEQ    R6,#+1
//  138 	do {
//  139 		/* sum64 = a0*y[n] = 1.0*y[n] */
//  140 		y = *audioCoef;
??FilterRegion_3:
        LDR      R0,[R3, #+0]
//  141 		sum64.r.hi32 = y >> (32 - FBITS_LPC_COEFS);
        ASR      R8,R0,#+12
        STR      R8,[SP, #+4]
//  142 		sum64.r.lo32 = y << FBITS_LPC_COEFS;
        LSL      R0,R0,#+20
        STR      R0,[SP, #+0]
//  143 		 
//  144 		/* sum64 += (a1*y[n-1] + a2*y[n-2] + ... + a[order-1]*y[n-(order-1)]) */
//  145         for (j = order - 1; j > 0; j--) {
        SUB      R8,R7,#+1
        CMP      R8,#+1
        BLT      ??FilterRegion_4
//  146 			sum64.w64 = MADD64(sum64.w64, hist[j], a[j]);
??FilterRegion_5:
        LDR      R10,[R5, +R8, LSL #+2]
        LDR      R9,[R4, +R8, LSL #+2]
        MOV      R0,SP
        LDM      R0,{R0,R1}
        MOV      R11,SP
        SMLAL    R0,R1,R10,R9
        STM      R11,{R0,R1}
//  147             hist[j] = hist[j-1];
        SUB      R0,R5,#+4
        LDR      R0,[R0, +R8, LSL #+2]
        STR      R0,[R5, +R8, LSL #+2]
//  148 		}
        SUB      R8,R8,#+1
        CMP      R8,#+1
        BGE      ??FilterRegion_5
//  149 		sum64.w64 = MADD64(sum64.w64, hist[0], a[0]);
??FilterRegion_4:
        LDR      R9,[R5, #+0]
        LDR      R10,[R4, #+0]
        MOV      R0,SP
        LDM      R0,{R0,R1}
        MOV      R8,SP
        SMLAL    R0,R1,R9,R10
        STM      R8,{R0,R1}
//  150 		y = (sum64.r.hi32 << (32 - FBITS_LPC_COEFS)) | (sum64.r.lo32 >> FBITS_LPC_COEFS);
        MOV      R0,R1
        LDR      R1,[SP, #+0]
//  151 
//  152 		/* clip output (rare) */
//  153 		hi32 = sum64.r.hi32;
//  154 		if ((hi32 >> 31) != (hi32 >> (FBITS_LPC_COEFS-1)))
        ASR      R8,R0,#+31
        LSR      R1,R1,#+20
        ORR      R1,R1,R0, LSL #+12
        CMP      R8,R0, ASR #+19
//  155 			y = (hi32 >> 31) ^ 0x7fffffff;
        MVNNE    R0,#-2147483648
        EORNE    R1,R0,R8
//  156 
//  157 		hist[0] = y;
        STR      R1,[R5, #+0]
//  158 		*audioCoef = y;
        STR      R1,[R3, #+0]
//  159 		audioCoef += inc;
        ADD      R3,R3,R6, LSL #+2
//  160 		gbMask |= FASTABS(y);
        ASR      R0,R1,#+31
        EOR      R1,R0,R1
        SUB      R0,R1,R0
        ORR      R2,R0,R2
//  161 	} while (--size);
        SUBS     R12,R12,#+1
        BNE      ??FilterRegion_3
//  162 
//  163 	return gbMask;
        MOV      R0,R2
        POP      {R1,R2,R4-R11}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//  164 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??raac_TNSFilter??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE raac_TNSFilter
//  165 
//  166 /**************************************************************************************
//  167  * Function:    TNSFilter
//  168  *
//  169  * Description: apply temporal noise shaping, if enabled
//  170  *
//  171  * Inputs:      valid AACDecInfo struct
//  172  *              index of current channel
//  173  *
//  174  * Outputs:     updated transform coefficients
//  175  *              updated minimum guard bit count for this channel
//  176  *
//  177  * Return:      0 if successful, -1 if error
//  178  **************************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function raac_TNSFilter
        ARM
//  179 int TNSFilter(AACDecInfo *aacDecInfo, int ch)
//  180 {
raac_TNSFilter:
        PUSH     {R1,R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+40
        SUB      SP,SP,#+72
        CFI CFA R13+112
//  181 	int win, winLen, nWindows, nSFB, filt, bottom, top, order, maxOrder, dir;
//  182 	int start, end, size, tnsMaxBand, numFilt, gbMask;
//  183 	int *audioCoef;
//  184 	unsigned char *filtLength, *filtOrder, *filtRes, *filtDir; 
//  185 	signed char *filtCoef;
//  186 	const unsigned char *tnsMaxBandTab;
//  187 	const short *sfbTab;
//  188 	ICSInfo *icsInfo;
//  189 	TNSInfo *ti;
//  190 	PSInfoBase *psi;
//  191 
//  192 	/* validate pointers */
//  193 	if (!aacDecInfo || !aacDecInfo->psInfoBase)
        CMP      R0,#+0
        LDRNE    R8,[R0, #+0]
        CMPNE    R8,#+0
//  194 		return -1;
        MVNEQ    R0,#+0
        ADDEQ    SP,SP,#+76
        POPEQ    {R4-R11,PC}
//  195 	psi = (PSInfoBase *)(aacDecInfo->psInfoBase);
//  196 	icsInfo = (ch == 1 && psi->commonWin == 1) ? &(psi->icsInfo[0]) : &(psi->icsInfo[ch]);
        LDR      R2,[SP, #+72]
        MOV      R1,#+124
        CMP      R2,#+1
        LDREQ    R2,[R8, #+2288]
        ORR      R1,R1,#0x800
        CMPEQ    R2,#+1
        ADDEQ    R1,R1,R8
        BEQ      ??raac_TNSFilter_0
        LDR      R2,[SP, #+72]
        MOV      R3,#+58
        MLA      R2,R3,R2,R8
        ADD      R1,R1,R2
//  197 	ti = &psi->tnsInfo[ch];
??raac_TNSFilter_0:
        LDR      R4,[SP, #+72]
        MOV      R5,#+101
        MLA      R4,R5,R4,R8
        MOV      R3,#+2
        ORR      R3,R3,#0xC00
        ADD      R3,R3,R4
        STR      R3,[SP, #+0]
//  198 
//  199 	if (!ti->tnsDataPresent)
        LDRB     R2,[R3, #+0]
        CMP      R2,#+0
        BNE      ??raac_TNSFilter_1
//  200 		return 0;
??raac_TNSFilter_2:
        B        ??raac_TNSFilter_3
//  201 
//  202 	if (icsInfo->winSequence == 2) {
??raac_TNSFilter_1:
        LDRB     R2,[R1, #+1]
        LDR      R0,[R0, #+72]
        CMP      R2,#+2
        BNE      ??raac_TNSFilter_4
//  203 		nWindows = NWINDOWS_SHORT;
//  204 		winLen = NSAMPS_SHORT;
//  205 		nSFB = sfBandTotalShort[psi->sampRateIdx];
        LDR      R4,??raac_TNSFilter_5  ;; raac_sfBandTotalShort
        MOV      R3,#+8
        STR      R3,[SP, #+36]
        MOV      R3,#+128
        STR      R3,[SP, #+40]
        LDR      R3,[R8, #+2168]
        LDRB     R3,[R3, +R4]
//  206 		maxOrder = tnsMaxOrderShort[aacDecInfo->profile];
//  207 		sfbTab = sfBandTabShort + sfBandTabShortOffset[psi->sampRateIdx];
        LDR      R4,??raac_TNSFilter_5+0x4  ;; raac_sfBandTabShortOffset
        STR      R3,[SP, #+44]
        LDR      R3,??raac_TNSFilter_5+0x8  ;; raac_tnsMaxOrderShort
        LDRB     R3,[R0, +R3]
        STR      R3,[SP, #+12]
        LDR      R3,[R8, #+2168]
        LDR      R3,[R4, +R3, LSL #+2]
        LDR      R4,??raac_TNSFilter_5+0xC  ;; raac_sfBandTabShort
        ADD      R3,R4,R3, LSL #+1
//  208 		tnsMaxBandTab = tnsMaxBandsShort + tnsMaxBandsShortOffset[aacDecInfo->profile];
//  209 		tnsMaxBand = tnsMaxBandTab[psi->sampRateIdx];
        LDR      R4,??raac_TNSFilter_5+0x10  ;; raac_tnsMaxBandsShortOffset
        STR      R3,[SP, #+16]
        LDR      R3,[R8, #+2168]
        LDR      R0,[R4, +R0, LSL #+2]
        LDR      R4,??raac_TNSFilter_5+0x14  ;; raac_tnsMaxBandsShort
        B        ??raac_TNSFilter_6
//  210 	} else {
//  211 		nWindows = NWINDOWS_LONG;
//  212 		winLen = NSAMPS_LONG;
//  213 		nSFB = sfBandTotalLong[psi->sampRateIdx];
??raac_TNSFilter_4:
        LDR      R4,??raac_TNSFilter_5+0x18  ;; raac_sfBandTotalLong
        MOV      R3,#+1
        STR      R3,[SP, #+36]
        MOV      R3,#+1024
        STR      R3,[SP, #+40]
        LDR      R3,[R8, #+2168]
        LDRB     R3,[R3, +R4]
//  214 		maxOrder = tnsMaxOrderLong[aacDecInfo->profile];
//  215 		sfbTab = sfBandTabLong + sfBandTabLongOffset[psi->sampRateIdx];
        LDR      R4,??raac_TNSFilter_5+0x1C  ;; raac_sfBandTabLongOffset
        STR      R3,[SP, #+44]
        LDR      R3,??raac_TNSFilter_5+0x20  ;; raac_tnsMaxOrderLong
        LDRB     R3,[R0, +R3]
        STR      R3,[SP, #+12]
        LDR      R3,[R8, #+2168]
        LDR      R3,[R4, +R3, LSL #+2]
        LDR      R4,??raac_TNSFilter_5+0x24  ;; raac_sfBandTabLong
        ADD      R3,R4,R3, LSL #+1
//  216 		tnsMaxBandTab = tnsMaxBandsLong + tnsMaxBandsLongOffset[aacDecInfo->profile];
//  217 		tnsMaxBand = tnsMaxBandTab[psi->sampRateIdx];
        LDR      R4,??raac_TNSFilter_5+0x28  ;; raac_tnsMaxBandsLongOffset
        STR      R3,[SP, #+16]
        LDR      R3,[R8, #+2168]
        LDR      R0,[R4, +R0, LSL #+2]
        LDR      R4,??raac_TNSFilter_5+0x2C  ;; raac_tnsMaxBandsLong
//  218 	}
//  219 
//  220 	if (tnsMaxBand > icsInfo->maxSFB)
//  221 		tnsMaxBand = icsInfo->maxSFB;
//  222 
//  223 	filtRes =    ti->coefRes;
//  224 	filtLength = ti->length;
//  225 	filtOrder =  ti->order;
//  226 	filtDir =    ti->dir;
//  227 	filtCoef =   ti->coef;
//  228 
//  229 	gbMask = 0;
//  230 	audioCoef =  psi->coef[ch];
??raac_TNSFilter_6:
        LDR      R2,[SP, #+72]
        ADD      R0,R0,R4
        LDRB     R0,[R3, +R0]
        ADD      R2,R8,R2, LSL #+12
        STR      R0,[SP, #+4]
        LDRB     R0,[R1, #+3]
        LDR      R1,[SP, #+4]
        CMP      R0,R1
        LDR      R1,[SP, #+0]
        STRLT    R0,[SP, #+4]
        ADD      R1,R1,#+9
        STR      R1,[SP, #+56]
        LDR      R1,[SP, #+0]
        ADD      R1,R1,#+17
        STR      R1,[SP, #+60]
        LDR      R1,[SP, #+0]
        ADD      R1,R1,#+25
        STR      R1,[SP, #+64]
        LDR      R1,[SP, #+0]
        ADD      R1,R1,#+33
        STR      R1,[SP, #+68]
        LDR      R1,[SP, #+0]
        ADD      R1,R1,#+41
        STR      R1,[SP, #+20]
        MOV      R1,#+0
        STR      R1,[SP, #+32]
        MOV      R1,#+72
        ORR      R1,R1,#0x1000
        ADD      R1,R1,R2
        STR      R1,[SP, #+24]
//  231 	for (win = 0; win < nWindows; win++) {
        MOV      R1,#+0
        B        ??raac_TNSFilter_7
//  232 		bottom = nSFB;
//  233 		numFilt = ti->numFilt[win];
//  234 		for (filt = 0; filt < numFilt; filt++) {
//  235 			top = bottom;
//  236 			bottom = top - *filtLength++;
//  237 			bottom = MAX(bottom, 0);
//  238 			order = *filtOrder++;
//  239 			order = MIN(order, maxOrder);
//  240 
//  241 			if (order) {
//  242 				start = sfbTab[MIN(bottom, tnsMaxBand)];
//  243 				end   = sfbTab[MIN(top, tnsMaxBand)];
//  244 				size = end - start;
//  245 				if (size > 0) {
//  246 					dir = *filtDir++;
//  247 					if (dir)
//  248 						start = end - 1;
//  249 
//  250 					DecodeLPCCoefs(order, filtRes[win], filtCoef, psi->tnsLPCBuf, psi->tnsWorkBuf);
//  251 					gbMask |= FilterRegion(size, dir, order, audioCoef + start, psi->tnsLPCBuf, psi->tnsWorkBuf);
//  252 				}
//  253 				filtCoef += order;
//  254 			}
//  255 		}
//  256 		audioCoef += winLen;
??raac_TNSFilter_8:
        LDR      R1,[SP, #+40]
        LDR      R2,[SP, #+24]
        ADD      R1,R2,R1, LSL #+2
        STR      R1,[SP, #+24]
        LDR      R1,[SP, #+8]
        ADD      R1,R1,#+1
??raac_TNSFilter_7:
        STR      R1,[SP, #+8]
        LDR      R0,[SP, #+8]
        LDR      R1,[SP, #+36]
        CMP      R0,R1
        BGE      ??raac_TNSFilter_9
        LDR      R2,[SP, #+0]
        LDR      R4,[SP, #+44]
        ADD      R1,R0,R2
        LDRB     R1,[R1, #+1]
        STR      R1,[SP, #+48]
        MOV      R1,#+0
        STR      R1,[SP, #+28]
        LDR      R0,[SP, #+48]
        CMP      R0,#+1
        BGE      ??raac_TNSFilter_10
        B        ??raac_TNSFilter_8
??raac_TNSFilter_11:
        LDR      R2,[SP, #+16]
        ADD      R1,R2,R1, LSL #+1
        LDRSH    R2,[R1, #+0]
        LDR      R1,[SP, #+4]
        CMP      R0,R1
        MOVGE    R0,R1
        LDR      R1,[SP, #+16]
        ADD      R0,R1,R0, LSL #+1
        LDRSH    R0,[R0, #+0]
        SUB      R3,R0,R2
        STR      R3,[SP, #+52]
        CMP      R3,#+1
        BLT      ??raac_TNSFilter_12
        LDR      R3,[SP, #+68]
        LDR      R9,??raac_TNSFilter_5+0x30  ;; invQuant3
        LDRB     R10,[R3], #+1
        STR      R3,[SP, #+68]
        LDR      R1,[SP, #+56]
        CMP      R10,#+0
        SUBNE    R2,R0,#+1
        MOV      R0,#+28
        ORR      R0,R0,#0xD00
        ADD      R3,R0,R8
        SUB      R0,R0,#+80
        ADD      R12,R0,R8
        LDR      R0,[SP, #+8]
        LDRB     R0,[R0, +R1]
        CMP      R0,#+3
        BEQ      ??raac_TNSFilter_13
        CMP      R0,#+4
        BNE      ??raac_TNSFilter_14
        ADD      R9,R9,#+64
??raac_TNSFilter_13:
        MOV      LR,#+0
        CMP      R5,#+1
        BGE      ??raac_TNSFilter_15
??raac_TNSFilter_14:
        LDR      R6,[SP, #+32]
        MOV      R0,#+28
        ORR      R0,R0,#0xD00
        ADD      R0,R0,R8
        PUSH     {R0}
        CFI CFA R13+116
        MOV      R1,R10
        MOV      R0,#+204
        ORR      R0,R0,#0xC00
        ADD      R0,R0,R8
        PUSH     {R0}
        CFI CFA R13+120
        LDR      R0,[SP, #+32]
        ADD      R3,R0,R2, LSL #+2
        LDR      R0,[SP, #+60]
        MOV      R2,R5
        BL       FilterRegion
        ORR      R0,R0,R6
        STR      R0,[SP, #+40]
        ADD      SP,SP,#+8
        CFI CFA R13+112
??raac_TNSFilter_12:
        LDR      R1,[SP, #+20]
        ADD      R1,R5,R1
        STR      R1,[SP, #+20]
??raac_TNSFilter_16:
        LDR      R1,[SP, #+28]
        ADD      R1,R1,#+1
        STR      R1,[SP, #+28]
??raac_TNSFilter_10:
        LDR      R0,[SP, #+28]
        LDR      R1,[SP, #+48]
        CMP      R0,R1
        BGE      ??raac_TNSFilter_8
        LDR      R2,[SP, #+60]
        MOV      R0,R4
        LDRB     R3,[R2], #+1
        STR      R2,[SP, #+60]
        LDR      R2,[SP, #+64]
        SUB      R4,R0,R3
        LDRB     R5,[R2], #+1
        STR      R2,[SP, #+64]
        LDR      R1,[SP, #+12]
        CMP      R4,#+1
        MOVLT    R4,#+0
        CMP      R5,R1
        MOVGE    R5,R1
        CMP      R5,#+0
        BEQ      ??raac_TNSFilter_16
        LDR      R1,[SP, #+4]
        CMP      R4,R1
        BGE      ??raac_TNSFilter_11
        MOV      R1,R4
        B        ??raac_TNSFilter_11
??raac_TNSFilter_17:
        LDR      R1,[R3, +R0, LSL #+2]
        STR      R1,[R12, +R0, LSL #+2]
        ADD      R0,R0,#+1
??raac_TNSFilter_18:
        CMP      R0,LR
        BLT      ??raac_TNSFilter_17
??raac_TNSFilter_19:
        ASR      R0,R6,#+11
        STR      R0,[R12, +LR, LSL #+2]
        ADD      LR,LR,#+1
??raac_TNSFilter_15:
        CMP      LR,R5
        BGE      ??raac_TNSFilter_14
        LDR      R0,[SP, #+20]
        MOV      R7,#+0
        LDRSB    R0,[LR, +R0]
        CMP      LR,#+1
        AND      R0,R0,#0xF
        LDR      R6,[R9, +R0, LSL #+2]
        BGE      ??raac_TNSFilter_20
        B        ??raac_TNSFilter_21
??raac_TNSFilter_22:
        LDR      R0,[R12, +R7, LSL #+2]
        PUSH     {R0}
        CFI CFA R13+116
        SUB      R0,LR,R7
        ADD      R0,R12,R0, LSL #+2
        LDR      R11,[R0, #-4]
        SMULL    R0,R1,R6,R11
        MOV      R0,R1
        POP      {R1}
        CFI CFA R13+112
        SUB      R0,R1,R0, LSL #+1
        STR      R0,[R3, +R7, LSL #+2]
        ADD      R7,R7,#+1
??raac_TNSFilter_20:
        CMP      R7,LR
        BLT      ??raac_TNSFilter_22
??raac_TNSFilter_21:
        MOV      R0,#+0
        CMP      LR,#+1
        BGE      ??raac_TNSFilter_18
        B        ??raac_TNSFilter_19
//  257 	}
//  258 
//  259 	/* update guard bit count if necessary */
//  260 	size = CLZ(gbMask) - 1;
??raac_TNSFilter_9:
        LDR      R0,[SP, #+32]
        CMP      R0,#+0
        MOVEQ    R0,#+32
        BEQ      ??raac_TNSFilter_23
        MOV      R1,#+1
        LSRS     R2,R0,#+16
        MOVEQ    R1,#+17
        LSLEQ    R0,R0,#+16
        LSRS     R2,R0,#+24
        ADDEQ    R1,R1,#+8
        LSLEQ    R0,R0,#+8
        LSRS     R2,R0,#+28
        ADDEQ    R1,R1,#+4
        LSLEQ    R0,R0,#+4
        LSRS     R2,R0,#+30
        ADDEQ    R1,R1,#+2
        LSLEQ    R0,R0,#+2
        SUB      R0,R1,R0, LSR #+31
//  261 	if (psi->gbCurrent[ch] > size)
??raac_TNSFilter_23:
        LDR      R1,[SP, #+72]
        SUB      R0,R0,#+1
        ADD      R1,R8,R1, LSL #+2
        ADD      R1,R1,#+4160
        LDR      R2,[R1, #+0]
        CMP      R0,R2
        BGE      ??raac_TNSFilter_3
//  262 		psi->gbCurrent[ch] = size;
        STR      R0,[R1, #+0]
??raac_TNSFilter_3:
        MOV      R0,#+0
        ADD      SP,SP,#+76
        CFI CFA R13+36
        POP      {R4-R11,PC}
        DATA
??raac_TNSFilter_5:
        DC32     raac_sfBandTotalShort
        DC32     raac_sfBandTabShortOffset
        DC32     raac_tnsMaxOrderShort
        DC32     raac_sfBandTabShort
        DC32     raac_tnsMaxBandsShortOffset
        DC32     raac_tnsMaxBandsShort
        DC32     raac_sfBandTotalLong
        DC32     raac_sfBandTabLongOffset
        DC32     raac_tnsMaxOrderLong
        DC32     raac_sfBandTabLong
        DC32     raac_tnsMaxBandsLongOffset
        DC32     raac_tnsMaxBandsLong
        DC32     invQuant3
        CFI EndBlock cfiBlock3
//  263 
//  264 	return 0;
//  265 }

        END
//  266 
//  267 /*	Code to generate invQuantXXX[] tables
//  268  *  {
//  269  *    int res, i, t;
//  270  *    double powScale, iqfac, iqfac_m, d;
//  271  *
//  272  *    powScale = pow(2.0, 31) * -1.0;	/ ** make coefficients negative for using MADD in kernel ** /
//  273  *    for (res = 3; res <= 4; res++) {
//  274  *      iqfac =   ( ((1 << (res-1)) - 0.5) * (2.0 / M_PI) );
//  275  *      iqfac_m = ( ((1 << (res-1)) + 0.5) * (2.0 / M_PI) );
//  276  *      printf("static const int invQuant%d[16] = {\n", res);
//  277  *      for (i = 0; i < 16; i++) {
//  278  *        / ** extend bottom 4 bits into signed, 2's complement number ** /
//  279  *        t = (i << 28) >> 28;
//  280  *
//  281  *        if (t >= 0)   d = sin(t / iqfac);
//  282  *        else          d = sin(t / iqfac_m);
//  283  *
//  284  *        d *= powScale;
//  285  *        printf("0x%08x, ", (int)(d > 0 ? d + 0.5 : d - 0.5));
//  286  *        if ((i & 0x07) == 0x07)
//  287  *           printf("\n");
//  288  *      }
//  289  *      printf("};\n\n");
//  290  *	  }
//  291  *  }
//  292  */
//  293 
// 
// 1 440 bytes in segment CODE
//   128 bytes in segment DATA_C
// 
// 1 432 bytes of CODE  memory (+ 8 bytes shared)
//   128 bytes of CONST memory
//
//Errors: none
//Warnings: none
