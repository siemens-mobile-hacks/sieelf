//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   14/Feb/2012  15:36:00 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\zlib\ZUT /
//                       IL.C                                                /
//    Command line    =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\zlib\ZUT /
//                       IL.C -D NDEBUG -lC D:\SVN\SieELF\SieELF\x65_PCM_Pla /
//                       yer\Player\Release\List\ -lA                        /
//                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player\Player /
//                       \Release\Obj\ -s9 --cpu_mode arm --endian little    /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --dlib_config "D:\Program                /
//                       Files\IAR\Embedded Workbench 4.0                    /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude      /
//                       swilib.h -I "D:\Program Files\IAR\Embedded          /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=16                               /
//    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\ZUTIL.s79                                      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ZUTIL

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??zError??rT
        MULTWEAK ??zcalloc??rT
        MULTWEAK ??zcfree??rT
        MULTWEAK ??zlibCompileFlags??rT
        MULTWEAK ??zlibVersion??rT
        PUBLIC zError
        FUNCTION zError,0203H
        PUBLIC z_errmsg
        PUBLIC zcalloc
        FUNCTION zcalloc,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC zcfree
        FUNCTION zcfree,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC zlibCompileFlags
        FUNCTION zlibCompileFlags,0203H
        PUBLIC zlibVersion
        FUNCTION zlibVersion,0203H
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
zError              SYMBOL "zError"
??zError??rT        SYMBOL "??rT", zError
zcalloc             SYMBOL "zcalloc"
??zcalloc??rT       SYMBOL "??rT", zcalloc
zcfree              SYMBOL "zcfree"
??zcfree??rT        SYMBOL "??rT", zcfree
zlibCompileFlags    SYMBOL "zlibCompileFlags"
??zlibCompileFlags??rT SYMBOL "??rT", zlibCompileFlags
zlibVersion         SYMBOL "zlibVersion"
??zlibVersion??rT   SYMBOL "??rT", zlibVersion


        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "need dictionary">`:
        DATA
        DC8 "need dictionary"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "stream end">`:
        DATA
        DC8 "stream end"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "">`:
        DATA
        DC8 ""

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "file error">`:
        DATA
        DC8 "file error"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "stream error">`:
        DATA
        DC8 "stream error"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "data error">`:
        DATA
        DC8 "data error"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "insufficient memory">`:
        DATA
        DC8 "insufficient memory"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "buffer error">`:
        DATA
        DC8 "buffer error"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "incompatible version">`:
        DATA
        DC8 "incompatible version"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "1.2.3">`:
        DATA
        DC8 "1.2.3"
        DC8 0, 0
// D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\zlib\ZUTIL.C
//    1 /* zutil.c -- target dependent utility functions for the compression library
//    2  * Copyright (C) 1995-2005 Jean-loup Gailly.
//    3  * For conditions of distribution and use, see copyright notice in zlib.h
//    4  */
//    5 
//    6 /* @(#) $Id$ */
//    7 
//    8 #include "zutil.h"
//    9 
//   10 #ifndef NO_DUMMY_DECL
//   11 struct internal_state      {int dummy;}; /* for buggy compilers */
//   12 #endif
//   13 

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//   14 const char * const z_errmsg[10] = {
z_errmsg:
        DATA
        DC32 `?<Constant "need dictionary">`, `?<Constant "stream end">`
        DC32 `?<Constant "">`, `?<Constant "file error">`
        DC32 `?<Constant "stream error">`, `?<Constant "data error">`
        DC32 `?<Constant "insufficient memory">`, `?<Constant "buffer error">`
        DC32 `?<Constant "incompatible version">`, `?<Constant "">`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??zlibVersion??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE zlibVersion
//   15 "need dictionary",     /* Z_NEED_DICT       2  */
//   16 "stream end",          /* Z_STREAM_END      1  */
//   17 "",                    /* Z_OK              0  */
//   18 "file error",          /* Z_ERRNO         (-1) */
//   19 "stream error",        /* Z_STREAM_ERROR  (-2) */
//   20 "data error",          /* Z_DATA_ERROR    (-3) */
//   21 "insufficient memory", /* Z_MEM_ERROR     (-4) */
//   22 "buffer error",        /* Z_BUF_ERROR     (-5) */
//   23 "incompatible version",/* Z_VERSION_ERROR (-6) */
//   24 ""};
//   25 
//   26 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function zlibVersion
        ARM
//   27 const char * ZEXPORT zlibVersion()
//   28 {
//   29     return ZLIB_VERSION;
zlibVersion:
        LDR      R0,??zlibVersion_0  ;; `?<Constant "1.2.3">`
        BX       LR               ;; return
        DATA
??zlibVersion_0:
        DC32     `?<Constant "1.2.3">`
        CFI EndBlock cfiBlock1
//   30 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??zlibCompileFlags??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE zlibCompileFlags
//   31 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function zlibCompileFlags
        ARM
//   32 uLong ZEXPORT zlibCompileFlags()
//   33 {
//   34     uLong flags;
//   35 
//   36     flags = 0;
//   37     switch (sizeof(uInt)) {
//   38     case 2:     break;
//   39     case 4:     flags += 1;     break;
//   40     case 8:     flags += 2;     break;
//   41     default:    flags += 3;
//   42     }
//   43     switch (sizeof(uLong)) {
//   44     case 2:     break;
//   45     case 4:     flags += 1 << 2;        break;
//   46     case 8:     flags += 2 << 2;        break;
//   47     default:    flags += 3 << 2;
//   48     }
//   49     switch (sizeof(voidpf)) {
//   50     case 2:     break;
//   51     case 4:     flags += 1 << 4;        break;
//   52     case 8:     flags += 2 << 4;        break;
//   53     default:    flags += 3 << 4;
//   54     }
//   55     switch (sizeof(z_off_t)) {
//   56     case 2:     break;
//   57     case 4:     flags += 1 << 6;        break;
//   58     case 8:     flags += 2 << 6;        break;
//   59     default:    flags += 3 << 6;
//   60     }
//   61 #ifdef DEBUG
//   62     flags += 1 << 8;
//   63 #endif
//   64 #if defined(ASMV) || defined(ASMINF)
//   65     flags += 1 << 9;
//   66 #endif
//   67 #ifdef ZLIB_WINAPI
//   68     flags += 1 << 10;
//   69 #endif
//   70 #ifdef BUILDFIXED
//   71     flags += 1 << 12;
//   72 #endif
//   73 #ifdef DYNAMIC_CRC_TABLE
//   74     flags += 1 << 13;
//   75 #endif
//   76 #ifdef NO_GZCOMPRESS
//   77     flags += 1L << 16;
//   78 #endif
//   79 #ifdef NO_GZIP
//   80     flags += 1L << 17;
//   81 #endif
//   82 #ifdef PKZIP_BUG_WORKAROUND
//   83     flags += 1L << 20;
//   84 #endif
//   85 #ifdef FASTEST
//   86     flags += 1L << 21;
//   87 #endif
//   88 #ifdef STDC
//   89 #  ifdef NO_vsnprintf
//   90         flags += 1L << 25;
//   91 #    ifdef HAS_vsprintf_void
//   92         flags += 1L << 26;
//   93 #    endif
//   94 #  else
//   95 #    ifdef HAS_vsnprintf_void
//   96         flags += 1L << 26;
//   97 #    endif
//   98 #  endif
//   99 #else
//  100         flags += 1L << 24;
//  101 #  ifdef NO_snprintf
//  102         flags += 1L << 25;
//  103 #    ifdef HAS_sprintf_void
//  104         flags += 1L << 26;
//  105 #    endif
//  106 #  else
//  107 #    ifdef HAS_snprintf_void
//  108         flags += 1L << 26;
//  109 #    endif
//  110 #  endif
//  111 #endif
//  112     return flags;
zlibCompileFlags:
        MOV      R0,#+85
        BX       LR               ;; return
        CFI EndBlock cfiBlock3
//  113 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??zError??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE zError
//  114 
//  115 #ifdef DEBUG
//  116 
//  117 #  ifndef verbose
//  118 #    define verbose 0
//  119 #  endif
//  120 int z_verbose = verbose;
//  121 
//  122 void z_error (m)
//  123     char *m;
//  124 {
//  125     fprintf(stderr, "%s\n", m);
//  126     exit(1);
//  127 }
//  128 #endif
//  129 
//  130 /* exported to allow conversion of error code to string for compress() and
//  131  * uncompress()
//  132  */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function zError
        ARM
//  133 const char * ZEXPORT zError(err)
//  134     int err;
//  135 {
//  136     return ERR_MSG(err);
zError:
        LDR      R1,??zError_0    ;; z_errmsg
        RSB      R0,R0,#+0
        ADD      R0,R1,R0, LSL #+2
        LDR      R0,[R0, #+8]
        BX       LR               ;; return
        DATA
??zError_0:
        DC32     z_errmsg
        CFI EndBlock cfiBlock5
//  137 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??zcalloc??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE zcalloc
//  138 
//  139 #if defined(_WIN32_WCE)
//  140     /* The Microsoft C Run-Time Library for Windows CE doesn't have
//  141      * errno.  We define it as a global variable to simplify porting.
//  142      * Its value is always 0 and should not be used.
//  143      */
//  144     int errno = 0;
//  145 #endif
//  146 
//  147 #ifndef HAVE_MEMCPY
//  148 
//  149 void zmemcpy(dest, source, len)
//  150     Bytef* dest;
//  151     const Bytef* source;
//  152     uInt  len;
//  153 {
//  154     if (len == 0) return;
//  155     do {
//  156         *dest++ = *source++; /* ??? to be unrolled */
//  157     } while (--len != 0);
//  158 }
//  159 
//  160 int zmemcmp(s1, s2, len)
//  161     const Bytef* s1;
//  162     const Bytef* s2;
//  163     uInt  len;
//  164 {
//  165     uInt j;
//  166 
//  167     for (j = 0; j < len; j++) {
//  168         if (s1[j] != s2[j]) return 2*(s1[j] > s2[j])-1;
//  169     }
//  170     return 0;
//  171 }
//  172 
//  173 void zmemzero(dest, len)
//  174     Bytef* dest;
//  175     uInt  len;
//  176 {
//  177     if (len == 0) return;
//  178     do {
//  179         *dest++ = 0;  /* ??? to be unrolled */
//  180     } while (--len != 0);
//  181 }
//  182 #endif
//  183 
//  184 
//  185 #ifdef SYS16BIT
//  186 
//  187 #ifdef __TURBOC__
//  188 /* Turbo C in 16-bit mode */
//  189 
//  190 #  define MY_ZCALLOC
//  191 
//  192 /* Turbo C malloc() does not allow dynamic allocation of 64K bytes
//  193  * and farmalloc(64K) returns a pointer with an offset of 8, so we
//  194  * must fix the pointer. Warning: the pointer must be put back to its
//  195  * original form in order to free it, use zcfree().
//  196  */
//  197 
//  198 #define MAX_PTR 10
//  199 /* 10*64K = 640K */
//  200 
//  201 local int next_ptr = 0;
//  202 
//  203 typedef struct ptr_table_s {
//  204     voidpf org_ptr;
//  205     voidpf new_ptr;
//  206 } ptr_table;
//  207 
//  208 local ptr_table table[MAX_PTR];
//  209 /* This table is used to remember the original form of pointers
//  210  * to large buffers (64K). Such pointers are normalized with a zero offset.
//  211  * Since MSDOS is not a preemptive multitasking OS, this table is not
//  212  * protected from concurrent access. This hack doesn't work anyway on
//  213  * a protected system like OS/2. Use Microsoft C instead.
//  214  */
//  215 
//  216 voidpf zcalloc (voidpf opaque, unsigned items, unsigned size)
//  217 {
//  218     voidpf buf = opaque; /* just to make some compilers happy */
//  219     ulg bsize = (ulg)items*size;
//  220 
//  221     /* If we allocate less than 65520 bytes, we assume that farmalloc
//  222      * will return a usable pointer which doesn't have to be normalized.
//  223      */
//  224     if (bsize < 65520L) {
//  225         buf = farmalloc(bsize);
//  226         if (*(ush*)&buf != 0) return buf;
//  227     } else {
//  228         buf = farmalloc(bsize + 16L);
//  229     }
//  230     if (buf == NULL || next_ptr >= MAX_PTR) return NULL;
//  231     table[next_ptr].org_ptr = buf;
//  232 
//  233     /* Normalize the pointer to seg:0 */
//  234     *((ush*)&buf+1) += ((ush)((uch*)buf-0) + 15) >> 4;
//  235     *(ush*)&buf = 0;
//  236     table[next_ptr++].new_ptr = buf;
//  237     return buf;
//  238 }
//  239 
//  240 void  zcfree (voidpf opaque, voidpf ptr)
//  241 {
//  242     int n;
//  243     if (*(ush*)&ptr != 0) { /* object < 64K */
//  244         farfree(ptr);
//  245         return;
//  246     }
//  247     /* Find the original pointer */
//  248     for (n = 0; n < next_ptr; n++) {
//  249         if (ptr != table[n].new_ptr) continue;
//  250 
//  251         farfree(table[n].org_ptr);
//  252         while (++n < next_ptr) {
//  253             table[n-1] = table[n];
//  254         }
//  255         next_ptr--;
//  256         return;
//  257     }
//  258     ptr = opaque; /* just to make some compilers happy */
//  259     Assert(0, "zcfree: ptr not found");
//  260 }
//  261 
//  262 #endif /* __TURBOC__ */
//  263 
//  264 
//  265 #ifdef M_I86
//  266 /* Microsoft C in 16-bit mode */
//  267 
//  268 #  define MY_ZCALLOC
//  269 
//  270 #if (!defined(_MSC_VER) || (_MSC_VER <= 600))
//  271 #  define _halloc  halloc
//  272 #  define _hfree   hfree
//  273 #endif
//  274 
//  275 voidpf zcalloc (voidpf opaque, unsigned items, unsigned size)
//  276 {
//  277     if (opaque) opaque = 0; /* to make compiler happy */
//  278     return _halloc((long)items, size);
//  279 }
//  280 
//  281 void  zcfree (voidpf opaque, voidpf ptr)
//  282 {
//  283     if (opaque) opaque = 0; /* to make compiler happy */
//  284     _hfree(ptr);
//  285 }
//  286 
//  287 #endif /* M_I86 */
//  288 
//  289 #endif /* SYS16BIT */
//  290 
//  291 
//  292 #ifndef MY_ZCALLOC /* Any system without a special alloc function */
//  293 
//  294 #ifndef STDC
//  295 extern voidp  malloc OF((uInt size));
//  296 extern voidp  calloc OF((uInt items, uInt size));
//  297 extern void   free   OF((voidpf ptr));
//  298 #endif
//  299 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function zcalloc
        ARM
//  300 voidpf zcalloc (opaque, items, size)
//  301     voidpf opaque;
//  302     unsigned items;
//  303     unsigned size;
//  304 {
zcalloc:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  305     if (opaque) items += size - size; /* make compiler happy */
//  306     return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :
//  307                               (voidpf)malloc(items * size);
        MUL      R0,R2,R1
        SWI      +20
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock7
//  308 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??zcfree??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE zcfree
//  309 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function zcfree
        ARM
//  310 void  zcfree (opaque, ptr)
//  311     voidpf opaque;
//  312     voidpf ptr;
//  313 {
zcfree:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,R1
//  314     mfree(ptr);
        SWI      +21
//  315     if (opaque) return; /* make compiler happy */
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock9
//  316 }

        END
//  317 
//  318 #endif /* MY_ZCALLOC */
// 
//  96 bytes in segment CODE
// 177 bytes in segment DATA_C
// 
//  76 bytes of CODE  memory (+ 20 bytes shared)
// 177 bytes of CONST memory
//
//Errors: none
//Warnings: none
