//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   14/Feb/2012  15:39:16 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACD /
//                       EC\AAC_FILE (14).c                                  /
//    Command line    =  "D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AAC /
//                       DEC\AAC_FILE (14).c" -D NDEBUG -lC                  /
//                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Playe /
//                       r\Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Pla /
//                       yer\Player\Release\Obj\ -s9 --cpu_mode arm          /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "D:\Program Files\IAR\Embedded Workbench 4.0        /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude      /
//                       swilib.h -I "D:\Program Files\IAR\Embedded          /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=16                               /
//    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\ /
//                       List\AAC_FILE (14).s79                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME `AAC_FILE (14)`

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??aacAllocateBuffers??rT
        MULTWEAK ??aacFreeBuffers??rT
        MULTWEAK ??raac_ClearBuffer??rT
        PUBLIC aacAllocateBuffers
        FUNCTION aacAllocateBuffers,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC aacFreeBuffers
        FUNCTION aacFreeBuffers,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC raac_ClearBuffer
        FUNCTION raac_ClearBuffer,0203H
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
aacAllocateBuffers  SYMBOL "aacAllocateBuffers"
??aacAllocateBuffers??rT SYMBOL "??rT", aacAllocateBuffers
aacFreeBuffers      SYMBOL "aacFreeBuffers"
??aacFreeBuffers??rT SYMBOL "??rT", aacFreeBuffers
raac_ClearBuffer    SYMBOL "raac_ClearBuffer"
??raac_ClearBuffer??rT SYMBOL "??rT", raac_ClearBuffer


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??raac_ClearBuffer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE raac_ClearBuffer
// D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDEC\AAC_FILE (14).c
//    1 /* ***** BEGIN LICENSE BLOCK *****  
//    2  * Source last modified: $Id: buffers.c,v 1.1 2005/02/26 01:47:34 jrecker Exp $ 
//    3  *   
//    4  * Portions Copyright (c) 1995-2005 RealNetworks, Inc. All Rights Reserved.  
//    5  *       
//    6  * The contents of this file, and the files included with this file, 
//    7  * are subject to the current version of the RealNetworks Public 
//    8  * Source License (the "RPSL") available at 
//    9  * http://www.helixcommunity.org/content/rpsl unless you have licensed 
//   10  * the file under the current version of the RealNetworks Community 
//   11  * Source License (the "RCSL") available at 
//   12  * http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
//   13  * will apply. You may also obtain the license terms directly from 
//   14  * RealNetworks.  You may not use this file except in compliance with 
//   15  * the RPSL or, if you have a valid RCSL with RealNetworks applicable 
//   16  * to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
//   17  * the rights, obligations and limitations governing use of the 
//   18  * contents of the file. 
//   19  *   
//   20  * This file is part of the Helix DNA Technology. RealNetworks is the 
//   21  * developer of the Original Code and owns the copyrights in the 
//   22  * portions it created. 
//   23  *   
//   24  * This file, and the files included with this file, is distributed 
//   25  * and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY 
//   26  * KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS 
//   27  * ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES 
//   28  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET 
//   29  * ENJOYMENT OR NON-INFRINGEMENT. 
//   30  *  
//   31  * Technology Compatibility Kit Test Suite(s) Location:  
//   32  *    http://www.helixcommunity.org/content/tck  
//   33  *  
//   34  * Contributor(s):  
//   35  *   
//   36  * ***** END LICENSE BLOCK ***** */  
//   37 
//   38 /**************************************************************************************
//   39  * Fixed-point HE-AAC decoder
//   40  * Jon Recker (jrecker@real.com)
//   41  * February 2005
//   42  *
//   43  * buffers.c - allocation and deallocation of internal AAC decoder buffers
//   44  **************************************************************************************/
//   45 
//   46 
//   47 #include "coder_aac.h"
//   48 //#include "..\..\..\swilib.h"
//   49 
//   50 /**************************************************************************************
//   51  * Function:    ClearBuffer
//   52  *
//   53  * Description: fill buffer with 0's
//   54  *
//   55  * Inputs:      pointer to buffer
//   56  *              number of bytes to fill with 0
//   57  *
//   58  * Outputs:     cleared buffer
//   59  *
//   60  * Return:      none
//   61  *
//   62  * Notes:       slow, platform-independent equivalent to memset(buf, 0, nBytes)
//   63  **************************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function raac_ClearBuffer
        ARM
//   64 void ClearBuffer(void *buf, int nBytes)
//   65 {
//   66 	int i;
//   67 	unsigned char *cbuf = (unsigned char *)buf;
//   68 
//   69 	for (i = 0; i < nBytes; i++)
raac_ClearBuffer:
        MOV      R2,#+0
        CMP      R1,#+1
        MOV      R3,#+0
        BGE      ??raac_ClearBuffer_0
        BX       LR
//   70 		cbuf[i] = 0;
??raac_ClearBuffer_1:
        STRB     R3,[R2, +R0]
        ADD      R2,R2,#+1
??raac_ClearBuffer_0:
        CMP      R2,R1
        BLT      ??raac_ClearBuffer_1
//   71 
//   72 	return;
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//   73 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??aacAllocateBuffers??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE aacAllocateBuffers
//   74 
//   75 /**************************************************************************************
//   76  * Function:    AllocateBuffers
//   77  *
//   78  * Description: allocate all the memory needed for the AAC decoder
//   79  *
//   80  * Inputs:      none
//   81  *
//   82  * Outputs:     none
//   83  *
//   84  * Return:      pointer to AACDecInfo structure, cleared to all 0's (except for
//   85  *                pointer to platform-specific data structure)
//   86  *
//   87  * Notes:       if one or more mallocs fail, function frees any buffers already
//   88  *                allocated before returning
//   89  **************************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function aacAllocateBuffers
        ARM
//   90 AACDecInfo *aacAllocateBuffers(void)
//   91 {
aacAllocateBuffers:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//   92 	AACDecInfo *aacDecInfo;
//   93 
//   94 	aacDecInfo = (AACDecInfo *)malloc(sizeof(AACDecInfo));
        MOV      R0,#+96
        SWI      +20
        MOVS     R4,R0
//   95 	if (!aacDecInfo)
//   96 		return 0;
        MOVEQ    R0,#+0
        POPEQ    {R4-R6,PC}
//   97 	ClearBuffer(aacDecInfo, sizeof(AACDecInfo));
        MOV      R0,#+0
        MOV      R5,#+0
??aacAllocateBuffers_0:
        STRB     R5,[R0, +R4]
        ADD      R0,R0,#+1
        CMP      R0,#+96
        BLT      ??aacAllocateBuffers_0
//   98 
//   99 	aacDecInfo->psInfoBase = malloc(sizeof(PSInfoBase));
        MOV      R6,#+80
        ORR      R6,R6,#0x5000
        MOV      R0,R6
        SWI      +20
        STR      R0,[R4, #+0]
//  100 	if (!aacDecInfo->psInfoBase) {
        CMP      R0,#+0
        BNE      ??aacAllocateBuffers_1
        BEQ      ??aacAllocateBuffers_2
        SWI      +21
??aacAllocateBuffers_2:
        STR      R5,[R4, #+0]
        MOV      R0,R4
        SWI      +21
        MOV      R0,#+0
        POP      {R4-R6,PC}
//  101 		aacFreeBuffers(aacDecInfo);
//  102 		return 0;
//  103 	}
//  104 	ClearBuffer(aacDecInfo->psInfoBase, sizeof(PSInfoBase));
??aacAllocateBuffers_1:
        MOV      R1,#+0
??aacAllocateBuffers_3:
        STRB     R5,[R1, +R0]
        ADD      R1,R1,#+1
        CMP      R1,R6
        BLT      ??aacAllocateBuffers_3
//  105 
//  106 	return aacDecInfo;
        MOV      R0,R4
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock3
//  107 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??aacFreeBuffers??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE aacFreeBuffers
//  108 
//  109 #ifndef SAFE_FREE
//  110 #define SAFE_FREE(x)	{if (x)	mfree(x);	(x) = 0;}	/* helper macro */
//  111 #endif
//  112 
//  113 /**************************************************************************************
//  114  * Function:    FreeBuffers
//  115  *
//  116  * Description: frees all the memory used by the AAC decoder
//  117  *
//  118  * Inputs:      pointer to initialized AACDecInfo structure
//  119  *
//  120  * Outputs:     none
//  121  *
//  122  * Return:      none
//  123  *
//  124  * Notes:       safe to call even if some buffers were not allocated (uses SAFE_FREE)
//  125  **************************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function aacFreeBuffers
        ARM
//  126 void aacFreeBuffers(AACDecInfo *aacDecInfo)
//  127 {
aacFreeBuffers:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
//  128 	if (!aacDecInfo)
        POPEQ    {R4,PC}
//  129 		return;
//  130 
//  131 	SAFE_FREE(aacDecInfo->psInfoBase);
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        BEQ      ??aacFreeBuffers_0
        SWI      +21
        MOV      R0,#+0
??aacFreeBuffers_0:
        STR      R0,[R4, #+0]
//  132 	SAFE_FREE(aacDecInfo);
        MOV      R0,R4
        SWI      +21
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock5
//  133 }

        END
// 
// 232 bytes in segment CODE
// 
// 220 bytes of CODE memory (+ 12 bytes shared)
//
//Errors: none
//Warnings: none
