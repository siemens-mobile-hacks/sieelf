##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Feb/2012  15:39:15 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDE #
#                       C\AAC_FILE (10).c                                    #
#    Command line    =  "D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACD #
#                       EC\AAC_FILE (10).c" -D NDEBUG -lC                    #
#                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\ -lA D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\ #
#                       Release\List\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player #
#                       \Player\Release\Obj\ -s9 --cpu_mode arm --endian     #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Program              #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude       #
#                       swilib.h -I "D:\Program Files\IAR\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=16                                #
#    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\AAC_FILE (10).lst                                #
#    Object file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\AAC_FILE (10).r79                                 #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AAC\AACDEC\AAC_FILE (10).c
      1          /* ***** BEGIN LICENSE BLOCK *****  
      2           * Source last modified: $Id: stproc.c,v 1.1 2005/02/26 01:47:35 jrecker Exp $ 
      3           *   
      4           * Portions Copyright (c) 1995-2005 RealNetworks, Inc. All Rights Reserved.  
      5           *       
      6           * The contents of this file, and the files included with this file, 
      7           * are subject to the current version of the RealNetworks Public 
      8           * Source License (the "RPSL") available at 
      9           * http://www.helixcommunity.org/content/rpsl unless you have licensed 
     10           * the file under the current version of the RealNetworks Community 
     11           * Source License (the "RCSL") available at 
     12           * http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
     13           * will apply. You may also obtain the license terms directly from 
     14           * RealNetworks.  You may not use this file except in compliance with 
     15           * the RPSL or, if you have a valid RCSL with RealNetworks applicable 
     16           * to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
     17           * the rights, obligations and limitations governing use of the 
     18           * contents of the file. 
     19           *   
     20           * This file is part of the Helix DNA Technology. RealNetworks is the 
     21           * developer of the Original Code and owns the copyrights in the 
     22           * portions it created. 
     23           *   
     24           * This file, and the files included with this file, is distributed 
     25           * and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY 
     26           * KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS 
     27           * ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES 
     28           * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET 
     29           * ENJOYMENT OR NON-INFRINGEMENT. 
     30           *  
     31           * Technology Compatibility Kit Test Suite(s) Location:  
     32           *    http://www.helixcommunity.org/content/tck  
     33           *  
     34           * Contributor(s):  
     35           *   
     36           * ***** END LICENSE BLOCK ***** */  
     37          
     38          /**************************************************************************************
     39           * Fixed-point HE-AAC decoder
     40           * Jon Recker (jrecker@real.com)
     41           * February 2005
     42           *
     43           * stproc.c - mid-side and intensity stereo processing
     44           **************************************************************************************/
     45          
     46          #include "coder_aac.h"
     47          #include "assembly_aac.h"
     48          
     49          /* pow14[0][i] = -pow(2, i/4.0) 
     50           * pow14[1][i] = +pow(2, i/4.0) 
     51           * 
     52           * i = [0,1,2,3]
     53           * format = Q30
     54           */

   \                                 In segment DATA_C, align 4, align-sorted
     55          static const int pow14[2][4] = { 
   \                     pow14:
   \   00000000   000000C0D707       DC32 -1073741824, -1276901417, -1518500250, -1805811301, 1073741824
   \              E4B366867DA5
   \              9B815D940000
   \              0040        
   \   00000014   29F81B4C9A79       DC32 1276901417, 1518500250, 1805811301
   \              825A657EA26B
     56          	0xc0000000, 0xb3e407d7, 0xa57d8666, 0x945d819b, 
     57          	0x40000000, 0x4c1bf829, 0x5a82799a, 0x6ba27e65
     58          };
     59          
     60          /**************************************************************************************
     61           * Function:    StereoProcessGroup
     62           *
     63           * Description: apply mid-side and intensity stereo to group of transform coefficients
     64           *
     65           * Inputs:      dequantized transform coefficients for both channels
     66           *              pointer to appropriate scalefactor band table
     67           *              mid-side mask enabled flag
     68           *              buffer with mid-side mask (one bit for each scalefactor band)
     69           *              bit offset into mid-side mask buffer
     70           *              max coded scalefactor band
     71           *              buffer of codebook indices for right channel
     72           *              buffer of scalefactors for right channel, range = [0, 256]
     73           *
     74           * Outputs:     updated transform coefficients in Q(FBITS_OUT_DQ_OFF)
     75           *              updated minimum guard bit count for both channels
     76           *
     77           * Return:      none
     78           *
     79           * Notes:       assume 1 guard bit in input
     80           *              gains 0 int bits
     81           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
     82          static void StereoProcessGroup(int *coefL, int *coefR, const short *sfbTab, 
     83          							  int msMaskPres, unsigned char *msMaskPtr, int msMaskOffset, int maxSFB, 
     84          							  unsigned char *cbRight, short *sfRight, int *gbCurrent)
     85          {
   \                     StereoProcessGroup:
   \   00000000   FC4F2DE9           PUSH     {R2-R11,LR}
   \   00000004   30909DE5           LDR      R9,[SP, #+48]
   \   00000008   2CB09DE5           LDR      R11,[SP, #+44]
     86          	int sfb, width, cbIdx, sf, cl, cr, scalef, scalei;
     87          	int gbMaskL, gbMaskR;
     88          	unsigned char msMask;
     89          
     90          	msMask = (*msMaskPtr++) >> msMaskOffset;
     91          	gbMaskL = 0;
   \   0000000C   0080A0E3           MOV      R8,#+0
   \   00000010   ........           LDRB     R2,[R11], #+1
     92          	gbMaskR = 0;
   \   00000014   0040A0E3           MOV      R4,#+0
     93          
     94          	for (sfb = 0; sfb < maxSFB; sfb++) {
   \   00000018   0470A0E1           MOV      R7,R4
   \   0000001C   52C9A0E1           ASR      R12,R2,R9
   \   00000020   34209DE5           LDR      R2,[SP, #+52]
   \   00000024   FFC00CE2           AND      R12,R12,#0xFF
   \   00000028   010052E3           CMP      R2,#+1
   \   0000002C   210000AA           BGE      ??StereoProcessGroup_0
     95          		width = sfbTab[sfb+1] - sfbTab[sfb];	/* assume >= 0 (see sfBandTabLong/sfBandTabShort) */
     96          		cbIdx = cbRight[sfb];
     97          
     98          		if (cbIdx == 14 || cbIdx == 15) {
     99          			/* intensity stereo */
    100          			if (msMaskPres == 1 && (msMask & 0x01))
    101          				cbIdx ^= 0x01;				/* invert_intensity(): 14 becomes 15, or 15 becomes 14 */
    102          			sf = -sfRight[sfb];				/* negative since we use identity 0.5^(x) = 2^(-x) (see spec) */
    103          			cbIdx &= 0x01;					/* choose - or + scale factor */
    104          			scalef = pow14[cbIdx][sf & 0x03];
    105          			scalei = (sf >> 2) + 2;			/* +2 to compensate for scalef = Q30 */
    106          			
    107          			if (scalei > 0) {
    108          				if (scalei > 30)
    109          					scalei = 30;
    110          				do {
    111          					cr = MULSHIFT32(*coefL++, scalef);
    112          					CLIP_2N(cr, 31-scalei);
    113          					cr <<= scalei;
    114          					gbMaskR |= FASTABS(cr);
    115          					*coefR++ = cr;
    116          				} while (--width);
    117          			} else {
    118          				scalei = -scalei;
    119          				if (scalei > 31)
    120          					scalei = 31;
    121          				do {
    122          					cr = MULSHIFT32(*coefL++, scalef) >> scalei;
    123          					gbMaskR |= FASTABS(cr);
    124          					*coefR++ = cr;
    125          				} while (--width);
    126          			}
    127          		} else if ( cbIdx != 13 && ((msMaskPres == 1 && (msMask & 0x01)) || msMaskPres == 2) ) {
    128          			/* mid-side stereo (assumes 1 GB in inputs) */
    129          			do {
    130          				cl = *coefL;	
    131          				cr = *coefR;
    132          
    133          				sf = cl + cr;
    134          				*coefL++ = sf;
    135          				gbMaskL |= FASTABS(sf);
    136          
    137          				cl -= cr;
    138          				*coefR++ = cl;
    139          				gbMaskR |= FASTABS(cl);
    140          			} while (--width);
    141          
    142          		} else {
    143          			/* nothing to do */
    144          			coefL += width;
    145          			coefR += width;
    146          		}
    147          
    148          		/* get next mask bit (should be branchless on ARM) */
    149          		msMask >>= 1;
    150          		if (++msMaskOffset == 8) {
    151          			msMask = *msMaskPtr++;
    152          			msMaskOffset = 0;
    153          		}
    154          	}
    155          
    156          	cl = CLZ(gbMaskL) - 1;
   \                     ??StereoProcessGroup_1:
   \   00000030   000058E3           CMP      R8,#+0
   \   00000034   6800001A           BNE      ??StereoProcessGroup_2
   \   00000038   2000A0E3           MOV      R0,#+32
   \   0000003C   740000EA           B        ??StereoProcessGroup_3
   \                     ??StereoProcessGroup_4:
   \   00000040   005065E2           RSB      R5,R5,#+0
   \   00000044   200055E3           CMP      R5,#+32
   \   00000048   1F50A0A3           MOVGE    R5,#+31
   \                     ??StereoProcessGroup_5:
   \   0000004C   ........           LDR      LR,[R0], #+4
   \   00000050   016056E2           SUBS     R6,R6,#+1
   \   00000054   9E2AC3E0           SMULL    R2,R3,LR,R10
   \   00000058   5335A0E1           ASR      R3,R3,R5
   \   0000005C   C32FA0E1           ASR      R2,R3,#+31
   \   00000060   03E022E0           EOR      LR,R2,R3
   \   00000064   02204EE0           SUB      R2,LR,R2
   \   00000068   044082E1           ORR      R4,R2,R4
   \   0000006C   ........           STR      R3,[R1], #+4
   \   00000070   F5FFFF1A           BNE      ??StereoProcessGroup_5
   \   00000074   080000EA           B        ??StereoProcessGroup_6
   \                     ??StereoProcessGroup_7:
   \   00000078   0D0053E3           CMP      R3,#+13
   \   0000007C   0400000A           BEQ      ??StereoProcessGroup_8
   \   00000080   04209DE5           LDR      R2,[SP, #+4]
   \   00000084   010052E3           CMP      R2,#+1
   \   00000088   4000001A           BNE      ??StereoProcessGroup_9
   \   0000008C   01001CE3           TST      R12,#0x1
   \   00000090   4000001A           BNE      ??StereoProcessGroup_10
   \                     ??StereoProcessGroup_8:
   \   00000094   060180E0           ADD      R0,R0,R6, LSL #+2
   \   00000098   061181E0           ADD      R1,R1,R6, LSL #+2
   \                     ??StereoProcessGroup_6:
   \   0000009C   8CCBA0E1           LSL      R12,R12,#+23
   \   000000A0   2CCCA0E1           LSR      R12,R12,#+24
   \   000000A4   019089E2           ADD      R9,R9,#+1
   \   000000A8   080059E3           CMP      R9,#+8
   \   000000AC   ........           LDRBEQ   R12,[R11], #+1
   \   000000B0   0090A003           MOVEQ    R9,#+0
   \   000000B4   017087E2           ADD      R7,R7,#+1
   \                     ??StereoProcessGroup_0:
   \   000000B8   34209DE5           LDR      R2,[SP, #+52]
   \   000000BC   020057E1           CMP      R7,R2
   \   000000C0   DAFFFFAA           BGE      ??StereoProcessGroup_1
   \   000000C4   00209DE5           LDR      R2,[SP, #+0]
   \   000000C8   872082E0           ADD      R2,R2,R7, LSL #+1
   \   000000CC   F230D2E1           LDRSH    R3,[R2, #+2]
   \   000000D0   F020D2E1           LDRSH    R2,[R2, #+0]
   \   000000D4   026043E0           SUB      R6,R3,R2
   \   000000D8   38209DE5           LDR      R2,[SP, #+56]
   \   000000DC   0230D7E7           LDRB     R3,[R7, +R2]
   \   000000E0   0E0053E3           CMP      R3,#+14
   \   000000E4   0F005313           CMPNE    R3,#+15
   \   000000E8   E2FFFF1A           BNE      ??StereoProcessGroup_7
   \   000000EC   04209DE5           LDR      R2,[SP, #+4]
   \   000000F0   010052E3           CMP      R2,#+1
   \   000000F4   0100001A           BNE      ??StereoProcessGroup_11
   \   000000F8   01001CE3           TST      R12,#0x1
   \   000000FC   01302312           EORNE    R3,R3,#0x1
   \                     ??StereoProcessGroup_11:
   \   00000100   3C209DE5           LDR      R2,[SP, #+60]
   \   00000104   80A19FE5           LDR      R10,??StereoProcessGroup_12  ;; pow14
   \   00000108   872082E0           ADD      R2,R2,R7, LSL #+1
   \   0000010C   F020D2E1           LDRSH    R2,[R2, #+0]
   \   00000110   013003E2           AND      R3,R3,#0x1
   \   00000114   03328AE0           ADD      R3,R10,R3, LSL #+4
   \   00000118   002062E2           RSB      R2,R2,#+0
   \   0000011C   035002E2           AND      R5,R2,#0x3
   \   00000120   05A193E7           LDR      R10,[R3, +R5, LSL #+2]
   \   00000124   0230A0E3           MOV      R3,#+2
   \   00000128   425183E0           ADD      R5,R3,R2, ASR #+2
   \   0000012C   010055E3           CMP      R5,#+1
   \   00000130   C2FFFFBA           BLT      ??StereoProcessGroup_4
   \   00000134   1F0055E3           CMP      R5,#+31
   \   00000138   1E50A0A3           MOVGE    R5,#+30
   \                     ??StereoProcessGroup_13:
   \   0000013C   ........           LDR      LR,[R0], #+4
   \   00000140   9E2AC3E0           SMULL    R2,R3,LR,R10
   \   00000144   0320A0E1           MOV      R2,R3
   \   00000148   0530A0E1           MOV      R3,R5
   \   0000014C   1F3063E2           RSB      R3,R3,#+31
   \   00000150   C2EFA0E1           ASR      LR,R2,#+31
   \   00000154   52035EE1           CMP      LR,R2, ASR R3
   \   00000158   0300000A           BEQ      ??StereoProcessGroup_14
   \   0000015C   0120A0E3           MOV      R2,#+1
   \   00000160   1223A0E1           LSL      R2,R2,R3
   \   00000164   012042E2           SUB      R2,R2,#+1
   \   00000168   0E2022E0           EOR      R2,R2,LR
   \                     ??StereoProcessGroup_14:
   \   0000016C   1235A0E1           LSL      R3,R2,R5
   \   00000170   C32FA0E1           ASR      R2,R3,#+31
   \   00000174   03E022E0           EOR      LR,R2,R3
   \   00000178   02204EE0           SUB      R2,LR,R2
   \   0000017C   044082E1           ORR      R4,R2,R4
   \   00000180   ........           STR      R3,[R1], #+4
   \   00000184   016056E2           SUBS     R6,R6,#+1
   \   00000188   EBFFFF1A           BNE      ??StereoProcessGroup_13
   \   0000018C   C2FFFFEA           B        ??StereoProcessGroup_6
   \                     ??StereoProcessGroup_9:
   \   00000190   020052E3           CMP      R2,#+2
   \   00000194   BEFFFF1A           BNE      ??StereoProcessGroup_8
   \                     ??StereoProcessGroup_10:
   \   00000198   005090E5           LDR      R5,[R0, #+0]
   \   0000019C   003091E5           LDR      R3,[R1, #+0]
   \   000001A0   016056E2           SUBS     R6,R6,#+1
   \   000001A4   052083E0           ADD      R2,R3,R5
   \   000001A8   ........           STR      R2,[R0], #+4
   \   000001AC   C2AFA0E1           ASR      R10,R2,#+31
   \   000001B0   02202AE0           EOR      R2,R10,R2
   \   000001B4   0A2042E0           SUB      R2,R2,R10
   \   000001B8   088082E1           ORR      R8,R2,R8
   \   000001BC   032045E0           SUB      R2,R5,R3
   \   000001C0   ........           STR      R2,[R1], #+4
   \   000001C4   C23FA0E1           ASR      R3,R2,#+31
   \   000001C8   022023E0           EOR      R2,R3,R2
   \   000001CC   032042E0           SUB      R2,R2,R3
   \   000001D0   044082E1           ORR      R4,R2,R4
   \   000001D4   EFFFFF1A           BNE      ??StereoProcessGroup_10
   \   000001D8   AFFFFFEA           B        ??StereoProcessGroup_6
   \                     ??StereoProcessGroup_2:
   \   000001DC   0100A0E3           MOV      R0,#+1
   \   000001E0   2818B0E1           LSRS     R1,R8,#+16
   \   000001E4   1100A003           MOVEQ    R0,#+17
   \   000001E8   0888A001           LSLEQ    R8,R8,#+16
   \   000001EC   281CB0E1           LSRS     R1,R8,#+24
   \   000001F0   08008002           ADDEQ    R0,R0,#+8
   \   000001F4   0884A001           LSLEQ    R8,R8,#+8
   \   000001F8   281EB0E1           LSRS     R1,R8,#+28
   \   000001FC   04008002           ADDEQ    R0,R0,#+4
   \   00000200   0882A001           LSLEQ    R8,R8,#+4
   \   00000204   281FB0E1           LSRS     R1,R8,#+30
   \   00000208   02008002           ADDEQ    R0,R0,#+2
   \   0000020C   0881A001           LSLEQ    R8,R8,#+2
   \   00000210   A80F40E0           SUB      R0,R0,R8, LSR #+31
    157          	if (gbCurrent[0] > cl)
   \                     ??StereoProcessGroup_3:
   \   00000214   40109DE5           LDR      R1,[SP, #+64]
   \   00000218   010040E2           SUB      R0,R0,#+1
   \   0000021C   001091E5           LDR      R1,[R1, #+0]
   \   00000220   010050E1           CMP      R0,R1
    158          		gbCurrent[0] = cl;
   \   00000224   40109DB5           LDRLT    R1,[SP, #+64]
   \   00000228   000081B5           STRLT    R0,[R1, #+0]
    159          
    160          	cr = CLZ(gbMaskR) - 1;
   \   0000022C   000054E3           CMP      R4,#+0
   \   00000230   2000A003           MOVEQ    R0,#+32
   \   00000234   0D00000A           BEQ      ??StereoProcessGroup_15
   \   00000238   0100A0E3           MOV      R0,#+1
   \   0000023C   2418B0E1           LSRS     R1,R4,#+16
   \   00000240   1100A003           MOVEQ    R0,#+17
   \   00000244   0448A001           LSLEQ    R4,R4,#+16
   \   00000248   241CB0E1           LSRS     R1,R4,#+24
   \   0000024C   08008002           ADDEQ    R0,R0,#+8
   \   00000250   0444A001           LSLEQ    R4,R4,#+8
   \   00000254   241EB0E1           LSRS     R1,R4,#+28
   \   00000258   04008002           ADDEQ    R0,R0,#+4
   \   0000025C   0442A001           LSLEQ    R4,R4,#+4
   \   00000260   241FB0E1           LSRS     R1,R4,#+30
   \   00000264   02008002           ADDEQ    R0,R0,#+2
   \   00000268   0441A001           LSLEQ    R4,R4,#+2
   \   0000026C   A40F40E0           SUB      R0,R0,R4, LSR #+31
    161          	if (gbCurrent[1] > cr)
   \                     ??StereoProcessGroup_15:
   \   00000270   40109DE5           LDR      R1,[SP, #+64]
   \   00000274   010040E2           SUB      R0,R0,#+1
   \   00000278   041091E5           LDR      R1,[R1, #+4]
   \   0000027C   010050E1           CMP      R0,R1
    162          		gbCurrent[1] = cr;
   \   00000280   40109DB5           LDRLT    R1,[SP, #+64]
   \   00000284   040081B5           STRLT    R0,[R1, #+4]
    163          
    164          	return;
   \   00000288   F38FBDE8           POP      {R0,R1,R4-R11,PC}  ;; return
   \                     ??StereoProcessGroup_12:
   \   0000028C   ........           DC32     pow14
    165          }
    166          
    167          /**************************************************************************************
    168           * Function:    StereoProcess
    169           *
    170           * Description: apply mid-side and intensity stereo, if enabled
    171           *
    172           * Inputs:      valid AACDecInfo struct (including dequantized transform coefficients)
    173           *
    174           * Outputs:     updated transform coefficients in Q(FBITS_OUT_DQ_OFF)
    175           *              updated minimum guard bit count for both channels
    176           *
    177           * Return:      0 if successful, -1 if error
    178           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    179          int StereoProcess(AACDecInfo *aacDecInfo)
    180          {
   \                     raac_StereoProcess:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
    181          	PSInfoBase *psi;
    182          	ICSInfo *icsInfo;
    183          	int gp, win, nSamps, msMaskOffset;
    184          	int *coefL, *coefR;
    185          	unsigned char *msMaskPtr;
    186          	const short *sfbTab;
    187          
    188          	/* validate pointers */
    189          	if (!aacDecInfo || !aacDecInfo->psInfoBase)
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   00509015           LDRNE    R5,[R0, #+0]
   \   00000010   00005513           CMPNE    R5,#+0
    190          		return -1;
   \   00000014   0000E003           MVNEQ    R0,#+0
   \   00000018   F68FBD08           POPEQ    {R1,R2,R4-R11,PC}
    191          	psi = (PSInfoBase *)(aacDecInfo->psInfoBase);
    192          
    193          	/* mid-side and intensity stereo require common_window == 1 (see MPEG4 spec, Correction 2, 2004) */
    194          	if (psi->commonWin != 1 || aacDecInfo->currBlockID != AAC_ID_CPE)
   \   0000001C   F01895E5           LDR      R1,[R5, #+2288]
   \   00000020   010051E3           CMP      R1,#+1
   \   00000024   28009005           LDREQ    R0,[R0, #+40]
   \   00000028   01005003           CMPEQ    R0,#+1
   \   0000002C   0100000A           BEQ      ??raac_StereoProcess_0
    195          		return 0;
   \                     ??raac_StereoProcess_1:
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   F68FBDE8           POP      {R1,R2,R4-R11,PC}
    196          
    197          	/* nothing to do */
    198          	if (!psi->msMaskPresent && !psi->intensityUsed[1])
   \                     ??raac_StereoProcess_0:
   \   00000038   C40B95E5           LDR      R0,[R5, #+3012]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   E80B9505           LDREQ    R0,[R5, #+3048]
   \   00000044   00005003           CMPEQ    R0,#+0
   \   00000048   F68FBD08           POPEQ    {R1,R2,R4-R11,PC}
    199          		return 0;
    200          
    201          	icsInfo = &(psi->icsInfo[0]);
   \   0000004C   7C00A0E3           MOV      R0,#+124
   \   00000050   800E80E3           ORR      R0,R0,#0x800
   \   00000054   054080E0           ADD      R4,R0,R5
    202          	if (icsInfo->winSequence == 2) {
   \   00000058   0110D4E5           LDRB     R1,[R4, #+1]
   \   0000005C   780895E5           LDR      R0,[R5, #+2168]
   \   00000060   020051E3           CMP      R1,#+2
   \   00000064   0400001A           BNE      ??raac_StereoProcess_2
    203          		sfbTab = sfBandTabShort + sfBandTabShortOffset[psi->sampRateIdx];
   \   00000068   2C219FE5           LDR      R2,??raac_StereoProcess_3  ;; raac_sfBandTabShortOffset
    204          		nSamps = NSAMPS_SHORT;
   \   0000006C   8010A0E3           MOV      R1,#+128
   \   00000070   000192E7           LDR      R0,[R2, +R0, LSL #+2]
   \   00000074   24219FE5           LDR      R2,??raac_StereoProcess_3+0x4  ;; raac_sfBandTabShort
   \   00000078   030000EA           B        ??raac_StereoProcess_4
    205          	} else {
    206          		sfbTab = sfBandTabLong + sfBandTabLongOffset[psi->sampRateIdx];
   \                     ??raac_StereoProcess_2:
   \   0000007C   20219FE5           LDR      R2,??raac_StereoProcess_3+0x8  ;; raac_sfBandTabLongOffset
    207          		nSamps = NSAMPS_LONG;
   \   00000080   401EA0E3           MOV      R1,#+1024
   \   00000084   000192E7           LDR      R0,[R2, +R0, LSL #+2]
   \   00000088   18219FE5           LDR      R2,??raac_StereoProcess_3+0xC  ;; raac_sfBandTabLong
   \                     ??raac_StereoProcess_4:
   \   0000008C   800082E0           ADD      R0,R2,R0, LSL #+1
   \   00000090   04008DE5           STR      R0,[SP, #+4]
   \   00000094   00108DE5           STR      R1,[SP, #+0]
    208          	}
    209          	coefL = psi->coef[0];
   \   00000098   4800A0E3           MOV      R0,#+72
   \   0000009C   400D80E3           ORR      R0,R0,#0x1000
   \   000000A0   056080E0           ADD      R6,R0,R5
    210          	coefR = psi->coef[1];
   \   000000A4   400D80E2           ADD      R0,R0,#+4096
   \   000000A8   057080E0           ADD      R7,R0,R5
    211          
    212          	/* do fused mid-side/intensity processing for each block (one long or eight short) */
    213          	msMaskOffset = 0;
    214          	msMaskPtr = psi->msMaskBits;
   \   000000AC   520D40E2           SUB      R0,R0,#+5248
   \   000000B0   059080E0           ADD      R9,R0,R5
    215          	for (gp = 0; gp < icsInfo->numWinGroup; gp++) {
   \   000000B4   3100D4E5           LDRB     R0,[R4, #+49]
   \   000000B8   0080A0E3           MOV      R8,#+0
   \   000000BC   00A0A0E3           MOV      R10,#+0
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   2B00001A           BNE      ??raac_StereoProcess_5
   \   000000C8   0000A0E3           MOV      R0,#+0
   \   000000CC   F68FBDE8           POP      {R1,R2,R4-R11,PC}
    216          		for (win = 0; win < icsInfo->winGroupLen[gp]; win++) {
    217          			StereoProcessGroup(coefL, coefR, sfbTab, psi->msMaskPresent, 
    218          				msMaskPtr, msMaskOffset, icsInfo->maxSFB, psi->sfbCodeBook[1] + gp*icsInfo->maxSFB, 
    219          				psi->scaleFactors[1] + gp*icsInfo->maxSFB, psi->gbCurrent);
   \                     ??raac_StereoProcess_6:
   \   000000D0   410D85E2           ADD      R0,R5,#+4160
   \   000000D4   01002DE9           PUSH     {R0}
   \   000000D8   0310D4E5           LDRB     R1,[R4, #+3]
    220          			coefL += nSamps;
    221          			coefR += nSamps;
    222          		}
   \   000000DC   01B08BE2           ADD      R11,R11,#+1
   \   000000E0   E400A0E3           MOV      R0,#+228
   \   000000E4   910A02E0           MUL      R2,R1,R10
   \   000000E8   900E80E3           ORR      R0,R0,#0x900
   \   000000EC   821085E0           ADD      R1,R5,R2, LSL #+1
   \   000000F0   010080E0           ADD      R0,R0,R1
   \   000000F4   01002DE9           PUSH     {R0}
   \   000000F8   0310D4E5           LDRB     R1,[R4, #+3]
   \   000000FC   4C00A0E3           MOV      R0,#+76
   \   00000100   B00E80E3           ORR      R0,R0,#0xB00
   \   00000104   915A22E0           MLA      R2,R1,R10,R5
   \   00000108   0710A0E1           MOV      R1,R7
   \   0000010C   020080E0           ADD      R0,R0,R2
   \   00000110   01002DE9           PUSH     {R0}
   \   00000114   0300D4E5           LDRB     R0,[R4, #+3]
   \   00000118   01002DE9           PUSH     {R0}
   \   0000011C   0800A0E1           MOV      R0,R8
   \   00000120   01002DE9           PUSH     {R0}
   \   00000124   0900A0E1           MOV      R0,R9
   \   00000128   01002DE9           PUSH     {R0}
   \   0000012C   C43B95E5           LDR      R3,[R5, #+3012]
   \   00000130   1C209DE5           LDR      R2,[SP, #+28]
   \   00000134   0600A0E1           MOV      R0,R6
   \   00000138   ........           BL       StereoProcessGroup
   \   0000013C   18009DE5           LDR      R0,[SP, #+24]
   \   00000140   18D08DE2           ADD      SP,SP,#+24
   \   00000144   006186E0           ADD      R6,R6,R0, LSL #+2
   \   00000148   007187E0           ADD      R7,R7,R0, LSL #+2
   \                     ??raac_StereoProcess_7:
   \   0000014C   04008AE0           ADD      R0,R10,R4
   \   00000150   3200D0E5           LDRB     R0,[R0, #+50]
   \   00000154   00005BE1           CMP      R11,R0
   \   00000158   DCFFFFBA           BLT      ??raac_StereoProcess_6
    223          		/* we use one bit per sfb, so there are maxSFB bits for each window group */ 
    224          		msMaskPtr += (msMaskOffset + icsInfo->maxSFB) >> 3;
   \                     ??raac_StereoProcess_8:
   \   0000015C   0300D4E5           LDRB     R0,[R4, #+3]
    225          		msMaskOffset = (msMaskOffset + icsInfo->maxSFB) & 0x07;
   \   00000160   01A08AE2           ADD      R10,R10,#+1
   \   00000164   080080E0           ADD      R0,R0,R8
   \   00000168   C09189E0           ADD      R9,R9,R0, ASR #+3
   \   0000016C   0300D4E5           LDRB     R0,[R4, #+3]
   \   00000170   080080E0           ADD      R0,R0,R8
   \   00000174   078000E2           AND      R8,R0,#0x7
   \                     ??raac_StereoProcess_5:
   \   00000178   3100D4E5           LDRB     R0,[R4, #+49]
   \   0000017C   00005AE1           CMP      R10,R0
   \   00000180   AAFFFFAA           BGE      ??raac_StereoProcess_1
   \   00000184   04008AE0           ADD      R0,R10,R4
   \   00000188   3200D0E5           LDRB     R0,[R0, #+50]
   \   0000018C   00B0A0E3           MOV      R11,#+0
   \   00000190   000050E3           CMP      R0,#+0
   \   00000194   ECFFFF1A           BNE      ??raac_StereoProcess_7
   \   00000198   EFFFFFEA           B        ??raac_StereoProcess_8
   \                     ??raac_StereoProcess_3:
   \   0000019C   ........           DC32     raac_sfBandTabShortOffset
   \   000001A0   ........           DC32     raac_sfBandTabShort
   \   000001A4   ........           DC32     raac_sfBandTabLongOffset
   \   000001A8   ........           DC32     raac_sfBandTabLong
    226          	}
    227          
    228          	ASSERT(coefL == psi->coef[0] + 1024);
    229          	ASSERT(coefR == psi->coef[1] + 1024);
    230          
    231          	return 0;
    232          }

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     StereoProcessGroup    44
     raac_StereoProcess    68


   Segment part sizes:

     Function/Label     Bytes
     --------------     -----
     pow14                32
     StereoProcessGroup  656
     raac_StereoProcess  428
      Others               8

 
 1 092 bytes in segment CODE
    32 bytes in segment DATA_C
 
 1 084 bytes of CODE  memory (+ 8 bytes shared)
    32 bytes of CONST memory

Errors: none
Warnings: none
