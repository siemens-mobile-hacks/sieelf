##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Feb/2012  15:39:31 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AMR\AmrPl #
#                       ayer.c                                               #
#    Command line    =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AMR\AmrPl #
#                       ayer.c -D NDEBUG -lC D:\SVN\SieELF\SieELF\x65_PCM_Pl #
#                       ayer\Player\Release\List\ -lA                        #
#                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\ -o D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\R #
#                       elease\Obj\ -s9 --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "D:\Program                 #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" --preinclude       #
#                       swilib.h -I "D:\Program Files\IAR\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=16                                #
#    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\AmrPlayer.lst                                    #
#    Object file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\AmrPlayer.r79                                     #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AMR\AmrPlayer.c
      1          
      2          #include "typedef.h"

  #endif
        ^
"D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AMR\typedef.h",19  Warning[Pe001]: 
          last line of file ends without a newline
      3          #include "dec_if.h"

  #endif
        ^
"D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AMR\typedef.h",19  Warning[Pe001]: 
          last line of file ends without a newline
      4          
      5          #include "..\Global.h"
      6          extern const UWord8 block_size[];
      7          

   \                                 In segment DATA_Z, align 4, align-sorted
      8          int AmrSamples;
      9          int AmrHFile;
     10          char AMROpened = 0;
     11          void * destate;
     12          short synth[L_FRAME16k];
     13          int SynthPos;
     14          unsigned char * analysis;
     15          int amrframepos = 0;
     16          int AmrEof = 0;
     17          
     18          Word16 dec_mode; 
   \                     dec_mode:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \                     synth:
   \   00000004                      DS8 640
   \                     AmrSamples:
   \   00000284                      DS8 4
   \                     AmrHFile:
   \   00000288                      DS8 4
   \                     destate:
   \   0000028C                      DS8 4
   \                     SynthPos:
   \   00000290                      DS8 4
   \                     analysis:
   \   00000294                      DS8 4
   \                     amrframepos:
   \   00000298                      DS8 4
   \                     AmrEof:
   \   0000029C                      DS8 4
     19          int read_size;
   \                     read_size:
   \   000002A0                      DS8 4
   \                     AMROpened:
   \   000002A4                      DS8 1
     20          
     21          #define AMR_BUFF_SIZE 4096
     22            
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          void AMRWBPlay()
     25          {
     26          
     27            if ( Playing == 0 )
   \                     AMRWBPlay:
   \   00000000   1C009FE5           LDR      R0,??AMRWBPlay_0  ;; Playing
   \   00000004   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0000001A           BNE      ??AMRWBPlay_1
     28            {
     29              AudioStart();
                     ^
Warning[Pe223]: function "AudioStart" declared implicitly
   \   00000010   ........           _BF      AudioStart,??AudioStart??rA  ;; tailcall
     30            }
     31            else
     32              Paused = 0;
   \                     ??AMRWBPlay_1:
   \   00000014   ........           LDR      R0,??DataTable1  ;; Paused
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0010C0E5           STRB     R1,[R0, #+0]
     33          }
   \   00000020   1EFF2FE1           BX       LR
   \                     ??AMRWBPlay_0:
   \   00000024   ........           DC32     Playing
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          void AMRWBPause()
     36          {
     37            Paused = !Paused;
   \                     AMRWBPause:
   \   00000000   ........           LDR      R0,??DataTable1  ;; Paused
   \   00000004   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0110A003           MOVEQ    R1,#+1
   \   00000010   0010A013           MOVNE    R1,#+0
   \   00000014   0010C0E5           STRB     R1,[R0, #+0]
     38          }
   \   00000018   1EFF2FE1           BX       LR               ;; return
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          int GetAMRWBTime()
     41          {
     42            return ( AmrSamples/samplerate );
   \                     GetAMRWBTime:
   \   00000000   18009FE5           LDR      R0,??GetAMRWBTime_0  ;; dec_mode + 644
   \   00000004   ........           LDR      R1,??DataTable7  ;; samplerate
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000018   0100A0E1           MOV      R0,R1
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   \                     ??GetAMRWBTime_0:
   \   00000020   ........           DC32     dec_mode + 644
     43          }
     44          

   \                                 In segment CODE, align 4, keep-with-next
     45          void ReadAmr()
     46          {
   \                     ReadAmr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     47            int err, readsize;
     48            if ( AmrEof )
   \   00000004   ........           LDR      R5,??DataTable8  ;; dec_mode
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   9C0295E5           LDR      R0,[R5, #+668]
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0300000A           BEQ      ??ReadAmr_0
     49            {
     50              AudioActive = 0;
   \   0000001C   ........           LDR      R0,??DataTable5  ;; AudioActive
   \   00000020   0040C0E5           STRB     R4,[R0, #+0]
     51              SavePLTime();
   \   00000024   ........           _BLF     SavePLTime,??SavePLTime??rA
     52              return;
   \   00000028   3180BDE8           POP      {R0,R4,R5,PC}
     53            }
     54            memcpy( analysis, analysis + amrframepos, AMR_BUFF_SIZE - amrframepos );
   \                     ??ReadAmr_0:
   \   0000002C   940295E5           LDR      R0,[R5, #+660]
   \   00000030   981295E5           LDR      R1,[R5, #+664]
   \   00000034   402D61E2           RSB      R2,R1,#+4096
   \   00000038   001081E0           ADD      R1,R1,R0
   \   0000003C   1E0100EF           SWI      +286
     55            readsize = fread( AmrHFile, analysis +AMR_BUFF_SIZE-amrframepos, amrframepos, & err );
                                                                                                 ^
Warning[Pe167]: argument of type "int *" is incompatible with parameter of
          type "unsigned int *"
   \   00000040   980295E5           LDR      R0,[R5, #+664]
   \   00000044   941295E5           LDR      R1,[R5, #+660]
   \   00000048   0D30A0E1           MOV      R3,SP
   \   0000004C   0020A0E1           MOV      R2,R0
   \   00000050   000060E2           RSB      R0,R0,#+0
   \   00000054   010080E0           ADD      R0,R0,R1
   \   00000058   401D80E2           ADD      R1,R0,#+4096
   \   0000005C   880295E5           LDR      R0,[R5, #+648]
   \   00000060   0B0000EF           SWI      +11
     56            if ( readsize < amrframepos ) AmrEof = 1;
   \   00000064   981295E5           LDR      R1,[R5, #+664]
     57            amrframepos = 0;
   \   00000068   984285E5           STR      R4,[R5, #+664]
   \   0000006C   010050E1           CMP      R0,R1
   \   00000070   0100A0B3           MOVLT    R0,#+1
   \   00000074   9C0285B5           STRLT    R0,[R5, #+668]
     58          }
   \   00000078   3180BDE8           POP      {R0,R4,R5,PC}    ;; return
     59          

   \                                 In segment CODE, align 4, keep-with-next
     60          void GetAMRWBSound( unsigned short * ptr, int nsamples )
     61          {
   \                     GetAMRWBSound:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   C8609FE5           LDR      R6,??GetAMRWBSound_0  ;; dec_mode
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   7080BD08           POPEQ    {R4-R6,PC}
     62            
     63          
     64            while ( nsamples )
     65            {
     66              * ptr++ = synth[SynthPos];
   \                     ??GetAMRWBSound_1:
   \   00000014   900296E5           LDR      R0,[R6, #+656]
   \   00000018   801086E0           ADD      R1,R6,R0, LSL #+1
   \   0000001C   B420D1E1           LDRH     R2,[R1, #+4]
     67              * ptr++ = synth[SynthPos++];
   \   00000020   010080E2           ADD      R0,R0,#+1
     68              nsamples--;
     69              
     70              if ( SynthPos >= L_FRAME16k )
   \   00000024   500F50E3           CMP      R0,#+320
   \   00000028   ........           STRH     R2,[R4], #+2
   \   0000002C   B410D1E1           LDRH     R1,[R1, #+4]
   \   00000030   ........           STRH     R1,[R4], #+2
   \   00000034   900286E5           STR      R0,[R6, #+656]
   \   00000038   220000BA           BLT      ??GetAMRWBSound_2
     71              {
     72                SynthPos=0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   900286E5           STR      R0,[R6, #+656]
     73                
     74                if ( AudioActive )
   \   00000044   ........           LDR      R0,??DataTable5  ;; AudioActive
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   1900000A           BEQ      ??GetAMRWBSound_3
     75                {    
     76                  AmrSamples+=L_FRAME16k;
   \   00000054   840296E5           LDR      R0,[R6, #+644]
     77                  dec_mode = (Word16)(analysis[amrframepos] >> 4);
   \   00000058   941296E5           LDR      R1,[R6, #+660]
     78                  read_size=block_size[dec_mode];        
   \   0000005C   74209FE5           LDR      R2,??GetAMRWBSound_0+0x4  ;; block_size
   \   00000060   500F80E2           ADD      R0,R0,#+320
   \   00000064   840286E5           STR      R0,[R6, #+644]
   \   00000068   980296E5           LDR      R0,[R6, #+664]
     79                  D_IF_decode( destate, & analysis[amrframepos], synth, 0);        
   \   0000006C   0030A0E3           MOV      R3,#+0
   \   00000070   011080E0           ADD      R1,R0,R1
   \   00000074   0000D1E5           LDRB     R0,[R1, #+0]
   \   00000078   2002A0E1           LSR      R0,R0,#+4
   \   0000007C   B000C6E1           STRH     R0,[R6, #+0]
   \   00000080   0200D0E7           LDRB     R0,[R0, +R2]
   \   00000084   042086E2           ADD      R2,R6,#+4
   \   00000088   A00286E5           STR      R0,[R6, #+672]
   \   0000008C   8C0296E5           LDR      R0,[R6, #+652]
   \   00000090   ........           _BLF     D_IF_decode,??D_IF_decode??rA
     80                  amrframepos += read_size;
   \   00000094   980296E5           LDR      R0,[R6, #+664]
   \   00000098   A01296E5           LDR      R1,[R6, #+672]
   \   0000009C   000081E0           ADD      R0,R1,R0
   \   000000A0   980286E5           STR      R0,[R6, #+664]
     81                  if ( amrframepos > ( AMR_BUFF_SIZE - 128 ) ) ReadAmr();
   \   000000A4   8110A0E3           MOV      R1,#+129
   \   000000A8   F01E81E3           ORR      R1,R1,#0xF00
   \   000000AC   010050E1           CMP      R0,R1
   \   000000B0   040000BA           BLT      ??GetAMRWBSound_2
   \   000000B4   ........           BL       ReadAmr
   \   000000B8   020000EA           B        ??GetAMRWBSound_2
     82                  
     83                }
     84                else
     85                {
     86                  zeromem( synth, sizeof( synth ) );
   \                     ??GetAMRWBSound_3:
   \   000000BC   A01FA0E3           MOV      R1,#+640
   \   000000C0   040086E2           ADD      R0,R6,#+4
   \   000000C4   1D0100EF           SWI      +285
     87                }
     88              }
     89              
     90            nsamples-=1;
   \                     ??GetAMRWBSound_2:
   \   000000C8   025055E2           SUBS     R5,R5,#+2
     91            }
   \   000000CC   D0FFFF1A           BNE      ??GetAMRWBSound_1
     92          }
   \   000000D0   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??GetAMRWBSound_0:
   \   000000D4   ........           DC32     dec_mode
   \   000000D8   ........           DC32     block_size
     93          

   \                                 In segment CODE, align 4, keep-with-next
     94          int AMRWBOpen( char * filename1)
     95          {
   \                     AMRWBOpen:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     96            int err;   
     97            AmrHFile = fopen( filename1, A_BIN, P_READ, & err );
                                                               ^
Warning[Pe167]: argument of type "int *" is incompatible with parameter of
          type "unsigned int *"
   \   00000004   ........           LDR      R4,??DataTable8  ;; dec_mode
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0D30A0E1           MOV      R3,SP
   \   00000010   8020A0E3           MOV      R2,#+128
   \   00000014   801CA0E3           MOV      R1,#+32768
   \   00000018   0A0000EF           SWI      +10
   \   0000001C   880284E5           STR      R0,[R4, #+648]
     98            samplerate = 16000;
   \   00000020   ........           LDR      R0,??DataTable7  ;; samplerate
   \   00000024   FA1DA0E3           MOV      R1,#+16000
   \   00000028   001080E5           STR      R1,[R0, #+0]
     99            //fread( AmrHFile, & samplerate, 2, & err );
    100            channels = 1;
   \   0000002C   68009FE5           LDR      R0,??AMRWBOpen_0  ;; channels
    101            GetPlayingTime = GetAMRWBTime;
   \   00000030   68109FE5           LDR      R1,??AMRWBOpen_0+0x4  ;; GetAMRWBTime
   \   00000034   0150A0E3           MOV      R5,#+1
   \   00000038   B050C0E1           STRH     R5,[R0, #+0]
   \   0000003C   60009FE5           LDR      R0,??AMRWBOpen_0+0x8  ;; GetPlayingTime
    102            GetSound = GetAMRWBSound;
    103            AMROpened = 1;
   \   00000040   A452C4E5           STRB     R5,[R4, #+676]
   \   00000044   001080E5           STR      R1,[R0, #+0]
   \   00000048   58009FE5           LDR      R0,??AMRWBOpen_0+0xC  ;; GetSound
   \   0000004C   58109FE5           LDR      R1,??AMRWBOpen_0+0x10  ;; GetAMRWBSound
   \   00000050   001080E5           STR      R1,[R0, #+0]
    104            destate = D_IF_init();
   \   00000054   ........           _BLF     D_IF_init,??D_IF_init??rA
   \   00000058   8C0284E5           STR      R0,[R4, #+652]
    105            //Decoder_Interface_Decode
    106            SynthPos = 0;
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   900284E5           STR      R0,[R4, #+656]
    107            amrframepos = 0;
   \   00000064   980284E5           STR      R0,[R4, #+664]
    108            AmrEof = 0;
   \   00000068   9C0284E5           STR      R0,[R4, #+668]
    109            AmrSamples=0;
   \   0000006C   840284E5           STR      R0,[R4, #+644]
    110            analysis = malloc( AMR_BUFF_SIZE );
   \   00000070   400DA0E3           MOV      R0,#+4096
   \   00000074   140000EF           SWI      +20
   \   00000078   940284E5           STR      R0,[R4, #+660]
    111            fread( AmrHFile, analysis, AMR_BUFF_SIZE, & err );
                                                             ^
Warning[Pe167]: argument of type "int *" is incompatible with parameter of
          type "unsigned int *"
   \   0000007C   0D30A0E1           MOV      R3,SP
   \   00000080   402DA0E3           MOV      R2,#+4096
   \   00000084   0010A0E1           MOV      R1,R0
   \   00000088   880294E5           LDR      R0,[R4, #+648]
   \   0000008C   0B0000EF           SWI      +11
    112            AMROpened=1;
   \   00000090   A452C4E5           STRB     R5,[R4, #+676]
    113            return ( 0 );
   \   00000094   0000A0E3           MOV      R0,#+0
   \   00000098   3280BDE8           POP      {R1,R4,R5,PC}    ;; return
   \                     ??AMRWBOpen_0:
   \   0000009C   ........           DC32     channels
   \   000000A0   ........           DC32     GetAMRWBTime
   \   000000A4   ........           DC32     GetPlayingTime
   \   000000A8   ........           DC32     GetSound
   \   000000AC   ........           DC32     GetAMRWBSound
    114          }
    115          

   \                                 In segment CODE, align 4, keep-with-next
    116          int AmrWBClose()
    117          {
   \                     AmrWBClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
    118            int err;
    119          if(AMROpened)
   \   00000004   ........           LDR      R4,??DataTable8  ;; dec_mode
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   A402D4E5           LDRB     R0,[R4, #+676]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1180BD08           POPEQ    {R0,R4,PC}
    120          {
    121          fclose(AmrHFile,&err);
                                 ^
Warning[Pe167]: argument of type "int *" is incompatible with parameter of
          type "unsigned int *"
   \   00000018   880294E5           LDR      R0,[R4, #+648]
   \   0000001C   0D10A0E1           MOV      R1,SP
   \   00000020   0D0000EF           SWI      +13
    122          mfree(analysis);
   \   00000024   940294E5           LDR      R0,[R4, #+660]
   \   00000028   150000EF           SWI      +21
    123          D_IF_exit(destate);
   \   0000002C   8C0294E5           LDR      R0,[R4, #+652]
   \   00000030   ........           _BLF     D_IF_exit,??D_IF_exit??rA
    124          AMROpened=0;
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   A402C4E5           STRB     R0,[R4, #+676]
    125          }
    126          }
                  ^
Warning[Pe001]: last line of file ends without a newline

  }
  ^
"D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\AMR\AmrPlayer.c",126  Warning[Pe940]: 
          missing return statement at end of non-void function "AmrWBClose"
   \   0000003C   1180BDE8           POP      {R0,R4,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     Paused

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     AudioActive

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     samplerate

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     dec_mode

   Maximum stack usage in bytes:

     Function      CSTACK
     --------      ------
     AMRWBOpen        16
     AMRWBPause        0
     AMRWBPlay         4
     AmrWBClose       12
     GetAMRWBSound    16
     GetAMRWBTime      4
     ReadAmr          16


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     dec_mode        677
     AMRWBPlay        40
     AMRWBPause       28
     GetAMRWBTime     36
     ReadAmr         124
     GetAMRWBSound   220
     AMRWBOpen       176
     AmrWBClose       64
     ??DataTable1      4
     ??DataTable5      4
     ??DataTable7      4
     ??DataTable8      4
      Others         112

 
 804 bytes in segment CODE
 677 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 704 bytes of CODE memory (+ 112 bytes shared)
 677 bytes of DATA memory

Errors: none
Warnings: 9
