##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Feb/2012  15:39:33 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Screen.c  #
#    Command line    =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Screen.c  #
#                       -D NDEBUG -lC D:\SVN\SieELF\SieELF\x65_PCM_Player\Pl #
#                       ayer\Release\List\ -lA D:\SVN\SieELF\SieELF\x65_PCM_ #
#                       Player\Player\Release\List\ -o                       #
#                       D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\ -s9 --cpu_mode arm --endian little --cpu         #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "D:\Program Files\IAR\Embedded    #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h"      #
#                       --preinclude swilib.h -I "D:\Program                 #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\INC\" --inline_threshold=16           #
#    List file       =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\L #
#                       ist\Screen.lst                                       #
#    Object file     =  D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Release\O #
#                       bj\Screen.r79                                        #
#                                                                            #
#                                                                            #
##############################################################################

D:\SVN\SieELF\SieELF\x65_PCM_Player\Player\Screen.c
      1          
      2          //#include "jpg.c"
      3          

   \                                 In segment DATA_I, align 4, align-sorted
      4          unsigned short * screen;
      5          IMGHDR img =
   \                     img:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for img>`
   \                     screen:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for screen>`
      6          {
      7            16, 16, 0x8, 0
      8          };
      9          RECT rc;
   \                     rc:
   \   0000000C                      DS8 8
   \   00000014                      REQUIRE `?<Initializer for rc>`
     10          DRWOBJ drwobj;
   \                     drwobj:
   \   00000014                      DS8 36
   \   00000038                      REQUIRE `?<Initializer for drwobj>`

   \                                 In segment DATA_Z, align 4, align-sorted
     11          int color = 0;
   \                     color:
   \   00000000                      DS8 4
     12          
     13          #define RGB16(R,G,B) ((B>31?31:B)+((G>63?63:G)<<5)+((R>31?31:R)<<11));
     14          #define ClearScreen() zeromem(&screen,sizeof(screen));
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          void ScreenInit()
     17          {
   \                     ScreenInit:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     18            img.w = ScreenW();
   \   00000004   78409FE5           LDR      R4,??ScreenInit_0  ;; img
   \   00000008   888100EF           SWI      +33160
   \   0000000C   0000C4E5           STRB     R0,[R4, #+0]
     19            img.h = ScreenH();
   \   00000010   898100EF           SWI      +33161
   \   00000014   0100C4E5           STRB     R0,[R4, #+1]
     20            screen = malloc( 132 * 176 * 2 );
   \   00000018   8000A0E3           MOV      R0,#+128
   \   0000001C   B50C80E3           ORR      R0,R0,#0xB500
   \   00000020   140000EF           SWI      +20
   \   00000024   080084E5           STR      R0,[R4, #+8]
     21            img.bitmap = ( void * ) screen;
   \   00000028   040084E5           STR      R0,[R4, #+4]
     22            StoreXYWHtoRECT( & rc, 0, 0, img.w, img.h );
   \   0000002C   0100D4E5           LDRB     R0,[R4, #+1]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   0030D4E5           LDRB     R3,[R4, #+0]
   \   00000040   0C0084E2           ADD      R0,R4,#+12
   \   00000044   330100EF           SWI      +307
     23            SetPropTo_Obj5( & drwobj, & rc, 0, ( IMGHDR * ) & img );
   \   00000048   0430A0E1           MOV      R3,R4
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   0C1084E2           ADD      R1,R4,#+12
   \   00000054   140084E2           ADD      R0,R4,#+20
   \   00000058   510100EF           SWI      +337
     24            SetColor( & drwobj, GetPaletteAdrByColorIndex( 0 ), GetPaletteAdrByColorIndex( 1 ) );
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   2E0100EF           SWI      +302
   \   00000064   0050A0E1           MOV      R5,R0
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   2E0100EF           SWI      +302
   \   00000070   0520A0E1           MOV      R2,R5
   \   00000074   0010A0E1           MOV      R1,R0
   \   00000078   140084E2           ADD      R0,R4,#+20
   \   0000007C   4B0100EF           SWI      +331
     25          }
   \   00000080   3180BDE8           POP      {R0,R4,R5,PC}    ;; return
   \                     ??ScreenInit_0:
   \   00000084   ........           DC32     img
     26          

   \                                 In segment CODE, align 4, keep-with-next
     27          void ScreenFree()
     28          {
     29            mfree( screen );
   \                     ScreenFree:
   \   00000000   ........           LDR      R0,??DataTable1  ;; img + 8
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   150000EF           SWI      +21
     30          };
   \   00000010   0080BDE8           POP      {PC}             ;; return
     31          

   \                                 In segment CODE, align 4, keep-with-next
     32          void DrawScreen()
     33          {
     34            DrawObject( & drwobj );
   \                     DrawScreen:
   \   00000000   08009FE5           LDR      R0,??DrawScreen_0  ;; img + 20
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   2A0100EF           SWI      +298
     35          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??DrawScreen_0:
   \   00000010   ........           DC32     img + 20
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          void DrawBitmap( unsigned char x, unsigned char y, unsigned char w, unsigned char h, short * Bitmap )
     38          {
   \                     DrawBitmap:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   1C809DE5           LDR      R8,[SP, #+28]
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0270B0E1           MOVS     R7,R2
     39            short yy;
     40            if ( ( !w ) || ( !h ) ) return;
   \   00000014   00005313           CMPNE    R3,#+0
   \   00000018   F083BD08           POPEQ    {R4-R9,PC}
     41            yy = 0;
   \   0000001C   0090A0E3           MOV      R9,#+0
   \   00000020   0340A0E1           MOV      R4,R3
   \   00000024   0C0000EA           B        ??DrawBitmap_0
     42            while ( yy < h )
     43            {
     44              memcpy( & screen[x + ScreenW() * ( yy + y )], & Bitmap[yy * w], w * 2 );
   \                     ??DrawBitmap_1:
   \   00000028   888100EF           SWI      +33160
   \   0000002C   970903E0           MUL      R3,R7,R9
   \   00000030   09C086E0           ADD      R12,R6,R9
   \   00000034   831088E0           ADD      R1,R8,R3, LSL #+1
   \   00000038   ........           LDR      R3,??DataTable1  ;; img + 8
   \   0000003C   9C5020E0           MLA      R0,R12,R0,R5
   \   00000040   003093E5           LDR      R3,[R3, #+0]
   \   00000044   8720A0E1           LSL      R2,R7,#+1
   \   00000048   800083E0           ADD      R0,R3,R0, LSL #+1
   \   0000004C   1E0100EF           SWI      +286
     45              yy++;
   \   00000050   019089E2           ADD      R9,R9,#+1
   \   00000054   0998A0E1           MOV      R9,R9, LSL #+16
   \   00000058   4998A0E1           MOV      R9,R9, ASR #+16
     46            }
   \                     ??DrawBitmap_0:
   \   0000005C   040059E1           CMP      R9,R4
   \   00000060   F0FFFFBA           BLT      ??DrawBitmap_1
   \   00000064   F083BDE8           POP      {R4-R9,PC}       ;; return
     47          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     img + 8

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for img>`:
   \   00000000   1010               DC8 16, 16
   \   00000002   0800               DC16 8
   \   00000004   00000000           DC32 0H
   \                     `?<Initializer for screen>`:
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for rc>`:
   \   0000000C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for drwobj>`:
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000024   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
     48          

   Maximum stack usage in bytes:

     Function   CSTACK
     --------   ------
     DrawBitmap    28
     DrawScreen     4
     ScreenFree     4
     ScreenInit    16


   Segment part sizes:

     Function/Label         Bytes
     --------------         -----
     img                      56
     color                     4
     ScreenInit              136
     ScreenFree               20
     DrawScreen               20
     DrawBitmap              104
     ??DataTable1              4
     ?<Initializer for img>   56
      Others                  40

 
 300 bytes in segment CODE
  56 bytes in segment DATA_I
  56 bytes in segment DATA_ID
   4 bytes in segment DATA_Z
  24 bytes in segment INITTAB
 
 284 bytes of CODE  memory (+ 40 bytes shared)
  56 bytes of CONST memory
  60 bytes of DATA  memory

Errors: none
Warnings: none
