################################################################################
#                                                                              #
#      IAR Universal Linker V4.60I/386                                         #
#                                                                              #
#           Link time     =  13/Oct/2011  23:45:51                             #
#           Target CPU    =  ARM                                               #
#           List file     =  I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Lis #
#                            t\Mss3CPP_s68.map                                 #
#           Output file 1 =  I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Exe #
#                            \Mss3CPP_s68.elf                                  #
#                            Format: elf, variant: -ynpra                      #
#           Command line  =  I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \AFile.r79                                        #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \AdrList.r79                                      #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \CSMswaper.r79                                    #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \CodeShow.r79                                     #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \CreateMenu.r79                                   #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \DaemonCSM.r79                                    #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \DialogCSM.r79                                    #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \EditGUI.r79                                      #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \File.r79                                         #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \GlobalVariable.r79                               #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \IconPack.r79                                     #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \KeyHook.r79                                      #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \LangPack.r79                                     #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \MainMenu.r79                                     #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \Mss3App.r79                                      #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \MyIpcMessage.r79                                 #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \NativeAddressbook.r79                            #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \NumList.r79                                      #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \OthersMenu.r79                                   #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \PlaySound.r79                                    #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \PopupGUI.r79                                     #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \SendList.r79                                     #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \SiemensPDU.r79                                   #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \SmsData.r79                                      #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \SmsListMenu.r79                                  #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \StrConst.r79                                     #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \TViewGUI.r79                                     #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \TabGUI.r79                                       #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \Template.r79                                     #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \Vibra.r79                                        #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \_cpp2.r79                                        #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \conf_loader.r79                                  #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \config_data.r79                                  #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \func.r79                                         #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \main.r79                                         #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                            \string_works.r79                                 #
#                            -o                                                #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Exe #
#                            \Mss3CPP_s68.elf                                  #
#                            -Felf -l                                          #
#                            I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Lis #
#                            t\Mss3CPP_s68.map                                 #
#                            -xmsnio                                           #
#                            "-ID:\Program Files\IAR\Embedded Workbench 4.0 Ev #
#                            aluation\ARM\LIB\"                                #
#                            -f I:\Amuse\SVN\Siemens\MySMSYS\Mss3\test.xcl     #
#                            (-carm -V(CODE)CODE_AREA,12                       #
#                            -V(DATA)DATA_AREA,12                              #
#                            -Z(CODE_AREA)ELFBEGIN,DATA_ID,START,CODE,DATA_C,I #
#                            NITTAB,DATA_Z,DATA_N,MYSEG,CONFIG_C=0-FFFFFFFF    #
#                            -Z(DATA_AREA)DATA_I=0-FFFFFFFF) -ynpra            #
#                            "D:\Program Files\IAR\Embedded Workbench 4.0 Eval #
#                            uation\ARM\LIB\dl5tpainl8n.r79"                   #
#                            -s main                                           #
#                                                                              #
#                        Copyright 1987-2007 IAR Systems. All rights reserved. #
################################################################################





                ****************************************
                *                                      *
                *           CROSS REFERENCE            *
                *                                      *
                ****************************************

       Program entry at : CODE_AREA 0000B5EC  Relocatable, from module : main




                ****************************************
                *                                      *
                *            RUNTIME MODEL             *
                *                                      *
                ****************************************

  StackAlign4  = USED
  __cpu_mode   = __pcs__interwork
  __data_model = absolute
  __endian     = little
  __rt_version = 6



                ****************************************
                *                                      *
                *              MODULE MAP              *
                *                                      *
                ****************************************


  DEFINED ABSOLUTE ENTRIES
    *************************************************************************

  DEFINED ABSOLUTE ENTRIES
    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\AFile.r79
  PROGRAM MODULE, NAME : AFile

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::new AFile(char const *, unsigned int, unsigned int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::new AFile()      
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::delete ~AFile(AFile *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000430 - 0000043B (0xc bytes), align: 2
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::AFile()          00000430        OthMenu::ShowHelp() (OthersMenu)
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::AFile(char const *, unsigned int, unsigned int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000043C - 00000463 (0x28 bytes), align: 2
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::~AFile()         0000043C        OthMenu::ShowHelp() (OthersMenu)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000464 - 0000048B (0x28 bytes), align: 2
  Segment part 15.            Intra module refs:   AFile::FOpen(char const *, unsigned int, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::FClose()         00000464        OthMenu::ShowHelp() (OthersMenu)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000048C - 000004CF (0x44 bytes), align: 2
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::FOpen(char const *, unsigned int, unsigned int)
                                   0000048C        OthMenu::ShowHelp() (OthersMenu)
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000004D0 - 000004F3 (0x24 bytes), align: 2
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::FRead(void *, int)
                                   000004D0        OthMenu::ShowHelp() (OthersMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::FWrite(void const *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::LSeek(unsigned int, unsigned int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\AdrList.r79
  PROGRAM MODULE, NAME : AdrList

  SEGMENTS IN THE MODULE
  ======================
DATA_Z
  Relative segment, address: CODE_AREA 0000C828 - 0000C82B (0x4 bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ADRLST                  0000C828        EditGUI::GHook(void *, int) (EditGUI)
                                                   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *) (PopupGUI)
                                                   Segment part 156 (SmsData)
                                                   Segment part 23 (DaemonCSM)
                                                   Segment part 42 (NumList)
                                                   SmsListMenu::ItemProc(void *, int, void *) (SmsListMenu)
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000004F4 - 0000050F (0x1c bytes), align: 2
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::new AdrList()
                                   000004F4        DaemonCSM::OnCreate(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000510 - 0000052B (0x1c bytes), align: 2
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::delete ~AdrList(AdrList *)
                                   00000510        DaemonCSM::OnClose(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000052C - 0000054F (0x24 bytes), align: 2
  Segment part 11.            Intra module refs:   AdrList::new AdrList()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::AdrList()      0000052C 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::~AdrList()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000550 - 000005D3 (0x84 bytes), align: 2
  Segment part 15.            Intra module refs:   AdrList::ConstructList()
                                                   AdrList::delete ~AdrList(AdrList *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::FreeCLIST()    00000550 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000005D4 - 00000AA3 (0x4d0 bytes), align: 2
  Segment part 17.            Intra module refs:   AdrList::ConstructListCHK(AdrList *)
                                                   AdrList::ConstructListFRC(AdrList *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::ConstructList()
                                   000005D4 
               stack 1 = 00000000 ( 00000464 )
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000AA4 - 00000ABB (0x18 bytes), align: 2
  Segment part 19.            Intra module refs:   Segment part 24
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::ConstructListCHK(AdrList *)
                                   00000AA4 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000ABC - 00000ABF (0x4 bytes), align: 2
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::ConstructListFRC(AdrList *)
                                   00000ABC        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000AC0 - 00000ADF (0x20 bytes), align: 2
  Segment part 23.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::ConstructListCFGUPD()
                                   00000AC0        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000AE0 - 00000AE3 (0x4 bytes), align: 2
  Segment part 24.            Intra module refs:   AdrList::AdrList()
                                                   AdrList::ConstructListCFGUPD()
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000AE4 - 00000B9F (0xbc bytes), align: 2
  Segment part 26.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::FindName(WSHDR *, char const *)
                                   00000AE4        EditGUI::GHook(void *, int) (EditGUI)
                                                   NumList::AddToList(char const *) (NumList)
                                                   NumList::AllocNL(char const *) (NumList)
                                                   NumList::UpdateNL(_NLST *, char const *) (NumList)
                                                   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int) (SmsData)
                                                   SmsListMenu::ItemProc(void *, int, void *) (SmsListMenu)
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000BA0 - 00000C0F (0x70 bytes), align: 2
  Segment part 28.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::FindCList(char const *)
                                   00000BA0        PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *) (PopupGUI)
                                                   SmsData::ExportAllToText() (SmsData)
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.Intra module refs:   AdrList::ConstructList()
                                                   AdrList::new AdrList()
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.Intra module refs:   AdrList::FreeCLIST()
                                                   AdrList::delete ~AdrList(AdrList *)
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.Intra module refs:   AdrList::ConstructList()
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.Intra module refs:   AdrList::FindCList(char const *)
                                                   AdrList::FindName(WSHDR *, char const *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Relative segment, address: CODE_AREA 0000C810 - 0000C81B (0xc bytes), align: 2
  Segment part 33. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        0000C810 
    -------------------------------------------------------------------------
DATA_C
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BB90 - 0000BBBF (0x30 bytes), align: 2
  Segment part 3.             Intra module refs:   AdrList::ConstructList()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BBC0 - 0000BBC7 (0x8 bytes), align: 2
  Segment part 4.             Intra module refs:   AdrList::FindName(WSHDR *, char const *)

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\CSMswaper.r79
  PROGRAM MODULE, NAME : CSMswaper

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::new CSMSwaper()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::CSMSwaper()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::~CSMSwaper()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_Z
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::under_idle   
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::do_CSMtoTop(CSMQ *, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::LLaddToEnd(LLQ *, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::CSMtoTop(int, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::InitUnderIdleCSM()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 22. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        
    -------------------------------------------------------------------------
DATA_C
  Segment part 2. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::__vtbl       

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\CodeShow.r79
  PROGRAM MODULE, NAME : CodeShow

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Relative segment, address: CODE_AREA 0000BBC8 - 0000BCB7 (0xf0 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 40
    -------------------------------------------------------------------------
DATA_C
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::__vtbl        
    -------------------------------------------------------------------------
DATA_C
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::new CodeShow()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::CodeShow()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::~CodeShow()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000C10 - 000010E3 (0x4d4 bytes), align: 2
  Segment part 26.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::GetProvAndCity(word *, char *)
                                   00000C10        EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *) (PopupGUI)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000090 )
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000010E4 - 00001137 (0x54 bytes), align: 2
  Segment part 28.            Intra module refs:   CodeShow::FindCRName(word *, char *)
                                                   CodeShow::GetProvAndCity(word *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::BSTRAdd(word *, word const *, int)
                                   000010E4 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001138 - 00001173 (0x3c bytes), align: 2
  Segment part 30.            Intra module refs:   CodeShow::FindCRName(word *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::GetCode(byte *, dword)
                                   00001138 
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001174 - 00001233 (0xc0 bytes), align: 2
  Segment part 32.            Intra module refs:   CodeShow::GetProvAndCity(word *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::FindLocale(LOCALE *, int, int, int *)
                                   00001174 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::AppendInfoW(WSHDR *, WSHDR *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001234 - 0000129B (0x68 bytes), align: 2
  Segment part 36.            Intra module refs:   CodeShow::GetProvAndCity(word *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::GetLocalNoInfo(char *, char *)
                                   00001234 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000129C - 0000129F (0x4 bytes), align: 2
  Segment part 37.            Intra module refs:   CodeShow::GetLocalNoInfo(char *, char *)
                                                   CodeShow::GetProvAndCity(word *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000012A0 - 000016CB (0x42c bytes), align: 2
  Segment part 39.            Intra module refs:   CodeShow::GetProvAndCity(word *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::FindCRName(word *, char *)
                                   000012A0 
               stack 1 = 00000000 ( 00000034 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000016CC - 000016CF (0x4 bytes), align: 2
  Segment part 40.            Intra module refs:   CodeShow::FindCRName(word *, char *)
                                                   CodeShow::GetProvAndCity(word *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000016D0 - 00001747 (0x78 bytes), align: 2
  Segment part 42.            Intra module refs:   CodeShow::GetProvAndCity(word *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::GetCodeRange(CRANGE *, uint32, uint32)
                                   000016D0 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.Intra module refs:   CodeShow::FindCRName(word *, char *)
                                                   CodeShow::GetLocalNoInfo(char *, char *)
                                                   CodeShow::GetProvAndCity(word *, char *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\CreateMenu.r79
  PROGRAM MODULE, NAME : CreateMenu

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE_AREA 00001748 - 00001787 (0x40 bytes), align: 2
  Segment part 2.             Intra module refs:   CreateMenu30or2(MENU_DESC const *, HEADER_DESC const *, int, int, void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           patch_option_header(HEADER_DESC const *)
                                   00001748 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001788 - 00001827 (0xa0 bytes), align: 2
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu(ML_MENU_DESC const *, HEADER_DESC const *, int, int, void *)
                                   00001788        SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *) (SmsListMenu)
                                                   SmsListMenu::ReCreateMe(void *) (SmsListMenu)
               stack 1 = 00000000 ( 00000020 )
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001828 - 000018C7 (0xa0 bytes), align: 2
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu(MENU_DESC const *, HEADER_DESC const *, int, int, void *)
                                   00001828        OthMenu::CreateOthMenu(DLG_CSM *) (OthersMenu)
                                                   TplMenu::CreateTplMenu(void *) (Template)
               stack 1 = 00000000 ( 00000020 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu(ML_MENU_DESC const *, HEADER_DESC const *, WSHDR *, int, int, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu(MENU_DESC const *, HEADER_DESC const *, WSHDR *, int, int, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu30or2(ML_MENU_DESC const *, HEADER_DESC const *, WSHDR *, int, int, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu30or2(MENU_DESC const *, HEADER_DESC const *, WSHDR *, int, int, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu30or2(ML_MENU_DESC const *, HEADER_DESC const *, int, int, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000018C8 - 0000194B (0x84 bytes), align: 2
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu30or2(MENU_DESC const *, HEADER_DESC const *, int, int, void *)
                                   000018C8        EditOptionMenu::CreateEditOptionMenu(DLG_CSM *, _SDLIST *, int, int, int) (EditGUI)
                                                   SmsOptionMenu::CreateSmsOptionMenu(DLG_CSM *, int, int, _SDLIST *) (SmsListMenu)
               stack 1 = 00000000 ( 00000020 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.Intra module refs:   CreateMenu30or2(MENU_DESC const *, HEADER_DESC const *, int, int, void *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\DaemonCSM.r79
  PROGRAM MODULE, NAME : DaemonCSM

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000194C - 00001967 (0x1c bytes), align: 2
  Segment part 6.             Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::delete ~DaemonCSM(DaemonCSM *)
                                   0000194C 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001968 - 00001983 (0x1c bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::new DaemonCSM()
                                   00001968        Mss3App::Start(char *, char *) (Mss3App)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001984 - 00001A5B (0xd8 bytes), align: 2
  Segment part 10.            Intra module refs:   DaemonCSM::new DaemonCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::DaemonCSM()
                                   00001984 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001A5C - 00001A7F (0x24 bytes), align: 2
  Segment part 12.            Intra module refs:   DaemonCSM::delete ~DaemonCSM(DaemonCSM *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::~DaemonCSM()
                                   00001A5C 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001A80 - 00001AF3 (0x74 bytes), align: 2
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::CreateDaemonCSM()
                                   00001A80        Mss3App::Start(char *, char *) (Mss3App)
               stack 1 = 00000000 ( 0000003C )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001AF4 - 00001B2F (0x3c bytes), align: 2
  Segment part 16.            Intra module refs:   DaemonCSM::DaemonCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::OnCreate(CSM_RAM *)
                                   00001AF4 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001B30 - 0000227B (0x74c bytes), align: 2
  Segment part 18.            Intra module refs:   DaemonCSM::DaemonCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
                                   00001B30 
               stack 1 = 00000000 ( 00000034 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000227C - 000022E3 (0x68 bytes), align: 2
  Segment part 20.            Intra module refs:   DaemonCSM::DaemonCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::OnClose(CSM_RAM *)
                                   0000227C 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000022E4 - 000022E7 (0x4 bytes), align: 2
  Segment part 21.            Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
                                                   DaemonCSM::OnCreate(CSM_RAM *)
                                                   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000022E8 - 000022EB (0x4 bytes), align: 2
  Segment part 22.            Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
                                                   DaemonCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000022EC - 000022EF (0x4 bytes), align: 2
  Segment part 23.            Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
                                                   DaemonCSM::OnCreate(CSM_RAM *)
                                                   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000022F0 - 0000231F (0x30 bytes), align: 2
  Segment part 25.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::AddDlgCsmID(int)
                                   000022F0 
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::AddDlgCsmID_Forced0(int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002320 - 00002357 (0x38 bytes), align: 2
  Segment part 29.            Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::CloseAllDlgCSM()
                                   00002320 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002358 - 00002383 (0x2c bytes), align: 2
  Segment part 31.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::DelDlgCsmID(int)
                                   00002358 
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002384 - 000023D7 (0x54 bytes), align: 2
  Segment part 33.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::IsOnTopMyCSM()
                                   00002384 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000023D8 - 000023DF (0x8 bytes), align: 2
  Segment part 35.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::DoNewProc()
                                   000023D8 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000023E0 - 000023E7 (0x8 bytes), align: 2
  Segment part 37.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::UpdateNProc()
                                   000023E0 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000023E8 - 0000242B (0x44 bytes), align: 2
  Segment part 39.            Intra module refs:   DaemonCSM::DaemonCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::AddIconBar(short *)
                                   000023E8 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000242C - 0000242F (0x4 bytes), align: 2
  Segment part 40.            Intra module refs:   DaemonCSM::AddIconBar(short *)
                                                   DaemonCSM::OnClose(CSM_RAM *)
                                                   DaemonCSM::OnCreate(CSM_RAM *)
                                                   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002430 - 0000245F (0x30 bytes), align: 2
  Segment part 42.            Intra module refs:   DaemonCSM::IsOnTopMyCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::GetTopCSM()
                                   00002430        SendList::Send(SendList *) (SendList)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002460 - 00002493 (0x34 bytes), align: 2
  Segment part 44.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::StartDialog(int, void *)
                                   00002460 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
                                                   DaemonCSM::delete ~DaemonCSM(DaemonCSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.Intra module refs:   DaemonCSM::new DaemonCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.Intra module refs:   DaemonCSM::DaemonCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.Intra module refs:   DaemonCSM::DaemonCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.Intra module refs:   DaemonCSM::DaemonCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.Intra module refs:   DaemonCSM::~DaemonCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.Intra module refs:   DaemonCSM::~DaemonCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.Intra module refs:   DaemonCSM::~DaemonCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.Intra module refs:   DaemonCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.Intra module refs:   DaemonCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.Intra module refs:   DaemonCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.Intra module refs:   DaemonCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.Intra module refs:   DaemonCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
                                                   DaemonCSM::StartDialog(int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.Intra module refs:   DaemonCSM::DoNewProc()
                                                   DaemonCSM::UpdateNProc()
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.Intra module refs:   DaemonCSM::StartDialog(int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.Intra module refs:   DaemonCSM::StartDialog(int, void *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BCB8 - 0000BCBF (0x8 bytes), align: 2
  Segment part 2.             Intra module refs:   DaemonCSM::DaemonCSM()
    -------------------------------------------------------------------------
DATA_C
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BCC0 - 0000BCC7 (0x8 bytes), align: 2
  Segment part 4.             Intra module refs:   DaemonCSM::CreateDaemonCSM()

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\DialogCSM.r79
  PROGRAM MODULE, NAME : DialogCSM

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::delete ~DialogCSM(DialogCSM *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002494 - 000024AF (0x1c bytes), align: 2
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::new DialogCSM()
                                   00002494        DaemonCSM::StartDialog(int, void *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000024B0 - 00002533 (0x84 bytes), align: 2
  Segment part 8.             Intra module refs:   DialogCSM::new DialogCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::DialogCSM()
                                   000024B0 
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::~DialogCSM()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002534 - 00002563 (0x30 bytes), align: 2
  Segment part 12.            Intra module refs:   DialogCSM::DialogCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::OnMessage(CSM_RAM *, GBS_MSG *)
                                   00002534 
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002564 - 00002A23 (0x4c0 bytes), align: 2
  Segment part 14.            Intra module refs:   DialogCSM::DialogCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::OnCreate(CSM_RAM *)
                                   00002564 
               stack 1 = 00000000 ( 00000024 )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002A24 - 00002A3B (0x18 bytes), align: 2
  Segment part 16.            Intra module refs:   DialogCSM::DialogCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::OnClose(CSM_RAM *)
                                   00002A24 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002A3C - 00002AB3 (0x78 bytes), align: 2
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::CreateDialogCSM(int, void *)
                                   00002A3C        DaemonCSM::StartDialog(int, void *) (DaemonCSM)
               stack 1 = 00000000 ( 00000040 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002AB4 - 00002AB7 (0x4 bytes), align: 2
  Segment part 19.            Intra module refs:   DialogCSM::CreateDialogCSM(int, void *)
                                                   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::UpdateNameDlgCSM(DLG_CSM *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002AB8 - 00002ABB (0x4 bytes), align: 2
  Segment part 22.            Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.Intra module refs:   DialogCSM::OnClose(CSM_RAM *)
                                                   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.Intra module refs:   DialogCSM::new DialogCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BCC8 - 0000BCCF (0x8 bytes), align: 2
  Segment part 2.             Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\EditGUI.r79
  PROGRAM MODULE, NAME : EditGUI

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BCD0 - 0000BCDB (0xc bytes), align: 2
  Segment part 3.             Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BCDC - 0000BCE7 (0xc bytes), align: 2
  Segment part 4.             Intra module refs:   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BCE8 - 0000BCFF (0x18 bytes), align: 2
  Segment part 5.             Intra module refs:   Segment part 6
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD00 - 0000BD07 (0x8 bytes), align: 2
  Segment part 6.             Intra module refs:   EditGUI::EditGUI()
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000000 - 00000013 (0x14 bytes), align: 2
  Segment part 7.             Intra module refs:   Segment part 62
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           editgui_hdr             00000000 
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002ABC - 00002AD7 (0x1c bytes), align: 2
  Segment part 16.            Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::new EditOptionMenu()
                                   00002ABC 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002AD8 - 00002AF3 (0x1c bytes), align: 2
  Segment part 18.            Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::new EditGUI()
                                   00002AD8        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
                                                   PopupNewIn::OnKey(void *, GUI_MSG *) (PopupGUI)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002AF4 - 00002B0F (0x1c bytes), align: 2
  Segment part 20.            Intra module refs:   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
                                                   EditGUI::GHook(void *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::delete ~EditGUI(EditGUI *)
                                   00002AF4 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::delete ~EditOptionMenu(EditOptionMenu *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002B10 - 00002BB3 (0xa4 bytes), align: 2
  Segment part 24.            Intra module refs:   EditGUI::new EditGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::EditGUI()      00002B10 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002BB4 - 00002BCF (0x1c bytes), align: 2
  Segment part 26.            Intra module refs:   EditGUI::delete ~EditGUI(EditGUI *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::~EditGUI()     00002BB4 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002BD0 - 00002D63 (0x194 bytes), align: 2
  Segment part 28.            Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::EdOpUserItem(USR_MENU_ITEM *)
                                   00002BD0 
               stack 1 = 00000000 ( 00000040 )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002D64 - 00003137 (0x3d4 bytes), align: 2
  Segment part 30.            Intra module refs:   EditGUI::EditGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::OnKey(void *, GUI_MSG *)
                                   00002D64 
               stack 1 = 00000000 ( 00000098 )
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000014 - 0000003B (0x28 bytes), align: 2
  Segment part 9.             Intra module refs:   EditGUI::GHook(void *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SK_ADRBK                0000001C        LangPack::InitLgp() (LangPack)
           SK_CANCEL               00000024        LangPack::InitLgp() (LangPack)
           SK_INSNM                00000034        LangPack::InitLgp() (LangPack)
           SK_OPTIONS              00000014        LangPack::InitLgp() (LangPack)
           SK_OP_PIC               0000002C 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003138 - 0000321F (0xe8 bytes), align: 2
  Segment part 32.            Intra module refs:   EditGUI::GHook(void *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::DoSmsWorkBG(void *, int)
                                   00003138 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003220 - 000036B3 (0x494 bytes), align: 2
  Segment part 34.            Intra module refs:   EditGUI::EditGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::GHook(void *, int)
                                   00003220 
               stack 1 = 00000000 ( 00000054 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000036B4 - 000036B7 (0x4 bytes), align: 2
  Segment part 35.            Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
                                                   EditGUI::GHook(void *, int)
                                                   EditGUI::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000036B8 - 000036BB (0x4 bytes), align: 2
  Segment part 36.            Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
                                                   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000036BC - 000036BF (0x4 bytes), align: 2
  Segment part 38.            Intra module refs:   EditGUI::EditGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::Locret()       000036BC 
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000036C0 - 00003A1F (0x360 bytes), align: 2
  Segment part 40.            Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                   000036C0        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
                                                   PopupNewIn::OnKey(void *, GUI_MSG *) (PopupGUI)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 0000107C )
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD08 - 0000BD1B (0x14 bytes), align: 2
  Segment part 11.            Intra module refs:   EditOptionMenu::CreateEditOptionMenu(DLG_CSM *, _SDLIST *, int, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003A20 - 00003A83 (0x64 bytes), align: 2
  Segment part 42.            Intra module refs:   EditOptionMenu::new EditOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::EditOptionMenu()
                                   00003A20 
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::~EditOptionMenu()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003A84 - 00003C1F (0x19c bytes), align: 2
  Segment part 46.            Intra module refs:   EditOptionMenu::EditOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::OnKey(void *, GUI_MSG *)
                                   00003A84 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003C20 - 00003C23 (0x4 bytes), align: 2
  Segment part 47.            Intra module refs:   EditGUI::DoSmsWorkBG(void *, int)
                                                   EditGUI::GHook(void *, int)
                                                   EditGUI::OnKey(void *, GUI_MSG *)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003C24 - 00003CB3 (0x90 bytes), align: 2
  Segment part 49.            Intra module refs:   EditOptionMenu::EditOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::GHook(void *, int)
                                   00003C24 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003CB4 - 00003CB7 (0x4 bytes), align: 2
  Segment part 50.            Intra module refs:   EditOptionMenu::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 0000003C - 00000057 (0x1c bytes), align: 2
  Segment part 12.            Intra module refs:   EditOptionMenu::ItemProc(void *, int, void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EDO_ITEM_LGPS           0000003C        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD1C - 0000BD23 (0x8 bytes), align: 2
  Segment part 14.            Intra module refs:   EditOptionMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003CB8 - 00003D2F (0x78 bytes), align: 2
  Segment part 52.            Intra module refs:   EditOptionMenu::EditOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::ItemProc(void *, int, void *)
                                   00003CB8 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003D30 - 00003D6F (0x40 bytes), align: 2
  Segment part 54.            Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::CreateEditOptionMenu(DLG_CSM *, _SDLIST *, int, int, int)
                                   00003D30 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::UpdateCSMName(DLG_CSM *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003D70 - 00003D73 (0x4 bytes), align: 2
  Segment part 57.            Intra module refs:   EditOptionMenu::GHook(void *, int)
                                                   EditOptionMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003D74 - 00003FC7 (0x254 bytes), align: 2
  Segment part 59.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::CreateEditGUI(DLG_CSM *, char const *)
                                   00003D74        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
               stack 1 = 00000000 ( 00001080 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003FC8 - 00003FCB (0x4 bytes), align: 2
  Segment part 60.            Intra module refs:   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003FCC - 00003FCF (0x4 bytes), align: 2
  Segment part 61.            Intra module refs:   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003FD0 - 00003FD3 (0x4 bytes), align: 2
  Segment part 62.            Intra module refs:   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003FD4 - 000040BB (0xe8 bytes), align: 2
  Segment part 64.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::InsertText(void *, WSHDR *)
                                   00003FD4        NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *) (NativeAddressbook)
               stack 1 = 00000000 ( 0000004C )
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::SetNumber(void *, WSHDR *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::InsertNumber(void *, WSHDR *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000040BC - 00004157 (0x9c bytes), align: 2
  Segment part 70.            Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
                                                   EditGUI::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::EditSendSMS(WSHDR *)
                                   000040BC 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004158 - 000041CF (0x78 bytes), align: 2
  Segment part 72.            Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::SaveDraft(WSHDR *)
                                   00004158 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000041D0 - 000041D3 (0x4 bytes), align: 2
  Segment part 73.            Intra module refs:   EditGUI::SaveDraft(WSHDR *)
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000041D4 - 000042FF (0x12c bytes), align: 2
  Segment part 75.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::InsertNumber(void *, char *)
                                   000041D4        NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *) (NativeAddressbook)
               stack 1 = 00000000 ( 0000005C )
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004300 - 00004397 (0x98 bytes), align: 2
  Segment part 77.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::SetNumber(void *, char *)
                                   00004300        NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *) (NativeAddressbook)
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004398 - 000044AB (0x114 bytes), align: 2
  Segment part 79.            Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::AddNumberBlank(void *)
                                   00004398 
               stack 1 = 00000000 ( 0000005C )
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.Intra module refs:   EditGUI::new EditGUI()
                                                   EditOptionMenu::new EditOptionMenu()
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.Intra module refs:   EditGUI::delete ~EditGUI(EditGUI *)
                                                   EditOptionMenu::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 82. NOT NEEDED.Intra module refs:   EditGUI::EditGUI()
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.Intra module refs:   EditGUI::~EditGUI()
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
                                                   EditGUI::OnKey(void *, GUI_MSG *)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 85. NOT NEEDED.Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
                                                   EditGUI::OnKey(void *, GUI_MSG *)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 86. NOT NEEDED.Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
    -------------------------------------------------------------------------
CODE
  Segment part 87. NOT NEEDED.Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 89. NOT NEEDED.Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 90. NOT NEEDED.Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 91. NOT NEEDED.Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 92. NOT NEEDED.Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.Intra module refs:   EditGUI::DoSmsWorkBG(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.Intra module refs:   EditGUI::DoSmsWorkBG(void *, int)
                                                   EditGUI::SaveDraft(WSHDR *)
    -------------------------------------------------------------------------
CODE
  Segment part 95. NOT NEEDED.Intra module refs:   EditGUI::DoSmsWorkBG(void *, int)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 96. NOT NEEDED.Intra module refs:   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 97. NOT NEEDED.Intra module refs:   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 98. NOT NEEDED.Intra module refs:   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 99. NOT NEEDED.Intra module refs:   EditGUI::AddNumberBlank(void *)
                                                   EditGUI::GHook(void *, int)
                                                   EditGUI::InsertNumber(void *, char *)
                                                   EditGUI::SetNumber(void *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 100. NOT NEEDED.Intra module refs   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 101. NOT NEEDED.Intra module refs   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 102. NOT NEEDED.Intra module refs   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 103. NOT NEEDED.Intra module refs   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 104. NOT NEEDED.Intra module refs   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 105. NOT NEEDED.Intra module refs   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 106. NOT NEEDED.Intra module refs   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 107. NOT NEEDED.Intra module refs   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 108. NOT NEEDED.Intra module refs   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 109. NOT NEEDED.Intra module refs   EditOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 110. NOT NEEDED.Intra module refs   EditOptionMenu::CreateEditOptionMenu(DLG_CSM *, _SDLIST *, int, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.Intra module refs   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 112. NOT NEEDED.Intra module refs   EditGUI::InsertNumber(void *, char *)
                                                   EditGUI::SetNumber(void *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 113. NOT NEEDED.Intra module refs   EditGUI::SetNumber(void *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 114. NOT NEEDED.Intra module refs   EditGUI::AddNumberBlank(void *)
                                                   EditGUI::InsertNumber(void *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 115. NOT NEEDED.Intra module refs   EditGUI::AddNumberBlank(void *)
                                                   EditGUI::InsertNumber(void *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 116. NOT NEEDED.Intra module refs   EditGUI::EditSendSMS(WSHDR *)
    -------------------------------------------------------------------------
CODE
  Segment part 117. NOT NEEDED.Intra module refs   EditGUI::EditSendSMS(WSHDR *)
    -------------------------------------------------------------------------
CODE
  Segment part 118. NOT NEEDED.Intra module refs   EditGUI::EditSendSMS(WSHDR *)
    -------------------------------------------------------------------------
CODE
  Segment part 119. NOT NEEDED.Intra module refs   EditGUI::EditSendSMS(WSHDR *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000000 - 00000013 (0x14 bytes), align: 2
  Segment part 8.             Intra module refs:   editgui_hdr
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000014 - 0000003B (0x28 bytes), align: 2
  Segment part 10.            Intra module refs:   Segment part 9
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 0000003C - 00000057 (0x1c bytes), align: 2
  Segment part 13.            Intra module refs:   EDO_ITEM_LGPS
    -------------------------------------------------------------------------
DATA_ID
  Segment part 120. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Relative segment, address: CODE_AREA 0000C81C - 0000C827 (0xc bytes), align: 2
  Segment part 121. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        0000C81C 

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\File.r79
  PROGRAM MODULE, NAME : File

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000044AC - 000044CB (0x20 bytes), align: 2
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FOpen(char const *, unsigned int, unsigned int)
                                   000044AC        LangPack::LoadLangFile() (LangPack)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::NewToReadSMS(_SDLIST *) (SmsData)
                                                   SmsData::ReadMss(char *, _SDLIST *) (SmsData)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000044CC - 000044EB (0x20 bytes), align: 2
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FRead(int, void *, int)
                                   000044CC        LangPack::LoadLangFile() (LangPack)
                                                   SmsData::NewToReadSMS(_SDLIST *) (SmsData)
                                                   SmsData::ReadMss(char *, _SDLIST *) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000044EC - 0000450B (0x20 bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FWrite(int, void const *, int)
                                   000044EC        SmsData::ExportAllToText() (SmsData)
                                                   SmsData::NewToReadSMS(_SDLIST *) (SmsData)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int) (SmsData)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000450C - 00004523 (0x18 bytes), align: 2
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FClose(int)      0000450C        LangPack::LoadLangFile() (LangPack)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::NewToReadSMS(_SDLIST *) (SmsData)
                                                   SmsData::ReadMss(char *, _SDLIST *) (SmsData)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004524 - 00004547 (0x24 bytes), align: 2
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::LSeek(int, unsigned int, unsigned int)
                                   00004524        LangPack::LoadLangFile() (LangPack)
                                                   SmsData::NewToReadSMS(_SDLIST *) (SmsData)
                                                   SmsData::ReadMss(char *, _SDLIST *) (SmsData)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004548 - 0000455F (0x18 bytes), align: 2
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::MkDir(char const *)
                                   00004548        IconPack::LoadIconPack() (IconPack)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::MoveToArchive(_SDLIST *) (SmsData)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004560 - 00004577 (0x18 bytes), align: 2
  Segment part 16.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::IsDir(char const *)
                                   00004560        IconPack::LoadIconPack() (IconPack)
                                                   LangPack::LoadLangFile() (LangPack)
                                                   SmsData::CheckFolder(int) (SmsData)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::MoveToArchive(_SDLIST *) (SmsData)
                                                   SmsData::ReadFolder(int) (SmsData)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004578 - 00004593 (0x1c bytes), align: 2
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FindFirstFile(DIR_ENTRY *, char *)
                                   00004578        SmsData::CheckFolder(int) (SmsData)
                                                   SmsData::ReadFolder(int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004594 - 000045AB (0x18 bytes), align: 2
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FindNextFile(DIR_ENTRY *)
                                   00004594        SmsData::CheckFolder(int) (SmsData)
                                                   SmsData::ReadFolder(int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000045AC - 000045C3 (0x18 bytes), align: 2
  Segment part 22.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FindClose(DIR_ENTRY *)
                                   000045AC        SmsData::CheckFolder(int) (SmsData)
                                                   SmsData::ReadFolder(int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000045C4 - 000045F3 (0x30 bytes), align: 2
  Segment part 24.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::IsFileExist(char const *)
                                   000045C4        IconPack::LoadIconPack() (IconPack)
                                                   PlaySouNd::PlayStart(PlaySouNd *, char const *) (PlaySound)
                                                   SmsData::CheckSDList() (SmsData)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int) (SmsData)
                                                   SmsData::GetMssPath(char *, char *, TTime *, TDate *) (SmsData)
               stack 1 = 00000000 ( 0000002C )
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000045F4 - 0000460B (0x18 bytes), align: 2
  Segment part 26.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FDelete(char const *)
                                   000045F4        SmsData::DeleteAllMss() (SmsData)
                                                   SmsData::DeleteMessage(_SDLIST *) (SmsData)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000460C - 00004627 (0x1c bytes), align: 2
  Segment part 28.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FMove(char const *, char const *)
                                   0000460C        SmsData::MoveToArchive(_SDLIST *) (SmsData)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::GetFileCountOfDir(char const *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 2. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\GlobalVariable.r79
  PROGRAM MODULE, NAME : GlobalVariable

  SEGMENTS IN THE MODULE
  ======================
DATA_Z
  Relative segment, address: CODE_AREA 0000C82C - 0000C8AB (0x80 bytes), align: 2
  Segment part 2.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           sms_dat                 0000C82C        Mss3App::InitDatPath() (Mss3App)
    -------------------------------------------------------------------------
DATA_Z
  Relative segment, address: CODE_AREA 0000C8AC - 0000C92B (0x80 bytes), align: 2
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           main_folder             0000C8AC        IconPack::LoadIconPack() (IconPack)
                                                   LangPack::LoadLangFile() (LangPack)
                                                   Mss3App::InitDatPath() (Mss3App)
                                                   Segment part 155 (SmsData)
                                                   Segment part 39 (OthersMenu)
                                                   Segment part 91 (SmsData)
                                                   TplMenu::ReadTpl() (Template)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD24 - 0000BD2F (0xc bytes), align: 2
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           softkeys                0000BD24        EditOptionMenu::EditOptionMenu() (EditGUI)
                                                   MainMenu::MainMenu() (MainMenu)
                                                   OthMenu::OthMenu() (OthersMenu)
                                                   PopupNewIn::PopupNewIn() (PopupGUI)
                                                   Segment part 39 (SmsListMenu)
                                                   Segment part 6 (TViewGUI)
                                                   Segment part 9 (PopupGUI)
                                                   TplMenu::TplMenu() (Template)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD30 - 0000BD33 (0x4 bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           minus11                 0000BD30        DaemonCSM::DaemonCSM() (DaemonCSM)
                                                   DialogCSM::DialogCSM() (DialogCSM)
                                                   NAbCSM::NAbCSM() (NativeAddressbook)
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000058 - 0000006F (0x18 bytes), align: 2
  Segment part 6.             Intra module refs:   sel_menu_skt
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           sel_menu_sk             00000058        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD34 - 0000BD3B (0x8 bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           sel_menu_skt            0000BD34        EditOptionMenu::EditOptionMenu() (EditGUI)
                                                   OthMenu::OthMenu() (OthersMenu)
                                                   SmsOptionMenu::SmsOptionMenu() (SmsListMenu)
                                                   TplMenu::TplMenu() (Template)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000058 - 0000006F (0x18 bytes), align: 2
  Segment part 7.             Intra module refs:   sel_menu_sk
    -------------------------------------------------------------------------
DATA_ID
  Segment part 9. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        
    -------------------------------------------------------------------------
INITTAB
  Segment part 11. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\IconPack.r79
  PROGRAM MODULE, NAME : IconPack

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 00000070 - 000000E7 (0x78 bytes), align: 2
  Segment part 33.            Intra module refs:   IconPack::LoadIconPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconNames               00000070 
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD3C - 0000BD4B (0x10 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD4C - 0000BD5F (0x14 bytes), align: 2
  Segment part 3.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C800 - 0000C800 (0x1 bytes), align: 0
  Segment part 4.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD60 - 0000BD6F (0x10 bytes), align: 2
  Segment part 5.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD70 - 0000BD7F (0x10 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD80 - 0000BD8F (0x10 bytes), align: 2
  Segment part 7.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD90 - 0000BD9B (0xc bytes), align: 2
  Segment part 8.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BD9C - 0000BDAB (0x10 bytes), align: 2
  Segment part 9.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BDAC - 0000BDBB (0x10 bytes), align: 2
  Segment part 10.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BDBC - 0000BDCB (0x10 bytes), align: 2
  Segment part 11.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BDCC - 0000BDDB (0x10 bytes), align: 2
  Segment part 12.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BDDC - 0000BDEB (0x10 bytes), align: 2
  Segment part 13.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BDEC - 0000BDFB (0x10 bytes), align: 2
  Segment part 14.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BDFC - 0000BE0B (0x10 bytes), align: 2
  Segment part 15.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BE0C - 0000BE1B (0x10 bytes), align: 2
  Segment part 16.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BE1C - 0000BE2B (0x10 bytes), align: 2
  Segment part 17.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BE2C - 0000BE3B (0x10 bytes), align: 2
  Segment part 18.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BE3C - 0000BE43 (0x8 bytes), align: 2
  Segment part 19.            Intra module refs:   IconPack::LoadIconPack()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BE44 - 0000BE53 (0x10 bytes), align: 2
  Segment part 20.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BE54 - 0000BE63 (0x10 bytes), align: 2
  Segment part 21.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BE64 - 0000BE73 (0x10 bytes), align: 2
  Segment part 22.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BE74 - 0000BE83 (0x10 bytes), align: 2
  Segment part 23.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BE84 - 0000BE93 (0x10 bytes), align: 2
  Segment part 24.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BE94 - 0000BEA3 (0x10 bytes), align: 2
  Segment part 25.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BEA4 - 0000BEB3 (0x10 bytes), align: 2
  Segment part 26.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BEB4 - 0000BEC3 (0x10 bytes), align: 2
  Segment part 27.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BEC4 - 0000BED3 (0x10 bytes), align: 2
  Segment part 28.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BED4 - 0000BEE7 (0x14 bytes), align: 2
  Segment part 29.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BEE8 - 0000BEF7 (0x10 bytes), align: 2
  Segment part 30.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BEF8 - 0000BF07 (0x10 bytes), align: 2
  Segment part 31.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BF08 - 0000BF17 (0x10 bytes), align: 2
  Segment part 32.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BF18 - 0000BF93 (0x7c bytes), align: 2
  Segment part 35.            Intra module refs:   IconPack::LoadDefaultIP()
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004628 - 0000464F (0x28 bytes), align: 2
  Segment part 38.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::new IconPack()
                                   00004628        DaemonCSM::OnCreate(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004650 - 0000466B (0x1c bytes), align: 2
  Segment part 40.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::delete ~IconPack(IconPack *)
                                   00004650        DaemonCSM::OnClose(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000466C - 0000474B (0xe0 bytes), align: 2
  Segment part 42.            Intra module refs:   IconPack::new IconPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::LoadIconPack()
                                   0000466C 
               stack 1 = 00000000 ( 00000114 )
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000474C - 00004787 (0x3c bytes), align: 2
  Segment part 44.            Intra module refs:   IconPack::delete ~IconPack(IconPack *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::FreeIconPack()
                                   0000474C 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004788 - 000047A3 (0x1c bytes), align: 2
  Segment part 46.            Intra module refs:   IconPack::FreeIconPack()
                                                   IconPack::new IconPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::LoadDefaultIP()
                                   00004788 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::ZeroIconPack()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000047A4 - 000048A7 (0x104 bytes), align: 2
  Segment part 50.            Intra module refs:   IconPack::LoadIconPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::InitIconPack()
                                   000047A4 
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::IconPack()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::~IconPack()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.Intra module refs:   IconPack::new IconPack()
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.Intra module refs:   IconPack::FreeIconPack()
                                                   IconPack::delete ~IconPack(IconPack *)
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.Intra module refs:   IconPack::LoadIconPack()
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.Intra module refs:   IconPack::LoadIconPack()
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.Intra module refs:   IconPack::LoadIconPack()
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.Intra module refs:   IconPack::LoadIconPack()
    -------------------------------------------------------------------------
DATA_Z
  Relative segment, address: CODE_AREA 0000C92C - 0000C92F (0x4 bytes), align: 2
  Segment part 36.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IP                      0000C92C        Segment part 22 (DaemonCSM)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000070 - 000000E7 (0x78 bytes), align: 2
  Segment part 34.            Intra module refs:   IconNames
    -------------------------------------------------------------------------
INITTAB
  Segment part 61. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        
    -------------------------------------------------------------------------
DATA_ID
  Segment part 62. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 63. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\KeyHook.r79
  PROGRAM MODULE, NAME : KeyHook

  SEGMENTS IN THE MODULE
  ======================
DATA_Z
  Relative segment, address: CODE_AREA 0000C930 - 0000C933 (0x4 bytes), align: 2
  Segment part 2.             Intra module refs:   KeyHook::HookProc(int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KeyHook::mode           0000C930 
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000048A8 - 000048B7 (0x10 bytes), align: 2
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KeyHook::Create()       000048A8        DaemonCSM::OnCreate(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000048B8 - 000049BF (0x108 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 9
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KeyHook::HookProc(int, int)
                                   000048B8 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000049C0 - 000049CF (0x10 bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KeyHook::Remove()       000049C0        DaemonCSM::OnClose(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000049D0 - 000049D3 (0x4 bytes), align: 2
  Segment part 9.             Intra module refs:   KeyHook::Create()
                                                   KeyHook::Remove()
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000049D4 - 00004A2F (0x5c bytes), align: 2
  Segment part 11.            Intra module refs:   KeyHook::HookProc(int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KeyHook::IsSS()         000049D4 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004A30 - 00004A5B (0x2c bytes), align: 2
  Segment part 13.            Intra module refs:   KeyHook::HookProc(int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KeyHook::IsIdle()       00004A30 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.Intra module refs:   KeyHook::HookProc(int, int)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 15. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\LangPack.r79
  PROGRAM MODULE, NAME : LangPack

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Relative segment, address: CODE_AREA 0000BF94 - 0000BF9F (0xc bytes), align: 2
  Segment part 2.             Intra module refs:   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C801 - 0000C803 (0x3 bytes), align: 0
  Segment part 3.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFA0 - 0000BFA7 (0x8 bytes), align: 2
  Segment part 4.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFA8 - 0000BFB3 (0xc bytes), align: 2
  Segment part 5.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFB4 - 0000BFBB (0x8 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFBC - 0000BFC3 (0x8 bytes), align: 2
  Segment part 7.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFC4 - 0000BFCB (0x8 bytes), align: 2
  Segment part 8.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFCC - 0000BFD3 (0x8 bytes), align: 2
  Segment part 9.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFD4 - 0000BFDF (0xc bytes), align: 2
  Segment part 10.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFE0 - 0000BFE7 (0x8 bytes), align: 2
  Segment part 11.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFE8 - 0000BFEF (0x8 bytes), align: 2
  Segment part 12.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFF0 - 0000BFF7 (0x8 bytes), align: 2
  Segment part 13.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFF8 - 0000BFFF (0x8 bytes), align: 2
  Segment part 14.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C000 - 0000C007 (0x8 bytes), align: 2
  Segment part 15.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C008 - 0000C00F (0x8 bytes), align: 2
  Segment part 16.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C010 - 0000C01B (0xc bytes), align: 2
  Segment part 17.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C01C - 0000C023 (0x8 bytes), align: 2
  Segment part 18.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C024 - 0000C02B (0x8 bytes), align: 2
  Segment part 19.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C02C - 0000C033 (0x8 bytes), align: 2
  Segment part 20.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C034 - 0000C03B (0x8 bytes), align: 2
  Segment part 21.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C03C - 0000C04B (0x10 bytes), align: 2
  Segment part 22.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C04C - 0000C05B (0x10 bytes), align: 2
  Segment part 23.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C05C - 0000C07B (0x20 bytes), align: 2
  Segment part 24.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C07C - 0000C08F (0x14 bytes), align: 2
  Segment part 25.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C090 - 0000C097 (0x8 bytes), align: 2
  Segment part 26.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C098 - 0000C09F (0x8 bytes), align: 2
  Segment part 27.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0A0 - 0000C0A7 (0x8 bytes), align: 2
  Segment part 28.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0A8 - 0000C0AF (0x8 bytes), align: 2
  Segment part 29.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0B0 - 0000C0BF (0x10 bytes), align: 2
  Segment part 30.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0C0 - 0000C0C7 (0x8 bytes), align: 2
  Segment part 31.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0C8 - 0000C0D3 (0xc bytes), align: 2
  Segment part 32.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0D4 - 0000C0DB (0x8 bytes), align: 2
  Segment part 33.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0DC - 0000C0EF (0x14 bytes), align: 2
  Segment part 34.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0F0 - 0000C107 (0x18 bytes), align: 2
  Segment part 35.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C108 - 0000C113 (0xc bytes), align: 2
  Segment part 36.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C114 - 0000C12B (0x18 bytes), align: 2
  Segment part 37.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C12C - 0000C147 (0x1c bytes), align: 2
  Segment part 38.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C148 - 0000C14F (0x8 bytes), align: 2
  Segment part 39.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C150 - 0000C167 (0x18 bytes), align: 2
  Segment part 40.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C168 - 0000C177 (0x10 bytes), align: 2
  Segment part 41.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C178 - 0000C187 (0x10 bytes), align: 2
  Segment part 42.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C188 - 0000C197 (0x10 bytes), align: 2
  Segment part 43.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C198 - 0000C1AF (0x18 bytes), align: 2
  Segment part 44.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C1B0 - 0000C1BF (0x10 bytes), align: 2
  Segment part 45.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C1C0 - 0000C1DB (0x1c bytes), align: 2
  Segment part 46.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C1DC - 0000C207 (0x2c bytes), align: 2
  Segment part 47.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C208 - 0000C21F (0x18 bytes), align: 2
  Segment part 48.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C220 - 0000C22B (0xc bytes), align: 2
  Segment part 49.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C22C - 0000C23F (0x14 bytes), align: 2
  Segment part 50.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C240 - 0000C253 (0x14 bytes), align: 2
  Segment part 51.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C254 - 0000C26F (0x1c bytes), align: 2
  Segment part 52.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C270 - 0000C27B (0xc bytes), align: 2
  Segment part 53.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C27C - 0000C28F (0x14 bytes), align: 2
  Segment part 54.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C290 - 0000C2A3 (0x14 bytes), align: 2
  Segment part 55.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2A4 - 0000C2B3 (0x10 bytes), align: 2
  Segment part 56.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2B4 - 0000C2BB (0x8 bytes), align: 2
  Segment part 57.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2BC - 0000C2CB (0x10 bytes), align: 2
  Segment part 58.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2CC - 0000C2DF (0x14 bytes), align: 2
  Segment part 59.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2E0 - 0000C2FB (0x1c bytes), align: 2
  Segment part 60.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2FC - 0000C307 (0xc bytes), align: 2
  Segment part 61.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C308 - 0000C31B (0x14 bytes), align: 2
  Segment part 62.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C31C - 0000C327 (0xc bytes), align: 2
  Segment part 63.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C328 - 0000C333 (0xc bytes), align: 2
  Segment part 64.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C334 - 0000C33F (0xc bytes), align: 2
  Segment part 65.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C340 - 0000C347 (0x8 bytes), align: 2
  Segment part 66.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C348 - 0000C357 (0x10 bytes), align: 2
  Segment part 67.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C358 - 0000C367 (0x10 bytes), align: 2
  Segment part 68.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C368 - 0000C373 (0xc bytes), align: 2
  Segment part 69.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C374 - 0000C37B (0x8 bytes), align: 2
  Segment part 70.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C37C - 0000C38B (0x10 bytes), align: 2
  Segment part 71.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C38C - 0000C393 (0x8 bytes), align: 2
  Segment part 72.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C394 - 0000C39B (0x8 bytes), align: 2
  Segment part 73.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C804 - 0000C806 (0x3 bytes), align: 0
  Segment part 74.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C39C - 0000C3A3 (0x8 bytes), align: 2
  Segment part 75.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3A4 - 0000C3AB (0x8 bytes), align: 2
  Segment part 76.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3AC - 0000C3B7 (0xc bytes), align: 2
  Segment part 77.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3B8 - 0000C3BF (0x8 bytes), align: 2
  Segment part 78.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3C0 - 0000C3CF (0x10 bytes), align: 2
  Segment part 79.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3D0 - 0000C3D7 (0x8 bytes), align: 2
  Segment part 80.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 000000E8 - 00000223 (0x13c bytes), align: 2
  Segment part 81.            Intra module refs:   LangPack::LoadLgpDefault()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           df_LGPS                 000000E8 
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004A5C - 00004A77 (0x1c bytes), align: 2
  Segment part 85.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::new LangPack()
                                   00004A5C        DaemonCSM::OnCreate(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 86. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004A78 - 00004A93 (0x1c bytes), align: 2
  Segment part 87.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::delete ~LangPack(LangPack *)
                                   00004A78        DaemonCSM::OnClose(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 89. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::FreeLangPack()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 90. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 91. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::LoadLangPack()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 92. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004A94 - 00004BCB (0x138 bytes), align: 2
  Segment part 93.            Intra module refs:   LangPack::LangPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::LoadLangFile()
                                   00004A94 
               stack 1 = 00000000 ( 00000094 )
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004BCC - 00004BE7 (0x1c bytes), align: 2
  Segment part 95.            Intra module refs:   LangPack::LangPack()
                                                   LangPack::~LangPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::LoadLgpDefault()
                                   00004BCC 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 96. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004BE8 - 00004C1B (0x34 bytes), align: 2
  Segment part 97.            Intra module refs:   LangPack::LoadLangFile()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::GotoLangLineEnd(char *)
                                   00004BE8 
    -------------------------------------------------------------------------
CODE
  Segment part 98. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004C1C - 00004C47 (0x2c bytes), align: 2
  Segment part 99.            Intra module refs:   LangPack::LoadLangFile()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::GotoLangLineStart(char *)
                                   00004C1C 
    -------------------------------------------------------------------------
CODE
  Segment part 100. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004C48 - 00004DFF (0x1b8 bytes), align: 2
  Segment part 101.           Intra module refs:   LangPack::LangPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::InitLgp()     00004C48 
               stack 1 = 00000000 ( 0000004C )
    -------------------------------------------------------------------------
CODE
  Segment part 102. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004E00 - 00004E2F (0x30 bytes), align: 2
  Segment part 103.           Intra module refs:   LangPack::new LangPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::LangPack()    00004E00 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 104. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004E30 - 00004E57 (0x28 bytes), align: 2
  Segment part 105.           Intra module refs:   LangPack::delete ~LangPack(LangPack *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::~LangPack()   00004E30 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 106. NOT NEEDED.Intra module refs   LangPack::new LangPack()
    -------------------------------------------------------------------------
CODE
  Segment part 107. NOT NEEDED.Intra module refs   LangPack::delete ~LangPack(LangPack *)
                                                   LangPack::~LangPack()
    -------------------------------------------------------------------------
CODE
  Segment part 108. NOT NEEDED.Intra module refs   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
CODE
  Segment part 109. NOT NEEDED.Intra module refs   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
CODE
  Segment part 110. NOT NEEDED.Intra module refs   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.Intra module refs   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
CODE
  Segment part 112. NOT NEEDED.Intra module refs   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
CODE
  Segment part 113. NOT NEEDED.Intra module refs   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
DATA_Z
  Relative segment, address: CODE_AREA 0000C934 - 0000C937 (0x4 bytes), align: 2
  Segment part 83.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LGP                     0000C934        AdrList::FindName(WSHDR *, char const *) (AdrList)
                                                   NAbCSM::CreateNAbCSM(void *, int, char *, int) (NativeAddressbook)
                                                   Segment part 163 (SmsData)
                                                   Segment part 21 (DaemonCSM)
                                                   Segment part 26 (MainMenu)
                                                   Segment part 26 (PopupGUI)
                                                   Segment part 28 (Template)
                                                   Segment part 35 (EditGUI)
                                                   Segment part 40 (OthersMenu)
                                                   Segment part 46 (SmsListMenu)
                                                   Segment part 50 (EditGUI)
                                                   SiememPDU::DoSmsReport(SDLIST *, char *, WSHDR *) (SiemensPDU)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 000000E8 - 00000223 (0x13c bytes), align: 2
  Segment part 82.            Intra module refs:   df_LGPS
    -------------------------------------------------------------------------
INITTAB
  Segment part 114. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        
    -------------------------------------------------------------------------
DATA_ID
  Segment part 115. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 116. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\MainMenu.r79
  PROGRAM MODULE, NAME : MainMenu

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 00000224 - 0000023B (0x18 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 4
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           main_menu_sk            00000224        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3D8 - 0000C3DF (0x8 bytes), align: 2
  Segment part 4.             Intra module refs:   MainMenu::MainMenu()
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 0000023C - 0000024F (0x14 bytes), align: 2
  Segment part 5.             Intra module refs:   Segment part 32
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           main_menuhdr            0000023C        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::delete ~MainMenu(MainMenu *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004E58 - 00004E73 (0x1c bytes), align: 2
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::new MainMenu()
                                   00004E58        TabGUI::CreateTabGUI(DLG_CSM *) (TabGUI)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *) (TabGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004E74 - 00004ED7 (0x64 bytes), align: 2
  Segment part 15.            Intra module refs:   MainMenu::new MainMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::MainMenu()    00004E74 
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::~MainMenu()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::CreateMainMenu(DLG_CSM *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004ED8 - 00004FFB (0x124 bytes), align: 2
  Segment part 21.            Intra module refs:   MainMenu::MainMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::OnKey(void *, GUI_MSG *)
                                   00004ED8 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004FFC - 0000505B (0x60 bytes), align: 2
  Segment part 23.            Intra module refs:   MainMenu::MainMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::GHook(void *, int)
                                   00004FFC 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000250 - 00000283 (0x34 bytes), align: 2
  Segment part 7.             Intra module refs:   MainMenu::ItemProc(void *, int, void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MM_ITEM_ICONS           00000268        IconPack::InitIconPack() (IconPack)
           MM_ITEM_LGPS            00000250        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3E0 - 0000C3E7 (0x8 bytes), align: 2
  Segment part 9.             Intra module refs:   MainMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000505C - 0000515F (0x104 bytes), align: 2
  Segment part 25.            Intra module refs:   MainMenu::MainMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::ItemProc(void *, int, void *)
                                   0000505C 
               stack 1 = 00000000 ( 00000024 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005160 - 00005163 (0x4 bytes), align: 2
  Segment part 26.            Intra module refs:   MainMenu::GHook(void *, int)
                                                   MainMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::UpdateCSMName(DLG_CSM *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005164 - 00005167 (0x4 bytes), align: 2
  Segment part 29.            Intra module refs:   MainMenu::GHook(void *, int)
                                                   MainMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005168 - 00005203 (0x9c bytes), align: 2
  Segment part 31.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::GetMainMenuGUI(DLG_CSM *, int)
                                   00005168        TabGUI::CreateTabGUI(DLG_CSM *) (TabGUI)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *) (TabGUI)
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005204 - 00005207 (0x4 bytes), align: 2
  Segment part 32.            Intra module refs:   MainMenu::GetMainMenuGUI(DLG_CSM *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.Intra module refs:   MainMenu::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.Intra module refs:   MainMenu::new MainMenu()
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.Intra module refs:   MainMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000224 - 0000023B (0x18 bytes), align: 2
  Segment part 3.             Intra module refs:   main_menu_sk
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 0000023C - 0000024F (0x14 bytes), align: 2
  Segment part 6.             Intra module refs:   main_menuhdr
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000250 - 00000283 (0x34 bytes), align: 2
  Segment part 8.             Intra module refs:   Segment part 7
    -------------------------------------------------------------------------
DATA_ID
  Segment part 44. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 45. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\Mss3App.r79
  PROGRAM MODULE, NAME : Mss3App

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005208 - 000052AB (0xa4 bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mss3App::Start(char *, char *)
                                   00005208        main (main)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000052AC - 000052BB (0x10 bytes), align: 2
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mss3App::InitSetting()
                                   000052AC        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000052BC - 00005363 (0xa8 bytes), align: 2
  Segment part 9.             Intra module refs:   Mss3App::InitSetting()
                                                   Mss3App::Start(char *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mss3App::InitDatPath()
                                   000052BC 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005364 - 0000537F (0x1c bytes), align: 2
  Segment part 11.            Intra module refs:   Mss3App::Start(char *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mss3App::Killer()       00005364        DaemonCSM::OnClose(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005380 - 00005427 (0xa8 bytes), align: 2
  Segment part 13.            Intra module refs:   Mss3App::Start(char *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mss3App::IsAlreadyRuning()
                                   00005380 
               stack 1 = 00000000 ( 00000040 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.Intra module refs:   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.Intra module refs:   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.Intra module refs:   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.Intra module refs:   Mss3App::InitSetting()
                                                   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.Intra module refs:   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.Intra module refs:   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.Intra module refs:   Mss3App::Killer()
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.Intra module refs:   Mss3App::IsAlreadyRuning()
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3E8 - 0000C3EF (0x8 bytes), align: 2
  Segment part 2.             Intra module refs:   Mss3App::IsAlreadyRuning()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3F0 - 0000C3FB (0xc bytes), align: 2
  Segment part 3.             Intra module refs:   Mss3App::InitDatPath()

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\MyIpcMessage.r79
  PROGRAM MODULE, NAME : MyIpcMessage

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Relative segment, address: CODE_AREA 0000C3FC - 0000C407 (0xc bytes), align: 2
  Segment part 2.             Intra module refs:   SendMyIpc(int)
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000284 - 0000028F (0xc bytes), align: 2
  Segment part 3.             Intra module refs:   SendMyIpc(int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005428 - 0000544F (0x28 bytes), align: 2
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendMyIpc(int)          00005428        DaemonCSM::DoNewProc() (DaemonCSM)
                                                   DaemonCSM::UpdateNProc() (DaemonCSM)
                                                   KeyHook::HookProc(int, int) (KeyHook)
                                                   Mss3App::Start(char *, char *) (Mss3App)
                                                   PopupNewIn::GHook(void *, int) (PopupGUI)
                                                   PopupNewIn::OnKey(void *, GUI_MSG *) (PopupGUI)
                                                   SendList::SendEnd(int) (SendList)
                                                   SmsData::CheckAll() (SmsData)
                                                   SmsData::CheckDat() (SmsData)
                                                   SmsData::CheckFolder(int) (SmsData)
                                                   SmsData::CheckSDList() (SmsData)
                                                   SmsData::DeleteAllMss() (SmsData)
                                                   SmsData::MoveAllToArchive() (SmsData)
                                                   SmsData::ReadAllDatMsg() (SmsData)
                                                   SmsData::ReadAllMessage() (SmsData)
                                                   SmsData::ReadFolder(int) (SmsData)
                                                   Vibra::VibraNextTmrProc() (Vibra)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005450 - 0000548B (0x3c bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendMyIpc(int, void *)
                                   00005450        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
                                                   DaemonCSM::StartDialog(int, void *) (DaemonCSM)
                                                   EditGUI::EditSendSMS(WSHDR *) (EditGUI)
                                                   Mss3App::Start(char *, char *) (Mss3App)
                                                   NAbCSM::CreateNAbCSM(void *, int, char *, int) (NativeAddressbook)
                                                   PopupNewIn::GHook(void *, int) (PopupGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000284 - 0000028F (0xc bytes), align: 2
  Segment part 4.             Intra module refs:   Segment part 3
    -------------------------------------------------------------------------
DATA_ID
  Segment part 9. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\NativeAddressbook.r79
  PROGRAM MODULE, NAME : NativeAddressbook

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::delete ~NAbCSM(NAbCSM *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000548C - 000054A7 (0x1c bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::new NAbCSM()    0000548C        EditGUI::EdOpUserItem(USR_MENU_ITEM *) (EditGUI)
                                                   EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000054A8 - 0000552B (0x84 bytes), align: 2
  Segment part 7.             Intra module refs:   NAbCSM::new NAbCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::NAbCSM()        000054A8 
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::~NAbCSM()       
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000552C - 00005747 (0x21c bytes), align: 2
  Segment part 11.            Intra module refs:   NAbCSM::NAbCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
                                   0000552C 
               stack 1 = 00000000 ( 00000024 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005748 - 00005803 (0xbc bytes), align: 2
  Segment part 13.            Intra module refs:   NAbCSM::NAbCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::OnCreate(CSM_RAM *)
                                   00005748 
               stack 1 = 00000000 ( 00000088 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005804 - 0000585B (0x58 bytes), align: 2
  Segment part 15.            Intra module refs:   NAbCSM::NAbCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::OnClose(CSM_RAM *)
                                   00005804 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000585C - 00005933 (0xd8 bytes), align: 2
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::CreateNAbCSM(void *, int, char *, int)
                                   0000585C        EditGUI::EdOpUserItem(USR_MENU_ITEM *) (EditGUI)
                                                   EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 0000005C )
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.Intra module refs:   NAbCSM::CreateNAbCSM(void *, int, char *, int)
                                                   NAbCSM::OnClose(CSM_RAM *)
                                                   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.Intra module refs:   NAbCSM::new NAbCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.Intra module refs:   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.Intra module refs:   NAbCSM::CreateNAbCSM(void *, int, char *, int)
                                                   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.Intra module refs:   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.Intra module refs:   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.Intra module refs:   NAbCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.Intra module refs:   NAbCSM::CreateNAbCSM(void *, int, char *, int)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\NumList.r79
  PROGRAM MODULE, NAME : NumList

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005934 - 0000594F (0x1c bytes), align: 2
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::new NumList()
                                   00005934        EditGUI::EditGUI() (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005950 - 0000596B (0x1c bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::delete ~NumList(NumList *)
                                   00005950        EditGUI::~EditGUI() (EditGUI)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::NumList()      
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::~NumList()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000596C - 0000599F (0x34 bytes), align: 2
  Segment part 11.            Intra module refs:   NumList::AddNumsToList(char const *)
                                                   NumList::AddToList(char const *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AllocNL()      0000596C 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000059A0 - 000059DB (0x3c bytes), align: 2
  Segment part 13.            Intra module refs:   NumList::delete ~NumList(NumList *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::FreeList()     000059A0 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000059DC - 00005A73 (0x98 bytes), align: 2
  Segment part 15.            Intra module refs:   NumList::AddNumsToList(char const *)
                                                   NumList::AddToList(char const *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddToList_end(_NLST *)
                                   000059DC 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddToList(_NLST *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005A74 - 00005A97 (0x24 bytes), align: 2
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::FindNL(int)    00005A74        EditGUI::AddNumberBlank(void *) (EditGUI)
                                                   EditGUI::GHook(void *, int) (EditGUI)
                                                   EditGUI::InsertNumber(void *, char *) (EditGUI)
                                                   EditGUI::SetNumber(void *, char *) (EditGUI)
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddToList_first(_NLST *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddToList(_NLST *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005A98 - 00005B7B (0xe4 bytes), align: 2
  Segment part 25.            Intra module refs:   NumList::AddNumsToList(char const *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddToList(char const *)
                                   00005A98        EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int) (EditGUI)
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddToList(char const *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005B7C - 00005BFB (0x80 bytes), align: 2
  Segment part 29.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::DeleteNL(_NLST *)
                                   00005B7C        EditGUI::GHook(void *, int) (EditGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::DeleteNL(int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005BFC - 00005CC7 (0xcc bytes), align: 2
  Segment part 33.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddNumsToList(char const *)
                                   00005BFC        EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int) (EditGUI)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *) (EditGUI)
               stack 1 = 00000000 ( 00000094 )
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::UpdateNL(char const *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005CC8 - 00005D1B (0x54 bytes), align: 2
  Segment part 37.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::UpdateNL(_NLST *, char const *)
                                   00005CC8        EditGUI::SetNumber(void *, char *) (EditGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005D1C - 00005D83 (0x68 bytes), align: 2
  Segment part 39.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::InsertNL_front(_NLST *, char const *)
                                   00005D1C        EditGUI::AddNumberBlank(void *) (EditGUI)
                                                   EditGUI::InsertNumber(void *, char *) (EditGUI)
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005D84 - 00005DFB (0x78 bytes), align: 2
  Segment part 41.            Intra module refs:   NumList::InsertNL_behind(_NLST *, char const *)
                                                   NumList::InsertNL_front(_NLST *, char const *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AllocNL(char const *)
                                   00005D84 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005DFC - 00005DFF (0x4 bytes), align: 2
  Segment part 42.            Intra module refs:   NumList::AddToList(char const *)
                                                   NumList::AllocNL(char const *)
                                                   NumList::UpdateNL(_NLST *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005E00 - 00005E4F (0x50 bytes), align: 2
  Segment part 44.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::InsertNL_behind(_NLST *, char const *)
                                   00005E00        EditGUI::AddNumberBlank(void *) (EditGUI)
                                                   EditGUI::InsertNumber(void *, char *) (EditGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005E50 - 00005E6F (0x20 bytes), align: 2
  Segment part 46.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::ClearNL(_NLST *)
                                   00005E50        EditGUI::GHook(void *, int) (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005E70 - 00005EAB (0x3c bytes), align: 2
  Segment part 48.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::IsNumExist(char const *)
                                   00005E70        EditGUI::InsertNumber(void *, char *) (EditGUI)
                                                   EditGUI::SetNumber(void *, char *) (EditGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.Intra module refs:   NumList::AllocNL()
                                                   NumList::AllocNL(char const *)
                                                   NumList::new NumList()
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.Intra module refs:   NumList::DeleteNL(_NLST *)
                                                   NumList::FreeList()
                                                   NumList::delete ~NumList(NumList *)
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.Intra module refs:   NumList::AddToList(char const *)
                                                   NumList::AllocNL(char const *)
                                                   NumList::UpdateNL(_NLST *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.Intra module refs:   NumList::AddToList(char const *)
                                                   NumList::AllocNL(char const *)
                                                   NumList::UpdateNL(_NLST *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.Intra module refs:   NumList::IsNumExist(char const *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\OthersMenu.r79
  PROGRAM MODULE, NAME : OthersMenu

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Relative segment, address: CODE_AREA 0000C408 - 0000C413 (0xc bytes), align: 2
  Segment part 2.             Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C414 - 0000C473 (0x60 bytes), align: 2
  Segment part 3.             Intra module refs:   OthMenu::ShowAbout()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C474 - 0000C487 (0x14 bytes), align: 2
  Segment part 4.             Intra module refs:   OthMenu::CreateOthMenu(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::delete ~OthMenu(OthMenu *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005EAC - 00005EC7 (0x1c bytes), align: 2
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::new OthMenu()
                                   00005EAC        MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005EC8 - 00005FA3 (0xdc bytes), align: 2
  Segment part 13.            Intra module refs:   Segment part 30
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OpenArchive()           00005EC8        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000208 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005FA4 - 00006007 (0x64 bytes), align: 2
  Segment part 15.            Intra module refs:   OthMenu::new OthMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::OthMenu()      00005FA4 
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::~OthMenu()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006008 - 000060F3 (0xec bytes), align: 2
  Segment part 19.            Intra module refs:   OthMenu::OthMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::OnKey(void *, GUI_MSG *)
                                   00006008 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000060F4 - 00006183 (0x90 bytes), align: 2
  Segment part 21.            Intra module refs:   OthMenu::OthMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::GHook(void *, int)
                                   000060F4 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000290 - 000002AB (0x1c bytes), align: 2
  Segment part 5.             Intra module refs:   OthMenu::ItemProc(void *, int, void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OTH_ITEM_LGPS           00000290        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006184 - 000061D7 (0x54 bytes), align: 2
  Segment part 23.            Intra module refs:   OthMenu::OthMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::ItemProc(void *, int, void *)
                                   00006184 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000061D8 - 00006203 (0x2c bytes), align: 2
  Segment part 25.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::CreateOthMenu(DLG_CSM *)
                                   000061D8        MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006204 - 00006247 (0x44 bytes), align: 2
  Segment part 27.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::OpenCfgFile()
                                   00006204 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::OpenArchiveOTH()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006248 - 0000624B (0x4 bytes), align: 2
  Segment part 30.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::MoveAllMss()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000624C - 0000624F (0x4 bytes), align: 2
  Segment part 33.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006250 - 0000628B (0x3c bytes), align: 2
  Segment part 35.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::ShowAbout()    00006250 
               stack 1 = 00000000 ( 00000088 )
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_Z
  Relative segment, address: CODE_AREA 0000C938 - 00010937 (0x4000 bytes), align: 2
  Segment part 7.             Intra module refs:   OthMenu::ShowHelp()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           help_buf                0000C938 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000628C - 00006387 (0xfc bytes), align: 2
  Segment part 37.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::ShowHelp()     0000628C 
               stack 1 = 00000000 ( 0000009C )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006388 - 0000638B (0x4 bytes), align: 2
  Segment part 38.            Intra module refs:   OthMenu::GHook(void *, int)
                                                   OthMenu::ItemProc(void *, int, void *)
                                                   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000638C - 0000638F (0x4 bytes), align: 2
  Segment part 39.            Intra module refs:   OpenArchive()
                                                   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006390 - 00006393 (0x4 bytes), align: 2
  Segment part 40.            Intra module refs:   OthMenu::GHook(void *, int)
                                                   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::ExportTxtAll()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006394 - 00006397 (0x4 bytes), align: 2
  Segment part 43.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::DelAllMss()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006398 - 0000639B (0x4 bytes), align: 2
  Segment part 46.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000639C - 0000639F (0x4 bytes), align: 2
  Segment part 47.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.Intra module refs:   OthMenu::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.Intra module refs:   OthMenu::new OthMenu()
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.Intra module refs:   OthMenu::CreateOthMenu(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.Intra module refs:   OthMenu::ShowAbout()
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000290 - 000002AB (0x1c bytes), align: 2
  Segment part 6.             Intra module refs:   OTH_ITEM_LGPS
    -------------------------------------------------------------------------
INITTAB
  Segment part 60. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        
    -------------------------------------------------------------------------
DATA_ID
  Segment part 61. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 62. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\PlaySound.r79
  PROGRAM MODULE, NAME : PlaySound

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000063A0 - 000063BB (0x1c bytes), align: 2
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PlaySouNd::new PlaySouNd()
                                   000063A0        DaemonCSM::DaemonCSM() (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000063BC - 000063D7 (0x1c bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PlaySouNd::delete ~PlaySouNd(PlaySouNd *)
                                   000063BC        DaemonCSM::~DaemonCSM() (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000063D8 - 000063FB (0x24 bytes), align: 2
  Segment part 7.             Intra module refs:   PlaySouNd::delete ~PlaySouNd(PlaySouNd *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PlaySouNd::~PlaySouNd()
                                   000063D8 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PlaySouNd::PlaySouNd()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000063FC - 0000654B (0x150 bytes), align: 2
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PlaySouNd::PlayStart(PlaySouNd *, char const *)
                                   000063FC        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 000002F4 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000654C - 0000656F (0x24 bytes), align: 2
  Segment part 13.            Intra module refs:   PlaySouNd::PlayStart(PlaySouNd *, char const *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PlaySouNd::PlayStop()   0000654C        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006570 - 0000657B (0xc bytes), align: 2
  Segment part 15.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PlaySouNd::PlayDone()   00006570        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000657C - 00006583 (0x8 bytes), align: 2
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PlaySouNd::GetHandle()
                                   0000657C        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.Intra module refs:   PlaySouNd::new PlaySouNd()
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.Intra module refs:   PlaySouNd::delete ~PlaySouNd(PlaySouNd *)
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.Intra module refs:   PlaySouNd::PlayStart(PlaySouNd *, char const *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\PopupGUI.r79
  PROGRAM MODULE, NAME : PopupGUI

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 000002AC - 000002C3 (0x18 bytes), align: 2
  Segment part 3.             Intra module refs:   Segment part 5
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           pni_sk                  000002AC        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C488 - 0000C4AF (0x28 bytes), align: 2
  Segment part 2.             Intra module refs:   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C4B0 - 0000C4B7 (0x8 bytes), align: 2
  Segment part 5.             Intra module refs:   PopupNewIn::PopupNewIn()
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::delete ~PopupNewIn(PopupNewIn *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006584 - 0000659F (0x1c bytes), align: 2
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::new PopupNewIn()
                                   00006584        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000065A0 - 0000662F (0x90 bytes), align: 2
  Segment part 15.            Intra module refs:   PopupNewIn::new PopupNewIn()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::PopupNewIn()
                                   000065A0 
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::~PopupNewIn()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006630 - 00006707 (0xd8 bytes), align: 2
  Segment part 19.            Intra module refs:   PopupNewIn::PopupNewIn()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::OnKey(void *, GUI_MSG *)
                                   00006630 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006708 - 00006847 (0x140 bytes), align: 2
  Segment part 21.            Intra module refs:   PopupNewIn::PopupNewIn()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::GHook(void *, int)
                                   00006708 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006848 - 0000684B (0x4 bytes), align: 2
  Segment part 22.            Intra module refs:   PopupNewIn::GHook(void *, int)
                                                   PopupNewIn::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000684C - 00006943 (0xf8 bytes), align: 2
  Segment part 24.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
                                   0000684C        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
               stack 1 = 00000000 ( 00000074 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006944 - 00006947 (0x4 bytes), align: 2
  Segment part 25.            Intra module refs:   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
                                                   PopupNewIn::GHook(void *, int)
                                                   PopupNewIn::PopupNewIn()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006948 - 0000694B (0x4 bytes), align: 2
  Segment part 26.            Intra module refs:   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
                                                   PopupNewIn::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::UpdateCSMName(DLG_CSM *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000694C - 0000694F (0x4 bytes), align: 2
  Segment part 29.            Intra module refs:   PopupNewIn::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C4B8 - 0000C4CF (0x18 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 7
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C4D0 - 0000C4D7 (0x8 bytes), align: 2
  Segment part 7.             Intra module refs:   Segment part 9
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 000002C4 - 000002FB (0x38 bytes), align: 2
  Segment part 8.             Intra module refs:   Segment part 38
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MyShowMsg::popup        000002C4 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006950 - 00006953 (0x4 bytes), align: 2
  Segment part 31.            Intra module refs:   Segment part 9
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MyShowMsg::GHook(void *, int)
                                   00006950 
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006954 - 00006977 (0x24 bytes), align: 2
  Segment part 33.            Intra module refs:   Segment part 9
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MyShowMsg::OnKey(void *, GUI_MSG *)
                                   00006954 
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006978 - 0000699B (0x24 bytes), align: 2
  Segment part 35.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MyShowMsg::MyShow(int, WSHDR *)
                                   00006978        EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000699C - 000069BF (0x24 bytes), align: 2
  Segment part 37.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MyShowMsg::MyShow(int, char *)
                                   0000699C        OthMenu::ShowAbout() (OthersMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000069C0 - 000069C3 (0x4 bytes), align: 2
  Segment part 38.            Intra module refs:   MyShowMsg::MyShow(int, WSHDR *)
                                                   MyShowMsg::MyShow(int, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.Intra module refs:   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
                                                   PopupNewIn::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.Intra module refs:   PopupNewIn::new PopupNewIn()
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.Intra module refs:   PopupNewIn::GHook(void *, int)
                                                   PopupNewIn::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.Intra module refs:   PopupNewIn::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.Intra module refs:   PopupNewIn::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.Intra module refs:   PopupNewIn::GHook(void *, int)
                                                   PopupNewIn::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.Intra module refs:   PopupNewIn::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.Intra module refs:   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.Intra module refs:   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 000002AC - 000002C3 (0x18 bytes), align: 2
  Segment part 4.             Intra module refs:   pni_sk
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 000002C4 - 000002FB (0x38 bytes), align: 2
  Segment part 9.             Intra module refs:   MyShowMsg::popup
    -------------------------------------------------------------------------
DATA_ID
  Segment part 48. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 49. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\SendList.r79
  PROGRAM MODULE, NAME : SendList

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000069C4 - 000069DF (0x1c bytes), align: 2
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::new SendList()
                                   000069C4        DaemonCSM::DaemonCSM() (DaemonCSM)
                                                   EditGUI::EditSendSMS(WSHDR *) (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000069E0 - 000069FB (0x1c bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::delete ~SendList(SendList *)
                                   000069E0        DaemonCSM::~DaemonCSM() (DaemonCSM)
                                                   EditGUI::EditSendSMS(WSHDR *) (EditGUI)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000069FC - 00006A1B (0x20 bytes), align: 2
  Segment part 10.            Intra module refs:   SendList::AddToList(char const *, WSHDR *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::AllocSL()     000069FC 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006A1C - 00006A67 (0x4c bytes), align: 2
  Segment part 12.            Intra module refs:   SendList::delete ~SendList(SendList *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::FreeList()    00006A1C 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::SendList()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::~SendList()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006A68 - 00006AB7 (0x50 bytes), align: 2
  Segment part 18.            Intra module refs:   SendList::AddToList(char const *, WSHDR *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::AddToList(_SNDLST *)
                                   00006A68 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006AB8 - 00006B2F (0x78 bytes), align: 2
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::AddToList(char const *, WSHDR *)
                                   00006AB8        EditGUI::EditSendSMS(WSHDR *) (EditGUI)
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006B30 - 00006BA7 (0x78 bytes), align: 2
  Segment part 22.            Intra module refs:   SendList::SendEnd(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::DeleteSL(_SNDLST *)
                                   00006B30 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006BA8 - 00006BCF (0x28 bytes), align: 2
  Segment part 24.            Intra module refs:   SendList::SendEnd(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::FindSL(int)   00006BA8 
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006BD0 - 00006BEF (0x20 bytes), align: 2
  Segment part 26.            Intra module refs:   SendList::SendStart()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::IsSending()   00006BD0 
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006BF0 - 00006C83 (0x94 bytes), align: 2
  Segment part 28.            Intra module refs:   SendList::Send(SendList *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::SendStart()   00006BF0 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006C84 - 00006D0B (0x88 bytes), align: 2
  Segment part 30.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::SendEnd(int)
                                   00006C84        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::IsSendCSM(int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006D0C - 00006D5B (0x50 bytes), align: 2
  Segment part 34.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::CatList(_SNDLST *)
                                   00006D0C        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::SendOnTop(SendList *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006D5C - 00006DAB (0x50 bytes), align: 2
  Segment part 38.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::Send(SendList *)
                                   00006D5C        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 000002FC - 00000307 (0xc bytes), align: 2
  Segment part 3.             Intra module refs:   SendList::CsmToTop(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::ipc_xtask     000002FC 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006DAC - 00006DE3 (0x38 bytes), align: 2
  Segment part 40.            Intra module refs:   SendList::Send(SendList *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::CsmToTop(int)
                                   00006DAC 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.Intra module refs:   SendList::AllocSL()
                                                   SendList::new SendList()
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.Intra module refs:   SendList::DeleteSL(_SNDLST *)
                                                   SendList::FreeList()
                                                   SendList::delete ~SendList(SendList *)
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.Intra module refs:   SendList::SendEnd(int)
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.Intra module refs:   SendList::SendEnd(int)
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.Intra module refs:   SendList::Send(SendList *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 000002FC - 00000307 (0xc bytes), align: 2
  Segment part 4.             Intra module refs:   SendList::ipc_xtask
    -------------------------------------------------------------------------
DATA_ID
  Segment part 46. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 47. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C4D8 - 0000C4DF (0x8 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 4

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\SiemensPDU.r79
  PROGRAM MODULE, NAME : SiemensPDU

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006DE4 - 00006E43 (0x60 bytes), align: 2
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SiememPDU::Add2WS(char *, WSHDR *, int)
                                   00006DE4        DataDecoder(_SDLIST *, char *, int) (SmsData)
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006E44 - 00006EFF (0xbc bytes), align: 2
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SiememPDU::Hex2Num(char *, char *, int)
                                   00006E44        DataDecoder(_SDLIST *, char *, int) (SmsData)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006F00 - 00006F7B (0x7c bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SiememPDU::Bit7Decode(WSHDR *, char *, int, int)
                                   00006F00        DataDecoder(_SDLIST *, char *, int) (SmsData)
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SiememPDU::PduDecodeTxt(SDLIST *, char *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SiememPDU::PduDecodeAll(SDLIST *, char *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006F7C - 00007087 (0x10c bytes), align: 2
  Segment part 16.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SiememPDU::DoSmsReport(SDLIST *, char *, WSHDR *)
                                   00006F7C        DataDecoder(_SDLIST *, char *, int) (SmsData)
               stack 1 = 00000000 ( 00000038 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C4E0 - 0000C503 (0x24 bytes), align: 2
  Segment part 2.             Intra module refs:   SiememPDU::DoSmsReport(SDLIST *, char *, WSHDR *)

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\SmsData.r79
  PROGRAM MODULE, NAME : SmsData

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007088 - 000070A3 (0x1c bytes), align: 2
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::new SmsData()
                                   00007088        DaemonCSM::OnCreate(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000070A4 - 000070BF (0x1c bytes), align: 2
  Segment part 16.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::delete ~SmsData(SmsData *)
                                   000070A4        DaemonCSM::OnClose(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000070C0 - 000070DF (0x20 bytes), align: 2
  Segment part 18.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::DeMsgDataList(SMS_DATA_LIST *)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::AllocSDL()     000070C0        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *) (EditGUI)
                                                   MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000070E0 - 00007147 (0x68 bytes), align: 2
  Segment part 20.            Intra module refs:   SmsData::CheckDat()
                                                   SmsData::CheckSDList()
                                                   SmsData::CheckSMS(int)
                                                   SmsData::DeleteAllMss()
                                                   SmsData::DeleteMessage(_SDLIST *)
                                                   SmsData::MoveToArchive(_SDLIST *)
                                                   SmsData::ReadMessageOne(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::DeleteSDL(_SDLIST *)
                                   000070E0 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007148 - 000071AB (0x64 bytes), align: 2
  Segment part 22.            Intra module refs:   SmsData::delete ~SmsData(SmsData *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FreeAllSDL()   00007148 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000071AC - 0000721F (0x74 bytes), align: 2
  Segment part 24.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::DeMsgDataList(SMS_DATA_LIST *)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::AddByTimeSDL(_SDLIST *)
                                   000071AC 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007220 - 00007267 (0x48 bytes), align: 2
  Segment part 26.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::DeMsgDataList(SMS_DATA_LIST *)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FreeOneSDL(_SDLIST *)
                                   00007220        EditGUI::GHook(void *, int) (EditGUI)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007268 - 000072E3 (0x7c bytes), align: 2
  Segment part 28.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CopyOneSDL(_SDLIST *)
                                   00007268        EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *) (EditGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000072E4 - 00007303 (0x20 bytes), align: 2
  Segment part 30.            Intra module refs:   SmsData::CheckDat()
                                                   SmsData::CheckSMS(int)
                                                   SmsData::ReadMessageOne(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindSDL(int)   000072E4        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007304 - 00007363 (0x60 bytes), align: 2
  Segment part 32.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindOpmsgSDL(int)
                                   00007304        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindSDL(WSHDR *, char *, char *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007364 - 000073BB (0x58 bytes), align: 2
  Segment part 36.            Intra module refs:   SmsData::CheckFolder(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindSDL(char *)
                                   00007364 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000073BC - 00007447 (0x8c bytes), align: 2
  Segment part 38.            Intra module refs:   SmsData::CheckAll()
                                                   SmsData::FilterGetCount()
                                                   SmsData::ReadAllMessage()
                                                   SmsData::ReadMessageOne(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::GetSMSCount(int)
                                   000073BC        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
                                                   MainMenu::ItemProc(void *, int, void *) (MainMenu)
                                                   SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *) (SmsListMenu)
                                                   SmsListMenu::GHook(void *, int) (SmsListMenu)
                                                   SmsListMenu::GetSmsListMenuGUI(int, int, DLG_CSM *, int) (SmsListMenu)
                                                   SmsListMenu::ReCreateMe(void *) (SmsListMenu)
                                                   TabGUI::GHook(void *, int) (TabGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007448 - 000074EB (0xa4 bytes), align: 2
  Segment part 40.            Intra module refs:   SmsData::FilterGetCount()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::GetSMSCount(int, int)
                                   00007448 
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000074EC - 0000759F (0xb4 bytes), align: 2
  Segment part 42.            Intra module refs:   SmsData::FilterFindSDL(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindSDL(int, int)
                                   000074EC        SmsListMenu::ItemProc(void *, int, void *) (SmsListMenu)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000075A0 - 000078BF (0x320 bytes), align: 2
  Segment part 44.            Intra module refs:   ReadSMS(_SDLIST *, INDEX_ID_DATA *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DataDecoder(_SDLIST *, char *, int)
                                   000075A0 
               stack 1 = 00000000 ( 000001D8 )
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000078C0 - 00007A0F (0x150 bytes), align: 2
  Segment part 46.            Intra module refs:   SmsData::DeMsgDataList(SMS_DATA_LIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ReadSMS(_SDLIST *, INDEX_ID_DATA *)
                                   000078C0 
               stack 1 = 00000000 ( 000000F0 )
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007A10 - 00007AB7 (0xa8 bytes), align: 2
  Segment part 48.            Intra module refs:   SmsData::ReadAllDatMsg()
                                                   SmsData::ReadMessageOne(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::DeMsgDataList(SMS_DATA_LIST *)
                                   00007A10 
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007AB8 - 00007B8B (0xd4 bytes), align: 2
  Segment part 50.            Intra module refs:   SmsData::ReadAllMessage()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadAllDatMsg()
                                   00007AB8 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007B8C - 00007BFB (0x70 bytes), align: 2
  Segment part 52.            Intra module refs:   SmsData::ReadMessageOne(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindMsgDataL(int)
                                   00007B8C 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007BFC - 00007C6B (0x70 bytes), align: 2
  Segment part 54.            Intra module refs:   SmsData::CheckDat()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadMessageOne(int)
                                   00007BFC        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007C6C - 00007E6F (0x204 bytes), align: 2
  Segment part 56.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadMss(char *, _SDLIST *)
                                   00007C6C        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
               stack 1 = 00000000 ( 000000BC )
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007E70 - 0000801F (0x1b0 bytes), align: 2
  Segment part 58.            Intra module refs:   SmsData::ReadAllMessage()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadFolder(int)
                                   00007E70 
               stack 1 = 00000000 ( 00000458 )
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008020 - 0000830F (0x2f0 bytes), align: 2
  Segment part 60.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
                                   00008020        EditGUI::DoSmsWorkBG(void *, int) (EditGUI)
                                                   EditGUI::SaveDraft(WSHDR *) (EditGUI)
                                                   SendList::SendEnd(int) (SendList)
               stack 1 = 00000000 ( 00000194 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008310 - 00008313 (0x4 bytes), align: 2
  Segment part 61.            Intra module refs:   SmsData::ReadMss(char *, _SDLIST *)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008314 - 00008317 (0x4 bytes), align: 2
  Segment part 62.            Intra module refs:   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008318 - 0000841B (0x104 bytes), align: 2
  Segment part 64.            Intra module refs:   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::GetMssPath(char *, char *, TTime *, TDate *)
                                   00008318 
               stack 1 = 00000000 ( 000000A8 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000841C - 0000841F (0x4 bytes), align: 2
  Segment part 65.            Intra module refs:   SmsData::GetMssPath(char *, char *, TTime *, TDate *)
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008420 - 0000849F (0x80 bytes), align: 2
  Segment part 67.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::DeleteMessage(_SDLIST *)
                                   00008420        EditGUI::DoSmsWorkBG(void *, int) (EditGUI)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000084A0 - 00008517 (0x78 bytes), align: 2
  Segment part 69.            Intra module refs:   SmsData::ReadAllMessageCHK(SmsData *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadAllMessage()
                                   000084A0 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008518 - 0000852F (0x18 bytes), align: 2
  Segment part 71.            Intra module refs:   Segment part 76
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadAllMessageCHK(SmsData *)
                                   00008518 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadAllMessageFRC(SmsData *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008530 - 0000855B (0x2c bytes), align: 2
  Segment part 75.            Intra module refs:   SmsData::new SmsData()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::SmsData()      00008530 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000855C - 0000855F (0x4 bytes), align: 2
  Segment part 76.            Intra module refs:   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
                                                   SmsData::SmsData()
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::~SmsData()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_Z
  Relative segment, address: CODE_AREA 00010938 - 0001093B (0x4 bytes), align: 2
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SMSDATA                 00010938        KeyHook::HookProc(int, int) (KeyHook)
                                                   MainMenu::ItemProc(void *, int, void *) (MainMenu)
                                                   Segment part 19 (DialogCSM)
                                                   Segment part 22 (PopupGUI)
                                                   Segment part 40 (DaemonCSM)
                                                   Segment part 46 (OthersMenu)
                                                   Segment part 47 (EditGUI)
                                                   Segment part 56 (SmsListMenu)
                                                   Segment part 73 (EditGUI)
                                                   SendList::SendEnd(int) (SendList)
                                                   TabGUI::GHook(void *, int) (TabGUI)
                                                   Vibra::VibraNext() (Vibra)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008560 - 000085BF (0x60 bytes), align: 2
  Segment part 80.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::IsNewSMS(int)
                                   00008560        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000085C0 - 000086E7 (0x128 bytes), align: 2
  Segment part 82.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CheckSMS(int)
                                   000085C0        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000086E8 - 000088A7 (0x1c0 bytes), align: 2
  Segment part 84.            Intra module refs:   SmsData::CheckAll()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CheckDat()     000086E8 
               stack 1 = 00000000 ( 00000024 )
    -------------------------------------------------------------------------
CODE
  Segment part 85. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000088A8 - 00008A7F (0x1d8 bytes), align: 2
  Segment part 86.            Intra module refs:   SmsData::CheckAll()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CheckFolder(int)
                                   000088A8 
               stack 1 = 00000000 ( 00000458 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008A80 - 00008A83 (0x4 bytes), align: 2
  Segment part 87.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008A84 - 00008A87 (0x4 bytes), align: 2
  Segment part 88.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008A88 - 00008A8B (0x4 bytes), align: 2
  Segment part 89.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008A8C - 00008A8F (0x4 bytes), align: 2
  Segment part 90.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008A90 - 00008A93 (0x4 bytes), align: 2
  Segment part 91.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008A94 - 00008A97 (0x4 bytes), align: 2
  Segment part 92.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008A98 - 00008B03 (0x6c bytes), align: 2
  Segment part 94.            Intra module refs:   SmsData::CheckSDList()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::IsDatExist(int)
                                   00008A98 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 95. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008B04 - 00008BCB (0xc8 bytes), align: 2
  Segment part 96.            Intra module refs:   SmsData::CheckAll()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CheckSDList()
                                   00008B04 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 97. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008BCC - 00008C3B (0x70 bytes), align: 2
  Segment part 98.            Intra module refs:   SmsData::CheckAllCHK(SmsData *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CheckAll()     00008BCC 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 99. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008C3C - 00008C53 (0x18 bytes), align: 2
  Segment part 100.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CheckAllCHK(SmsData *)
                                   00008C3C        DialogCSM::CreateDialogCSM(int, void *) (DialogCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 101. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008C54 - 00008D73 (0x120 bytes), align: 2
  Segment part 102.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::NewToReadSMS(_SDLIST *)
                                   00008C54        EditGUI::DoSmsWorkBG(void *, int) (EditGUI)
               stack 1 = 00000000 ( 0000009C )
    -------------------------------------------------------------------------
CODE
  Segment part 103. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008D74 - 00008D97 (0x24 bytes), align: 2
  Segment part 104.           Intra module refs:   SmsData::DeleteMessage(_SDLIST *)
                                                   SmsData::FreeOneSDL(_SDLIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::IsExistSDL(_SDLIST *)
                                   00008D74        EditGUI::GHook(void *, int) (EditGUI)
                                                   PopupNewIn::GHook(void *, int) (PopupGUI)
                                                   PopupNewIn::OnKey(void *, GUI_MSG *) (PopupGUI)
    -------------------------------------------------------------------------
CODE
  Segment part 105. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008D98 - 00008E33 (0x9c bytes), align: 2
  Segment part 106.           Intra module refs:   SmsData::FilterFindNext(_SDLIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindNextSDL(_SDLIST *, int)
                                   00008D98        EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 107. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008E34 - 00008ECF (0x9c bytes), align: 2
  Segment part 108.           Intra module refs:   SmsData::FilterFindPrev(_SDLIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindPrevSDL(_SDLIST *, int)
                                   00008E34        EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 109. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008ED0 - 00008F9F (0xd0 bytes), align: 2
  Segment part 110.           Intra module refs:   SmsData::FindSDL(int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindSDL(int)
                                   00008ED0 
               stack 1 = 00000000 ( 000000A8 )
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008FA0 - 00008FD7 (0x38 bytes), align: 2
  Segment part 112.           Intra module refs:   SmsData::FilterFindSDL(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindSDL(int, int)
                                   00008FA0 
    -------------------------------------------------------------------------
CODE
  Segment part 113. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008FD8 - 0000902B (0x54 bytes), align: 2
  Segment part 114.           Intra module refs:   SmsData::FilterFindSDL(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindSDL(char const *, int)
                                   00008FD8 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 115. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000902C - 0000907F (0x54 bytes), align: 2
  Segment part 116.           Intra module refs:   SmsData::FilterFindSDL(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindSDL(WSHDR *, int)
                                   0000902C 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 117. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009080 - 0000913B (0xbc bytes), align: 2
  Segment part 118.           Intra module refs:   SmsData::GetSMSCount(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterGetCount()
                                   00009080 
               stack 1 = 00000000 ( 000000A4 )
    -------------------------------------------------------------------------
CODE
  Segment part 119. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000913C - 0000917B (0x40 bytes), align: 2
  Segment part 120.           Intra module refs:   SmsData::FilterGetCount()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterGetCount(char const *)
                                   0000913C 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 121. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000917C - 000091BB (0x40 bytes), align: 2
  Segment part 122.           Intra module refs:   SmsData::FilterGetCount()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterGetCount(WSHDR *)
                                   0000917C 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 123. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000091BC - 0000929F (0xe4 bytes), align: 2
  Segment part 124.           Intra module refs:   SmsData::FindNextSDL(_SDLIST *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindNext(_SDLIST *)
                                   000091BC 
               stack 1 = 00000000 ( 000000A4 )
    -------------------------------------------------------------------------
CODE
  Segment part 125. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000092A0 - 000092E3 (0x44 bytes), align: 2
  Segment part 126.           Intra module refs:   SmsData::FilterFindNext(_SDLIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindNext(_SDLIST *, char const *)
                                   000092A0 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 127. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 128. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindNext(_SDLIST *, WSHDR *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 129. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000092E4 - 000093C7 (0xe4 bytes), align: 2
  Segment part 130.           Intra module refs:   SmsData::FindPrevSDL(_SDLIST *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindPrev(_SDLIST *)
                                   000092E4 
               stack 1 = 00000000 ( 000000A4 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000093C8 - 000093CB (0x4 bytes), align: 2
  Segment part 131.           Intra module refs:   SmsData::FilterFindNext(_SDLIST *)
                                                   SmsData::FilterFindPrev(_SDLIST *)
                                                   SmsData::FilterFindSDL(int)
                                                   SmsData::FilterGetCount()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000093CC - 000093CF (0x4 bytes), align: 2
  Segment part 132.           Intra module refs:   SmsData::FilterFindNext(_SDLIST *)
                                                   SmsData::FilterFindPrev(_SDLIST *)
                                                   SmsData::FilterFindSDL(int)
                                                   SmsData::FilterGetCount()
    -------------------------------------------------------------------------
CODE
  Segment part 133. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000093D0 - 00009413 (0x44 bytes), align: 2
  Segment part 134.           Intra module refs:   SmsData::FilterFindPrev(_SDLIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindPrev(_SDLIST *, char const *)
                                   000093D0 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 135. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 136. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindPrev(_SDLIST *, WSHDR *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 137. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009414 - 00009623 (0x210 bytes), align: 2
  Segment part 138.           Intra module refs:   SmsData::MoveAllToArchive()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::MoveToArchive(_SDLIST *)
                                   00009414        EditOptionMenu::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000120 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009624 - 00009627 (0x4 bytes), align: 2
  Segment part 139.           Intra module refs:   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009628 - 0000962B (0x4 bytes), align: 2
  Segment part 140.           Intra module refs:   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000962C - 0000962F (0x4 bytes), align: 2
  Segment part 141.           Intra module refs:   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009630 - 00009633 (0x4 bytes), align: 2
  Segment part 142.           Intra module refs:   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 143. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009634 - 0000988F (0x25c bytes), align: 2
  Segment part 144.           Intra module refs:   SmsData::MoveToArchive(_SDLIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
                                   00009634 
               stack 1 = 00000000 ( 000001A4 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009890 - 00009893 (0x4 bytes), align: 2
  Segment part 145.           Intra module refs:   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009894 - 00009897 (0x4 bytes), align: 2
  Segment part 146.           Intra module refs:   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 147. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009898 - 000098F7 (0x60 bytes), align: 2
  Segment part 148.           Intra module refs:   SmsData::MoveAllToArchiveBG(SmsData *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::MoveAllToArchive()
                                   00009898 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 149. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000098F8 - 0000992F (0x38 bytes), align: 2
  Segment part 150.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::MoveAllToArchiveBG(SmsData *)
                                   000098F8        Segment part 33 (OthersMenu)
               stack 1 = 00000000 ( 00000044 )
    -------------------------------------------------------------------------
CODE
  Segment part 151. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009930 - 0000994F (0x20 bytes), align: 2
  Segment part 152.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindLastNew()
                                   00009930        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
    -------------------------------------------------------------------------
CODE
  Segment part 153. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000308 - 0000030B (0x4 bytes), align: 2
  Segment part 11.            Intra module refs:   SmsData::ExportAllToText()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           utf8_hdr                00000308 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009950 - 00009BEB (0x29c bytes), align: 2
  Segment part 154.           Intra module refs:   SmsData::ExportAllToTextBG(SmsData *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ExportAllToText()
                                   00009950 
               stack 1 = 00000000 ( 0000028C )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009BEC - 00009BEF (0x4 bytes), align: 2
  Segment part 155.           Intra module refs:   SmsData::ExportAllToText()
                                                   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009BF0 - 00009BF3 (0x4 bytes), align: 2
  Segment part 156.           Intra module refs:   SmsData::ExportAllToText()
                                                   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 157. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009BF4 - 00009C2B (0x38 bytes), align: 2
  Segment part 158.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ExportAllToTextBG(SmsData *)
                                   00009BF4        Segment part 43 (OthersMenu)
               stack 1 = 00000000 ( 00000044 )
    -------------------------------------------------------------------------
CODE
  Segment part 159. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009C2C - 00009CAB (0x80 bytes), align: 2
  Segment part 160.           Intra module refs:   SmsData::DeleteAllMssBG(SmsData *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::DeleteAllMss()
                                   00009C2C 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 161. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009CAC - 00009CE3 (0x38 bytes), align: 2
  Segment part 162.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::DeleteAllMssBG(SmsData *)
                                   00009CAC        Segment part 47 (OthersMenu)
               stack 1 = 00000000 ( 00000044 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009CE4 - 00009CE7 (0x4 bytes), align: 2
  Segment part 163.           Intra module refs:   SmsData::DeleteAllMssBG(SmsData *)
                                                   SmsData::ExportAllToTextBG(SmsData *)
                                                   SmsData::MoveAllToArchiveBG(SmsData *)
    -------------------------------------------------------------------------
CODE
  Segment part 164. NOT NEEDED.Intra module refs   SmsData::AllocSDL()
                                                   SmsData::CopyOneSDL(_SDLIST *)
                                                   SmsData::new SmsData()
    -------------------------------------------------------------------------
CODE
  Segment part 165. NOT NEEDED.Intra module refs   SmsData::DeleteSDL(_SDLIST *)
                                                   SmsData::ExportAllToText()
                                                   SmsData::FreeAllSDL()
                                                   SmsData::FreeOneSDL(_SDLIST *)
                                                   SmsData::delete ~SmsData(SmsData *)
    -------------------------------------------------------------------------
CODE
  Segment part 166. NOT NEEDED.Intra module refs   SmsData::CopyOneSDL(_SDLIST *)
                                                   SmsData::ExportAllToText()
                                                   SmsData::ReadMss(char *, _SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 167. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 168. NOT NEEDED.Intra module refs   DataDecoder(_SDLIST *, char *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 169. NOT NEEDED.Intra module refs   DataDecoder(_SDLIST *, char *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 170. NOT NEEDED.Intra module refs   DataDecoder(_SDLIST *, char *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 171. NOT NEEDED.Intra module refs   DataDecoder(_SDLIST *, char *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 172. NOT NEEDED.Intra module refs   SmsData::CheckAll()
                                                   SmsData::CheckDat()
                                                   SmsData::CheckFolder(int)
                                                   SmsData::CheckSDList()
                                                   SmsData::DeleteAllMss()
                                                   SmsData::MoveAllToArchive()
                                                   SmsData::ReadAllDatMsg()
                                                   SmsData::ReadAllMessage()
                                                   SmsData::ReadFolder(int)
    -------------------------------------------------------------------------
CODE
  Segment part 173. NOT NEEDED.Intra module refs   SmsData::ExportAllToText()
                                                   SmsData::NewToReadSMS(_SDLIST *)
                                                   SmsData::ReadMss(char *, _SDLIST *)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 174. NOT NEEDED.Intra module refs   SmsData::NewToReadSMS(_SDLIST *)
                                                   SmsData::ReadMss(char *, _SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 175. NOT NEEDED.Intra module refs   SmsData::NewToReadSMS(_SDLIST *)
                                                   SmsData::ReadMss(char *, _SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 176. NOT NEEDED.Intra module refs   SmsData::ExportAllToText()
                                                   SmsData::NewToReadSMS(_SDLIST *)
                                                   SmsData::ReadMss(char *, _SDLIST *)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 177. NOT NEEDED.Intra module refs   SmsData::CheckFolder(int)
                                                   SmsData::ExportAllToText()
                                                   SmsData::MoveToArchive(_SDLIST *)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 178. NOT NEEDED.Intra module refs   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
    -------------------------------------------------------------------------
CODE
  Segment part 179. NOT NEEDED.Intra module refs   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
    -------------------------------------------------------------------------
CODE
  Segment part 180. NOT NEEDED.Intra module refs   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
    -------------------------------------------------------------------------
CODE
  Segment part 181. NOT NEEDED.Intra module refs   SmsData::ExportAllToText()
                                                   SmsData::MoveToArchive(_SDLIST *)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 182. NOT NEEDED.Intra module refs   SmsData::ExportAllToText()
                                                   SmsData::NewToReadSMS(_SDLIST *)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 183. NOT NEEDED.Intra module refs   SmsData::CheckSDList()
                                                   SmsData::ExportAllToText()
                                                   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
                                                   SmsData::GetMssPath(char *, char *, TTime *, TDate *)
    -------------------------------------------------------------------------
CODE
  Segment part 184. NOT NEEDED.Intra module refs   SmsData::DeleteAllMss()
                                                   SmsData::DeleteMessage(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 185. NOT NEEDED.Intra module refs   SmsData::FilterFindNext(_SDLIST *, char const *)
                                                   SmsData::FilterFindPrev(_SDLIST *, char const *)
                                                   SmsData::FilterFindSDL(char const *, int)
                                                   SmsData::FilterGetCount(char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 186. NOT NEEDED.Intra module refs   SmsData::FilterFindSDL(WSHDR *, int)
                                                   SmsData::FilterGetCount(WSHDR *)
    -------------------------------------------------------------------------
CODE
  Segment part 187. NOT NEEDED.Intra module refs   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
                                                   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 188. NOT NEEDED.Intra module refs   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 189. NOT NEEDED.Intra module refs   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 190. NOT NEEDED.Intra module refs   SmsData::ExportAllToText()
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000308 - 0000030B (0x4 bytes), align: 2
  Segment part 12.            Intra module refs:   utf8_hdr
    -------------------------------------------------------------------------
DATA_ID
  Segment part 191. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 192. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        
    -------------------------------------------------------------------------
INITTAB
  Segment part 193. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C504 - 0000C507 (0x4 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 12
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C508 - 0000C553 (0x4c bytes), align: 2
  Segment part 3.             Intra module refs:   SmsData::ExportAllToText()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C554 - 0000C57B (0x28 bytes), align: 2
  Segment part 4.             Intra module refs:   Segment part 61
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C57C - 0000C5DB (0x60 bytes), align: 2
  Segment part 5.             Intra module refs:   Segment part 145
                                                   Segment part 65
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C5DC - 0000C5E3 (0x8 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 92
    -------------------------------------------------------------------------
DATA_C
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C5E4 - 0000C5EF (0xc bytes), align: 2
  Segment part 9.             Intra module refs:   SmsData::MoveToArchive(_SDLIST *)

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\SmsListMenu.r79
  PROGRAM MODULE, NAME : SmsListMenu

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 0000030C - 00000323 (0x18 bytes), align: 2
  Segment part 3.             Intra module refs:   Segment part 5
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           sms_menu_sk             0000030C        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C5F0 - 0000C5FB (0xc bytes), align: 2
  Segment part 2.             Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C5FC - 0000C603 (0x8 bytes), align: 2
  Segment part 5.             Intra module refs:   SmsListMenu::SmsListMenu()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C604 - 0000C617 (0x14 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 57
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009CE8 - 00009D03 (0x1c bytes), align: 2
  Segment part 16.            Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::new SmsOptionMenu()
                                   00009CE8 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::delete ~SmsListMenu(SmsListMenu *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::delete ~SmsOptionMenu(SmsOptionMenu *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009D04 - 00009D1F (0x1c bytes), align: 2
  Segment part 22.            Intra module refs:   SmsListMenu::ReCreateMe(void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::new SmsListMenu()
                                   00009D04        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
                                                   TabGUI::CreateTabGUI(DLG_CSM *) (TabGUI)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *) (TabGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::~SmsListMenu()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009D20 - 00009D87 (0x68 bytes), align: 2
  Segment part 26.            Intra module refs:   SmsListMenu::new SmsListMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::SmsListMenu()
                                   00009D20 
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009D88 - 00009F33 (0x1ac bytes), align: 2
  Segment part 28.            Intra module refs:   SmsListMenu::SmsListMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::OnKey(void *, GUI_MSG *)
                                   00009D88 
               stack 1 = 00000000 ( 0000007C )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000324 - 0000033F (0x1c bytes), align: 2
  Segment part 7.             Intra module refs:   SmsListMenu::GHook(void *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SLM_HDR_LGPS            00000324        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009F34 - 0000A0A7 (0x174 bytes), align: 2
  Segment part 30.            Intra module refs:   SmsListMenu::SmsListMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::GHook(void *, int)
                                   00009F34 
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000340 - 0000035F (0x20 bytes), align: 2
  Segment part 9.             Intra module refs:   SmsListMenu::ItemProc(void *, int, void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SLM_ICONS               00000340        IconPack::InitIconPack() (IconPack)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A0A8 - 0000A1D7 (0x130 bytes), align: 2
  Segment part 32.            Intra module refs:   SmsListMenu::SmsListMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::ItemProc(void *, int, void *)
                                   0000A0A8 
               stack 1 = 00000000 ( 00000020 )
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A1D8 - 0000A21B (0x44 bytes), align: 2
  Segment part 34.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *)
                                   0000A1D8        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A21C - 0000A2D7 (0xbc bytes), align: 2
  Segment part 36.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::GetSmsListMenuGUI(int, int, DLG_CSM *, int)
                                   0000A21C        TabGUI::CreateTabGUI(DLG_CSM *) (TabGUI)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *) (TabGUI)
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C618 - 0000C62B (0x14 bytes), align: 2
  Segment part 11.            Intra module refs:   SmsOptionMenu::CreateSmsOptionMenu(DLG_CSM *, int, int, _SDLIST *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A2D8 - 0000A337 (0x60 bytes), align: 2
  Segment part 38.            Intra module refs:   SmsOptionMenu::new SmsOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::SmsOptionMenu()
                                   0000A2D8 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A338 - 0000A33B (0x4 bytes), align: 2
  Segment part 39.            Intra module refs:   SmsListMenu::SmsListMenu()
                                                   SmsOptionMenu::SmsOptionMenu()
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::~SmsOptionMenu()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A33C - 0000A4B7 (0x17c bytes), align: 2
  Segment part 43.            Intra module refs:   SmsOptionMenu::SmsOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::OnKey(void *, GUI_MSG *)
                                   0000A33C 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A4B8 - 0000A547 (0x90 bytes), align: 2
  Segment part 45.            Intra module refs:   SmsOptionMenu::SmsOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::GHook(void *, int)
                                   0000A4B8 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A548 - 0000A54B (0x4 bytes), align: 2
  Segment part 46.            Intra module refs:   SmsListMenu::GHook(void *, int)
                                                   SmsListMenu::ItemProc(void *, int, void *)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *)
                                                   SmsOptionMenu::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000360 - 0000037B (0x1c bytes), align: 2
  Segment part 12.            Intra module refs:   SmsOptionMenu::ItemProc(void *, int, void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SOP_ITEM_LGPS           00000360        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C62C - 0000C633 (0x8 bytes), align: 2
  Segment part 14.            Intra module refs:   SmsOptionMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A54C - 0000A5C3 (0x78 bytes), align: 2
  Segment part 48.            Intra module refs:   SmsOptionMenu::SmsOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::ItemProc(void *, int, void *)
                                   0000A54C 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A5C4 - 0000A5FB (0x38 bytes), align: 2
  Segment part 50.            Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::CreateSmsOptionMenu(DLG_CSM *, int, int, _SDLIST *)
                                   0000A5C4 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::UpdateCSMName(DLG_CSM *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A5FC - 0000A5FF (0x4 bytes), align: 2
  Segment part 53.            Intra module refs:   SmsListMenu::GHook(void *, int)
                                                   SmsListMenu::ItemProc(void *, int, void *)
                                                   SmsOptionMenu::GHook(void *, int)
                                                   SmsOptionMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A600 - 0000A6C7 (0xc8 bytes), align: 2
  Segment part 55.            Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::ReCreateMe(void *)
                                   0000A600 
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A6C8 - 0000A6CB (0x4 bytes), align: 2
  Segment part 56.            Intra module refs:   SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *)
                                                   SmsListMenu::GHook(void *, int)
                                                   SmsListMenu::GetSmsListMenuGUI(int, int, DLG_CSM *, int)
                                                   SmsListMenu::ItemProc(void *, int, void *)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *)
                                                   SmsListMenu::ReCreateMe(void *)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A6CC - 0000A6CF (0x4 bytes), align: 2
  Segment part 57.            Intra module refs:   SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *)
                                                   SmsListMenu::GetSmsListMenuGUI(int, int, DLG_CSM *, int)
                                                   SmsListMenu::ReCreateMe(void *)
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.Intra module refs:   SmsListMenu::new SmsListMenu()
                                                   SmsOptionMenu::new SmsOptionMenu()
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.Intra module refs:   SmsListMenu::GHook(void *, int)
                                                   SmsOptionMenu::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.Intra module refs:   SmsListMenu::ItemProc(void *, int, void *)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.Intra module refs:   SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *)
                                                   SmsListMenu::GHook(void *, int)
                                                   SmsListMenu::GetSmsListMenuGUI(int, int, DLG_CSM *, int)
                                                   SmsListMenu::ReCreateMe(void *)
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.Intra module refs:   SmsListMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.Intra module refs:   SmsListMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.Intra module refs:   SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *)
                                                   SmsListMenu::ReCreateMe(void *)
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.Intra module refs:   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.Intra module refs:   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.Intra module refs:   SmsOptionMenu::CreateSmsOptionMenu(DLG_CSM *, int, int, _SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.Intra module refs:   SmsListMenu::ReCreateMe(void *)
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.Intra module refs:   SmsListMenu::ReCreateMe(void *)
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.Intra module refs:   SmsListMenu::ReCreateMe(void *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 0000030C - 00000323 (0x18 bytes), align: 2
  Segment part 4.             Intra module refs:   sms_menu_sk
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000324 - 0000033F (0x1c bytes), align: 2
  Segment part 8.             Intra module refs:   SLM_HDR_LGPS
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000340 - 0000035F (0x20 bytes), align: 2
  Segment part 10.            Intra module refs:   SLM_ICONS
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000360 - 0000037B (0x1c bytes), align: 2
  Segment part 13.            Intra module refs:   SOP_ITEM_LGPS
    -------------------------------------------------------------------------
DATA_ID
  Segment part 77. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 78. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\StrConst.r79
  PROGRAM MODULE, NAME : StrConst

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Relative segment, address: CODE_AREA 0000C634 - 0000C63B (0x8 bytes), align: 2
  Segment part 2.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IPC_NAME                0000C634        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
                                                   Segment part 2 (MyIpcMessage)
                                                   Segment part 4 (MyIpcMessage)
                                                   Segment part 4 (SendList)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C807 - 0000C809 (0x3 bytes), align: 0
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PERCENT_T               0000C807        NAbCSM::CreateNAbCSM(void *, int, char *, int) (NativeAddressbook)
                                                   Segment part 22 (DialogCSM)
                                                   Segment part 29 (MainMenu)
                                                   Segment part 29 (PopupGUI)
                                                   Segment part 29 (Template)
                                                   Segment part 36 (EditGUI)
                                                   Segment part 38 (OthersMenu)
                                                   Segment part 53 (SmsListMenu)
                                                   Segment part 57 (EditGUI)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C80A - 0000C80C (0x3 bytes), align: 0
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PERCENT_S               0000C80A        SmsListMenu::ItemProc(void *, int, void *) (SmsListMenu)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C63C - 0000C643 (0x8 bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_fetion              0000C63C        NumberMatch(char const *, char const *) (string_works)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C644 - 0000C657 (0x14 bytes), align: 2
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_LINES               0000C644        Segment part 60 (EditGUI)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C658 - 0000C677 (0x20 bytes), align: 2
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_UNK_TXTT            0000C658        DataDecoder(_SDLIST *, char *, int) (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C678 - 0000C68B (0x14 bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_UNK_TYPE            0000C678        ReadSMS(_SDLIST *, INDEX_ID_DATA *) (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C68C - 0000C68F (0x4 bytes), align: 2
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           FLDR_IN                 0000C68C        Segment part 141 (SmsData)
                                                   Segment part 89 (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C690 - 0000C697 (0x8 bytes), align: 2
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           FLDR_SENT               0000C690        Segment part 140 (SmsData)
                                                   Segment part 88 (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C698 - 0000C69F (0x8 bytes), align: 2
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           FLDR_DRAFT              0000C698        Segment part 139 (SmsData)
                                                   Segment part 87 (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C6A0 - 0000C6A7 (0x8 bytes), align: 2
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           FLDR_UNK                0000C6A0        Segment part 142 (SmsData)
                                                   Segment part 90 (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C6A8 - 0000C6B3 (0xc bytes), align: 2
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           FLDR_ARCHIVE            0000C6A8        OpenArchive() (OthersMenu)
                                                   SmsData::MoveToArchive(_SDLIST *) (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_UNK_NUM_UTF8        
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C6B4 - 0000C6BB (0x8 bytes), align: 2
  Segment part 15.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_NUMBER_UTF8         0000C6B4        SmsData::ExportAllToText() (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C6BC - 0000C6C3 (0x8 bytes), align: 2
  Segment part 16.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_TEXT_UTF8           0000C6BC        SmsData::ExportAllToText() (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C6C4 - 0000C6CF (0xc bytes), align: 2
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_TO_UTF8             0000C6C4        SmsData::ExportAllToText() (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C6D0 - 0000C6D7 (0x8 bytes), align: 2
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_FROM_UTF8           0000C6D0        SmsData::ExportAllToText() (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C6D8 - 0000C6DF (0x8 bytes), align: 2
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_TIME_UTF8           0000C6D8        SmsData::ExportAllToText() (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C6E0 - 0000C6E7 (0x8 bytes), align: 2
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_UNK_UTF8            0000C6E0        SmsData::ExportAllToText() (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C6E8 - 0000C797 (0xb0 bytes), align: 2
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DEFAUT_HLP_STR          0000C6E8        OthMenu::ShowHelp() (OthersMenu)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\TViewGUI.r79
  PROGRAM MODULE, NAME : TViewGUI

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 0000037C - 00000393 (0x18 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 4
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           tview_sk                0000037C        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C798 - 0000C79F (0x8 bytes), align: 2
  Segment part 4.             Intra module refs:   Segment part 6
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000394 - 000003DB (0x48 bytes), align: 2
  Segment part 5.             Intra module refs:   TViewGUI::CreateTViewGUI(WSHDR *, WSHDR *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::tview         00000394 
           tview_hdr               000003C8 
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::delete ~TViewGUI(TViewGUI *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A6D0 - 0000A6EB (0x1c bytes), align: 2
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::new TViewGUI()
                                   0000A6D0        OthMenu::ShowHelp() (OthersMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::TViewGUI()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::~TViewGUI()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A6EC - 0000A70F (0x24 bytes), align: 2
  Segment part 16.            Intra module refs:   Segment part 6
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::OnKey(void *, GUI_MSG *)
                                   0000A6EC 
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A710 - 0000A72F (0x20 bytes), align: 2
  Segment part 18.            Intra module refs:   Segment part 6
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::GHook(void *, int)
                                   0000A710 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A730 - 0000A733 (0x4 bytes), align: 2
  Segment part 20.            Intra module refs:   Segment part 6
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::locret()      0000A730 
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A734 - 0000A843 (0x110 bytes), align: 2
  Segment part 22.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::CreateTViewGUI(WSHDR *, WSHDR *)
                                   0000A734        OthMenu::ShowHelp() (OthersMenu)
               stack 1 = 00000000 ( 00000020 )
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.Intra module refs:   TViewGUI::CreateTViewGUI(WSHDR *, WSHDR *)
                                                   TViewGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.Intra module refs:   TViewGUI::new TViewGUI()
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 0000037C - 00000393 (0x18 bytes), align: 2
  Segment part 3.             Intra module refs:   tview_sk
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000394 - 000003DB (0x48 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 5
    -------------------------------------------------------------------------
DATA_ID
  Segment part 25. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 26. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\TabGUI.r79
  PROGRAM MODULE, NAME : TabGUI

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 000003DC - 0000042B (0x50 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 22
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TABICONS                000003DC        IconPack::InitIconPack() (IconPack)
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::new TabGUI()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::delete ~TabGUI(TabGUI *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A844 - 0000A8AB (0x68 bytes), align: 2
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::TabGUI()        0000A844        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   SmsListMenu::ReCreateMe(void *) (SmsListMenu)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A8AC - 0000A8AF (0x4 bytes), align: 2
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::~TabGUI()       0000A8AC        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   SmsListMenu::ReCreateMe(void *) (SmsListMenu)
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A8B0 - 0000A9B3 (0x104 bytes), align: 2
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::CreateTabGUI(DLG_CSM *)
                                   0000A8B0        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A9B4 - 0000A9BB (0x8 bytes), align: 2
  Segment part 15.            Intra module refs:   TabGUI::TabGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::OnKey(void *, GUI_MSG *)
                                   0000A9B4 
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A9BC - 0000AAAB (0xf0 bytes), align: 2
  Segment part 17.            Intra module refs:   TabGUI::TabGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::GHook(void *, int)
                                   0000A9BC 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AAAC - 0000AAAF (0x4 bytes), align: 2
  Segment part 19.            Intra module refs:   TabGUI::TabGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::Locret()        0000AAAC 
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AAB0 - 0000AC2B (0x17c bytes), align: 2
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::ReCreateTabGUI(DLG_CSM *)
                                   0000AAB0        SmsListMenu::ReCreateMe(void *) (SmsListMenu)
               stack 1 = 00000000 ( 00000028 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AC2C - 0000AC2F (0x4 bytes), align: 2
  Segment part 22.            Intra module refs:   TabGUI::CreateTabGUI(DLG_CSM *)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.Intra module refs:   TabGUI::TabGUI()
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.Intra module refs:   TabGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.Intra module refs:   TabGUI::CreateTabGUI(DLG_CSM *)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.Intra module refs:   TabGUI::CreateTabGUI(DLG_CSM *)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.Intra module refs:   TabGUI::CreateTabGUI(DLG_CSM *)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.Intra module refs:   TabGUI::CreateTabGUI(DLG_CSM *)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.Intra module refs:   TabGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 000003DC - 0000042B (0x50 bytes), align: 2
  Segment part 3.             Intra module refs:   TABICONS
    -------------------------------------------------------------------------
DATA_ID
  Segment part 30. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 31. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\Template.r79
  PROGRAM MODULE, NAME : Template

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Relative segment, address: CODE_AREA 0000C7A0 - 0000C7BB (0x1c bytes), align: 2
  Segment part 2.             Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C7BC - 0000C7CF (0x14 bytes), align: 2
  Segment part 3.             Intra module refs:   TplMenu::CreateTplMenu(void *)
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AC30 - 0000AC4B (0x1c bytes), align: 2
  Segment part 5.             Intra module refs:   TplMenu::GHook(void *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::delete ~TplMenu(TplMenu *)
                                   0000AC30 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AC4C - 0000AC67 (0x1c bytes), align: 2
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::new TplMenu()
                                   0000AC4C        EditGUI::EdOpUserItem(USR_MENU_ITEM *) (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AC68 - 0000ACCF (0x68 bytes), align: 2
  Segment part 9.             Intra module refs:   TplMenu::new TplMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::TplMenu()      0000AC68 
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::~TplMenu()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000ACD0 - 0000ACEF (0x20 bytes), align: 2
  Segment part 13.            Intra module refs:   TplMenu::ReadTpl()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::AllocTPList()
                                   0000ACD0 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000ACF0 - 0000AD13 (0x24 bytes), align: 2
  Segment part 15.            Intra module refs:   TplMenu::ReadTpl()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::AddToTPList(_TPLIST *)
                                   0000ACF0 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AD14 - 0000AD5F (0x4c bytes), align: 2
  Segment part 17.            Intra module refs:   TplMenu::delete ~TplMenu(TplMenu *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::FreeTPList()   0000AD14 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AD60 - 0000AFBB (0x25c bytes), align: 2
  Segment part 19.            Intra module refs:   TplMenu::CreateTplMenu(void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::ReadTpl()      0000AD60 
               stack 1 = 00000000 ( 000024F8 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AFBC - 0000AFDF (0x24 bytes), align: 2
  Segment part 21.            Intra module refs:   TplMenu::ItemProc(void *, int, void *)
                                                   TplMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::GetTpl(int)    0000AFBC 
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AFE0 - 0000B11F (0x140 bytes), align: 2
  Segment part 23.            Intra module refs:   TplMenu::TplMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::OnKey(void *, GUI_MSG *)
                                   0000AFE0 
               stack 1 = 00000000 ( 00001058 )
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B120 - 0000B197 (0x78 bytes), align: 2
  Segment part 25.            Intra module refs:   TplMenu::TplMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::GHook(void *, int)
                                   0000B120 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B198 - 0000B213 (0x7c bytes), align: 2
  Segment part 27.            Intra module refs:   TplMenu::TplMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::ItemProc(void *, int, void *)
                                   0000B198 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B214 - 0000B217 (0x4 bytes), align: 2
  Segment part 28.            Intra module refs:   TplMenu::GHook(void *, int)
                                                   TplMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B218 - 0000B21B (0x4 bytes), align: 2
  Segment part 29.            Intra module refs:   TplMenu::GHook(void *, int)
                                                   TplMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B21C - 0000B24F (0x34 bytes), align: 2
  Segment part 31.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::CreateTplMenu(void *)
                                   0000B21C        EditGUI::EdOpUserItem(USR_MENU_ITEM *) (EditGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.Intra module refs:   TplMenu::FreeTPList()
                                                   TplMenu::delete ~TplMenu(TplMenu *)
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.Intra module refs:   TplMenu::AllocTPList()
                                                   TplMenu::new TplMenu()
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.Intra module refs:   TplMenu::CreateTplMenu(void *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\Vibra.r79
  PROGRAM MODULE, NAME : Vibra

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B250 - 0000B26B (0x1c bytes), align: 2
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::new Vibra()      0000B250        DaemonCSM::DaemonCSM() (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B26C - 0000B287 (0x1c bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::delete ~Vibra(Vibra *)
                                   0000B26C        DaemonCSM::~DaemonCSM() (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B288 - 0000B2B7 (0x30 bytes), align: 2
  Segment part 7.             Intra module refs:   Vibra::new Vibra()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::Vibra()          0000B288 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::~Vibra()         
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B2B8 - 0000B32F (0x78 bytes), align: 2
  Segment part 11.            Intra module refs:   Vibra::ReInitThythm()
                                                   Vibra::Vibra()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::InitThythm()     0000B2B8 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B330 - 0000B36B (0x3c bytes), align: 2
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::ReInitThythm()   0000B330        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B36C - 0000B3B3 (0x48 bytes), align: 2
  Segment part 15.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::VibraStart()     0000B36C        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B3B4 - 0000B463 (0xb0 bytes), align: 2
  Segment part 17.            Intra module refs:   Vibra::VibraStart()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::VibraNext()      0000B3B4        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B464 - 0000B467 (0x4 bytes), align: 2
  Segment part 18.            Intra module refs:   Vibra::VibraNext()
                                                   Vibra::VibraStart()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B468 - 0000B46B (0x4 bytes), align: 2
  Segment part 19.            Intra module refs:   Vibra::VibraNext()
                                                   Vibra::VibraStart()
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B46C - 0000B487 (0x1c bytes), align: 2
  Segment part 21.            Intra module refs:   Vibra::delete ~Vibra(Vibra *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::VibraStop()      0000B46C        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B488 - 0000B493 (0xc bytes), align: 2
  Segment part 23.            Intra module refs:   Vibra::VibraNext()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::VibraNextTmrProc()
                                   0000B488 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.Intra module refs:   Vibra::new Vibra()
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.Intra module refs:   Vibra::delete ~Vibra(Vibra *)
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.Intra module refs:   Vibra::InitThythm()
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.Intra module refs:   Vibra::VibraNextTmrProc()
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\_cpp2.r79
  PROGRAM MODULE, NAME : _cpp2

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B494 - 0000B49F (0xc bytes), align: 2
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator new(unsigned int)
                                   0000B494        AdrList::ConstructList() (AdrList)
                                                   AdrList::new AdrList() (AdrList)
                                                   DaemonCSM::new DaemonCSM() (DaemonCSM)
                                                   DialogCSM::new DialogCSM() (DialogCSM)
                                                   EditGUI::new EditGUI() (EditGUI)
                                                   EditOptionMenu::new EditOptionMenu() (EditGUI)
                                                   IconPack::new IconPack() (IconPack)
                                                   LangPack::new LangPack() (LangPack)
                                                   MainMenu::new MainMenu() (MainMenu)
                                                   NAbCSM::new NAbCSM() (NativeAddressbook)
                                                   NumList::AllocNL() (NumList)
                                                   NumList::AllocNL(char const *) (NumList)
                                                   NumList::new NumList() (NumList)
                                                   OthMenu::new OthMenu() (OthersMenu)
                                                   PlaySouNd::new PlaySouNd() (PlaySound)
                                                   PopupNewIn::new PopupNewIn() (PopupGUI)
                                                   SendList::AllocSL() (SendList)
                                                   SendList::new SendList() (SendList)
                                                   SmsData::AllocSDL() (SmsData)
                                                   SmsData::CopyOneSDL(_SDLIST *) (SmsData)
                                                   SmsData::new SmsData() (SmsData)
                                                   SmsListMenu::new SmsListMenu() (SmsListMenu)
                                                   SmsOptionMenu::new SmsOptionMenu() (SmsListMenu)
                                                   TViewGUI::new TViewGUI() (TViewGUI)
                                                   TabGUI::TabGUI() (TabGUI)
                                                   TplMenu::AllocTPList() (Template)
                                                   TplMenu::new TplMenu() (Template)
                                                   Vibra::new Vibra() (Vibra)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B4A0 - 0000B4AB (0xc bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator new[](unsigned int)
                                   0000B4A0        AdrList::ConstructList() (AdrList)
                                                   IconPack::LoadIconPack() (IconPack)
                                                   LangPack::LoadLangFile() (LangPack)
                                                   Mss3App::Start(char *, char *) (Mss3App)
                                                   NAbCSM::CreateNAbCSM(void *, int, char *, int) (NativeAddressbook)
                                                   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *) (NativeAddressbook)
                                                   SmsData::CopyOneSDL(_SDLIST *) (SmsData)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::ReadMss(char *, _SDLIST *) (SmsData)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B4AC - 0000B4B7 (0xc bytes), align: 2
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator delete(void *)
                                   0000B4AC        AdrList::FreeCLIST() (AdrList)
                                                   AdrList::delete ~AdrList(AdrList *) (AdrList)
                                                   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
                                                   DaemonCSM::delete ~DaemonCSM(DaemonCSM *) (DaemonCSM)
                                                   DialogCSM::OnClose(CSM_RAM *) (DialogCSM)
                                                   DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   EditGUI::delete ~EditGUI(EditGUI *) (EditGUI)
                                                   EditOptionMenu::GHook(void *, int) (EditGUI)
                                                   IconPack::FreeIconPack() (IconPack)
                                                   IconPack::delete ~IconPack(IconPack *) (IconPack)
                                                   LangPack::delete ~LangPack(LangPack *) (LangPack)
                                                   LangPack::~LangPack() (LangPack)
                                                   MainMenu::GHook(void *, int) (MainMenu)
                                                   NAbCSM::CreateNAbCSM(void *, int, char *, int) (NativeAddressbook)
                                                   NAbCSM::OnClose(CSM_RAM *) (NativeAddressbook)
                                                   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *) (NativeAddressbook)
                                                   NumList::DeleteNL(_NLST *) (NumList)
                                                   NumList::FreeList() (NumList)
                                                   NumList::delete ~NumList(NumList *) (NumList)
                                                   OthMenu::GHook(void *, int) (OthersMenu)
                                                   PlaySouNd::delete ~PlaySouNd(PlaySouNd *) (PlaySound)
                                                   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *) (PopupGUI)
                                                   PopupNewIn::GHook(void *, int) (PopupGUI)
                                                   SendList::DeleteSL(_SNDLST *) (SendList)
                                                   SendList::FreeList() (SendList)
                                                   SendList::delete ~SendList(SendList *) (SendList)
                                                   SmsData::DeleteSDL(_SDLIST *) (SmsData)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::FreeAllSDL() (SmsData)
                                                   SmsData::FreeOneSDL(_SDLIST *) (SmsData)
                                                   SmsData::delete ~SmsData(SmsData *) (SmsData)
                                                   SmsListMenu::GHook(void *, int) (SmsListMenu)
                                                   SmsOptionMenu::GHook(void *, int) (SmsListMenu)
                                                   TViewGUI::CreateTViewGUI(WSHDR *, WSHDR *) (TViewGUI)
                                                   TViewGUI::GHook(void *, int) (TViewGUI)
                                                   TabGUI::GHook(void *, int) (TabGUI)
                                                   TplMenu::FreeTPList() (Template)
                                                   TplMenu::delete ~TplMenu(TplMenu *) (Template)
                                                   Vibra::delete ~Vibra(Vibra *) (Vibra)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\conf_loader.r79
  PROGRAM MODULE, NAME : conf_loader

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 0000042C - 0000042F (0x4 bytes), align: 2
  Segment part 4.             Intra module refs:   LoadConfigData
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           successed_config_filename
                                   0000042C        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
                                                   OthMenu::OpenCfgFile() (OthersMenu)
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B4B8 - 0000B5BB (0x104 bytes), align: 2
  Segment part 7.             Intra module refs:   InitConfig
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LoadConfigData          0000B4B8 
               stack 1 = 00000000 ( 00000024 )
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B5BC - 0000B5E3 (0x28 bytes), align: 2
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           InitConfig              0000B5BC        Mss3App::InitSetting() (Mss3App)
                                                   Mss3App::Start(char *, char *) (Mss3App)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 0000042C - 0000042F (0x4 bytes), align: 2
  Segment part 5.             Intra module refs:   successed_config_filename
    -------------------------------------------------------------------------
DATA_ID
  Segment part 10. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 11. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        
    -------------------------------------------------------------------------
CONFIG_C
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C80D - 0000C80D (0x1 bytes), align: 0
  Segment part 2.             Intra module refs:   Segment part 5
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C7D0 - 0000C7FF (0x30 bytes), align: 2
  Segment part 3.             Intra module refs:   InitConfig

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\config_data.r79
  PROGRAM MODULE, NAME : config_data

  SEGMENTS IN THE MODULE
  ======================
CONFIG_C
  Relative segment, address: CODE_AREA 0001093C - 00010967 (0x2c bytes), align: 2
  Segment part 2. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr0                 0001093C        LoadConfigData (conf_loader)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010968 - 000109E7 (0x80 bytes), align: 2
  Segment part 3. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_MAIN_FOLDER         00010968        Mss3App::InitDatPath() (Mss3App)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000109E8 - 00010A13 (0x2c bytes), align: 2
  Segment part 4. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1                 000109E8 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010A14 - 00010A93 (0x80 bytes), align: 2
  Segment part 5. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_SYSTEM_FOLDER       00010A14        AdrList::ConstructList() (AdrList)
                                                   Mss3App::InitDatPath() (Mss3App)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010A94 - 00010ABF (0x2c bytes), align: 2
  Segment part 6. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr2                 00010A94 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010AC0 - 00010AC3 (0x4 bytes), align: 2
  Segment part 7. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_AUTO_SAF        00010AC0        EditGUI::DoSmsWorkBG(void *, int) (EditGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010AC4 - 00010AEF (0x2c bytes), align: 2
  Segment part 8. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr4                 00010AC4 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010AF0 - 00010AF3 (0x4 bytes), align: 2
  Segment part 9. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_SAVE_SENT       00010AF0        SendList::SendEnd(int) (SendList)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010AF4 - 00010B1F (0x2c bytes), align: 2
  Segment part 10. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdra                 00010AF4 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010B20 - 00010B23 (0x4 bytes), align: 2
  Segment part 11. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_SNED_ON_BG      00010B20        SendList::Send(SendList *) (SendList)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010B24 - 00010B4F (0x2c bytes), align: 2
  Segment part 12. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr7                 00010B24 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010B50 - 00010B53 (0x4 bytes), align: 2
  Segment part 13. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_TEXT_FONT           00010B50        Segment part 61 (EditGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010B54 - 00010C33 (0xe0 bytes), align: 2
  Segment part 14. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfgcbox1                00010B54 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010C34 - 00010C5F (0x2c bytes), align: 2
  Segment part 15. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdrb                 00010C34 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010C60 - 00010CDF (0x80 bytes), align: 2
  Segment part 16. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_DEFAULT_SENT_NUM    00010C60        EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int) (EditGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010CE0 - 00010D0B (0x2c bytes), align: 2
  Segment part 17. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdrc                 00010CE0 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010D0C - 00010D0F (0x4 bytes), align: 2
  Segment part 18. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_DEFAULT_TAB         00010D0C        TabGUI::CreateTabGUI(DLG_CSM *) (TabGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010D10 - 00010DAF (0xa0 bytes), align: 2
  Segment part 19. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfgcboxc                00010D10 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010DB0 - 00010DDB (0x2c bytes), align: 2
  Segment part 20. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_0               00010DB0 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010DDC - 00010E07 (0x2c bytes), align: 2
  Segment part 21. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_1               00010DDC 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010E08 - 00010E0B (0x4 bytes), align: 2
  Segment part 22. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_NOTIFY          00010E08        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010E0C - 00010E37 (0x2c bytes), align: 2
  Segment part 23. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_2               00010E0C 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010E38 - 00010E3B (0x4 bytes), align: 2
  Segment part 24. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_VIBRA           00010E38        PopupNewIn::GHook(void *, int) (PopupGUI)
                                                   Segment part 19 (Vibra)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010E3C - 00010E67 (0x2c bytes), align: 2
  Segment part 25. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_5               00010E3C 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010E68 - 00010EE7 (0x80 bytes), align: 2
  Segment part 26. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_VIBRA_RHYTHM        00010E68        Vibra::InitThythm() (Vibra)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010EE8 - 00010F13 (0x2c bytes), align: 2
  Segment part 27. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_3               00010EE8 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010F14 - 00010F17 (0x4 bytes), align: 2
  Segment part 28. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_NOTIFY_TIME         00010F14        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
                                                   Segment part 18 (Vibra)
                                                   Segment part 25 (PopupGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010F18 - 00010F43 (0x2c bytes), align: 2
  Segment part 29. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_7               00010F18 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010F44 - 00010F47 (0x4 bytes), align: 2
  Segment part 30. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_SOUND           00010F44        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
                                                   PlaySouNd::PlayStart(PlaySouNd *, char const *) (PlaySound)
                                                   PopupNewIn::GHook(void *, int) (PopupGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010F48 - 00010F73 (0x2c bytes), align: 2
  Segment part 31. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_8               00010F48 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010F74 - 00010FF3 (0x80 bytes), align: 2
  Segment part 32. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_SOUND_PATH          00010F74        PopupNewIn::GHook(void *, int) (PopupGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010FF4 - 0001101F (0x2c bytes), align: 2
  Segment part 33. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_9               00010FF4 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011020 - 0001104B (0x2c bytes), align: 2
  Segment part 34. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr2_0               00011020 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 0001104C - 00011077 (0x2c bytes), align: 2
  Segment part 35. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr2_1               0001104C 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011078 - 0001107B (0x4 bytes), align: 2
  Segment part 36. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KEY1                    00011078        KeyHook::HookProc(int, int) (KeyHook)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 0001107C - 000110A7 (0x2c bytes), align: 2
  Segment part 37. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr2_2               0001107C 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000110A8 - 000110AB (0x4 bytes), align: 2
  Segment part 38. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KEY2                    000110A8        KeyHook::HookProc(int, int) (KeyHook)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000110AC - 000110D7 (0x2c bytes), align: 2
  Segment part 39. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr2_9               000110AC 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000110D8 - 00011103 (0x2c bytes), align: 2
  Segment part 40. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr3_0               000110D8 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011104 - 0001112F (0x2c bytes), align: 2
  Segment part 41. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr3_1               00011104 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011130 - 00011133 (0x4 bytes), align: 2
  Segment part 42. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_IB              00011130        DaemonCSM::AddIconBar(short *) (DaemonCSM)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011134 - 0001115F (0x2c bytes), align: 2
  Segment part 43. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr3_2               00011134 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011160 - 00011163 (0x4 bytes), align: 2
  Segment part 44. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ICON_IB             00011160        DaemonCSM::AddIconBar(short *) (DaemonCSM)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011164 - 0001118F (0x2c bytes), align: 2
  Segment part 45. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr3_9               00011164 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011190 - 000111BB (0x2c bytes), align: 2
  Segment part 46. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr11_0              00011190 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000111BC - 000111E7 (0x2c bytes), align: 2
  Segment part 47. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr11_1              000111BC 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000111E8 - 000111EB (0x4 bytes), align: 2
  Segment part 48. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_FILTEROP            000111E8        Segment part 131 (SmsData)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000111EC - 000112AB (0xc0 bytes), align: 2
  Segment part 49. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfgcbox11_1             000111EC 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000112AC - 000112D7 (0x2c bytes), align: 2
  Segment part 50. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr11_2              000112AC 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000112D8 - 000112F7 (0x20 bytes), align: 2
  Segment part 51. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_STRORNUM            000112D8        Segment part 132 (SmsData)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000112F8 - 00011323 (0x2c bytes), align: 2
  Segment part 52. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr11_9              000112F8 
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\func.r79
  PROGRAM MODULE, NAME : func

  SEGMENTS IN THE MODULE
  ======================
ELFBEGIN
  Relative segment, address: CODE_AREA 00000000, align: 0
  Segment part 0. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ELF_BEGIN               00000000        Mss3App::Killer() (Mss3App)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B5E4 - 0000B5EB (0x8 bytes), align: 2
  Segment part 1. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           kill_data               0000B5E4        Mss3App::Killer() (Mss3App)
           seqkill                 0000B5E8 

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\main.r79
  PROGRAM MODULE, NAME : main

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B5EC - 0000B5EF (0x4 bytes), align: 2
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           main                    0000B5EC        Absolute parts (?ABS_ENTRY_MOD)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED. Intra module refs:   main
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\string_works.r79
  PROGRAM MODULE, NAME : string_works

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           char16to8(int)          
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           unicode2ansi(int)       
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ws_2ascii(WSHDR *, char *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B5F0 - 0000B68B (0x9c bytes), align: 2
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ascii_2ws(WSHDR *, char const *, int)
                                   0000B5F0        OthMenu::ShowHelp() (OthersMenu)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B68C - 0000B6FF (0x74 bytes), align: 2
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           wstrcmp_nocase(WSHDR *, WSHDR *)
                                   0000B68C        EditGUI::GHook(void *, int) (EditGUI)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B700 - 0000B77B (0x7c bytes), align: 2
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           wstrncmp_nocase(WSHDR *, WSHDR *, int)
                                   0000B700        Mss3App::IsAlreadyRuning() (Mss3App)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           wsInsert(WSHDR *, WSHDR *, int, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B77C - 0000B80F (0x94 bytes), align: 2
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_2ws(WSHDR *, char const *, int)
                                   0000B77C        EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int) (EditGUI)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *) (EditGUI)
                                                   NAbCSM::OnCreate(CSM_RAM *) (NativeAddressbook)
                                                   NumList::AddToList(char const *) (NumList)
                                                   NumList::AllocNL(char const *) (NumList)
                                                   NumList::UpdateNL(_NLST *, char const *) (NumList)
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B810 - 0000B877 (0x68 bytes), align: 2
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ws_2num(WSHDR *, char *, int)
                                   0000B810        EditGUI::GHook(void *, int) (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B878 - 0000B8B7 (0x40 bytes), align: 2
  Segment part 22.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           str2int(char const *)   0000B878        CodeShow::FindCRName(word *, char *) (CodeShow)
                                                   CodeShow::GetLocalNoInfo(char *, char *) (CodeShow)
                                                   CodeShow::GetProvAndCity(word *, char *) (CodeShow)
                                                   Vibra::InitThythm() (Vibra)
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B8B8 - 0000B8FB (0x44 bytes), align: 2
  Segment part 24.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IsWsSmall(WSHDR *)      0000B8B8        EditGUI::GHook(void *, int) (EditGUI)
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B8FC - 0000B947 (0x4c bytes), align: 2
  Segment part 26.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IsNum(WSHDR *)          0000B8FC        EditGUI::GHook(void *, int) (EditGUI)
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B948 - 0000B9AB (0x64 bytes), align: 2
  Segment part 28.            Intra module refs:   wstrstr(WSHDR *, WSHDR *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           w_charcmp_nocase(unsigned short *, unsigned short *, int)
                                   0000B948 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B9AC - 0000BA2B (0x80 bytes), align: 2
  Segment part 30.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           wstrstr(WSHDR *, WSHDR *)
                                   0000B9AC        SmsData::FilterFindSDL(WSHDR *, int) (SmsData)
                                                   SmsData::FilterGetCount(WSHDR *) (SmsData)
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000BA2C - 0000BAF7 (0xcc bytes), align: 2
  Segment part 32.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumberMatch(char const *, char const *)
                                   0000BA2C        AdrList::FindCList(char const *) (AdrList)
                                                   AdrList::FindName(WSHDR *, char const *) (AdrList)
                                                   NumList::IsNumExist(char const *) (NumList)
                                                   SmsData::FilterFindNext(_SDLIST *, char const *) (SmsData)
                                                   SmsData::FilterFindPrev(_SDLIST *, char const *) (SmsData)
                                                   SmsData::FilterFindSDL(char const *, int) (SmsData)
                                                   SmsData::FilterGetCount(char const *) (SmsData)
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000BAF8 - 0000BB43 (0x4c bytes), align: 2
  Segment part 34.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           StrClearChr(char *, int)
                                   0000BAF8        SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int) (SmsData)
                                                   SmsData::MoveToArchive(_SDLIST *) (SmsData)
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000BB44 - 0000BB8F (0x4c bytes), align: 2
  Segment part 36.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ReplaceNewLineToSpace(WSHDR *)
                                   0000BB44        SmsListMenu::ItemProc(void *, int, void *) (SmsListMenu)
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ws2ascii(WSHDR *, char *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.




                ****************************************
                *                                      *
                *            MODULE SUMMARY            *
                *                                      *
                ****************************************

Module               CODE   DATA
------               ----   ----
                    (Rel)  (Rel)
AFile                 196
AdrList             1 880
  + shared             12
CodeShow            3 112
CreateMenu            516
DaemonCSM           2 904
DialogCSM           1 584
EditGUI             6 812     88
  + shared             12
File                  380
GlobalVariable        304     24
IconPack            1 365    120
KeyHook               440
LangPack            2 438    316
MainMenu            1 056     96
Mss3App               564
MyIpcMessage          124     12
NativeAddressbook   1 192
NumList             1 400
OthersMenu         17 808     28
PlaySound             484
PopupGUI            1 248     80
SendList            1 076     12
SiemensPDU            712
SmsData            11 604      4
SmsListMenu         2 716    112
StrConst              362
TViewGUI              476     96
TabGUI              1 084     80
Template            1 616
Vibra                 580
_cpp2                  36
conf_loader           353      4
config_data         2 536
func                    8
main                    4
string_works        1 440
N/A (alignment)
------             ------  -----
Total:             70 434  1 072


                ****************************************
                *                                      *
                *              CALL GRAPH              *
                *                                      *
                ****************************************

  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  AdrList::ConstructListCHK(AdrList *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  AdrList::ConstructListFRC(AdrList *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::OnCreate(CSM_RAM *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000034
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000034


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::OnClose(CSM_RAM *)
      | Stack used (prev) :  00000000
      | + function block  :  00000008
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000008


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::DoNewProc()
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::UpdateNProc()
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::AddIconBar(short *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::StartDialog(int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  0000000C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000000C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DialogCSM::OnMessage(CSM_RAM *, GBS_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DialogCSM::OnCreate(CSM_RAM *)
      | Stack used (prev) :  00000000
      | + function block  :  00000024
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000024


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DialogCSM::OnClose(CSM_RAM *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditGUI::EdOpUserItem(USR_MENU_ITEM *)
      | Stack used (prev) :  00000000
      | + function block  :  00000040
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000040


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditGUI::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000098
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000098


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditGUI::DoSmsWorkBG(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000018
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditGUI::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000054
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000054


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditGUI::Locret()
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditOptionMenu::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000018
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditOptionMenu::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditOptionMenu::ItemProc(void *, int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  KeyHook::HookProc(int, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000008
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000008


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  MainMenu::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000018
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  MainMenu::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000008
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000008


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  MainMenu::ItemProc(void *, int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000024
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000024


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  Mss3App::Killer()
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000024
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000024


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  NAbCSM::OnCreate(CSM_RAM *)
      | Stack used (prev) :  00000000
      | + function block  :  00000088
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000088


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  NAbCSM::OnClose(CSM_RAM *)
      | Stack used (prev) :  00000000
      | + function block  :  0000000C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000000C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  OpenArchive()
      | Stack used (prev) :  00000000
      | + function block  :  00000208
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000208


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  OthMenu::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000010
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000010


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  OthMenu::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  OthMenu::ItemProc(void *, int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  PlaySouNd::PlayStart(PlaySouNd *, char const *)
      | Stack used (prev) :  00000000
      | + function block  :  000002F4
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  000002F4


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  PopupNewIn::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  PopupNewIn::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  0000000C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000000C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  MyShowMsg::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  MyShowMsg::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SendList::Send(SendList *)
      | Stack used (prev) :  00000000
      | + function block  :  0000000C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000000C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsData::ReadAllMessageCHK(SmsData *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsData::CheckAllCHK(SmsData *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsData::MoveAllToArchiveBG(SmsData *)
      | Stack used (prev) :  00000000
      | + function block  :  00000044
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000044


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsData::ExportAllToTextBG(SmsData *)
      | Stack used (prev) :  00000000
      | + function block  :  00000044
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000044


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsData::DeleteAllMssBG(SmsData *)
      | Stack used (prev) :  00000000
      | + function block  :  00000044
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000044


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsListMenu::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  0000007C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000007C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsListMenu::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  0000001C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000001C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsListMenu::ItemProc(void *, int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000020
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000020


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsOptionMenu::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000018
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsOptionMenu::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsOptionMenu::ItemProc(void *, int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TViewGUI::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TViewGUI::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TViewGUI::locret()
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TabGUI::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TabGUI::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000010
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000010


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TabGUI::Locret()
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TplMenu::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00001058
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00001058


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TplMenu::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TplMenu::ItemProc(void *, int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  Vibra::VibraNextTmrProc()
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001058
  01  AFile::AFile()
      | Stack used (prev) :  00001058
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00001058


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001058
  01  AFile::~AFile()
      | Stack used (prev) :  00001058
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00001064


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001064
  01  AFile::FClose()
      | Stack used (prev) :  00001064
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00001070


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001070
  01  AFile::FOpen(char const *, unsigned int, unsigned int)
      | Stack used (prev) :  00001070
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00001084


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001084
  01  AFile::FRead(void *, int)
      | Stack used (prev) :  00001084
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00001088


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001088
  01  AdrList::new AdrList()
      | Stack used (prev) :  00001088
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  0000108C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000108C
  01  AdrList::delete ~AdrList(AdrList *)
      | Stack used (prev) :  0000108C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00001094


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001094
  01  AdrList::AdrList()
      | Stack used (prev) :  00001094
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  0000109C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000109C
  01  AdrList::FreeCLIST()
      | Stack used (prev) :  0000109C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000010A8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000010A8
  01  AdrList::ConstructList()
      | Stack used (prev) :  000010A8
      | + function block  :  00000464
  <-Sub-tree of type: Function tree
    | Stack used          :  0000150C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000150C
  01  AdrList::ConstructListCFGUPD()
      | Stack used (prev) :  0000150C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00001510


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001510
  01  AdrList::FindName(WSHDR *, char const *)
      | Stack used (prev) :  00001510
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00001524


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001524
  01  AdrList::FindCList(char const *)
      | Stack used (prev) :  00001524
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00001534


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001534
  01  CodeShow::GetProvAndCity(word *, char *)
      | Stack used (prev) :  00001534
      | + function block  :  00000090
  <-Sub-tree of type: Function tree
    | Stack used          :  000015C4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000015C4
  01  CodeShow::BSTRAdd(word *, word const *, int)
      | Stack used (prev) :  000015C4
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000015CC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000015CC
  01  CodeShow::GetCode(byte *, dword)
      | Stack used (prev) :  000015CC
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000015CC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000015CC
  01  CodeShow::FindLocale(LOCALE *, int, int, int *)
      | Stack used (prev) :  000015CC
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000015D8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000015D8
  01  CodeShow::GetLocalNoInfo(char *, char *)
      | Stack used (prev) :  000015D8
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  000015E8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000015E8
  01  CodeShow::FindCRName(word *, char *)
      | Stack used (prev) :  000015E8
      | + function block  :  00000034
  <-Sub-tree of type: Function tree
    | Stack used          :  0000161C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000161C
  01  CodeShow::GetCodeRange(CRANGE *, uint32, uint32)
      | Stack used (prev) :  0000161C
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  0000162C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000162C
  01  patch_option_header(HEADER_DESC const *)
      | Stack used (prev) :  0000162C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00001638


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001638
  01  CreateMenu(ML_MENU_DESC const *, HEADER_DESC const *, int, int, void *)
      | Stack used (prev) :  00001638
      | + function block  :  00000020
  <-Sub-tree of type: Function tree
    | Stack used          :  00001658


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001658
  01  CreateMenu(MENU_DESC const *, HEADER_DESC const *, int, int, void *)
      | Stack used (prev) :  00001658
      | + function block  :  00000020
  <-Sub-tree of type: Function tree
    | Stack used          :  00001678


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001678
  01  CreateMenu30or2(MENU_DESC const *, HEADER_DESC const *, int, int, void *)
      | Stack used (prev) :  00001678
      | + function block  :  00000020
  <-Sub-tree of type: Function tree
    | Stack used          :  00001698


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001698
  01  DaemonCSM::delete ~DaemonCSM(DaemonCSM *)
      | Stack used (prev) :  00001698
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000016A0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000016A0
  01  DaemonCSM::new DaemonCSM()
      | Stack used (prev) :  000016A0
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000016A4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000016A4
  01  DaemonCSM::DaemonCSM()
      | Stack used (prev) :  000016A4
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000016B0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000016B0
  01  DaemonCSM::~DaemonCSM()
      | Stack used (prev) :  000016B0
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000016B8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000016B8
  01  DaemonCSM::CreateDaemonCSM()
      | Stack used (prev) :  000016B8
      | + function block  :  0000003C
  <-Sub-tree of type: Function tree
    | Stack used          :  000016F4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000016F4
  01  DaemonCSM::AddDlgCsmID(int)
      | Stack used (prev) :  000016F4
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000016F4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000016F4
  01  DaemonCSM::CloseAllDlgCSM()
      | Stack used (prev) :  000016F4
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00001704


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001704
  01  DaemonCSM::DelDlgCsmID(int)
      | Stack used (prev) :  00001704
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00001704


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001704
  01  DaemonCSM::IsOnTopMyCSM()
      | Stack used (prev) :  00001704
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  0000170C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000170C
  01  DaemonCSM::GetTopCSM()
      | Stack used (prev) :  0000170C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00001710


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001710
  01  DialogCSM::new DialogCSM()
      | Stack used (prev) :  00001710
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00001714


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001714
  01  DialogCSM::DialogCSM()
      | Stack used (prev) :  00001714
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00001714


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001714
  01  DialogCSM::CreateDialogCSM(int, void *)
      | Stack used (prev) :  00001714
      | + function block  :  00000040
  <-Sub-tree of type: Function tree
    | Stack used          :  00001754


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001754
  01  EditOptionMenu::new EditOptionMenu()
      | Stack used (prev) :  00001754
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00001758


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001758
  01  EditGUI::new EditGUI()
      | Stack used (prev) :  00001758
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  0000175C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000175C
  01  EditGUI::delete ~EditGUI(EditGUI *)
      | Stack used (prev) :  0000175C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00001764


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001764
  01  EditGUI::EditGUI()
      | Stack used (prev) :  00001764
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  0000176C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000176C
  01  EditGUI::~EditGUI()
      | Stack used (prev) :  0000176C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00001774


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001774
  01  EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
      | Stack used (prev) :  00001774
      | + function block  :  0000107C
  <-Sub-tree of type: Function tree
    | Stack used          :  000027F0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000027F0
  01  EditOptionMenu::EditOptionMenu()
      | Stack used (prev) :  000027F0
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000027F0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000027F0
  01  EditOptionMenu::CreateEditOptionMenu(DLG_CSM *, _SDLIST *, int, int, int)
      | Stack used (prev) :  000027F0
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000027FC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000027FC
  01  EditGUI::CreateEditGUI(DLG_CSM *, char const *)
      | Stack used (prev) :  000027FC
      | + function block  :  00001080
  <-Sub-tree of type: Function tree
    | Stack used          :  0000387C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000387C
  01  EditGUI::InsertText(void *, WSHDR *)
      | Stack used (prev) :  0000387C
      | + function block  :  0000004C
  <-Sub-tree of type: Function tree
    | Stack used          :  000038C8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000038C8
  01  EditGUI::EditSendSMS(WSHDR *)
      | Stack used (prev) :  000038C8
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  000038D8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000038D8
  01  EditGUI::SaveDraft(WSHDR *)
      | Stack used (prev) :  000038D8
      | + function block  :  00000018
  <-Sub-tree of type: Function tree
    | Stack used          :  000038F0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000038F0
  01  EditGUI::InsertNumber(void *, char *)
      | Stack used (prev) :  000038F0
      | + function block  :  0000005C
  <-Sub-tree of type: Function tree
    | Stack used          :  0000394C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000394C
  01  EditGUI::SetNumber(void *, char *)
      | Stack used (prev) :  0000394C
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003968


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003968
  01  EditGUI::AddNumberBlank(void *)
      | Stack used (prev) :  00003968
      | + function block  :  0000005C
  <-Sub-tree of type: Function tree
    | Stack used          :  000039C4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039C4
  01  CFile::FOpen(char const *, unsigned int, unsigned int)
      | Stack used (prev) :  000039C4
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039C8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039C8
  01  CFile::FRead(int, void *, int)
      | Stack used (prev) :  000039C8
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039CC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039CC
  01  CFile::FWrite(int, void const *, int)
      | Stack used (prev) :  000039CC
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039D0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039D0
  01  CFile::FClose(int)
      | Stack used (prev) :  000039D0
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039D4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039D4
  01  CFile::LSeek(int, unsigned int, unsigned int)
      | Stack used (prev) :  000039D4
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000039DC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039DC
  01  CFile::MkDir(char const *)
      | Stack used (prev) :  000039DC
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039E0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039E0
  01  CFile::IsDir(char const *)
      | Stack used (prev) :  000039E0
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039E4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039E4
  01  CFile::FindFirstFile(DIR_ENTRY *, char *)
      | Stack used (prev) :  000039E4
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039E8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039E8
  01  CFile::FindNextFile(DIR_ENTRY *)
      | Stack used (prev) :  000039E8
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039EC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039EC
  01  CFile::FindClose(DIR_ENTRY *)
      | Stack used (prev) :  000039EC
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039F0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039F0
  01  CFile::IsFileExist(char const *)
      | Stack used (prev) :  000039F0
      | + function block  :  0000002C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003A1C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003A1C
  01  CFile::FDelete(char const *)
      | Stack used (prev) :  00003A1C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003A20


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003A20
  01  CFile::FMove(char const *, char const *)
      | Stack used (prev) :  00003A20
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003A24


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003A24
  01  IconPack::new IconPack()
      | Stack used (prev) :  00003A24
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003A2C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003A2C
  01  IconPack::delete ~IconPack(IconPack *)
      | Stack used (prev) :  00003A2C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003A34


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003A34
  01  IconPack::LoadIconPack()
      | Stack used (prev) :  00003A34
      | + function block  :  00000114
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B48


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B48
  01  IconPack::FreeIconPack()
      | Stack used (prev) :  00003B48
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B58


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B58
  01  IconPack::LoadDefaultIP()
      | Stack used (prev) :  00003B58
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B5C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B5C
  01  IconPack::InitIconPack()
      | Stack used (prev) :  00003B5C
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B5C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B5C
  01  KeyHook::Create()
      | Stack used (prev) :  00003B5C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B60


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B60
  01  KeyHook::Remove()
      | Stack used (prev) :  00003B60
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B64


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B64
  01  KeyHook::IsSS()
      | Stack used (prev) :  00003B64
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B6C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B6C
  01  KeyHook::IsIdle()
      | Stack used (prev) :  00003B6C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B70


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B70
  01  LangPack::new LangPack()
      | Stack used (prev) :  00003B70
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B74


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B74
  01  LangPack::delete ~LangPack(LangPack *)
      | Stack used (prev) :  00003B74
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B7C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B7C
  01  LangPack::LoadLangFile()
      | Stack used (prev) :  00003B7C
      | + function block  :  00000094
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C10


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C10
  01  LangPack::LoadLgpDefault()
      | Stack used (prev) :  00003C10
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C14


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C14
  01  LangPack::GotoLangLineEnd(char *)
      | Stack used (prev) :  00003C14
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C14


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C14
  01  LangPack::GotoLangLineStart(char *)
      | Stack used (prev) :  00003C14
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C14


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C14
  01  LangPack::InitLgp()
      | Stack used (prev) :  00003C14
      | + function block  :  0000004C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C60


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C60
  01  LangPack::LangPack()
      | Stack used (prev) :  00003C60
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C68


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C68
  01  LangPack::~LangPack()
      | Stack used (prev) :  00003C68
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C70


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C70
  01  MainMenu::new MainMenu()
      | Stack used (prev) :  00003C70
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C74


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C74
  01  MainMenu::MainMenu()
      | Stack used (prev) :  00003C74
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C74


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C74
  01  MainMenu::GetMainMenuGUI(DLG_CSM *, int)
      | Stack used (prev) :  00003C74
      | + function block  :  00000018
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C8C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C8C
  01  Mss3App::Start(char *, char *)
      | Stack used (prev) :  00003C8C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C98


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C98
  01  Mss3App::InitSetting()
      | Stack used (prev) :  00003C98
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C9C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C9C
  01  Mss3App::InitDatPath()
      | Stack used (prev) :  00003C9C
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00003CAC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003CAC
  01  Mss3App::IsAlreadyRuning()
      | Stack used (prev) :  00003CAC
      | + function block  :  00000040
  <-Sub-tree of type: Function tree
    | Stack used          :  00003CEC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003CEC
  01  SendMyIpc(int)
      | Stack used (prev) :  00003CEC
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003CF0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003CF0
  01  SendMyIpc(int, void *)
      | Stack used (prev) :  00003CF0
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003CFC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003CFC
  01  NAbCSM::new NAbCSM()
      | Stack used (prev) :  00003CFC
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D00


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D00
  01  NAbCSM::NAbCSM()
      | Stack used (prev) :  00003D00
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D00


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D00
  01  NAbCSM::CreateNAbCSM(void *, int, char *, int)
      | Stack used (prev) :  00003D00
      | + function block  :  0000005C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D5C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D5C
  01  NumList::new NumList()
      | Stack used (prev) :  00003D5C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D60


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D60
  01  NumList::delete ~NumList(NumList *)
      | Stack used (prev) :  00003D60
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D68


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D68
  01  NumList::AllocNL()
      | Stack used (prev) :  00003D68
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D70


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D70
  01  NumList::FreeList()
      | Stack used (prev) :  00003D70
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D7C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D7C
  01  NumList::AddToList_end(_NLST *)
      | Stack used (prev) :  00003D7C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D88


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D88
  01  NumList::FindNL(int)
      | Stack used (prev) :  00003D88
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D88


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D88
  01  NumList::AddToList(char const *)
      | Stack used (prev) :  00003D88
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D9C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D9C
  01  NumList::DeleteNL(_NLST *)
      | Stack used (prev) :  00003D9C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003DA8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003DA8
  01  NumList::AddNumsToList(char const *)
      | Stack used (prev) :  00003DA8
      | + function block  :  00000094
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E3C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E3C
  01  NumList::UpdateNL(_NLST *, char const *)
      | Stack used (prev) :  00003E3C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E48


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E48
  01  NumList::InsertNL_front(_NLST *, char const *)
      | Stack used (prev) :  00003E48
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E58


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E58
  01  NumList::AllocNL(char const *)
      | Stack used (prev) :  00003E58
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E64


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E64
  01  NumList::InsertNL_behind(_NLST *, char const *)
      | Stack used (prev) :  00003E64
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E70


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E70
  01  NumList::ClearNL(_NLST *)
      | Stack used (prev) :  00003E70
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E74


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E74
  01  NumList::IsNumExist(char const *)
      | Stack used (prev) :  00003E74
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E80


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E80
  01  OthMenu::new OthMenu()
      | Stack used (prev) :  00003E80
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E84


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E84
  01  OthMenu::OthMenu()
      | Stack used (prev) :  00003E84
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E84


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E84
  01  OthMenu::CreateOthMenu(DLG_CSM *)
      | Stack used (prev) :  00003E84
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E8C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E8C
  01  OthMenu::OpenCfgFile()
      | Stack used (prev) :  00003E8C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E94


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E94
  01  OthMenu::ShowAbout()
      | Stack used (prev) :  00003E94
      | + function block  :  00000088
  <-Sub-tree of type: Function tree
    | Stack used          :  00003F1C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003F1C
  01  OthMenu::ShowHelp()
      | Stack used (prev) :  00003F1C
      | + function block  :  0000009C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003FB8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003FB8
  01  PlaySouNd::new PlaySouNd()
      | Stack used (prev) :  00003FB8
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003FBC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003FBC
  01  PlaySouNd::delete ~PlaySouNd(PlaySouNd *)
      | Stack used (prev) :  00003FBC
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003FC4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003FC4
  01  PlaySouNd::~PlaySouNd()
      | Stack used (prev) :  00003FC4
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003FCC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003FCC
  01  PlaySouNd::PlayStop()
      | Stack used (prev) :  00003FCC
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003FD4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003FD4
  01  PlaySouNd::PlayDone()
      | Stack used (prev) :  00003FD4
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003FD4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003FD4
  01  PlaySouNd::GetHandle()
      | Stack used (prev) :  00003FD4
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003FD4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003FD4
  01  PopupNewIn::new PopupNewIn()
      | Stack used (prev) :  00003FD4
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003FD8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003FD8
  01  PopupNewIn::PopupNewIn()
      | Stack used (prev) :  00003FD8
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003FD8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003FD8
  01  PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
      | Stack used (prev) :  00003FD8
      | + function block  :  00000074
  <-Sub-tree of type: Function tree
    | Stack used          :  0000404C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000404C
  01  MyShowMsg::MyShow(int, WSHDR *)
      | Stack used (prev) :  0000404C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00004050


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004050
  01  MyShowMsg::MyShow(int, char *)
      | Stack used (prev) :  00004050
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00004054


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004054
  01  SendList::new SendList()
      | Stack used (prev) :  00004054
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00004058


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004058
  01  SendList::delete ~SendList(SendList *)
      | Stack used (prev) :  00004058
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00004060


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004060
  01  SendList::AllocSL()
      | Stack used (prev) :  00004060
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00004068


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004068
  01  SendList::FreeList()
      | Stack used (prev) :  00004068
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004074


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004074
  01  SendList::AddToList(_SNDLST *)
      | Stack used (prev) :  00004074
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004080


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004080
  01  SendList::AddToList(char const *, WSHDR *)
      | Stack used (prev) :  00004080
      | + function block  :  00000018
  <-Sub-tree of type: Function tree
    | Stack used          :  00004098


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004098
  01  SendList::DeleteSL(_SNDLST *)
      | Stack used (prev) :  00004098
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000040A4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040A4
  01  SendList::FindSL(int)
      | Stack used (prev) :  000040A4
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000040A4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040A4
  01  SendList::IsSending()
      | Stack used (prev) :  000040A4
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000040A4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040A4
  01  SendList::SendStart()
      | Stack used (prev) :  000040A4
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  000040B4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040B4
  01  SendList::SendEnd(int)
      | Stack used (prev) :  000040B4
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  000040C8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040C8
  01  SendList::CatList(_SNDLST *)
      | Stack used (prev) :  000040C8
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000040D4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040D4
  01  SendList::CsmToTop(int)
      | Stack used (prev) :  000040D4
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000040DC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040DC
  01  SiememPDU::Add2WS(char *, WSHDR *, int)
      | Stack used (prev) :  000040DC
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  000040F0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040F0
  01  SiememPDU::Hex2Num(char *, char *, int)
      | Stack used (prev) :  000040F0
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000040F4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040F4
  01  SiememPDU::Bit7Decode(WSHDR *, char *, int, int)
      | Stack used (prev) :  000040F4
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004110


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004110
  01  SiememPDU::DoSmsReport(SDLIST *, char *, WSHDR *)
      | Stack used (prev) :  00004110
      | + function block  :  00000038
  <-Sub-tree of type: Function tree
    | Stack used          :  00004148


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004148
  01  SmsData::new SmsData()
      | Stack used (prev) :  00004148
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  0000414C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000414C
  01  SmsData::delete ~SmsData(SmsData *)
      | Stack used (prev) :  0000414C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00004154


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004154
  01  SmsData::AllocSDL()
      | Stack used (prev) :  00004154
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  0000415C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000415C
  01  SmsData::DeleteSDL(_SDLIST *)
      | Stack used (prev) :  0000415C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004168


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004168
  01  SmsData::FreeAllSDL()
      | Stack used (prev) :  00004168
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004174


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004174
  01  SmsData::AddByTimeSDL(_SDLIST *)
      | Stack used (prev) :  00004174
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00004184


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004184
  01  SmsData::FreeOneSDL(_SDLIST *)
      | Stack used (prev) :  00004184
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  0000418C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000418C
  01  SmsData::CopyOneSDL(_SDLIST *)
      | Stack used (prev) :  0000418C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004198


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004198
  01  SmsData::FindSDL(int)
      | Stack used (prev) :  00004198
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00004198


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004198
  01  SmsData::FindOpmsgSDL(int)
      | Stack used (prev) :  00004198
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000041A4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000041A4
  01  SmsData::FindSDL(char *)
      | Stack used (prev) :  000041A4
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000041B0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000041B0
  01  SmsData::GetSMSCount(int)
      | Stack used (prev) :  000041B0
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000041B4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000041B4
  01  SmsData::GetSMSCount(int, int)
      | Stack used (prev) :  000041B4
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000041B4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000041B4
  01  SmsData::FindSDL(int, int)
      | Stack used (prev) :  000041B4
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000041B8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000041B8
  01  DataDecoder(_SDLIST *, char *, int)
      | Stack used (prev) :  000041B8
      | + function block  :  000001D8
  <-Sub-tree of type: Function tree
    | Stack used          :  00004390


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004390
  01  ReadSMS(_SDLIST *, INDEX_ID_DATA *)
      | Stack used (prev) :  00004390
      | + function block  :  000000F0
  <-Sub-tree of type: Function tree
    | Stack used          :  00004480


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004480
  01  SmsData::DeMsgDataList(SMS_DATA_LIST *)
      | Stack used (prev) :  00004480
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  0000449C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000449C
  01  SmsData::ReadAllDatMsg()
      | Stack used (prev) :  0000449C
      | + function block  :  00000018
  <-Sub-tree of type: Function tree
    | Stack used          :  000044B4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000044B4
  01  SmsData::FindMsgDataL(int)
      | Stack used (prev) :  000044B4
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000044BC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000044BC
  01  SmsData::ReadMessageOne(int)
      | Stack used (prev) :  000044BC
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  000044CC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000044CC
  01  SmsData::ReadMss(char *, _SDLIST *)
      | Stack used (prev) :  000044CC
      | + function block  :  000000BC
  <-Sub-tree of type: Function tree
    | Stack used          :  00004588


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004588
  01  SmsData::ReadFolder(int)
      | Stack used (prev) :  00004588
      | + function block  :  00000458
  <-Sub-tree of type: Function tree
    | Stack used          :  000049E0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000049E0
  01  SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
      | Stack used (prev) :  000049E0
      | + function block  :  00000194
  <-Sub-tree of type: Function tree
    | Stack used          :  00004B74


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004B74
  01  SmsData::GetMssPath(char *, char *, TTime *, TDate *)
      | Stack used (prev) :  00004B74
      | + function block  :  000000A8
  <-Sub-tree of type: Function tree
    | Stack used          :  00004C1C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004C1C
  01  SmsData::DeleteMessage(_SDLIST *)
      | Stack used (prev) :  00004C1C
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00004C2C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004C2C
  01  SmsData::ReadAllMessage()
      | Stack used (prev) :  00004C2C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004C38


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004C38
  01  SmsData::SmsData()
      | Stack used (prev) :  00004C38
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00004C40


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004C40
  01  SmsData::IsNewSMS(int)
      | Stack used (prev) :  00004C40
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00004C48


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004C48
  01  SmsData::CheckSMS(int)
      | Stack used (prev) :  00004C48
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00004C58


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004C58
  01  SmsData::CheckDat()
      | Stack used (prev) :  00004C58
      | + function block  :  00000024
  <-Sub-tree of type: Function tree
    | Stack used          :  00004C7C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004C7C
  01  SmsData::CheckFolder(int)
      | Stack used (prev) :  00004C7C
      | + function block  :  00000458
  <-Sub-tree of type: Function tree
    | Stack used          :  000050D4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000050D4
  01  SmsData::IsDatExist(int)
      | Stack used (prev) :  000050D4
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000050DC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000050DC
  01  SmsData::CheckSDList()
      | Stack used (prev) :  000050DC
      | + function block  :  00000018
  <-Sub-tree of type: Function tree
    | Stack used          :  000050F4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000050F4
  01  SmsData::CheckAll()
      | Stack used (prev) :  000050F4
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005100


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005100
  01  SmsData::NewToReadSMS(_SDLIST *)
      | Stack used (prev) :  00005100
      | + function block  :  0000009C
  <-Sub-tree of type: Function tree
    | Stack used          :  0000519C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000519C
  01  SmsData::IsExistSDL(_SDLIST *)
      | Stack used (prev) :  0000519C
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  0000519C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000519C
  01  SmsData::FindNextSDL(_SDLIST *, int)
      | Stack used (prev) :  0000519C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000051A0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000051A0
  01  SmsData::FindPrevSDL(_SDLIST *, int)
      | Stack used (prev) :  000051A0
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000051A4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000051A4
  01  SmsData::FilterFindSDL(int)
      | Stack used (prev) :  000051A4
      | + function block  :  000000A8
  <-Sub-tree of type: Function tree
    | Stack used          :  0000524C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000524C
  01  SmsData::FilterFindSDL(int, int)
      | Stack used (prev) :  0000524C
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  0000524C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000524C
  01  SmsData::FilterFindSDL(char const *, int)
      | Stack used (prev) :  0000524C
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00005260


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005260
  01  SmsData::FilterFindSDL(WSHDR *, int)
      | Stack used (prev) :  00005260
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00005274


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005274
  01  SmsData::FilterGetCount()
      | Stack used (prev) :  00005274
      | + function block  :  000000A4
  <-Sub-tree of type: Function tree
    | Stack used          :  00005318


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005318
  01  SmsData::FilterGetCount(char const *)
      | Stack used (prev) :  00005318
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00005328


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005328
  01  SmsData::FilterGetCount(WSHDR *)
      | Stack used (prev) :  00005328
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00005338


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005338
  01  SmsData::FilterFindNext(_SDLIST *)
      | Stack used (prev) :  00005338
      | + function block  :  000000A4
  <-Sub-tree of type: Function tree
    | Stack used          :  000053DC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000053DC
  01  SmsData::FilterFindNext(_SDLIST *, char const *)
      | Stack used (prev) :  000053DC
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000053E8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000053E8
  01  SmsData::FilterFindPrev(_SDLIST *)
      | Stack used (prev) :  000053E8
      | + function block  :  000000A4
  <-Sub-tree of type: Function tree
    | Stack used          :  0000548C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000548C
  01  SmsData::FilterFindPrev(_SDLIST *, char const *)
      | Stack used (prev) :  0000548C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005498


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005498
  01  SmsData::MoveToArchive(_SDLIST *)
      | Stack used (prev) :  00005498
      | + function block  :  00000120
  <-Sub-tree of type: Function tree
    | Stack used          :  000055B8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000055B8
  01  SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
      | Stack used (prev) :  000055B8
      | + function block  :  000001A4
  <-Sub-tree of type: Function tree
    | Stack used          :  0000575C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000575C
  01  SmsData::MoveAllToArchive()
      | Stack used (prev) :  0000575C
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  0000576C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000576C
  01  SmsData::FindLastNew()
      | Stack used (prev) :  0000576C
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  0000576C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000576C
  01  SmsData::ExportAllToText()
      | Stack used (prev) :  0000576C
      | + function block  :  0000028C
  <-Sub-tree of type: Function tree
    | Stack used          :  000059F8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000059F8
  01  SmsData::DeleteAllMss()
      | Stack used (prev) :  000059F8
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A0C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A0C
  01  SmsOptionMenu::new SmsOptionMenu()
      | Stack used (prev) :  00005A0C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A10


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A10
  01  SmsListMenu::new SmsListMenu()
      | Stack used (prev) :  00005A10
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A14


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A14
  01  SmsListMenu::SmsListMenu()
      | Stack used (prev) :  00005A14
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A14


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A14
  01  SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *)
      | Stack used (prev) :  00005A14
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A20


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A20
  01  SmsListMenu::GetSmsListMenuGUI(int, int, DLG_CSM *, int)
      | Stack used (prev) :  00005A20
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A3C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A3C
  01  SmsOptionMenu::SmsOptionMenu()
      | Stack used (prev) :  00005A3C
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A3C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A3C
  01  SmsOptionMenu::CreateSmsOptionMenu(DLG_CSM *, int, int, _SDLIST *)
      | Stack used (prev) :  00005A3C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A44


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A44
  01  SmsListMenu::ReCreateMe(void *)
      | Stack used (prev) :  00005A44
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A60


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A60
  01  TViewGUI::new TViewGUI()
      | Stack used (prev) :  00005A60
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A64


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A64
  01  TViewGUI::CreateTViewGUI(WSHDR *, WSHDR *)
      | Stack used (prev) :  00005A64
      | + function block  :  00000020
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A84


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A84
  01  TabGUI::TabGUI()
      | Stack used (prev) :  00005A84
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A8C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A8C
  01  TabGUI::~TabGUI()
      | Stack used (prev) :  00005A8C
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00005A8C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005A8C
  01  TabGUI::CreateTabGUI(DLG_CSM *)
      | Stack used (prev) :  00005A8C
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005AA8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005AA8
  01  TabGUI::ReCreateTabGUI(DLG_CSM *)
      | Stack used (prev) :  00005AA8
      | + function block  :  00000028
  <-Sub-tree of type: Function tree
    | Stack used          :  00005AD0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005AD0
  01  TplMenu::delete ~TplMenu(TplMenu *)
      | Stack used (prev) :  00005AD0
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00005AD8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005AD8
  01  TplMenu::new TplMenu()
      | Stack used (prev) :  00005AD8
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00005ADC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005ADC
  01  TplMenu::TplMenu()
      | Stack used (prev) :  00005ADC
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00005ADC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005ADC
  01  TplMenu::AllocTPList()
      | Stack used (prev) :  00005ADC
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00005AE4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005AE4
  01  TplMenu::AddToTPList(_TPLIST *)
      | Stack used (prev) :  00005AE4
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005AF0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005AF0
  01  TplMenu::FreeTPList()
      | Stack used (prev) :  00005AF0
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005AFC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005AFC
  01  TplMenu::ReadTpl()
      | Stack used (prev) :  00005AFC
      | + function block  :  000024F8
  <-Sub-tree of type: Function tree
    | Stack used          :  00007FF4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00007FF4
  01  TplMenu::GetTpl(int)
      | Stack used (prev) :  00007FF4
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00007FF4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00007FF4
  01  TplMenu::CreateTplMenu(void *)
      | Stack used (prev) :  00007FF4
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00008000


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008000
  01  Vibra::new Vibra()
      | Stack used (prev) :  00008000
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00008004


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008004
  01  Vibra::delete ~Vibra(Vibra *)
      | Stack used (prev) :  00008004
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  0000800C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000800C
  01  Vibra::Vibra()
      | Stack used (prev) :  0000800C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00008014


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008014
  01  Vibra::InitThythm()
      | Stack used (prev) :  00008014
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00008028


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008028
  01  Vibra::ReInitThythm()
      | Stack used (prev) :  00008028
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00008030


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008030
  01  Vibra::VibraStart()
      | Stack used (prev) :  00008030
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00008038


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008038
  01  Vibra::VibraNext()
      | Stack used (prev) :  00008038
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00008040


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008040
  01  Vibra::VibraStop()
      | Stack used (prev) :  00008040
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00008044


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008044
  01  operator new(unsigned int)
      | Stack used (prev) :  00008044
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00008048


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008048
  01  operator new[](unsigned int)
      | Stack used (prev) :  00008048
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  0000804C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000804C
  01  operator delete(void *)
      | Stack used (prev) :  0000804C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00008050


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008050
  01  LoadConfigData
      | Stack used (prev) :  00008050
      | + function block  :  00000024
  <-Sub-tree of type: Function tree
    | Stack used          :  00008074


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008074
  01  InitConfig
      | Stack used (prev) :  00008074
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  0000807C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000807C
  01  main
      | Stack used (prev) :  0000807C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00008080


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008080
  01  ascii_2ws(WSHDR *, char const *, int)
      | Stack used (prev) :  00008080
      | + function block  :  00000018
  <-Sub-tree of type: Function tree
    | Stack used          :  00008098


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008098
  01  wstrcmp_nocase(WSHDR *, WSHDR *)
      | Stack used (prev) :  00008098
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000080A0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000080A0
  01  wstrncmp_nocase(WSHDR *, WSHDR *, int)
      | Stack used (prev) :  000080A0
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000080AC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000080AC
  01  num_2ws(WSHDR *, char const *, int)
      | Stack used (prev) :  000080AC
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  000080C8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000080C8
  01  ws_2num(WSHDR *, char *, int)
      | Stack used (prev) :  000080C8
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000080CC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000080CC
  01  str2int(char const *)
      | Stack used (prev) :  000080CC
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000080CC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000080CC
  01  IsWsSmall(WSHDR *)
      | Stack used (prev) :  000080CC
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000080CC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000080CC
  01  IsNum(WSHDR *)
      | Stack used (prev) :  000080CC
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000080CC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000080CC
  01  w_charcmp_nocase(unsigned short *, unsigned short *, int)
      | Stack used (prev) :  000080CC
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000080D0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000080D0
  01  wstrstr(WSHDR *, WSHDR *)
      | Stack used (prev) :  000080D0
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  000080EC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000080EC
  01  NumberMatch(char const *, char const *)
      | Stack used (prev) :  000080EC
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00008100


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008100
  01  StrClearChr(char *, int)
      | Stack used (prev) :  00008100
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00008100


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008100
  01  ReplaceNewLineToSpace(WSHDR *)
      | Stack used (prev) :  00008100
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00008100




                ****************************************
                *                                      *
                *      SEGMENTS IN ADDRESS ORDER       *
                *                                      *
                ****************************************


SEGMENT              SPACE    START ADDRESS   END ADDRESS     SIZE  TYPE  ALIGN
=======              =====    =============   ===========     ====  ====  =====
ELFBEGIN             CODE_AREA           00000000                     rel    0
DATA_ID              CODE_AREA      00000000 - 0000042F         430   rel    2
START                CODE_AREA           00000430                     dse    0
CODE                 CODE_AREA      00000430 - 0000BB8F        B760   rel    2
DATA_C               CODE_AREA      0000BB90 - 0000C80D         C7E   rel    2
INITTAB              CODE_AREA      0000C810 - 0000C827          18   rel    2
DATA_Z               CODE_AREA      0000C828 - 0001093B        4114   rel    2
MYSEG                CODE_AREA           0001093C                     dse    0
DATA_N               CODE_AREA           0001093C                     dse    0
CONFIG_C             CODE_AREA      0001093C - 00011323         9E8   rel    2
DATA_I               DATA_AREA      00000000 - 0000042F         430   rel    2

                ****************************************
                *                                      *
                *        END OF CROSS REFERENCE        *
                *                                      *
                ****************************************

 70 434 bytes of CODE memory
  1 072 bytes of DATA memory

Errors: none
Warnings: none

