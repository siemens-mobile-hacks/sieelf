##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    13/Oct/2011  23:45:37 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  I:\Amuse\SVN\Siemens\MySMSYS\Mss3\MyIpcMessage.cpp   #
#    Command line    =  I:\Amuse\SVN\Siemens\MySMSYS\Mss3\MyIpcMessage.cpp   #
#                       -D NEWSGOLD -D S68 -D LANG_CN -lcN                   #
#                       I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\List\  #
#                       -o I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj #
#                       \ -s9 --no_unroll --cpu_mode arm --endian little     #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --eec++ --dlib_config "D:\Program         #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "D:\Program     #
#                       Files\IAR\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\List\M #
#                       yIpcMessage.lst                                      #
#    Object file     =  I:\Amuse\SVN\Siemens\MySMSYS\Mss3\Release_S68\Obj\My #
#                       IpcMessage.r79                                       #
#                                                                            #
#                                                                            #
##############################################################################

I:\Amuse\SVN\Siemens\MySMSYS\Mss3\MyIpcMessage.cpp
      1          #include "include.h"
      2          #include "MyIpcMessage.h"
      3          
      4          const IPC_REQ IPC1=
      5          {
      6            IPC_NAME,
      7            IPC_NAME,
      8            NULL
      9          };
     10          
     11          static IPC_REQ IPC2=
     12          {
     13            IPC_NAME,
     14            IPC_NAME,
     15            NULL
     16          };
     17          /*
     18          void MyIpcMessage::SendIpc(int submess)
     19          {
     20            GBS_SendMessage(MMI_CEPID,MSG_IPC,submess,&IPC1);
     21          }
     22          
     23          void MyIpcMessage::SendIpc(int submess, void *data)
     24          {
     25            LockSched();
     26            IPC2.data=data;
     27            GBS_SendMessage(MMI_CEPID,MSG_IPC,submess,&IPC2);
     28            UnlockSched();
     29          }
     30          */
     31          void SendMyIpc(int submess)
     32          {
     33            GBS_SendMessage(MMI_CEPID,MSG_IPC,submess,&IPC1);
     34          }
     35          
     36          void SendMyIpc(int submess, void *data)
     37          {
     38            LockSched();
     39            IPC2.data=data;
     40            GBS_SendMessage(MMI_CEPID,MSG_IPC,submess,&IPC2);
     41            UnlockSched();
     42          }

   Maximum stack usage in bytes:

     Function               CSTACK
     --------               ------
     SendMyIpc(int)             4
     SendMyIpc(int, void *)    12


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     IPC1                      12
     IPC2                      12
     SendMyIpc(int)            40
     SendMyIpc(int, void *)    60
     ?<Initializer for IPC2>   12
      Others                   20

 
 108 bytes in segment CODE
  12 bytes in segment DATA_C
  12 bytes in segment DATA_I
  12 bytes in segment DATA_ID
  12 bytes in segment INITTAB
 
 100 bytes of CODE  memory (+ 20 bytes shared)
  24 bytes of CONST memory
  12 bytes of DATA  memory

Errors: none
Warnings: none
