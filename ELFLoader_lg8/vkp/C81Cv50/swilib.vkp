{\rtf1\ansi\deff0{\fonttbl{\f0\fmodern Courier New;}}
\viewkind4\uc1\pard\lang0\f0\fs16 ; C81C v50 lg8 - Patch made by "Smelter" ? avkiev\par
; http://avkiev.kiev.ua/Siemens/Smelter/Smelter.htm\par
;********************************************************************************\par
\par
;Library\par
\par
;2008-8-28\par
\par
+0074000\par
#pragma enable  old_equal_ff\par
0000: 0xA0090590   ;   0: void loopback0()\par
0004: 0xA0090590   ;   1: void loopback1()\par
0008: 0xA0090590   ;   2: void loopback2()\par
000C: 0xA0090590   ;   3: void loopback3()\par
0010: 0xA0090590   ;   4: void loopback4()\par
0014: 0xA026FB79   ;   5: DecToHex\par
0018: 0xA01AC404   ;   6: int GetAkku(int param1,int param2)\par
001C: 0xA006F061   ;   7: GetLP\par
0020: 0xA01B6968   ;   8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)\par
0024: 0xA0234850   ;   9: void SwitchPhoneOff()\par
0028: 0xA025318C   ;   A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)\par
002C: 0xA025324C   ;   B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)\par
0030: 0xA025337C   ;   C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)\par
0034: 0xA02530E0   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)\par
;038:              ;   E: \par
003C: 0xA0253140   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)\par
\par
0040: 0xA0252D84   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)\par
0044: 0xA006F001   ;  11: OpenReadCloseFile\par
0048: 0xA0252BE4   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)\par
004C: 0xA0252ED8   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)\par
0050: 0xA0094B5C   ;  14: void *malloc(unsigned int size)\par
0054: 0xA0094948   ;  15: void mfree(void *)\par
0058: 0xA141609D   ;  16: int sprintf(char *buf, const char *str, ...)\par
005C: 0xA1417B09   ;  17: char *strcat (char *,const char *)\par
0060: 0xA1417B29   ;  18: char *strchr (const char *,int)\par
0064: 0xA1417B4C   ;  19: int strcmp (const char *,const char *)\par
0068: 0xA1417BE9   ;  1A: char *strcpy (char *dest,const char *source)\par
006C: 0xA1417C69   ;  1B: unsigned int strlen(const char *)\par
0070: 0xA01F72A1   ;  1C: void wsAppendChar(WSHDR *ws,int wchar)\par
0074: 0xA01F7255   ;  1D: int wsInsertChar(WSHDR *ws,int wchar, int pos)\par
0078: 0xA099AE45   ;  1E: IMGHDR *GetPITaddr(int num)\par
;07C:              ;  1F: DrawMainScreen\par
\par
;080:              ;  20: DrawScreenSaver\par
0084: 0xA099AF6F   ;  21: int GetImgHeight(int picture)\par
0088: 0xA099AF7F   ;  22: int GetImgWidth(int picture)\par
008C: 0xA029D789   ;  23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)\par
;090:              ;  24: DrawImage2\par
0094: 0xA029CCEB   ;  25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)\par
0098: 0xA0A1DDA9   ;  26: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)\par
009C: 0xA029CF11   ;  27: AddIconToIconbar\par
00A0: 0xA144A53C   ;  28: double fp_sint2fp(signed int i)\par
;0A4:              ;  29: \par
00A8: 0xA01E578C   ;  2A: int *GetEELiteBlockAddress(short blocknum)\par
00AC: 0xA144A3DC   ;  2B: signed int fp_fp2sint(double f)\par
00B0: 0xA01E4E6C   ;  2C: int EEFullGetBlockInfo(unsigned int block,int *size,char *version)\par
00B4: 0xA144979C   ;  2D: double fp_add(double addend1, double addend2)\par
00B8: 0xA144A6FC   ;  2E: double fp_mul(double factor1, double factor2)\par
00BC: 0xA1449DB0   ;  2F: double fp_div(double divisor, double divident)\par
\par
;0C0:              ;  30: \par
00C4: 0xA1417DB1   ;  31: char *strrchr_2(const char *s,int c)\par
00C8: 0xA0282E50   ;  32: void PlaySound(long param1, long param2, long param3, long tone, long param5)\par
00CC: 0xA02797A8   ;  33: PlaySound2\par
00D0: 0xA0B32C60   ;  34: void PlaySoundLoop(int _0x2F, int param2, int duration)\par
;0D4:              ;  35: AlarmClockRing\par
;0D8:              ;  36: void SLI_SetState(unsigned char state)\par
00DC: 0xA027CC28   ;  37: void Ringtones_SetState(unsigned char state)\par
00E0: 0xA05A7E23   ;  38: int Registry_GetHMIKeyID(char *Keyword)\par
00E4: 0xA05A7A35   ;  39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)\par
00E8: 0xA05A59C7   ;  3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)\par
00EC: 0xA1416E05   ;  3B: MemChr\par
00F0: 0xA025328C   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)\par
;0F4:              ;  3D: editOrNewTXTModule\par
00F8: 0xA05A74C1   ;  3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)\par
00FC: 0xA09960D1   ;  3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)\par
\par
0100: 0xA028BD5D   ;  40: GetVibraStatus\par
0104: 0xA0963D8B   ;  41: GetProvider\par
0108: 0xA0307007   ;  42: int IsScreenSaver()\par
010C: 0xA096BD63   ;  43: int IsUnlocked(void)\par
0110: 0xA0965E09   ;  44: TempLightOn\par
0114: 0xA006F241   ;  45: int GetWavLen(char *filename)\par
;118:              ;  46: int HasNewSMS()\par
;11C:              ;  47: HasFlashSMS\par
;120:              ;  48: ReadNewSMS\par
;124:              ;  49: ReadFlashSMS\par
0128: 0xA027B620   ;  4A: short PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int zero, int CepId, int Msg, const PLAYFILE_OPT *sfo)\par
012C: 0xA0AB464C   ;  4B: StartMidlet\par
0130: 0xA09D0159   ;  4C: int GetMissedCallsCount()\par
0134: 0xA0093278   ;  4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())\par
0138: 0xA099C5CD   ;  4E: int MsgBoxError(int flag, int LgpId)\par
013C: 0xA099C62D   ;  4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))\par
\par
0140: 0xA099C637   ;  50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))\par
0144: 0xA0E374A7   ;  51: GetNetAccessMode\par
0148: 0xA8D87CEC   ;  52: char *GetIlluminationDataTable()\par
014C: 0xA1416E29   ;  53: int memcmp_2(void *m1,void *m2,int n)\par
0150: 0xA02C785D   ;  54: int StrToInt(char *s, char **endp)\par
;154:              ;  55: SwitchVibraOnOff\par
0158: 0xA006F131   ;  56: PlayVibra\par
;15C:              ;  57: IsCallAfterTimerStillRunning\par
0160: 0xA1417284   ;  58: void zeromem_2(void *dest,int n)\par
0164: 0xA1417328   ;  59: void *memcpy_2(void *dest,const void *source,int cnt)\par
0168: 0xA096B621   ;  5A: KeypressOn(int key)\par
016C: 0xA096B733   ;  5B: KeypressOff(int key)\par
0170: 0xA03477BD   ;  5C: unsigned char GetCPUClock()\par
0174: 0xA03477F7   ;  5D: unsigned char GetCPULoad()\par
0178: 0xA03477C5   ;  5E: GetMMIMemUsed\par
017C: 0xA0094BE8   ;  5F: int GetFreeRamAvail()\par
\par
0180: 0xA03433C1   ;  60: ShowMainMenu\par
0184: 0xA02D3F33   ;  61: ShowNativeMenu\par
0188: 0xA028BD25   ;  62: SetVibraStatus\par
018C: 0xA029E50D   ;  63: void MMI_CanvasBuffer_FlushV(int CanvasID)\par
;190:              ;  64: TriggerUpdate\par
;194:              ;  65: EndCall\par
;198:              ;  66: EndCallBusy\par
;19C:              ;  67: IsDirectCallActive\par
;1A0:              ;  68: GetScreenSaverRAM\par
01A4: 0xA009B180   ;  69: void LockSched_2(void)\par
01A8: 0xA009B26C   ;  6A: void UnlockSched_2(void)\par
01AC: 0xA0252C5C   ;  6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)\par
01B0: 0xA0252CDC   ;  6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)\par
01B4: 0xA0252BA4   ;  6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)\par
01B8: 0xA0DDF045   ;  6E: int IsCalling()\par
01BC: 0xA0976D58   ;  6F: void RefreshGPRSTraffic()\par
\par
01C0: 0xA0976D88   ;  70: int *GetGPRSTrafficPointer()\par
;1C4:              ;  71: \par
;1C8:              ;  72: SetCurrentSecondOfCall\par
01CC: 0xA0DDF847   ;  73: int GetTypeOfCall(int type)\par
;1D0:              ;  74: SHORTCUTREC *GetShortcutRecordByName(char *szShortcutName)\par
01D4: 0xA029EA25   ;  75: IsCanvasBufferSet(char CanvasID)\par
01D8: 0xA029E9D5   ;  76: GetCanvasBufferPicPtr(char CanvasID)\par
;1DC:              ;  77: set2color_byPaletteAdr\par
01E0: 0xA096979D   ;  78: GetTimeFormat\par
01E4: 0xA096AECD   ;  79: DrawObject2Layer(LCD_Layer *, DRWOBJ *)\par
01E8: 0x00006422   ;  7A: GBS_Cmd_4200_UpdateScreen\par
;1EC:              ;  7B: GetProfileFilter\par
01F0: 0xA01B1203   ;  7C: unsigned int SetVibration(unsigned int power)\par
01F4: 0xA0DDEA07   ;  7D: IsIncognitoCall\par
01F8: 0xA0DDE0C1   ;  7E: int rand(void)\par
01FC: 0xA03239FD   ;  7F: IsPlayerOn\par
\par
0200: 0xA0643E6D   ;  80: int ShowCallList(int list, int zero)\par
0204: 0xA141767C   ;  81: HexToDec\par
0208: 0xA0323ADF   ;  82: GetCurrentTrackFilename\par
;20C:              ;  83: GetPathOfFoundFile\par
0210: 0xA0252F50   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)\par
0214: 0xA026FEA1   ;  85: int strcmpi(const char *s1, const char *s2)\par
0218: 0xA01E4CA4   ;  86: void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg)\par
021C: 0xA01E4F10   ;  87: void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg)\par
0220: 0xA022F752   ;  88: char GetAccessoryType(void)\par
0224: 0xA096E0EC   ;  89: GetLangMesIntoWS\par
0228: 0xA0252B34   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)\par
022C: 0xA02533E8   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)\par
0230: 0xA02A65D9   ;  8C: void RegExplorerExt(REGEXPLEXT const *)\par
0234: 0xA03055E7   ;  8D: GetProfileName\par
0238: 0xA0252DEC   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)\par
023C: 0xA0252E70   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)\par
\par
0240: 0xA0253304   ;  90: int truncate(int FileHandler, int length, int *errornumber)\par
0244: 0xA0252D1C   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)\par
0248: 0xA0A06218   ;  92: void *calloc(size_t nelem, size_t elsize)\par
024C: 0xA023485C   ;  93: void RebootPhone()\par
0250: 0xA02A6775   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)\par
0254: 0xA02A66B7   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)\par
0258: 0xA02AD4D3   ;  96: GetWavLenByContent\par
025C: 0xA006F261   ;  97: CreatePath\par
0260: 0xA006F211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)\par
;264:              ;  99: int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)\par
;268:              ;  9A: int ChangeVolume(unsigned char Volume)\par
;26C:              ;  9B: RamAudioParamsAddr\par
0270: 0xA03074ED   ;  9C: CloseScreensaver\par
0274: 0xA0301C57   ;  9D: GetMissedEventsPtr\par
0278: 0xA006F2B1   ;  9E: int GetMissedEventCount(unsigned int Event)\par
;27C:              ;  9F: DrawRect\par
\par
0280: 0xA098D9F5   ;  A0: int wsprintf_2(WSHDR *,const char *format,...)\par
0284: 0xA01F7193   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)\par
;288:              ;  A2: Unicode_GetCharByPosition\par
028C: 0xA02538CC   ;  A3: void ws2str(WSHDR *ws, char *str, unsigned int size)\par
0290: 0xA098E4B9   ;  A4: WSHDR *AllocWS_2(int len)\par
0294: 0xA01F694D   ;  A5: void FreeWS_2(WSHDR *wshdr)\par
0298: 0xA0976D30   ;  A6: void ResetGPRSTraffic()\par
029C: 0xA0E2B325   ;  A7: char IsGPRSEnabled()\par
02A0: 0xA0DE0205   ;  A8: char IsGPRSConnected()\par
02A4: 0xA096C54B   ;  A9: void KbdLock()\par
02A8: 0xA0A31291   ;  AA: char *GetCurrentLocale()\par
02AC: 0xA0090590   ;  AB: void loopback171()\par
;2B0:              ;  AC: DrawText\par
;2B4:              ;  AD: StrAnsi2Uni\par
;2B8:              ;  AE: StrUni2Ansi\par
02BC: 0xA03475C1   ;  AF: Hex2Int\par
\par
;2C0:              ;  B0: DrawPicWithCanvas\par
02C4: 0xA006F101   ;  B1: DrawColorPicWithCanvas\par
;2C8:              ;  B2: GetBuildCanvas\par
02CC: 0xA006F551   ;  B3: long Seconds2iTime(int timeval)\par
02D0: 0xA0968313   ;  B4: void GetDateTime(TDate *, TTime *)\par
02D4: 0xA026EB3B   ;  B5: char GetWeek(TDate *)\par
02D8: 0xA028B097   ;  B6: char GetProfile()\par
02DC: 0xA028B0F7   ;  B7: char SetProfile(char)\par
02E0: 0xA141749C   ;  B8: int sdiv(int denom,int number)\par
02E4: 0xA096C02F   ;  B9: void KbdUnlock()\par
02E8: 0xA0094B68   ;  BA: void *realloc(void *ptr, int size)\par
02EC: 0xA1417484   ;  BB: void *memset(void *s, int c, int n)\par
02F0: 0xA1417574   ;  BC: int divide(int divisor, int dividend)\par
02F4: 0xA1417638   ;  BD: int DivBy10(int divident)\par
02F8: 0xA0060C91   ;  BE: RunScaner\par
02FC: 0xA0063001   ;  BF: void SpellTime()\par
\par
;300:              ;  C0: MiniGPS\par
0304: 0xA0060C51   ;  C1: RunDispatcher\par
;308:              ;  C2: GetAllPatchesByInject\par
030C: 0xA006F091   ;  C3: ProcessFiles\par
0310: 0xA0060C01   ;  C4: void *GetBuffer(int patch_id)\par
0314: 0xA0301BFF   ;  C5: char IsIdleUiOnTop()\par
0318: 0xA01A8B50   ;  C6: char GetAkkuCapacity()\par
;31C:              ;  C7: SWI_C7\par
0320: 0xA8D836D6   ;  C8: unsigned short *RamCap()\par
0324: 0xA8D836FA   ;  C9: unsigned short *RamLS()\par
0328: 0xA8E7DB02   ;  CA: RAMNET *RamNet()\par
032C: 0xA8DF7A90   ;  CB: RamRingtoneStatus\par
0330: 0xA8E6858C   ;  CC: char *RamMissedCalls()\par
;334:              ;  CD: char *RamMissedSMS()\par
0338: 0xA8D98538   ;  CE: char *RamDateTime()\par
033C: 0xA8EE25B0   ;  CF: char *RamAlarm()\par
\par
;340:              ;  D0: RamAccPoint\par
;344:              ;  D1: RamScreensaver\par
0348: 0xA8D98560   ;  D2: char *RamAutoTime()\par
034C: 0xA8000000   ;  D3: RamStby\par
0350: 0xA8E5213C   ;  D4: char *RamMissedMes()\par
0354: 0xA8DB3DBC   ;  D5: RamIsLocked\par
0358: 0xA8E2B978   ;  D6: RamNetOnline\par
035C: 0xA8E2CA54   ;  D7: RamScreenBrightness\par
;360:              ;  D8: RamMenuAnywhere\par
;364:              ;  D9: \par
0368: 0xA8DEBBB8   ;  DA: RamIsShutdown\par
;36C:              ;  DB: RamMainscreenAccuIcon\par
0370: 0xA8E4BAE0   ;  DC: int *RamRandSeed(void)\par
0374: 0xA899F2BC   ;  DD: RamCurrentTrack\par
0378: 0xA8DF6E1C   ;  DE: RamIsSimPresent\par
037C: 0xA8DB3D94   ;  DF: char *RamPressedKey()\par
\par
0380: 0xA8DA87A8   ;  E0: char *RamScreenBuffer()\par
0384: 0xA8E8D880   ;  E1: unsigned int RamMPlayer_CtrlCode()\par
;388:              ;  E2: RamKeyBuffer\par
;38C:              ;  E3: RamProfileNum\par
0390: 0xA8ED6B00   ;  E4: void *FreeRAM()\par
0394: 0x0000123D   ;  E5: LP_MonthsShort\par
0398: 0x00000260   ;  E6: Pic_Big0\par
039C: 0x00000830   ;  E7: Pic_Little0\par
03A0: 0x00000800   ;  E8: Pic_Extra\par
03A4: 0x00000810   ;  E9: Pic_Profiles\par
03A8: 0x00000818   ;  EA: Pic_Vibra\par
;3AC:              ;  EB: Pic_Call\par
03B0: 0x00000800   ;  EC: Pic_AdvNet\par
03B4: 0x00001137   ;  ED: LP_MonthsLong\par
03B8: 0x000003EB   ;  EE: LP_Weekdays\par
03BC: 0x000005B0   ;  EF: Pic_Calendar\par
\par
03C0: 0x00001200   ;  F0: Pic_AccuGraph\par
03C4: 0xA0304369   ;  F1: void *BuildCanvas()\par
;3C8:              ;  F2: lpRAM_PIT\par
;3CC:              ;  F3: RAM_PIT_Cap\par
;3D0:              ;  F4: Pic_LANI\par
03D4: 0xA8DA86FC   ;  F5: Ram_LCD_Overlay_Layer\par
03D8: 0xA8E2D098   ;  F6: RAM_LCD_Layer_Base_Ptr\par
;3DC:              ;  F7: \par
;3E0:              ;  F8: Additional_PIT_address\par
;3E4:              ;  F9: Additional_PIT_start\par
;3E8:              ;  FA: Additional_PIT_end\par
;3EC:              ;  FB: \par
;3F0:              ;  FC: PictureRelocationTable\par
;3F4:              ;  FD: PictureRelocationBase\par
;3F8:              ;  FE: NextPictureMagic\par
03FC: 0xA0074000   ;  FF: unsigned int AddrLibrary()\par
\par
0400: 0xA0092A94   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)\par
0404: 0xA0091950   ; 101: int GBS_ReciveMessage(GBS_MSG *)\par
0408: 0xA009209C   ; 102: void GBS_AcceptMessage(void)\par
040C: 0xA0091DA4   ; 103: void GBS_ClearMessage(void)\par
0410: 0xA0091F88   ; 104: void GBS_PendMessage(GBS_MSG *)\par
0414: 0xA0092F40   ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero)\par
0418: 0xA8E386F4   ; 106: CSMROOT *CSM_root()\par
041C: 0xA0994A83   ; 107: int CreateCSM(const CSM_DESC *,void *,int)\par
0420: 0xA0994A95   ; 108: CSM_RAM *FindCSMbyID(int id)\par
0424: 0xA0994B51   ; 109: void DoIDLE(void)\par
;428:              ; 10A: void *GetConfig(unsigned int id)\par
;42C:              ; 10B: void *GetMinAdrScan()\par
;430:              ; 10C: void *GetMaxAdrScan()\par
;434:              ; 10D: unsigned short *GetCI()\par
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)\par
043C: 0xA029BE25   ; 10F: void freeUSSD()\par
\par
0440: 0xA026FF51   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)\par
0444: 0xA029BE61   ; 111: char GetTypeUSSD()\par
0448: 0xA029BE71   ; 112: unsigned int SetUSSD(StructUSSDStr *)\par
044C: 0xA1417C39   ; 113: char *strpbrk(const char *s1,const char *s2)\par
0450: 0xA1417CB5   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)\par
0454: 0xA1417CE5   ; 115: int strncmp(const char *s1,const char *s2,int n)\par
0458: 0xA1417D35   ; 116: int strncpy(char *dest,const char *source,int maxlen)\par
045C: 0xA1417DB1   ; 117: char *strrchr(const char *s,int c)\par
0460: 0xA1417DC9   ; 118: char *strstr(const char *s1,const char *s2)\par
0464: 0xA1417DF1   ; 119: int strtol(const char *nptr,char **endptr,int base)\par
0468: 0xA1417E6D   ; 11A: int strtoul(const char *nptr,char **endptr,int base)\par
046C: 0xA1416049   ; 11B: int snprintf(char *,int n,const char *format,...)\par
0470: 0xA1416E29   ; 11C: int memcmp(const void *m1, const void *m2, int n)\par
0474: 0xA1417284   ; 11D: void zeromem(void *dest,int n)\par
0478: 0xA1417328   ; 11E: void *memcpy(void *dest,const void *source,int cnt)\par
047C: 0xA01F7193   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)\par
\par
0480: 0xA01F71B5   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)\par
0484: 0xA01F71D9   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)\par
0488: 0xA01F720D   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)\par
048C: 0xA01F6A1B   ; 123: int wstrlen(WSHDR *wshdr)\par
0490: 0xA098D9F5   ; 124: int wsprintf(WSHDR *,const char *format,...)\par
0494: 0xA098E4B9   ; 125: WSHDR *AllocWS(int len)\par
0498: 0xA01F7405   ; 126: void CutWSTR(void *WSHDR,int len)\par
049C: 0xA01F7023   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)\par
04A0: 0xA01F709D   ; 128: int CreateWS(void *malloc,void *mfree,int len)\par
04A4: 0xA01F694D   ; 129: void FreeWS(WSHDR *wshdr)\par
04A8: 0xA096AEF9   ; 12A: void DrawObject(DRWOBJ *)\par
04AC: 0xA0994C2D   ; 12B: void AddKeybMsgHook(void *proc)\par
04B0: 0xA0994C35   ; 12C: int AddKeybMsgHook_end(void *proc)\par
04B4: 0xA0994C3D   ; 12D: void RemoveKeybMsgHook(void *proc)\par
04B8: 0xA09960D1   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)\par
04BC: 0xA09960F5   ; 12F: void getRGBcolor(int ColorIndex,void *dest)\par
\par
04C0: 0xA0996105   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)\par
04C4: 0xA0996123   ; 131: void setColor(int a,int r,int g,int b,void *dest)\par
04C8: 0xA14173E0   ; 132: void *memmove(void *dest,const void *source,int cnt)\par
04CC: 0xA099A969   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)\par
04D0: 0xA099A97F   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)\par
04D4: 0xA099CF27   ; 135: int IsGuiOnTop(int id)\par
04D8: 0xA099D04B   ; 136: int CreateGUI_ID(void *gui,int id)\par
04DC: 0xA099D05B   ; 137: int CreateGUI(void *gui)\par
04E0: 0xA099D069   ; 138: int CreateGUI_30or2(void *gui)\par
04E4: 0xA099D0A3   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)\par
04E8: 0xA099D0B3   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)\par
04EC: 0xA099D0C3   ; 13B: void GeneralFuncF1(int cmd)\par
04F0: 0xA099D0D1   ; 13C: void GeneralFuncF0(int cmd)\par
04F4: 0xA099D0DF   ; 13D: void GeneralFunc_flag1(int id,int cmd)\par
04F8: 0xA099D0EF   ; 13E: void GeneralFunc_flag0(int id,int cmd)\par
04FC: 0xA099D183   ; 13F: void DirectRedrawGUI(void)\par
\par
0500: 0xA099D19B   ; 140: void DirectRedrawGUI_ID(int id)\par
0504: 0xA099D18F   ; 141: void PendedRedrawGUI(void)\par
0508: 0xA0A1B953   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)\par
050C: 0xA0093318   ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)\par
0510: 0xA009B820   ; 144: void GBS_StopTimer(GBSTMR *tmr)\par
0514: 0xA0099208   ; 145: int GBS_GetCurCepid(void)\par
0518: 0xA009B180   ; 146: void LockSched(void)\par
051C: 0xA009B26C   ; 147: void UnlockSched(void)\par
0520: 0xA099C5AF   ; 148: extern int ShowMSG(int flag, int lgp_id)\par
0524: 0xA09983E9   ; 149: void SetPropToText(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)\par
0528: 0xA099661D   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)\par
052C: 0xA0996587   ; 14B: void SetColor(DRWOBJ *drwobj, const char *color1, const char *color2)\par
0530: 0xA0998433   ; 14C: void DrawString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int font, int text_attribute, const char *Pen, const char *Brush)\par
0534: 0xA099CF35   ; 14D: GUI *GetTopGUI(void)\par
0538: 0xA0A36B95   ; 14E: void *FindItemByID(GUI *gui,int id)\par
053C: 0xA0A36BE1   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)\par
\par
0540: 0xA0A1D82B   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)\par
0544: 0xA0A1DD7F   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int flags, IMGHDR *Image)\par
0548: 0xA099C13F   ; 152: int CreateMenu(int is_small,int zero1,const MENU_DESC *menu, const HEADER_DESC *hdr,int start_item,int n_items,void *user_pointer,int *to_remove)\par
054C: 0xA0091808   ; 153: int GBS_RecActDstMessage(GBS_MSG *)\par
0550: 0xA0099180   ; 154: void KillGBSproc(int cepid)\par
0554: 0xA0136D0D   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)\par
0558: 0xA01360C9   ; 156: png_infop png_create_info_struct(png_structp png_ptr)\par
055C: 0xA0137B81   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)\par
0560: 0xA0135F9D   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)\par
0564: 0xA0136E4B   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)\par
0568: 0xA0136725   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)\par
056C: 0xA0136ACB   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)\par
0570: 0xA013773B   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)\par
0574: 0xA013777D   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)\par
0578: 0xA01363C1   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)\par
057C: 0xA013663B   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)\par
\par
0580: 0xA01372D3   ; 160: void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)\par
0584: 0xA00E26AC   ; 161: void png_init_io(png_structp png_ptr, int fp)\par
0588: 0xA14180A0   ; 162: int setjmp(jmp_buf jmpbuf)\par
058C: 0xA0A27EBB   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)\par
0590: 0xA0A272F9   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)\par
0594: 0xA0A27609   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)\par
0598: 0xA0A28057   ; 166: int AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)\par
059C: 0xA0A24AB9   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,void *user_pointer)\par
05A0: 0xA0A2DF47   ; 168: void SetSoftKey(void *gui,const SOFTKEY_DESC *,int n)\par
05A4: 0xA0A2DEDD   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)\par
05A8: 0xA0A2DEE9   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)\par
05AC: 0xA0252FC8   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)\par
05B0: 0xA02537D8   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)\par
05B4: 0xA05D7180   ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)\par
05B8: 0xA0555560   ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)\par
05BC: 0xA05563D4   ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)\par
\par
05C0: 0xA097A891   ; 170: int MakeVoiceCall(const char *number,int _0x10, int _0x20C0)\par
;5C4:              ; 171: void SUBPROC(void *,...)\par
;5C8:              ; 172: void REDRAW(void)\par
05CC: 0xA0A67C91   ; 173: int socket(int af,int type,int protocol)\par
05D0: 0xA0A68189   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)\par
05D4: 0xA0A67F8D   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)\par
05D8: 0xA0A684BD   ; 176: int closesocket(int socket)\par
05DC: 0xA0A683C5   ; 177: int shutdown(int socket,int how)\par
05E0: 0xA0A685AF   ; 178: int recv(int socket,void *buf,int len,int flag)\par
05E4: 0xA0A68A1D   ; 179: int send(int socket,const void *buf,int len,int flag)\par
05E8: 0xA0A6F68D   ; 17A: unsigned __int16 htons(unsigned __int16)\par
05EC: 0xA0A6F699   ; 17B: unsigned int htonl(unsigned int)\par
05F0: 0xA8E7498C   ; 17C: int *socklasterr(void)\par
05F4: 0xA099D0FF   ; 17D: void SetIDLETMR(int time_ms,int msg)\par
05F8: 0xA099D10F   ; 17E: void RestartIDLETMR(void)\par
05FC: 0xA099D11B   ; 17F: void DisableIDLETMR(void)\par
\par
0600: 0xA0A2DDE1   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)\par
0604: 0xA0A2DD39   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)\par
0608: 0xA0A2DD81   ; 182: int EDIT_GetFocus(void *gui)\par
060C: 0xA0A2D7F1   ; 183: int EDIT_GetUnFocus(void *gui)\par
0610: 0xA0A27643   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)\par
0614: 0xA00925C4   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)\par
0618: 0xA09B6315   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)\par
061C: 0xA09B7425   ; 187: int RequestLMANConnect(LMAN_DATA *)\par
0620: 0x00000084   ; 188: int ScreenW(void)\par
0624: 0x000000B0   ; 189: int ScreenH(void)\par
0628: 0x00000016   ; 18A: int HeaderH(void)\par
062C: 0x00000016   ; 18B: int SoftkeyH(void)\par
0630: 0xA009B6A8   ; 18C: void GBS_DelTimer(GBSTMR *)\par
0634: 0xA0A11E08   ; 18D: int available0(int sock)\par
0638: 0xA0E2B2BF   ; 18E: void GPRS_OnOff(int on, int _1)\par
063C: 0xA09A089F   ; 18F: int GetCurMenuItem(void *gui)\par
\par
0640: 0xA009A858   ; 190: void MutexCreate(MUTEX *mtx)\par
0644: 0xA009A9BC   ; 191: void MutexDestroy(MUTEX *mtx)\par
0648: 0xA009AD28   ; 192: void MutexLock(MUTEX *mtx)\par
064C: 0xA009AD84   ; 193: void MutexLockEx(MUTEX *mtx, int flag)\par
0650: 0xA009AE8C   ; 194: void MutexUnlock(MUTEX *mtx)\par
0654: 0xA09A2009   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)\par
0658: 0xA099D211   ; 196: void RefreshGUI(void)\par
065C: 0xA09A2069   ; 197: void *AllocMenuItem(void *gui)\par
0660: 0xA09A2181   ; 198: WSHDR *AllocMenuWS(void *gui, int len)\par
0664: 0xA09A1FDB   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)\par
0668: 0xA09A197B   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)\par
066C: 0xA0A2D7D9       ; 19B: void EDIT_SetFocus(void *gui, int item)\par
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)\par
0674: 0xA01D1608   ; 19D: long long getCpuUsedTime_if_ena(void)\par
0678: 0xA01D15AC   ; 19E: void StartCpuUsageCount(void)\par
067C: 0xA0132971   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)\par
\par
0680: 0xA0132AA7   ; 1A0: int inflate(z_streamp strm, int flush)\par
0684: 0xA01338E3   ; 1A1: int inflateEnd(z_streamp strm)\par
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)\par
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)\par
;690:              ; 1A4: int GetDisconnectTime(void)\par
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int csd_or_gprs)\par
0698: 0xA0093388   ; 1A6: int IsTimerProc(GBSTMR *)\par
069C: 0xA097F4E5   ; 1A7: char *Get_CC_NC()\par
06A0: 0xA0136BD1   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)\par
06A4: 0xA0137C23   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)\par
06A8: 0xA013729B   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)\par
06AC: 0xA0137D3D   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)\par
06B0: 0xA0136629   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)\par
06B4: 0xA0137D3D   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)\par
06B8: 0xA0139849   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)\par
06BC: 0xA0137D21   ; 1AF: void png_set_strip_16(png_structp png_ptr)\par
\par
06C0: 0xA01397DF   ; 1B0: void png_set_packing(png_structp png_ptr)\par
06C4: 0xA0137D75   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)\par
06C8: 0xA0135FFD   ; 1B2: int png_check_sig(png_bytep sig, int num)\par
06CC: 0xA0A1F69B   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,const char *pen)\par
06D0: 0xA0A1D6F7   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,const char *pen,const char *brush)\par
06D4: 0xA0000001   ; 1B5: int isnewSGold(void)\par
06D8: 0xA0A69491   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)\par
06DC: 0xA09C0095   ; 1B7: unsigned int str2ip(const char *)\par
;6E0:              ; 1B8: void *EXT_TOP(void)\par
;6E4:              ; 1B9: void *PNG_TOP(void)\par
;6E8:              ; 1BA: void *LIB_TOP(void)\par
;6EC:              ; 1BB: void *DATA_N_SFB(void)\par
06F0: 0xA126EF87   ; 1BC: void SHA1_Init(SHA_CTX *c)\par
06F4: 0xA126EC6B   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)\par
06F8: 0xA126EE67   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)\par
06FC: 0xA0F96A85   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)\par
\par
0700: 0xA0F96B13   ; 1C0: void RSA_free (RSA *r)\par
0704: 0xA0F96CDF   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)\par
0708: 0xA0F93277   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)\par
070C: 0xA099E82D   ; 1C3: void SetMenuItemCount(void *gui,int n)\par
0710: 0xA099E795   ; 1C4: void SetCursorToMenuItem(void *gui,int n)\par
0714: 0xA0A46004   ; 1C5: int GetFontYSIZE(int font)\par
0718: 0xA0A2DD69   ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)\par
071C: 0xA0A2DD75   ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)\par
0720: 0xA0A2820D   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)\par
0724: 0xA0A27293   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)\par
0728: 0xA0A27287   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)\par
072C: 0xA0A2727B   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)\par
0730: 0xA0A27265   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)\par
0734: 0xA0A2724D   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)\par
0738: 0xA0A27335   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)\par
073C: 0xA02A63FF   ; 1CF: TREGEXPLEXT *get_regextpnt_by_uid(int uid)\par
\par
0740: 0xA02A62B7   ; 1D0: int GetExtUid_ws(WSHDR * ext)\par
0744: 0xA0A2DF09   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n)\par
0748: 0xA0A2DF15   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)\par
074C: 0xA0A2DDB1   ; 1D3: int EDIT_GetCursorPos(void *gui)\par
0750: 0xA0A2DDBD   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)\par
0754: 0xA01DF150   ; 1D5: char *Get_Phone_Info(int InfoIndex)\par
0758: 0xA0137D3D   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)\par
075C: 0xA01398AB   ; 1D7: void png_set_invert_mono(png_structp png_ptr)\par
0760: 0xA0A2DE11   ; 1D8: int EDIT_IsMarkModeActive(void *gui)\par
0764: 0xA0A2DE1D   ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)\par
0768: 0xA05A9BC9   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)\par
076C: 0xA8ED6C90   ; 1DB: PDU *IncommingPDU(void)\par
0770: 0xA01F6B17   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)\par
0774: 0xA01F6B39   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)\par
0778: 0xA0A2DED1   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)\par
077C: 0xA0A2DF7F   ; 1DF: void *EDIT_GetUserPointer(void *gui)\par
\par
0780: 0xA09A3CD3   ; 1E0: void *MenuGetUserPointer(void *gui)\par
0784: 0xA096AFFD   ; 1E1: int GetSymbolWidth(int wchar,int font)\par
0788: 0xA01F76E9   ; 1E2: int ws_2utf8(WSHDR *from, char *to, int *result_length, int max_len)\par
078C: 0xA01F77A1   ; 1E3: void utf8_2ws(WSHDR *ws, const char *utf8_str, unsigned int maxLen)\par
0790: 0xA099B85F   ; 1E4: int GetPicNByUnicodeSymbol(int wchar)\par
0794: 0xA0A2E031   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), void *user_pointer, int to_add)\par
0798: 0xA09A0D59   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)\par
079C: 0xA0AE6FAC   ; 1E7: char *GetLastJavaApplication()\par
07A0: 0xA0A18EA4   ; 1E8: int IsNoJava()\par
;7A4:              ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type)\par
07A8: 0xA099B513   ; 1EA: int GetMaxDynIcon(void)\par
07AC: 0xA8E4BFA6   ; 1EB: char *RAM_IMSI()\par
07B0: 0xA099B517   ; 1EC: void FreeDynIcon(int picture)\par
07B4: 0xA099B677   ; 1ED: int IsDynIconBusy(int picture)\par
;7B8:              ; 1EE: ProgressCalculate(int current, int total)\par
07BC: 0xA099B579   ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap)\par
\par
;7C0:              ; 1F0: filecopy\par
;7C4:              ; 1F1: filecopy_op_announce\par
07C8: 0xA01DECDC   ; 1F2: devmenu_config_IsCheckboxOff\par
07CC: 0xA00A8954   ; 1F3: unsigned int GetSessionAge()\par
07D0: 0xA8E4C36C   ; 1F4: char *RamServiceProviderName()\par
07D4: 0xA14176ED   ; 1F5: int sscanf(const char *, const char *, ...)\par
07D8: 0xA099B6C3   ; 1F6: IMGHDR *GetPitAdrBy0xE200Symbol(int uni_symbol)\par
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)\par
07E0: 0xA0323969   ; 1F8: int GetPlayStatus(void)\par
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)\par
07E8: 0xA8D859AD   ; 1FA: char *RamVolumeStep()\par
07EC: 0xA8D9F678   ; 1FB: char *RamMediaIsPlaying()\par
07F0: 0xA0994B8B   ; 1FC: void CloseCSM(int id)\par
07F4: 0xA0A1D6DB   ; 1FD: SetProp2Square_v2\par
07F8: 0xA8D87F4F   ; 1FE: char *RamLighterPower()\par
07FC: 0xA03431DB   ; 1FF: void MEDIA_PLAYLAST()\par
\par
0800: 0xA0067301   ; 200: ScreenShoot\par
0804: 0xA0A1DEA5   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int flags, IMGHDR *Image, int bleed_x, int bleed_y)\par
0808: 0xA0A23E67   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)\par
080C: 0xA0A1F54B   ; 203: void SetPixel(int x,int y,char *color)\par
0810: 0xA0A1C563   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)\par
0814: 0xA0A1D6B5   ; 205: SetProp2Square_v1\par
0818: 0xA14171A9   ; 206: void srand(unsigned int seed)\par
081C: 0xA0A2375B   ; 207: void DrawScrollString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int xdisp, int font, int text_attribute, const char *Pen,const char *Brush)\par
0820: 0xA096B01B   ; 208: int Get_WS_width(WSHDR *ws, int font)\par
0824: 0xA0994AC9   ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)\par
0828: 0xA0A2DE65   ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)\par
082C: 0xA0A2DE7D   ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)\par
0830: 0xA0A2DE95   ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)\par
0834: 0xA0A2DEAD   ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)\par
0838: 0xA0A275C3   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)\par
083C: 0xA0A274A9   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)\par
\par
0840: 0xA099CF21   ; 210: int GetCurGuiID(void)\par
0844: 0x000061E8   ; 211: GBS_Cmd_4209_RefreshScreensaver\par
;848:              ; 212: int CardExplGetCurItem(void *csm)\par
;84C:              ; 213: void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)\par
0850: 0xA01F7235   ; 214: void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)\par
0854: 0xA01F72C5   ; 215: void wsRemoveChars(WSHDR *ws,int from,int to)\par
0858: 0xA098DA8F   ; 216: void wstrcarprintf(WSHDR *,const char *format,...)\par
085C: 0xA0665B05   ; 217: int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)\par
0860: 0xA09A4F73   ; 218: void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int unk0or1,int n)\par
0864: 0xA09A539B   ; 219: void *AllocMLMenuItem(void *data)\par
0868: 0xA0A2DF9D   ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)\par
086C: 0xA0A2DFA9   ; 21B: void EDIT_RemoveTextInvert(void *gui)\par
0870: 0x00A2DFD9   ; 21C: void EDIT_IsBusy(void *gui)\par
0874: 0xA0978DA9   ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))\par
0878: 0xA099D15B   ; 21E: void FocusGUI(int id)\par
087C: 0xA099D16B   ; 21F: void UnfocusGUI(void)\par
\par
;880:              ; 220: IsSliderClosed\par
0884: 0xA01D0DB8   ; 221: void SetCpuClockLow\par
0888: 0xA01D0DA0   ; 222: void SetCpuClockTempHi\par
;88C:              ; 223: IsMediaPlayerInBackground\par
;890:              ; 224: CloseMediaPlayer\par
0894: 0xA027BF3C   ; 225: int PlayMelody_ChangeVolume(int handle,int volume)\par
0898: 0xA027C9EC   ; 226: int PlayMelody_StopPlayback(int handle)\par
089C: 0xA027CA8C   ; 227: int PlayMelody_PausePlayback(int handle)\par
08A0: 0xA027CABC   ; 228: int PlayMelody_ResumePlayBack(int handle)\par
08A4: 0xA14180C8   ; 229: void longjmp(jmp_buf, int)\par
08A8: 0xA098092D   ; 22A: void FreeGSMTXTpkt(void *pkt)\par
08AC: 0xA02D8651   ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)\par
08B0: 0xA02D7F43   ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)\par
08B4: 0xA02D8041   ; 22D: pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)\par
08B8: 0xA0320757   ; 22E: OpenExplorer(ExplOpenDesc *)\par
08BC: 0xA8DA866C   ; 22F: TDateTimeSettings *RamDateTimeSettings\par
\par
08C0: 0xA09682A1   ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone)\par
08C4: 0xA8DA8614   ; 231: TAppointment *RamAppointment\par
08C8: 0xA0092848   ; 232: GBS_DestroyMessage(GBS_MSG *)\par
08CC: 0xA065435B   ; 233: void GetAllEmail()\par
08D0: 0xA0664169   ; 234: int GetLunarDate(struct DateInfo* pdate, struct DateInfo* pLdate)\par
08D4: 0xA0687711   ; 235: int GetLunarYearID(int year)\par
08D8: 0xA0687727   ; 236: int GetLunarAnimal(int year)\par
;8DC:              ; 237: char *RamIconBar()\par
08E0: 0xA09808D7   ; 238: void SendAutoUSSDack(void)\par
08E4: 0xA01E5308   ; 239: int EEFullDeleteBlock(unsigned int block,int cepid,int msg)\par
08E8: 0xA01E5474   ; 23A: int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)\par
;8EC:              ; 23B: void DisableIconBar(int disable)\par
;8F0:              ; 23C: int SetCurrentGPRSProfile(int profile)\par
08F4: 0xA10414B5   ; 23D: void MD5_Init(MD5_CTX *c)\par
08F8: 0xA1041125   ; 23E: void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)\par
08FC: 0xA10413BD   ; 23F: void MD5_Final(unsigned char *md, MD5_CTX *c)\par
\par
0900: 0xA1041E45   ; 240: char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)\par
0904: 0xA09684BF   ; 241: void SetDateTime(TDate *, TTime *)\par
;908:              ; 242: void gb2ws(WSHDR *ws, const char *s, int len)\par
;90C:              ; 243: void ws2gb(WSHDR *ws, char *s, int len)\par
0910: 0xA0F874A1   ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)\par
0914: 0xA0F87551   ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)\par
0918: 0xA036655B   ; 246: int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder)\par
091C: 0xA0DD0D5D   ; 247: NetOff()\par
0920: 0xA8D86BCE   ; 248: char *RamFormatTrack()\par
0924: 0xA8D86E36   ; 249: char *RamFreq()\par
0928: 0xA8D86FEE   ; 24A: char *RamChannel()\par
092C: 0xA09A256B   ; 24B: void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)\par
0930: 0xA02F0755   ; 24C: int GetPeripheryState(int device, int check_state)\par
0934: 0xA027CAEC   ; 24D: int PlayMelody_SetPosition(int handle, int pos_ms)\par
0938: 0xA02CD29C   ; 24E: void *GetPlayObjById(int handle)\par
093C: 0xA0DC5AA0   ; 24F: int GetPlayObjPosition(void *playobj_3D0, int *pos_ms)\par
\par
0940: 0xA0DC5838   ; 250: int GetPlayObjDuration(void *playobj_3D0, int *pos_ms)\par
;944:              ; 251: char *RamDataSendFName()\par
;948:              ; 252: char *RamDataReceiveFName()\par
094C: 0xA8E63CBA   ; 253: char *RamLastCallNum()\par
0950: 0xA032077B   ; 254: int StartNativeExplorer(NativeExplorerData* data)\par
0954: 0xA09A3CCF   ; 255: void MenuSetUserPointer(void *gui,void *user_pointer)\par
0958: 0xA060C35F   ; 256: isSetupTheme()\par
095C: 0xA058BCB9   ; 257: isSendReceiveFile()\par
0960: 0xA099AF09   ; 258: int CalcBitmapSize(short w,short h, char typy)\par
0964: 0xA0DD8C6C   ; 259:  __arm HObj Obs_CreateObject(int uid, int unk1, int unk2, int unk3, int unk4, int unk6,unsigned int *ErrorNumber)\par
0968: 0xA0F086D8   ; 25A:  __arm Obs_DestroyObject(HObj hObj)\par
096C: 0xA0DD6C50   ; 25B:  __arm int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path)\par
0970: 0xA0E086BC   ; 25C:  __arm int Obs_GetInputImageSize (HObj hObj, short *w, short *h)\par
0974: 0xA0E08838   ; 25D:  __arm int Obs_SetOutputImageSize (HObj hObj, short w, short h)\par
0978: 0xA0DC892C   ; 25E:  __arm int Obs_Start(HObj hObj)\par
097C: 0xA0E099B0   ; 25F:  __arm int Obs_Output_GetPictstruct(HObj hObj, IMGHDR **img)\par
\par
0980: 0xA0E09570   ; 260:  __arm int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h)\par
0984: 0xA0E08F80   ; 261:  __arm int Obs_SetRotation(HObj hObj, int angle)\par
0988: 0xA0DC858C   ; 262:  __arm int Obs_GetInfo (HObj hObj, int unk_0or1)\par
098C: 0xA0E08D2C   ; 263:  __arm Obs_SetScaling (HObj hObj, int unk5)\par
0990: 0xA0DDA2EC   ; 264: __arm int Obs_TranslateMessageGBS (GBS_MSG *msg, OBSevent *event_handler)\par
0994: 0xA0DC8C80   ; 265: __arm int Obs_Pause (HObj hObj)\par
0998: 0xA0DC8FDC   ; 266: __arm int Obs_Resume (HObj hObj)\par
099C: 0xA0DC8E08   ; 267: __arm int Obs_Stop (HObj hObj)\par
09A0: 0xA0DC87A0   ; 268: __arm int Obs_Prepare (HObj hObj)\par
09A4: 0x00E77678   ; 269: __arm int Obs_SetRenderOffset (HObj hObj,short x,short y)\par
09A8: 0xA0DC59DC   ; 26A: __arm int Obs_SetPosition (HObj hObj,int ms)\par
09AC: 0xA0E01080   ; 26B: __arm int Obs_Mam_SetPurpose (HObj hObj,int ms)\par
09B0: 0xA0E00B68   ; 26C: __arm int Obs_Sound_SetVolumeEx (HObj hObj, char vol, char delta)\par
09B4: 0xA0E01842   ; 26D: __arm int Obs_Sound_GetVolume (HObj hObj, char *vol)\par
09B8: 0xA0E01080   ; 26E: __swi __arm int Obs_SetPurpose (HObj hObj,char purpose)\par
\par
0A04: 0xA8E6F120   ; 281:  char *RamIsRunJava()\par
0A08: 0xA8E52428   ; 282:  char *RamIsRunCamera()\par
0A0C: 0xA0310891   ; 283: int runMidletLinkablely(const char *midlet_name, WSHDR *filename)\par
0A10: 0xA0E2B2A7   ; 284: int IsGPRS()\par
0A14: 0xA0E2B2AF   ; 285: int IsEDGE()\par
0A18: 0xA0E2275F   ; 286: int GetSMSState()\par
0A1C: 0xA02D8A97   ; 287: int BT_GetLocVisibility()\par
0A20: 0xA0F520BB   ; 288: int GetCurrAudioPath()\par
0A24: 0xA0EAA5ED   ; 289: int isDecryption()\par
;A28:              ; 28A: char *RamIsFileCache()\par
0A2C: 0xA8E91D90   ; 28B: __swi __arm char *RamTotalHeapSize()\par
0A30: 0xA8E91E00   ; 28C: __swi __arm char *RamTemporaryHeapSize()\par
0A34: 0xA8DA2B88   ; 28D: __swi __arm char *RamBTNameDevice()\par
0A38: 0xA8DA1D74   ; 28E: __swi __arm char *RamActiveGPRSProfileName()\par
\par
0A40: 0xA8E7A308   ; 290: __swi __arm char *RamCallState()\par
0A44: 0xA029FBA4   ; 291: __swi __arm int RefreshAlarmClock()\par
0A48: 0xA8EE25B4   ; 292: __swi __arm char *RamIsAlarmAutorepeatOn()\par
0A4C: 0xA8EE25BC   ; 293: __swi __arm char *RamAlarmclockHour()\par
0A50: 0xA8EE25BD   ; 294: __swi __arm char *RamAlarmclockMinute()\par
0A58: 0xA028B201   ; 296: __thumb void getProfileNameByN(WSHDR *ws, int n, int _0);\par
0A5C: 0xA8EDB234   ; 297: __swi __arm char *RamIsSoundRecord()\par
0A60: 0xA8EDB290   ; 298: __swi __arm char *RamIsSoundRecordQuality()\par
0A64: 0xA8DF83D8   ; 299: __swi __arm char *RamExtendedCameraState()\par
0A68: 0xA0294D61   ; 29A: SwitchAudioToBTHeadset(TypeOfHeadset, unk_0xFFFE0001)\par
0A6C: 0xA029BD81   ; 29B: GetTypeOfBTHeadset\par
0A70: 0xA8DA833C   ; 29C: __swi __arm char *RamInputLanguage()\par
0A74: 0xA8DB430C   ; 29D: __swi __arm char *RamDisplayLanguage()\par
0A8C: 0xA09A0DFD   ; 2A3: __swi __arm void UpdateMenuCursorItem(void *gui, int n)\par
0A90: 0xA099DC5F   ; 2A4: __swi __arm void *GetMenuGUI(void *malloc_adr, void *mfree_adr)\par
0A94: 0xA09A4B8D   ; 2A5: __swi __arm void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)G\par
0A98: 0xA099D265   ; 2A6: __swi __arm void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)\par
0A9C: 0xA09A1BBF   ; 2A7: __swi __arm void SetMenuToGUI(void *gui, const void *menu_desc)\par
0AA0: 0xA099EA2F   ; 2A8: __swi __arm int GetMenuItemCount(void *gui)\par
0AA4: 0xA099C403   ; 2A9: __swi __arm int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)\par
0AA8: 0xA099C375   ; 2AA: __swi __arm int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)\par
0AAC: 0xA09A4A33   ; 2AB: __swi __arm void *GetPopupUserPointer(void *gui)\par
0AB0: 0xA0B1A007   ; 2AC: __swi __arm int DeleteSMS(int index, int n)\par
0AB4: 0xA0B1A2E5   ; 2AD: __swi __arm int SetSmsStatus(int index, int type)\par
0AB8: 0xA09A288D   ; 2AE: __swi __arm void *GetHeaderPointer(void *gui)\par
0ABC: 0xA0A3C3A5   ; 2AF: __swi __arm void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)\par
\par
0AC0: 0xA09A388D   ; 2B0: __swi __arm void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)\par
0AC4: 0xA8E6C618   ; 2B1: __swi __arm SMS_DATA_ROOT *SmsDataRoot()\par
0AC8: 0xA0E34871   ; 2B2: __swi __arm int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id)\par
#pragma disable old_equal_ff\par
+0\par
\par
;********************************************************************************\par
\par
}
 