; C7C v24 lg8 - Patch made by "Smelter" ? avkiev
; http://avkiev.kiev.ua/Siemens/Smelter/Smelter.htm
;********************************************************************************

;Library

;2010-2-5

+0FD4000
#pragma enable  old_equal_ff
0000: 0xA0002070   ;   0: SWI0
0004: 0xA0002070   ;   1: SWI1
0008: 0xA0002070   ;   2: SWI2
000C: 0xA0002070   ;   3: SWI3
0010: 0xA0002070   ;   4: SWI4
0014: 0xA020EB99   ;   5: DecToHex
0018: 0xA0780758   ;   6: GetAkku
001C: 0xA0738271   ;   7: GetLP
0020: 0xA09BFDD8   ;   8: SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA09D7408   ;   9: SwitchPhoneOff
0028: 0xA09BBC08   ;   A: fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;002C: 0x00000000   ;   B: fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
;0030: 0x00000000   ;   C: fwrite(int FileHandler, void * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA09BBB5C   ;   D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA09BBB8C   ;   E: fflush
003C: 0xA09BBBBC   ;   F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA09BB9EC   ;  10: mkdir
0044: 0xA08A5B1B   ;  11: OpenReadCloseFile
0048: 0xA09BB908   ;  12: GetFileAttrib
004C: 0xA09BBA84   ;  13: SetFileAttrib
0050: 0xA0203C24   ;  14: malloc(unsigned int size)
0054: 0xA0203C8C   ;  15: mfree(void *)
0058: 0xA0DE2FAD   ;  16: sprintf(char *buf, const char *str, ...)
005C: 0xA0DE4895   ;  17: strcat(char *,const char *)
0060: 0xA0DE48B5   ;  18: strchr(const char *,int)
0064: 0xA0DE48D8   ;  19: strcmp(const char *,const char *)
0068: 0xA0DE4975   ;  1A: strcpy(char *dest,const char *source)
006C: 0xA0DE49F5   ;  1B: strlen(char *)
0070: 0xA073BCCD   ;  1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA073BC81   ;  1D: wsInsertChar
0078: 0xA00DF781   ;  1E: GetPITaddr
007C: 0xA02C64B7   ;  1F: DrawMainScreen

0080: 0xA0336C7F   ;  20: DrawScreenSaver
0084: 0xA00DF8C7   ;  21: GetImgHeight
0088: 0xA00DF8D7   ;  22: GetImgWidth
008C: 0xA02A4B0D   ;  23: DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA00A2171   ;  24: DrawImage2
0094: 0xA02A4AE7   ;  25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA00A20B1   ;  26: DrawImgBW
009C: 0xA02A4467   ;  27: AddIconToIconbar
00A0: 0xA0780AF0   ;  28: getEELiteMaxID
00A4: 0xA073F028   ;  29: getEEFullMaxID
00A8: 0xA0780CAC   ;  2A: GetEELiteBlockAddress
00AC: 0xA0780D94   ;  2B: getEELiteBlockSizeVersion
00B0: 0xA073EC6C   ;  2C: getEEFullBlockSizeVersion
;0B4:              ;  2D: StartWriteEELiteBlock
;0B8:              ;  2E: FinishWriteEELiteBlock
;0BC:              ;  2F: DeleteEELiteBlock

00C0: 0xA0780E5C   ;  30: WriteEELiteBlock
00C4: 0xA0DE4B3D   ;  31: strrchr
00C8: 0xA02F2184   ;  32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA02E7EB8   ;  33: PlaySound2
00D0: 0xA02B0064   ;  34: PlaySoundLoop
00D4: 0xA050D089   ;  35: AlarmClockRing
00D8: 0xA04B24A9   ;  36: GetATCmdString
00DC: 0xA0514B63   ;  37: OriginalATCGSN
00E0: 0xA04B1E45   ;  38: PostAtCommand
00E4: 0xA04B357B   ;  39: SendATAnswerStr
00E8: 0xA08A954D   ;  3A: mfree_high
00EC: 0xA0DE3C89   ;  3B: MemChr
00F0: 0xA09BBC88   ;  3C: SetFileSize
00F4: 0xA04B5FE9   ;  3D: editOrNewTXTModule
00F8: 0xA07399B5   ;  3E: LoadProcesses
00FC: 0xA00A2AED   ;  3F: GetPaletteAdrByColorIndex

0100: 0xA0396EAF   ;  40: GetVibraStatus
0104: 0xA0792977   ;  41: GetProvider
0108: 0xA03373B9   ;  42: IsScreenSaver
010C: 0xA00B217F   ;  43: IsUnlocked
0110: 0xA07BFE79   ;  44: TempLigntOn
0114: 0xA033D974   ;  45: GetWavLen
0118: 0xA0336839   ;  46: HasNewSMS
;11C:              ;  47: HasFlashSMS
0120: 0xA04B7E87   ;  48: ReadNewSMS
0124: 0xA0332F43   ;  49: ReadFlashSMS
;128:              ;  4A: PlayFile
012C: 0xA07ED9A4   ;  4B: StartMidlet
0130: 0xA078EC59   ;  4C: GetMissedCallsCount
0134: 0xA020A870   ;  4D: CallAfterTimer(void *htimer, long ms, void ptr())
0138: 0xA0098D7B   ;  4E: __thumb int MsgBoxError(int flag, int LgpId)
013C: 0xA0098DD9   ;  4F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA0098DE3   ;  50: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA010DED9   ;  51: GetNetAccessMode
0148: 0xA09C0484   ;  52: GetIlluminationDataTable
014C: 0xA0DE3CAD   ;  53: memcmp(void *m1,void *m2,int n)
0150: 0xA020EBD5   ;  54: StrToInt
0154: 0xA0396EC5   ;  55: SwitchVibraOnOff
0158: 0xA0FCF421   ;  56: PlayVibra
015C: 0xA020A97C   ;  57: IsCallAfterTimerStillRunning
0160: 0xA0219F1C   ;  58: ClearMemory
0164: 0xA0DE4178   ;  59: memcpy(void *dest,const void *source,int cnt)
0168: 0xA009786B   ;  5A: KeypressOn
016C: 0xA00B1FC1   ;  5B: KeypressOff
0170: 0xA0397195   ;  5C: GetCPUClock()
0174: 0xA039A56F   ;  5D: GetCPULoad()
0178: 0xA039719D   ;  5E: GetMMIMemUsed
017C: 0xA0203C98   ;  5F: GetNonPermMemAvail

0180: 0xA03970B1   ;  60: ShowMainMenu
0184: 0xA039A6BF   ;  61: ShowNativeMenu
;188:              ;  62: SetVibraStatus             
018C: 0xA02C496F   ;  63: MS_Wallpaper_Flush
;190:              ;  64: TriggerUpdate
0194: 0xA07903E5   ;  65: EndCall
0198: 0xA074813B   ;  66: EndCallBusy
019C: 0xA02C4B39   ;  67: IsDirectCallActive
01A0: 0xA02C202D   ;  68: GetScreenSaverRAM
01A4: 0xA020BA78   ;  69: LockSched(void)
01A8: 0xA020BB00   ;  6A: UnlockSched(void)
01AC: 0xA09BB940   ;  6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA09BB97C   ;  6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA09BB8C8   ;  6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA00CEAAB   ;  6E: IsCalling
01BC: 0xA02C519F   ;  6F: RefreshGPRSTraffic

01C0: 0xA02C51BD   ;  70: GetGPRSTrafficPointer
01C4: 0xA00A1B57   ;  71: DrawRoundRect
01C8: 0xA078AE8B   ;  72: SetCurrentSecondOfCall
01CC: 0xA00CF2C3   ;  73: GetTypeOfCall
01D0: 0xA031A0AB   ;  74: GetFunctionPointer
01D4: 0xA00A4511   ;  75: StoreXYWHtoRECT
01D8: 0xA00DC339   ;  76: SetWindowText
01DC: 0xA00D6B27   ;  77: set2color_byPaletteAdr
01E0: 0xA075683F   ;  78: GetTimeFormat
01E4: 0xA00A34CB   ;  79: DrawObject
01E8: 0xA00D6BBD   ;  7A: ClearWindowBuffer
01EC: 0xA02BC8A1   ;  7B: GetProfileFilter
01F0: 0xA09C6150   ;  7C: SetVibration(unsigned int power)
01F4: 0xA00CE4C5   ;  7D: IsIncognitoCall
01F8: 0xA00E9171   ;  7E: Rand
;1FC:              ;  7F: IsPlayerOn        

0200: 0xA050D82D   ;  80: ShowCallList(int list, int zero)
0204: 0xA0DE4408   ;  81: HexToDec
;208:              ;  82: GetCurrentTrackFilename    
020C: 0xA02D342C   ;  83: GetPathOfFoundFile
0210: 0xA09BBABC   ;  84: GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0208375   ;  85: StrCmpNoCase
0218: 0xA073EB94   ;  86: ReadEEPROMData
021C: 0xA073ECD8   ;  87: WriteEEPROMData
;220:              ;  88: GetAccessoryType           
0224: 0xA07383A5   ;  89: GetLangMesIntoWS
0228: 0xA09BB858   ;  8A: GetFreeFlexSpace
022C: 0xA09BBE1C   ;  8B: GetTotalFlexSpace
0230: 0xA029F818   ;  8C: RegExplorerExt(REGEXPLEXT const *)
;234:              ;  8D: GetProfileName            
0238: 0xA09BBA1C   ;  8E:  int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA09BBA54   ;  8F:  int rmdir(char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA09BBCF8   ;  90:  int truncate (int FileHandler, int length, int *errornumber)
0244: 0xA09BB9BC   ;  91:  int isdir(char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA09BBABC   ;  92:  __arm int * calloc(size_t nelem, size_t elsize)
024C: 0xA09D7414   ;  93: __arm RebootPhone
0250: 0xA029F8DC   ;  94: __arm int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
;254:              ;  95: int UnRegExplorerExt(REGEXPLEXT const *)        
;258:              ;  96: GetWavLenByContent
;25C:              ;  97: CreatePath
;260:              ;  98: PlaySoundVibra
;264:              ;  99: __arm int PlayMelodyInMem (char Unk_0x11, void *MelAddr, int MelSize, int unk2_0xFFFF, int Unk3_0, int Unk4_0)
0268: 0xA07850E0   ;  9A: __arm int ChangeVolume (unsigned char Volume)
026C: 0xA8719E34   ;  9B: Audio params addr
;270:              ;  9C: 
;274:              ;  9D: 
;278:              ;  9E: 
027C: 0xA00A1A23   ;  9F: DrawRect

0280: 0xA073B22F   ;  A0: wsprintf(WSHDR *,const char *format,...)
0284: 0xA0208455   ;  A1: wstrcpy
0288: 0xA073B7BF   ;  A2: Unicode_GetCharByPosition
028C: 0xA073F968   ;  A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA073BA3F   ;  A4: AllocWS_2(int len)
0294: 0xA073B371   ;  A5: FreeWS_2(WSHDR *wshdr)
0298: 0xA02C5165   ;  A6: void ResetGPRSTraffic()
029C: 0xA02C4FB1   ;  A7: char IsGPRSEnabled()
02A0: 0xA00EB4A5   ;  A8: char IsGPRSConnected()
02A4: 0xA00B27A3   ;  A9: void KbdLock()
02A8: 0xA0FCF001   ;  AA: OpenWriteCloseFile
02AC: 0xA0002070   ;  AB: SWI_AB
02B0: 0xA0FCF1B1   ;  AC: DrawText
02B4: 0xA0FCF0A1   ;  AD: StrAnsi2Uni
02B8: 0xA0FCF0C1   ;  AE: StrUni2Ansi
02BC: 0xA03194BD   ;  AF: Hex2Int

02C0: 0xA0FCF351   ;  B0: DrawPicWithCanvas
02C4: 0xA0FCF371   ;  B1: DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ;  B2: GetBuildCanvas
02CC: 0xA0FCF301   ;  B3: Seconds2iTime
02D0: 0xA07559C3   ;  B4: GetDateTime(TDate *, TTime *)
02D4: 0xA020D9F3   ;  B5: GetWeek(TDate*)
02D8: 0xA02BC25D   ;  B6: GetProfile()
02DC: 0xA02BC10B   ;  B7: SetProfile(char)
02E0: 0xA0DE42EC   ;  B8: dwMODdw
02E4: 0xA00B2407   ;  B9: KbdUnlock
02E8: 0xA0203C30   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA0DE42D4   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA0219FE8   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0DE43C4   ;  BD: int DivBy10(int divident)
02F8: 0xA0FC0C91   ;  BE: RunScaner
02FC: 0xA0FC3001   ;  BF: SpellTime

0300: 0xA0FC7601   ;  C0: MiniGPS
0304: 0xA0FC0C51   ;  C1: RunDispatcher
0308: 0xA0FC12A1   ;  C2: GetAllPatchesByInject
030C: 0xA0FCF3A1   ;  C3: ProcessFiles
0310: 0xA0FC0C01   ;  C4: GetBuffer
;314:              ;  C5: PIT_Manager_Core
0318: 0xA077EBE8   ;  C6: GetAkkuCapacity()
;31C:              ;  C7: CallLibFunByNumber
0320: 0xA84B9224   ;  C8: RamCap
0324: 0xA84B9226   ;  C9: RamLS
0328: 0xA84C5C40   ;  CA: RamNet
032C: 0xA84C5C46   ;  CB: RamNetRX
0330: 0xA84DE570   ;  CC: RamMissedCalls      //untested    
0334: 0xA84E42C8   ;  CD: RamMissedSMS
0338: 0xA00013E7   ;  CE: RamDateTime
033C: 0xA857AF44   ;  CF: RamAlarm

0340: 0xA850A864   ;  D0: RamAccPoint         //untested
0344: 0xA84D33A0   ;  D1: RamScreensaver
0348: 0xA8493D4C   ;  D2: RamAutoTime
034C: 0xA84D33A8   ;  D3: RamStby
;350:              ;  D4: RamMissedMes
0354: 0xA84AB808   ;  D5: RamIsLocked
0358: 0xA84927B4   ;  D6: RamNetOnline
035C: 0xA84E6A12   ;  D7: RamScreenBrightness
0360: 0xA8493BBD   ;  D8: RamMenuAnywhere
0364: 0xA84C2878   ;  D9: RamShutdownMode
0368: 0xA850A8CC   ;  DA: RamIsShutdown
036C: 0xA848FBD0   ;  DB: RamMainscreenAccuIcon
0370: 0xA85777CC   ;  DC: __swi __arm int *RamRandSeed(void)
0374: 0xA899F2BC   ;  DD: RamCurrentTrack
0378: 0xA84C3A50   ;  DE: RamIsSimPresent
037C: 0xA84AB720   ;  DF: RamPressedKey

0380: 0xA84A0194   ;  E0: RamScreenBuffer
;384:              ;  E1: unsigned int RamMPlayer_CtrlCode()
0388: 0xA84AD3D4   ;  E2: RamKeyBuffer
038C: 0xA84D2F6A   ;  E3: RamProfileNum
0390: 0xA8708900   ;  E4: FreeRAM
0394: 0x000012B3   ;  E5: LP_MonthsShort
0398: 0x00000447   ;  E6: Pic_Big0
039C: 0x000003CE   ;  E7: Pic_Little0
03A0: 0x0000045D   ;  E8: Pic_Extra
03A4: 0x000004A3   ;  E9: Pic_Profiles
03A8: 0x000002A9   ;  EA: Pic_Vibra
03AC: 0x0000039C   ;  EB: Pic_Call
03B0: 0x000004AA   ;  EC: Pic_AdvNet
03B4: 0x000011A7   ;  ED: LP_MonthsLong
03B8: 0x00000400   ;  EE: LP_Weekdays
03BC: 0x00000455   ;  EF: Pic_Calendar

03C0: 0x000004C2   ;  F0: Pic_AccuGraph
03C4: 0xA02C62C9   ;  F1: BuildCanvas
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
03D0: 0xA0DE83A5   ;  F4: size_t strspn(const char *s1, const char *s2)
03D4: 0xA84A00E4   ;  F5: Ram_LCD_Overlay_Layer
03D8: 0xA8494A80   ;  F6: RAM_LCD_Layer_Base_Ptr
;3DC:              ;  F7: 
03E0: 0xA0FD0050   ;  F8: Additional_PIT_address
03E4: 0x000004A3   ;  F9: Additional_PIT_start
03E8: 0x000006A4   ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
03F0: 0xA0FC0A00   ;  FC: PictureRelocationTable
03F4: 0x0000F000   ;  FD: PictureRelocationBase
03F8: 0x00001E1E   ;  FE: NextPictureMagic
03FC: 0xA0FD4000   ;  FF: AddrLibrary()

0400: 0xA020A0E0   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA020907C   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA020977C   ; 102: GBS_AcceptMessage(void)
040C: 0xA02094A4   ; 103: GBS_ClearMessage(void)
0410: 0xA0209674   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA020A550   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA8578A80   ; 106: CSM_root()
041C: 0xA00D37A1   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA00D37B3   ; 108: FindCSMbyID(int id)
0424: 0xA00D3877   ; 109: DoIDLE(void)
0428: 0x00000000   ; 10A: GetConfig(unsigned int id)
042C: 0x00000000   ; 10B: GetMinAdrScan()
0430: 0x00000000   ; 10C: GetMaxAdrScan()
0434: 0x00000000   ; 10D: GetCI()
0438: 0x00000000   ; 10E: Vibration(unsigned int power, unsigned int duration)
;43C:              ; 10F: freeUSSD()

0440: 0xA0208455   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA0334C0D   ; 111: GetTypeUSSD()
0448: 0xA0334C1D   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA0DE49C5   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA0DE4A41   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0DE4A71   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA0DE4AC1   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0DE4B3D   ; 117: strrchr_2(const char *s,int c)
0460: 0xA0DE4B55   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA0DE4BD1   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA0DE4C4D   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0DE2F59   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA0DE3CAD   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA0DE4130   ; 11D: zeromem(void *dest,int n)
0478: 0xA0DE4178   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA073BB5F   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA073BB81   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA073BBA5   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA073BC39   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA073B48B   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA073B22F   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA073B343   ; 125: AllocWS(int len)
0498: 0xA073BE33   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA073B9D7   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA073B9F7   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA073B371   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA00A34CB   ; 12A: DrawObject_2(DRWOBJ *)
;04AC: 0xA0002070   ; 12B: AddKeybMsgHook(void *proc)
;04B0: 0xA0FFF073   ; 12C: AddKeybMsgHook_end(void *proc)
;04B4: 0xA0FFF0A3   ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA00A2AED   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA00A2B11   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA00A2B21   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA00A2B3F   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0DE4230   ; 132: _arm void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA00A4511   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA00A4527   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA00B40A3   ; 135: IsGuiOnTop(int id)
04D8: 0xA00B4217   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA00B4233   ; 137: CreateGUI(void *gui)
04E0: 0xA00B4251   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA00B42CD   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA00B42EF   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA00B4311   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA00B432F   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA00B434D   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA00B436F   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA00B44BB   ; 13F: DirectRedrawGUI(void)

0500: 0xA00B44D5   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA00B45B5   ; 141: PendedRedrawGUI(void)
0508: 0xA00F3A61   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA020A90C   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA020BFE4   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0207048   ; 145: GBS_GetCurCepid(void)
0518: 0xA020BA78   ; 146: LockSched_2(void)
051C: 0xA020BB00   ; 147: UnlockSched_2(void)
0520: 0xA0098D4D   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA00DC339   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA00D6BBD   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA00D6B27   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA00DC389   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA00B40C1   ; 14D: GetTopGUI(void)
0538: 0xA00B4D2F   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA00B4D59   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA00A1B57   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA00A2087   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA0098905   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0208F40   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA020700C   ; 154: KillGBSproc(int cepid)
0554: 0xA0D623AD   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0D61781   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA0D631E5   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0D61655   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0D624EB   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0D61DD1   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0D62173   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0D62DDB   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0D62E1D   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0D61A71   ; 15E: png_destroy_read_struct_2(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
057C: 0xA0D61CE7   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0D62973   ; 160:  png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
;584:              ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA0DE4E7C   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA00A8109   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA00A75E5   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA00A78F3   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA00A82A1   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA00A59AD   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA00DEEB1   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA00DEE55   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA00DEE5F   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA09BBAF4   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA073F848   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA08A1993   ; 16D:  __arm int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA079D9B3   ; 16E:  __arm int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA079E1A9   ; 16F:  __arm int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA07453D1   ; 170:  __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171:  __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int)
;5C8:              ; 172:  __arm void REDRAW(void)
05CC: 0xA09FFAE1   ; 173:  __thumb int socket(int af,int type,int protocol)
05D0: 0xA09FFDB3   ; 174:  __thumb int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA09FFC65   ; 175:  __thumb int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA09FFF2D   ; 176:  __thumb int closesocket(int socket)
05DC: 0xA09FFEA9   ; 177:  __thumb int shutdown(int socket,int how)
05E0: 0xA09FFFD7   ; 178:  __thumb int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A002B3   ; 179:  __thumb int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A43ADD   ; 17A:  __thumb unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A43AE9   ; 17B:  __thumb unsigned int htonl(unsigned int)
05F0: 0xA85706E4   ; 17C:  __arm int socklasterr(void)
05F4: 0xA00B4391   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA00B43B3   ; 17E:  __thumb void RestartIDLETMR(void)
05FC: 0xA00B43CD   ; 17F:  __thumb void DisableIDLETMR(void)

0600: 0xA00DED83   ; 180:  __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA00DECED   ; 181:  __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA00DED29   ; 182:  __thumb int EDIT_GetFocus(void *gui)
060C: 0xA00DED33   ; 183:  __thumb int EDIT_GetUnFocus(void *gui)
0610: 0xA00A792B   ; 184:  __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0209C78   ; 185:  __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA09FD69D   ; 186:  __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA09FE0CD   ; 187:  __thumb int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188:  __adr int ScreenW(void)
0624: 0x000000B0   ; 189:  __adr int ScreenH(void)
0628: 0x00000016   ; 18A:  __adr int HeaderH(void)
062C: 0x00000016   ; 18B:  __adr int SoftkeyH(void)
0630: 0xA020BE90   ; 18C:  __arm void GBS_DelTimer(GBSTMR *)
0634: 0xA0911FD4   ; 18D:  __arm int available0(int sock)
0638: 0xA00EBD51   ; 18E:  __thumb void GPRS_OnOff(int on, int _1)
063C: 0xA009BE6F   ; 18F:  __thumb int GetCurMenuItem(void *gui)

0640: 0xA020B540   ; 190:  __arm void MutexCreate(MUTEX *mtx)
0644: 0xA020B66C   ; 191:  __arm void MutexDestroy(MUTEX *mtx)
0648: 0xA020B7EC   ; 192:  __arm void MutexLock(MUTEX *mtx)
064C: 0xA020B844   ; 193:  __arm void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA020B8A0   ; 194:  __arm void MutexUnlock(MUTEX *mtx)
0654: 0xA009D331   ; 195:  __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA015C9FB   ; 196:  __thumb void RefreshGUI(void)
065C: 0xA009D383   ; 197:  __thumb void *AllocMenuItem(void *gui)
0660: 0xA009D491   ; 198:  __thumb WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA009D303   ; 199:  __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons)
0668: 0xA009CC55   ; 19A:  __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA00DED3D   ; 19B:  __thumb void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C:  __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA0782188   ; 19D:  __arm long long getCpuUsedTime_if_ena(void)
0678: 0xA0782150   ; 19E:  __arm void StartCpuUsageCount(void)
067C: 0xA0257529   ; 19F:  __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA025765F   ; 1A0:  __thumb int inflate(z_streamp strm, int flush)
0684: 0xA025849B   ; 1A1:  __thumb int inflateEnd(z_streamp strm)
0688: 0xA02B6935   ; 1A2:  __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA07E553C   ; 1A3:  __arm int GetCurrentGPRSProfile(void)
0690: 0xA07E54E0   ; 1A4:  __arm int GetDisconnectTime(void)
0694: 0xA02B695F   ; 1A5:  __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA020A97C   ; 1A6:  __arm int IsTimerProc(GBSTMR *)
069C: 0xA074933B   ; 1A7:  char* Get_NC_CC()
06A0: 0xA0D62271   ; 1A8:  __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA0D63283   ; 1A9:  __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0D6293B   ; 1AA:  __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0D633AB   ; 1AB:  __thumb void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0D61CD5   ; 1AC:  __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0D633C7   ; 1AD:  __thumb void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA0D6411D   ; 1AE:  __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0D63381   ; 1AF:  __thumb void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0D640B3   ; 1B0:  __thumb void png_set_packing(png_structp png_ptr)
06C4: 0xA0D633D5   ; 1B1:  __thumb void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0D616B5   ; 1B2:  __arm int png_check_sig(png_bytep sig, int num)
06CC: 0xA00A30CF   ; 1B3:  __arm void DrawLine(int x,int y,int x2,int y2,int type,int *pen)
06D0: 0xA00A1A23   ; 1B4:  __arm void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush)
06D4: 0x00000000   ; 1B5:  __adr int isnewSGold(void)
06D8: 0xA0A007D3   ; 1B6:  __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0A05985   ; 1B7:  __thumb unsigned int str2ip(const char *)
;6E0:              ; 1B8:  __adr void *EXT_TOP(void)
;6E4:              ; 1B9:  __adr void *PNG_TOP(void)
;6E8:              ; 1BA:  __adr void *LIB_TOP(void)
;6EC:              ; 1BB:  __adr void *DATA_N_SFB(void)
06F0: 0xA0D47BD3   ; 1BC:  __thumb void SHA1_Init(SHA_CTX *c)
06F4: 0xA0D478B7   ; 1BD:  __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0D47AB3   ; 1BE:  __thumb void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0CB4BB5   ; 1BF:  __thumb RSA * RSA_new_method(RSA_METHOD *method)

0700: 0xA0CB4C43   ; 1C0:  __thumb void RSA_free (RSA *r)
0704: 0xA0CB4E0F   ; 1C1:  __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0CB13A7   ; 1C2:  __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA009A48F   ; 1C3:  __thumb void SetMenuItemCount(void *gui,int n)
0710: 0xA009A407   ; 1C4:  __thumb void SetCursorToMenuItem(void *gui,int n)
;714:              ; 1C5:  __thumb int GetFontYSIZE(int font)
0718: 0xA00DED0B   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA00DED15   ; 1C7: __arm int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA00A8459   ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA00A757F   ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA00A7573   ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA00A7567   ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA00A7551   ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA00A7539   ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA00A7621   ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA029EF48   ; 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)

0740: 0xA029F0C8   ; 1D0: __arm int GetExtUid_ws(WSHDR * ext)
0744: 0xA00DEE7B   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA00DEE85   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA00DED65   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui)
0750: 0xA00DED6F   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA09CA618   ; 1D5: __arm char *Get_Phone_Ino(int InoIndex)
0758: 0xA0D633B9   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0D6417F   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr)
0760: 0xA00DEDAB   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui)
0764: 0xA00DEDBF   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA04B552B   ; 1DA: __arm void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8751D98   ; 1DB: __arm PDU *IncommingPDU(void)
0770: 0xA073B721   ; 1DC: __swi __arm short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA073B743   ; 1DD: __swi __arm short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA00DEE4B   ; 1DE: __swi __arm int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA00DEEE1   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)

0780: 0xA009E46D   ; 1E0: __thumb void *MenuGetUserPointer(void *gui)
0784: 0xA00A35B7   ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA0098193   ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA009807B   ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA00B2ED5   ; 1E4: __swi __arm int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA00DEF71   ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add)
0798: 0xA009C2DF   ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA08F8FB8   ; 1E7: __arm char *GetLastJavaApplication()
07A0: 0xA07ED0D8   ; 1E8: __arm int IsNoJava()
;7A4:              ; 1E9: __arm IMGHDR *create_imghdr(const char *fname, int type)
07A8: 0xA00DFDBB   ; 1EA: __thumb int GetMaxDynIcon(void)     //*****
07AC: 0xA848EF62   ; 1EB: __arm char *RAM_IMSI(void)
07B0: 0xA00DFE2F   ; 1EC: __thumb void FreeDynIcon(int picture)
07B4: 0xA00DFE5B   ; 1ED: __thumb int IsDynIconBusy(int picture)
;7B8:              ; 1EE: int __arm ProgressCalculate(int current, int total)
07BC: 0xA00DFDBF   ; 1EF: __thumb void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

07C0: 0xA02D4950   ; 1F0: filecopy
07C4: 0xA02D683C   ; 1F1: filecopy_op_announce
07C8: 0xA0788D7C   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA021AC38   ; 1F3: GetSessionAge
07D0: 0xA848F308   ; 1F4:  char *RamServiceProviderName()
07D4: 0xA0DE4479   ; 1F5: __thumb int sscanf(const char *, const char *, ...)
07D8: 0xA00DFE87   ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol)
;7DC:              ; 1F7: 
;7E0:              ; 1F8: 
;7E4:              ; 1F9: void SendMP_cmd(cmd,substract)
;7E8:              ; 1FA: char *RamVolumeStep()
07EC: 0xA84C2950   ; 1FB: __arm char *RamMediaIsPlaying()
07F0: 0xA0D50165   ; 1FC: __swi __arm void CloseCSM(int id)
07F4: 0xA00A1A07   ; 1FD: SetProp2Square_v2
;7F8:              ; 1FE: char *RamLighterPower()
;7FC:              ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0FC7301   ; 200: ScreenShoot
0804: 0xA00A2197   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA00F45AF   ; 202: __swi __arm void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA00A2F7F   ; 203: __swi __arm void SetPixel(int x,int y,char *color)
0810: 0xA00D3DA3   ; 204: __swi __arm void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA00A19E1   ; 205: SetProp2Square_v1
0818: 0xA0DE4055   ; 206: __swi __arm void srand(unsigned int seed)
081C: 0xA00DBBEB   ; 207: __swi __arm DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush)
0820: 0xA00A35E1   ; 208: Get_WS_width(*ws, font)
;824:              ; 209: __swi __arm void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA00DEDF1   ; 20A: __swi __arm void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA00DEE05   ; 20B: __swi __arm void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA00DEE19   ; 20C: __swi __arm void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA00DEE2D   ; 20D: __swi __arm void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA00A78AD   ; 20E: __swi __arm int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA00A7793   ; 20F: __swi __arm int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

;840:              ; 210:  int GetCurGuiID(void)
0844: 0x000000A1   ; 211: GBS_Cmd_4209_RefreshScreensaver
0848: 0xA03B0948   ; 212: __arm int CardExplGetCurItem(void *csm)
084C: 0xA033F10C   ; 213: __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA073BC61   ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA073BCF1   ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA073B28D   ; 216: __thumb void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA0558B75   ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA00E635B   ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n)
0864: 0xA00E6613   ; 219: __thumb void *AllocMLMenuItem(void *data)
0868: 0xA00DEEF9   ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA00DEF03   ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui)
0870: 0xA00DEF3F   ; 21C: __thumb int EDIT_IsBusy(void *gui)
0874: 0xA0743881   ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA00B4469   ; 21E: __swi __arm void FocusGUI(int id)
087C: 0xA00B4487   ; 21F: __swi __arm void UnfocusGUI(void)
0884: 0xA09EDD00   ; 221: __arm void SetCpuClockLow(2)
0888: 0xA09EDCE8   ; 222: __arm void SetCpuClockTempHi(2)
;88C:              ; 223: __unknown IsMediaPlayerInBackground
;890:              ; 224: __unknown CloseMediaPlayer
0894: 0xA02EABF0   ; 225: __swi __arm int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA02EAFC8   ; 226: __swi __arm int PlayMelody_StopPlayback(int handle)
089C: 0xA02EB068   ; 227: __swi __arm int PlayMelody_PausePlayback(int handle)
08A0: 0xA02EB0AC   ; 228: __swi __arm int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0DE4EA4   ; 229: __swi __arm void longjmp(jmp_buf, int)
08A8: 0xA074AC77   ; 22A: __swi __arm void FreeGSMTXTpkt(void *pkt)
08BC: 0xA8493D48   ; 22F: TDateTimeSettings *RamDateTimeSettings

08C0: 0xA0755953   ; 230:   int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8493CF0   ; 231: TAppointment *RamAppointment
;8CC:              ; 233:  void GetAllEmail()
08D0: 0xA04C183D   ; 234: __swi __arm int GetLunarDate(TDate* pdate, TDate* pLdate)
08D4: 0xA04FDB11   ; 235: __swi __arm int GetLunarYearID(int year)
08D8: 0xA04FDB27   ; 236: __swi __arm int GetLunarAnimal(int year)
;8DC:              ; 237: char *RamIconBar
08E0: 0xA074AC21   ; 238: __swi __arm void SendAutoUSSDack(void)
08E4: 0xA073EF98   ; 239:  __swi __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA073F0E4   ; 23A: __swi __arm  int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
08EC: 0x00000000   ; 23B:  __swi __arm void DisableIconBar(int disable)
08F0: 0xA07E5508   ; 23C: __swi __arm int SetCurrentGPRSProfile(int profile)
08F4: 0xA0D4494D   ; 23D: __swi __arm void MD5_Init(MD5_CTX *c)
08F8: 0xA0D445BD   ; 23E: __swi __arm void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA0D44855   ; 23F: __swi __arm void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA0D452DD   ; 240: __swi __arm char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md_NULL)
0904: 0xA0755C6B   ; 241: __swi __arm void SetDateTime(TDate *, TTime *)
;908:              ; 242:   __arm void gb2ws(WSHDR *ws, const char *s, int len)
;90C:              ; 243:   __arm void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA0D3954D   ; 244:   __arm int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0D395FD   ; 245:   __arm int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
091C: 0xA09D8FF5   ; 247:   __thumb void NetOff()
;920:              ; 248:  char *RamFormatTrack()
;924:              ; 249:  char *RamFreq()
;928:              ; 24A:  char *RamChannel()
092C: 0xA009D7E7   ; 24B:  __thumb void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)
0950: 0xA033FD18   ; 254:  __arm int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA009E469   ; 255:  __thumb void MenuSetUserPointer(void *gui,void *user_pointer)


0960: 0xA00DF861 ; 258: int CalcBitmapSize(short w,short h, char typy);
0964: 0xA02FD4F0 ; 259: HObj Obs_CreateObject(int uid_in, int uid_out, int prio, int msg_callback, int emb4, int sync,unsigned int *ErrorNumber);
0968: 0xA02FDE5C ; 25A: int Obs_DestroyObject(HObj hObj);
096C: 0xA0301F20 ; 25B: int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path);
0970: 0xA02FB8C0 ; 25C: int Obs_GetInputImageSize (HObj hObj, short *w, short *h);
0974: 0xA02FBA18 ; 25D: int Obs_SetOutputImageSize (HObj hObj, short w, short h);
0978: 0xA0300C1C ; 25E: int Obs_Start(HObj hObj);
097C: 0xA02FC4E0 ; 25F: int Obs_Output_GetPictstruct(HObj hObj, IMGHDR **img);
0980: 0xA02FC364 ; 260: int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h);
0984: 0xA02FBED0 ; 261: int Obs_SetRotation(HObj hObj, int angle);
0988: 0xA0300AAC ; 262: int Obs_GetInfo (HObj hObj, int unk_0or1);
098C: 0xA02FBD90 ; 263: int Obs_SetScaling (HObj hObj, int unk5);
0990: 0xA03032B8 ; 264: int Obs_TranslateMessageGBS (GBS_MSG *msg, OBSevent *event_handler);
0994: 0xA0300F60 ; 265: int Obs_Pause (HObj hObj);
0998: 0xA030120C ; 266: int Obs_Resume (HObj hObj);
099C: 0xA0301088 ; 267: int Obs_Stop (HObj hObj);
09A8: 0xA02FE280 ; 26A: int Obs_SetPosition (HObj hObj,int ms);
09B4: 0xA0355EA0   ; 26D: __arm int Obs_Sound_GetVolume (HObj hObj, char *vol)
0A0C: 0xA02E3628 ; 283:  __arm int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
0A58: 0xA02BBEE7 ; 296:  __thumb void getProfileNameByN(int n, WSHDR *ws, int _0);

0A8C: 0xA009C36B   ; 2A3:  __thumb void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA00999CF   ; 2A4:  __thumb void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA00E61D5   ; 2A5:  __thumb void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
0A98: 0xA02A4B31   ; 2A6:  __thumb void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA009CF61   ; 2A7:  __thumb void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA009A59F   ; 2A8:  __thumb int GetMenuItemCount(void *gui)
0AA4: 0xA0098BCB   ; 2A9:  __thumb int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA0098B3D   ; 2AA:  __thumb int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA00B66E9   ; 2AB:  __thumb void *GetPopupUserPointer(void *gui)
0AB8: 0xA009D9F5   ; 2AE:  __thumb void *GetHeaderPointer(void *gui)
0ABC: 0xA00B8359   ; 2AF:  __thumb void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)

0AC0: 0xA009E2E1   ; 2B0:  __thumb void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
0AE8: 0xA00B8613   ; 2BA:  __thumb void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)

;AEC:              ; 2BB:  __thumb void *GetTabGUI(void *malloc_adr, void *mfree_adr)
0AF0: 0xA00B4687   ; 2BC:  __thumb void SetGUIDefinition(void *gui, const void *definition)
;AF4:              ; 2BD:  __thumb int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui)
;AF8:              ; 2BE:  __thumb int SetCursorTab(void *tab_gui, int n)
;AFC:              ; 2BF:  __thumb int UpdateTab1stItem(void *tab_gui, int unk_0)
;B00:              ; 2C0:  __thumb int GetCursorTab(void *tab_gui)
;B04:              ; 2C1:  __thumb void *GetGuiByTab(void *tab_gui, int n)
0B08: 0xA0792779   ; 2C2:  __thumb int GetSubprovider(WSHDR* ws)
0B0C: 0xA079298D   ; 2C3:  __thumb int GetRoamingState()
;B10:              ; 2C4:  __thumb int GetPrfileVolumeSetting(int profile, int type)
0B14: 0xA84935EC   ; 82C5:  __arm RAM_EMS_ADMIN *RAM_EMS_Admin()
0B18: 0xA020E08B   ; 2C6:  __thumb int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date)
0B1C: 0xA020E0DD   ; 2C7:  __thumb int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time)
0B20: 0xA020E5DB   ; 2C8:  __thumb int GetSecondsFromTime(TTime *time)
0B24: 0xA020DFC5   ; 2C9:  __thumb int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date)
0B28: 0xA020E0FF   ; 2CA:  __thumb int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time)
0B2C: 0xA020E5ED   ; 2CB:  __thumb void GetTimeFromSeconds(TTime *time, int seconds)
0B30: 0xA020DEB1   ; 2CC:  __thumb void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day)
0B34: 0xA020E915   ; 2CD:  __thumb void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec)
0B38: 0xA020D895   ; 2CE:  __thumb int CmpDates(TDate *date1, TDate *date2)
0B3C: 0xA020E57D   ; 2CF:  __thumb int CmpTimes(TTime *time1, TTime *time2)

0B40: 0xA020D8E5   ; 2D0:  __thumb int GetDaysFromMonth(TDate *date)
0B44: 0xA020D8C5   ; 2D1:  __thumb int IsLeapYear(TDate *date)
0B48: 0xA04DB16F   ; 2D2:  __thumb void StartNativeBrowserCore()
0B4C: 0xA04F8E9F   ; 2D3:  __arm int GetFilledNAbDataCount(NativeAbData *nab)
0B50: 0xA04F8975   ; 2D4:  __arm void *GetDataFromNAbData(NativeAbData *nab, int n)
0B54: 0xA079B9D5   ; 2D5:  __thumb void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen)
0B58: 0xA00B7307 ; 2D6: void *TViewGetGUI(void *malloc_adr, void *mfree_adr);
0B5C: 0xA00B78B9 ; 2D7: void TViewSetDefinition(void *gui, const TVIEW_DESC *);
0B60: 0xA00B7843 ; 2D8: void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr);
0B64: 0xA00B78E1 ; 2D9: void TViewSetUserPointer(void *gui,void *user_pointer);
0B68: 0xA00B78E5 ; 2DA: void *TViewGetUserPointer(void *gui);
0B6C: 0xA03B37F0 ; 2DB: void MediaSendCSM_Open(WSHDR *file, WSHDR *path);#pragma disable old_equal_ff
+0

;********************************************************************************