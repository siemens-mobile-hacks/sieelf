##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    13/Aug/2008  18:45:30 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  G:\Arm\SieELF\cbn_SRC\MP3Player\mp3dec\stproc.c      #
#    Command line    =  G:\Arm\SieELF\cbn_SRC\MP3Player\mp3dec\stproc.c -lC  #
#                       G:\Arm\SieELF\cbn_SRC\MP3Player\Release\List\ -lA    #
#                       G:\Arm\SieELF\cbn_SRC\MP3Player\Release\List\ -o     #
#                       G:\Arm\SieELF\cbn_SRC\MP3Player\Release\Obj\ -s9     #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e            #
#                       --char_is_signed --fpu None -I                       #
#                       D:\ewarm_442\arm\INC\ --inline_threshold=2           #
#    List file       =  G:\Arm\SieELF\cbn_SRC\MP3Player\Release\List\stproc. #
#                       lst                                                  #
#    Object file     =  G:\Arm\SieELF\cbn_SRC\MP3Player\Release\Obj\stproc.r #
#                       79                                                   #
#                                                                            #
#                                                                            #
##############################################################################

G:\Arm\SieELF\cbn_SRC\MP3Player\mp3dec\stproc.c
      1          /* ***** BEGIN LICENSE BLOCK ***** 
                                                   ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2           * Version: RCSL 1.0/RPSL 1.0 
      3           *  
      4           * Portions Copyright (c) 1995-2002 RealNetworks, Inc. All Rights Reserved. 
      5           *      
      6           * The contents of this file, and the files included with this file, are 
      7           * subject to the current version of the RealNetworks Public Source License 
      8           * Version 1.0 (the "RPSL") available at 
      9           * http://www.helixcommunity.org/content/rpsl unless you have licensed 
     10           * the file under the RealNetworks Community Source License Version 1.0 
     11           * (the "RCSL") available at http://www.helixcommunity.org/content/rcsl, 
     12           * in which case the RCSL will apply. You may also obtain the license terms 
     13           * directly from RealNetworks.  You may not use this file except in 
     14           * compliance with the RPSL or, if you have a valid RCSL with RealNetworks 
     15           * applicable to this file, the RCSL.  Please see the applicable RPSL or 
     16           * RCSL for the rights, obligations and limitations governing use of the 
     17           * contents of the file.  
     18           *  
     19           * This file is part of the Helix DNA Technology. RealNetworks is the 
     20           * developer of the Original Code and owns the copyrights in the portions 
     21           * it created. 
     22           *  
     23           * This file, and the files included with this file, is distributed and made 
     24           * available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER 
     25           * EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS ALL SUCH WARRANTIES, 
     26           * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS 
     27           * FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. 
     28           * 
     29           * Technology Compatibility Kit Test Suite(s) Location: 
     30           *    http://www.helixcommunity.org/content/tck 
     31           * 
     32           * Contributor(s): 
     33           *  
     34           * ***** END LICENSE BLOCK ***** */ 
     35          
     36          /**************************************************************************************
     37           * Fixed-point MP3 decoder
     38           * Jon Recker (jrecker@real.com), Ken Cooke (kenc@real.com)
     39           * June 2003
     40           *
     41           * stproc.c - mid-side and intensity (MPEG1 and MPEG2) stereo processing
     42           **************************************************************************************/
     43          
     44          #include "coder.h"
     45          #include "assembly.h"
     46          
     47          /**************************************************************************************
     48           * Function:    MidSideProc
     49           *
     50           * Description: sum-difference stereo reconstruction
     51           *
     52           * Inputs:      vector x with dequantized samples from left and right channels
     53           *              number of non-zero samples (MAX of left and right)
     54           *              assume 1 guard bit in input
     55           *              guard bit mask (left and right channels)
     56           *
     57           * Outputs:     updated sample vector x
     58           *              updated guard bit mask
     59           *
     60           * Return:      none
     61           *
     62           * Notes:       assume at least 1 GB in input
     63           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
     64          void MidSideProc(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, int mOut[2])  
     65          {
   \                     xmp3_MidSideProc:
   \   00000000   F0012DE9           PUSH     {R4-R8}
     66          	int i, xr, xl, mOutL, mOutR;
     67          	
     68          	/* L = (M+S)/sqrt(2), R = (M-S)/sqrt(2) 
     69          	 * NOTE: 1/sqrt(2) done in DequantChannel() - see comments there
     70          	 */
     71          	mOutL = mOutR = 0;
   \   00000004   0030A0E3           MOV      R3,#+0
   \   00000008   00C0A0E3           MOV      R12,#+0
     72          	for(i = 0; i < nSamps; i++) {
   \   0000000C   0340A0E1           MOV      R4,R3
   \   00000010   010051E3           CMP      R1,#+1
   \   00000014   110000AA           BGE      ??xmp3_MidSideProc_0
   \   00000018   120000EA           B        ??xmp3_MidSideProc_1
     73          		xl = x[0][i];
   \                     ??xmp3_MidSideProc_2:
   \   0000001C   046190E7           LDR      R6,[R0, +R4, LSL #+2]
     74          		xr = x[1][i];
   \   00000020   045180E0           ADD      R5,R0,R4, LSL #+2
   \   00000024   007995E5           LDR      R7,[R5, #+2304]
     75          		x[0][i] = xl + xr;
   \   00000028   068087E0           ADD      R8,R7,R6
   \   0000002C   048180E7           STR      R8,[R0, +R4, LSL #+2]
     76          		x[1][i] = xl - xr;
   \   00000030   076046E0           SUB      R6,R6,R7
   \   00000034   006985E5           STR      R6,[R5, #+2304]
     77          		mOutL |= FASTABS(x[0][i]);
     78          		mOutR |= FASTABS(x[1][i]);
   \   00000038   005995E5           LDR      R5,[R5, #+2304]
   \   0000003C   C87FA0E1           ASR      R7,R8,#+31
   \   00000040   086027E0           EOR      R6,R7,R8
   \   00000044   076046E0           SUB      R6,R6,R7
   \   00000048   0CC086E1           ORR      R12,R6,R12
   \   0000004C   C56FA0E1           ASR      R6,R5,#+31
   \   00000050   055026E0           EOR      R5,R6,R5
   \   00000054   065045E0           SUB      R5,R5,R6
   \   00000058   033085E1           ORR      R3,R5,R3
     79          	}
   \   0000005C   014084E2           ADD      R4,R4,#+1
   \                     ??xmp3_MidSideProc_0:
   \   00000060   010054E1           CMP      R4,R1
   \   00000064   ECFFFFBA           BLT      ??xmp3_MidSideProc_2
     80          	mOut[0] |= mOutL;
   \                     ??xmp3_MidSideProc_1:
   \   00000068   000092E5           LDR      R0,[R2, #+0]
   \   0000006C   00008CE1           ORR      R0,R12,R0
   \   00000070   000082E5           STR      R0,[R2, #+0]
     81          	mOut[1] |= mOutR;
   \   00000074   040092E5           LDR      R0,[R2, #+4]
   \   00000078   000083E1           ORR      R0,R3,R0
   \   0000007C   040082E5           STR      R0,[R2, #+4]
     82          }
   \   00000080   F001BDE8           POP      {R4-R8}
   \   00000084   1EFF2FE1           BX       LR               ;; return
     83          
     84          /**************************************************************************************
     85           * Function:    IntensityProcMPEG1
     86           *
     87           * Description: intensity stereo processing for MPEG1
     88           *
     89           * Inputs:      vector x with dequantized samples from left and right channels
     90           *              number of non-zero samples in left channel
     91           *              valid FrameHeader struct
     92           *              two each of ScaleFactorInfoSub, CriticalBandInfo structs (both channels)
     93           *              flags indicating midSide on/off, mixedBlock on/off
     94           *              guard bit mask (left and right channels)
     95           *
     96           * Outputs:     updated sample vector x
     97           *              updated guard bit mask
     98           *
     99           * Return:      none
    100           *
    101           * Notes:       assume at least 1 GB in input
    102           *
    103           * TODO:        combine MPEG1/2 into one function (maybe)
    104           *              make sure all the mixed-block and IIP logic is right
    105           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    106          void IntensityProcMPEG1(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
    107          						CriticalBandInfo *cbi, int midSideFlag, int mixFlag, int mOut[2])
    108          {
   \                     xmp3_IntensityProcMPEG1:
   \   00000000   FC4F2DE9           PUSH     {R2-R11,LR}
   \   00000004   48D04DE2           SUB      SP,SP,#+72
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   74009DE5           LDR      R0,[SP, #+116]
    109          	int i=0, j=0, n=0, cb=0, w=0;
    110          	int sampsLeft, isf, mOutL, mOutR, xl, xr;
    111          	int fl, fr, fls[3], frs[3];
    112          	int cbStartL=0, cbStartS=0, cbEndL=0, cbEndS=0;
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   0430A0E1           MOV      R3,R4
   \   00000018   00308DE5           STR      R3,[SP, #+0]
   \   0000001C   10308DE5           STR      R3,[SP, #+16]
   \   00000020   2C308DE5           STR      R3,[SP, #+44]
    113          	int *isfTab;
    114          	
    115          	/* NOTE - this works fine for mixed blocks, as long as the switch point starts in the
    116          	 *  short block section (i.e. on or after sample 36 = sfBand->l[8] = 3*sfBand->s[3]
    117          	 * is this a safe assumption?
    118          	 * TODO - intensity + mixed not quite right (diff = 11 on he_mode)
    119          	 *  figure out correct implementation (spec ambiguous about when to do short block reorder)
    120          	 */
    121          	if (cbi[1].cbType == 0) {
   \   00000024   183090E5           LDR      R3,[R0, #+24]
   \   00000028   342092E5           LDR      R2,[R2, #+52]
   \   0000002C   0060A0E3           MOV      R6,#+0
   \   00000030   000053E3           CMP      R3,#+0
   \   00000034   0700001A           BNE      ??xmp3_IntensityProcMPEG1_0
    122          		/* long block */
    123          		cbStartL = cbi[1].cbEndL + 1;
   \   00000038   2C3090E5           LDR      R3,[R0, #+44]
    124          		cbEndL =   cbi[0].cbEndL + 1;
   \   0000003C   140090E5           LDR      R0,[R0, #+20]
   \   00000040   014083E2           ADD      R4,R3,#+1
   \   00000044   010080E2           ADD      R0,R0,#+1
   \   00000048   10008DE5           STR      R0,[SP, #+16]
    125          		cbStartS = cbEndS = 0;
    126          		i = fh->sfBand->l[cbStartL];
   \   0000004C   840082E0           ADD      R0,R2,R4, LSL #+1
   \   00000050   F060D0E1           LDRSH    R6,[R0, #+0]
   \   00000054   0B0000EA           B        ??xmp3_IntensityProcMPEG1_1
    127          	} else if (cbi[1].cbType == 1 || cbi[1].cbType == 2) {
   \                     ??xmp3_IntensityProcMPEG1_0:
   \   00000058   010053E3           CMP      R3,#+1
   \   0000005C   02005313           CMPNE    R3,#+2
   \   00000060   0800001A           BNE      ??xmp3_IntensityProcMPEG1_1
    128          		/* short or mixed block */
    129          		cbStartS = cbi[1].cbEndSMax + 1;
   \   00000064   286090E5           LDR      R6,[R0, #+40]
   \   00000068   016086E2           ADD      R6,R6,#+1
   \   0000006C   00608DE5           STR      R6,[SP, #+0]
    130          		cbEndS =   cbi[0].cbEndSMax + 1;
   \   00000070   100090E5           LDR      R0,[R0, #+16]
   \   00000074   010080E2           ADD      R0,R0,#+1
   \   00000078   2C008DE5           STR      R0,[SP, #+44]
    131          		cbStartL = cbEndL = 0;
    132          		i = 3 * fh->sfBand->s[cbStartS];
   \   0000007C   860082E0           ADD      R0,R2,R6, LSL #+1
   \   00000080   FE02D0E1           LDRSH    R0,[R0, #+46]
   \   00000084   806080E0           ADD      R6,R0,R0, LSL #+1
    133          	}
    134          
    135          	sampsLeft = nSamps - i;		/* process to length of left */
    136          	isfTab = (int *)ISFMpeg1[midSideFlag];
   \                     ??xmp3_IntensityProcMPEG1_1:
   \   00000088   70339FE5           LDR      R3,??xmp3_IntensityProcMPEG1_2  ;; xmp3_ISFMpeg1
   \   0000008C   069041E0           SUB      R9,R1,R6
   \   00000090   78109DE5           LDR      R1,[SP, #+120]
   \   00000094   1C20A0E3           MOV      R2,#+28
   \   00000098   923121E0           MLA      R1,R2,R1,R3
    137          	mOutL = mOutR = 0;
   \   0000009C   0070A0E3           MOV      R7,#+0
   \   000000A0   14108DE5           STR      R1,[SP, #+20]
   \   000000A4   0080A0E3           MOV      R8,#+0
    138          
    139          	/* long blocks */
    140          	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
   \   000000A8   1C0000EA           B        ??xmp3_IntensityProcMPEG1_3
    141          		isf = sfis->l[cb];
    142          		if (isf == 7) {
    143          			fl = ISFIIP[midSideFlag][0];
    144          			fr = ISFIIP[midSideFlag][1];
    145          		} else {
    146          			fl = isfTab[isf];	
    147          			fr = isfTab[6] - isfTab[isf];
    148          		}
    149          
    150          		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
    151          		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
    152          			xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr; mOutR |= FASTABS(xr);
   \                     ??xmp3_IntensityProcMPEG1_4:
   \   000000AC   0C009DE5           LDR      R0,[SP, #+12]
   \   000000B0   06B185E0           ADD      R11,R5,R6, LSL #+2
   \   000000B4   00109BE5           LDR      R1,[R11, #+0]
    153          			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
    154          			sampsLeft--;
   \   000000B8   019049E2           SUB      R9,R9,#+1
   \   000000BC   ........           _BLF     MULSHIFT32,??MULSHIFT32??rA
   \   000000C0   0001A0E1           LSL      R0,R0,#+2
   \   000000C4   061185E0           ADD      R1,R5,R6, LSL #+2
   \   000000C8   000981E5           STR      R0,[R1, #+2304]
   \   000000CC   C01FA0E1           ASR      R1,R0,#+31
   \   000000D0   000021E0           EOR      R0,R1,R0
   \   000000D4   010040E0           SUB      R0,R0,R1
   \   000000D8   00109BE5           LDR      R1,[R11, #+0]
   \   000000DC   077080E1           ORR      R7,R0,R7
   \   000000E0   08009DE5           LDR      R0,[SP, #+8]
    155          		}
   \   000000E4   01A08AE2           ADD      R10,R10,#+1
   \   000000E8   ........           _BLF     MULSHIFT32,??MULSHIFT32??rA
   \   000000EC   0001A0E1           LSL      R0,R0,#+2
   \   000000F0   00008BE5           STR      R0,[R11, #+0]
   \   000000F4   C01FA0E1           ASR      R1,R0,#+31
   \   000000F8   000021E0           EOR      R0,R1,R0
   \   000000FC   010040E0           SUB      R0,R0,R1
   \   00000100   088080E1           ORR      R8,R0,R8
   \   00000104   016086E2           ADD      R6,R6,#+1
   \                     ??xmp3_IntensityProcMPEG1_5:
   \   00000108   1C009DE5           LDR      R0,[SP, #+28]
   \   0000010C   00005AE1           CMP      R10,R0
   \   00000110   010000AA           BGE      ??xmp3_IntensityProcMPEG1_6
   \   00000114   010059E3           CMP      R9,#+1
   \   00000118   E3FFFFAA           BGE      ??xmp3_IntensityProcMPEG1_4
   \                     ??xmp3_IntensityProcMPEG1_6:
   \   0000011C   014084E2           ADD      R4,R4,#+1
   \                     ??xmp3_IntensityProcMPEG1_3:
   \   00000120   78109DE5           LDR      R1,[SP, #+120]
   \   00000124   ........           LDR      R2,??DataTable3  ;; xmp3_ISFIIP
   \   00000128   811182E0           ADD      R1,R2,R1, LSL #+3
   \   0000012C   18108DE5           STR      R1,[SP, #+24]
   \   00000130   10009DE5           LDR      R0,[SP, #+16]
   \   00000134   000054E1           CMP      R4,R0
   \   00000138   1E0000AA           BGE      ??xmp3_IntensityProcMPEG1_7
   \   0000013C   010059E3           CMP      R9,#+1
   \   00000140   1C0000BA           BLT      ??xmp3_IntensityProcMPEG1_7
   \   00000144   4C009DE5           LDR      R0,[SP, #+76]
   \   00000148   D02094E1           LDRSB    R2,[R4, +R0]
   \   0000014C   070052E3           CMP      R2,#+7
   \   00000150   0500001A           BNE      ??xmp3_IntensityProcMPEG1_8
   \   00000154   001091E5           LDR      R1,[R1, #+0]
   \   00000158   08108DE5           STR      R1,[SP, #+8]
   \   0000015C   18109DE5           LDR      R1,[SP, #+24]
   \   00000160   041091E5           LDR      R1,[R1, #+4]
   \   00000164   0C108DE5           STR      R1,[SP, #+12]
   \   00000168   080000EA           B        ??xmp3_IntensityProcMPEG1_9
   \                     ??xmp3_IntensityProcMPEG1_8:
   \   0000016C   14009DE5           LDR      R0,[SP, #+20]
   \   00000170   020180E0           ADD      R0,R0,R2, LSL #+2
   \   00000174   002090E5           LDR      R2,[R0, #+0]
   \   00000178   08208DE5           STR      R2,[SP, #+8]
   \   0000017C   14209DE5           LDR      R2,[SP, #+20]
   \   00000180   000090E5           LDR      R0,[R0, #+0]
   \   00000184   182092E5           LDR      R2,[R2, #+24]
   \   00000188   000042E0           SUB      R0,R2,R0
   \   0000018C   0C008DE5           STR      R0,[SP, #+12]
   \                     ??xmp3_IntensityProcMPEG1_9:
   \   00000190   48009DE5           LDR      R0,[SP, #+72]
   \   00000194   00A0A0E3           MOV      R10,#+0
   \   00000198   340090E5           LDR      R0,[R0, #+52]
   \   0000019C   842080E0           ADD      R2,R0,R4, LSL #+1
   \   000001A0   F220D2E1           LDRSH    R2,[R2, #+2]
   \   000001A4   840080E0           ADD      R0,R0,R4, LSL #+1
   \   000001A8   F000D0E1           LDRSH    R0,[R0, #+0]
   \   000001AC   000042E0           SUB      R0,R2,R0
   \   000001B0   1C008DE5           STR      R0,[SP, #+28]
   \   000001B4   D3FFFFEA           B        ??xmp3_IntensityProcMPEG1_5
    156          	}
    157          
    158          	/* short blocks */
    159          	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
   \                     ??xmp3_IntensityProcMPEG1_7:
   \   000001B8   00109DE5           LDR      R1,[SP, #+0]
   \   000001BC   560000EA           B        ??xmp3_IntensityProcMPEG1_10
    160          		for (w = 0; w < 3; w++) {
    161          			isf = sfis->s[cb][w];
    162          			if (isf == 7) {
    163          				fls[w] = ISFIIP[midSideFlag][0];
    164          				frs[w] = ISFIIP[midSideFlag][1];
    165          			} else {
    166          				fls[w] = isfTab[isf];
    167          				frs[w] = isfTab[6] - isfTab[isf];
    168          			}
    169          		}
    170          
    171          		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
    172          		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
    173          			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
   \                     ??xmp3_IntensityProcMPEG1_11:
   \   000001C0   3C009DE5           LDR      R0,[SP, #+60]
   \   000001C4   06B185E0           ADD      R11,R5,R6, LSL #+2
   \   000001C8   00109BE5           LDR      R1,[R11, #+0]
   \   000001CC   064185E0           ADD      R4,R5,R6, LSL #+2
   \   000001D0   ........           _BLF     MULSHIFT32,??MULSHIFT32??rA
   \   000001D4   0001A0E1           LSL      R0,R0,#+2
   \   000001D8   000984E5           STR      R0,[R4, #+2304]
   \   000001DC   00008DE5           STR      R0,[SP, #+0]
   \   000001E0   0010A0E1           MOV      R1,R0
   \   000001E4   C11FA0E1           ASR      R1,R1,#+31
   \   000001E8   08108DE5           STR      R1,[SP, #+8]
    174          			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
   \   000001EC   00109BE5           LDR      R1,[R11, #+0]
   \   000001F0   30009DE5           LDR      R0,[SP, #+48]
    175          			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
    176          			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
    177          			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
    178          			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
    179          			sampsLeft -= 3;
   \   000001F4   039049E2           SUB      R9,R9,#+3
   \   000001F8   ........           _BLF     MULSHIFT32,??MULSHIFT32??rA
   \   000001FC   0001A0E1           LSL      R0,R0,#+2
   \   00000200   00008BE5           STR      R0,[R11, #+0]
   \   00000204   20008DE5           STR      R0,[SP, #+32]
   \   00000208   0010A0E1           MOV      R1,R0
   \   0000020C   C11FA0E1           ASR      R1,R1,#+31
   \   00000210   24108DE5           STR      R1,[SP, #+36]
   \   00000214   041094E5           LDR      R1,[R4, #+4]
   \   00000218   40009DE5           LDR      R0,[SP, #+64]
    180          		}
   \   0000021C   01A08AE2           ADD      R10,R10,#+1
   \   00000220   ........           _BLF     MULSHIFT32,??MULSHIFT32??rA
   \   00000224   0001A0E1           LSL      R0,R0,#+2
   \   00000228   011086E2           ADD      R1,R6,#+1
   \   0000022C   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000230   000981E5           STR      R0,[R1, #+2304]
   \   00000234   0C008DE5           STR      R0,[SP, #+12]
   \   00000238   0010A0E1           MOV      R1,R0
   \   0000023C   C11FA0E1           ASR      R1,R1,#+31
   \   00000240   10108DE5           STR      R1,[SP, #+16]
   \   00000244   34009DE5           LDR      R0,[SP, #+52]
   \   00000248   041094E5           LDR      R1,[R4, #+4]
   \   0000024C   ........           _BLF     MULSHIFT32,??MULSHIFT32??rA
   \   00000250   0001A0E1           LSL      R0,R0,#+2
   \   00000254   040084E5           STR      R0,[R4, #+4]
   \   00000258   28008DE5           STR      R0,[SP, #+40]
   \   0000025C   081094E5           LDR      R1,[R4, #+8]
   \   00000260   C0BFA0E1           ASR      R11,R0,#+31
   \   00000264   44009DE5           LDR      R0,[SP, #+68]
   \   00000268   ........           _BLF     MULSHIFT32,??MULSHIFT32??rA
   \   0000026C   0001A0E1           LSL      R0,R0,#+2
   \   00000270   021086E2           ADD      R1,R6,#+2
   \   00000274   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000278   000981E5           STR      R0,[R1, #+2304]
   \   0000027C   00209DE5           LDR      R2,[SP, #+0]
   \   00000280   08309DE5           LDR      R3,[SP, #+8]
   \   00000284   10C09DE5           LDR      R12,[SP, #+16]
   \   00000288   022023E0           EOR      R2,R3,R2
   \   0000028C   032042E0           SUB      R2,R2,R3
   \   00000290   0C309DE5           LDR      R3,[SP, #+12]
   \   00000294   C01FA0E1           ASR      R1,R0,#+31
   \   00000298   03302CE0           EOR      R3,R12,R3
   \   0000029C   0C3043E0           SUB      R3,R3,R12
   \   000002A0   022083E1           ORR      R2,R3,R2
   \   000002A4   000021E0           EOR      R0,R1,R0
   \   000002A8   010040E0           SUB      R0,R0,R1
   \   000002AC   081094E5           LDR      R1,[R4, #+8]
   \   000002B0   020080E1           ORR      R0,R0,R2
   \   000002B4   077080E1           ORR      R7,R0,R7
   \   000002B8   38009DE5           LDR      R0,[SP, #+56]
   \   000002BC   036086E2           ADD      R6,R6,#+3
   \   000002C0   ........           _BLF     MULSHIFT32,??MULSHIFT32??rA
   \   000002C4   0001A0E1           LSL      R0,R0,#+2
   \   000002C8   080084E5           STR      R0,[R4, #+8]
   \   000002CC   20209DE5           LDR      R2,[SP, #+32]
   \   000002D0   24309DE5           LDR      R3,[SP, #+36]
   \   000002D4   C01FA0E1           ASR      R1,R0,#+31
   \   000002D8   022023E0           EOR      R2,R3,R2
   \   000002DC   032042E0           SUB      R2,R2,R3
   \   000002E0   28309DE5           LDR      R3,[SP, #+40]
   \   000002E4   000021E0           EOR      R0,R1,R0
   \   000002E8   03302BE0           EOR      R3,R11,R3
   \   000002EC   0B3043E0           SUB      R3,R3,R11
   \   000002F0   022083E1           ORR      R2,R3,R2
   \   000002F4   010040E0           SUB      R0,R0,R1
   \   000002F8   020080E1           ORR      R0,R0,R2
   \   000002FC   088080E1           ORR      R8,R0,R8
   \                     ??xmp3_IntensityProcMPEG1_12:
   \   00000300   1C009DE5           LDR      R0,[SP, #+28]
   \   00000304   00005AE1           CMP      R10,R0
   \   00000308   010000AA           BGE      ??xmp3_IntensityProcMPEG1_13
   \   0000030C   030059E3           CMP      R9,#+3
   \   00000310   AAFFFFAA           BGE      ??xmp3_IntensityProcMPEG1_11
   \                     ??xmp3_IntensityProcMPEG1_13:
   \   00000314   04109DE5           LDR      R1,[SP, #+4]
   \   00000318   011081E2           ADD      R1,R1,#+1
   \                     ??xmp3_IntensityProcMPEG1_10:
   \   0000031C   04108DE5           STR      R1,[SP, #+4]
   \   00000320   04009DE5           LDR      R0,[SP, #+4]
   \   00000324   2C109DE5           LDR      R1,[SP, #+44]
   \   00000328   010050E1           CMP      R0,R1
   \   0000032C   2D0000AA           BGE      ??xmp3_IntensityProcMPEG1_14
   \   00000330   030059E3           CMP      R9,#+3
   \   00000334   2B0000BA           BLT      ??xmp3_IntensityProcMPEG1_14
   \   00000338   0000A0E3           MOV      R0,#+0
   \                     ??xmp3_IntensityProcMPEG1_15:
   \   0000033C   04109DE5           LDR      R1,[SP, #+4]
   \   00000340   4C209DE5           LDR      R2,[SP, #+76]
   \   00000344   811081E0           ADD      R1,R1,R1, LSL #+1
   \   00000348   021081E0           ADD      R1,R1,R2
   \   0000034C   011080E0           ADD      R1,R0,R1
   \   00000350   D721D1E1           LDRSB    R2,[R1, #+23]
   \   00000354   3C108DE2           ADD      R1,SP,#+60
   \   00000358   001181E0           ADD      R1,R1,R0, LSL #+2
   \   0000035C   30308DE2           ADD      R3,SP,#+48
   \   00000360   003183E0           ADD      R3,R3,R0, LSL #+2
   \   00000364   070052E3           CMP      R2,#+7
   \   00000368   0500001A           BNE      ??xmp3_IntensityProcMPEG1_16
   \   0000036C   18209DE5           LDR      R2,[SP, #+24]
   \   00000370   002092E5           LDR      R2,[R2, #+0]
   \   00000374   002083E5           STR      R2,[R3, #+0]
   \   00000378   18209DE5           LDR      R2,[SP, #+24]
   \   0000037C   042092E5           LDR      R2,[R2, #+4]
   \   00000380   070000EA           B        ??xmp3_IntensityProcMPEG1_17
   \                     ??xmp3_IntensityProcMPEG1_16:
   \   00000384   14409DE5           LDR      R4,[SP, #+20]
   \   00000388   022184E0           ADD      R2,R4,R2, LSL #+2
   \   0000038C   004092E5           LDR      R4,[R2, #+0]
   \   00000390   004083E5           STR      R4,[R3, #+0]
   \   00000394   14309DE5           LDR      R3,[SP, #+20]
   \   00000398   002092E5           LDR      R2,[R2, #+0]
   \   0000039C   183093E5           LDR      R3,[R3, #+24]
   \   000003A0   022043E0           SUB      R2,R3,R2
   \                     ??xmp3_IntensityProcMPEG1_17:
   \   000003A4   002081E5           STR      R2,[R1, #+0]
   \   000003A8   010080E2           ADD      R0,R0,#+1
   \   000003AC   030050E3           CMP      R0,#+3
   \   000003B0   E1FFFFBA           BLT      ??xmp3_IntensityProcMPEG1_15
   \   000003B4   48009DE5           LDR      R0,[SP, #+72]
   \   000003B8   04209DE5           LDR      R2,[SP, #+4]
   \   000003BC   341090E5           LDR      R1,[R0, #+52]
   \   000003C0   04309DE5           LDR      R3,[SP, #+4]
   \   000003C4   012082E2           ADD      R2,R2,#+1
   \   000003C8   822081E0           ADD      R2,R1,R2, LSL #+1
   \   000003CC   FE22D2E1           LDRSH    R2,[R2, #+46]
   \   000003D0   831081E0           ADD      R1,R1,R3, LSL #+1
   \   000003D4   FE12D1E1           LDRSH    R1,[R1, #+46]
   \   000003D8   00A0A0E3           MOV      R10,#+0
   \   000003DC   011042E0           SUB      R1,R2,R1
   \   000003E0   1C108DE5           STR      R1,[SP, #+28]
   \   000003E4   C5FFFFEA           B        ??xmp3_IntensityProcMPEG1_12
    181          	}
    182          	mOut[0] = mOutL;
   \                     ??xmp3_IntensityProcMPEG1_14:
   \   000003E8   80009DE5           LDR      R0,[SP, #+128]
   \   000003EC   008080E5           STR      R8,[R0, #+0]
    183          	mOut[1] = mOutR;
   \   000003F0   80009DE5           LDR      R0,[SP, #+128]
   \   000003F4   047080E5           STR      R7,[R0, #+4]
    184          	
    185          	return;
   \   000003F8   50D08DE2           ADD      SP,SP,#+80
   \   000003FC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??xmp3_IntensityProcMPEG1_2:
   \   00000400   ........           DC32     xmp3_ISFMpeg1
    186          }
    187          
    188          /**************************************************************************************
    189           * Function:    IntensityProcMPEG2
    190           *
    191           * Description: intensity stereo processing for MPEG2
    192           *
    193           * Inputs:      vector x with dequantized samples from left and right channels
    194           *              number of non-zero samples in left channel
    195           *              valid FrameHeader struct
    196           *              two each of ScaleFactorInfoSub, CriticalBandInfo structs (both channels)
    197           *              ScaleFactorJS struct with joint stereo info from UnpackSFMPEG2()
    198           *              flags indicating midSide on/off, mixedBlock on/off
    199           *              guard bit mask (left and right channels)
    200           *
    201           * Outputs:     updated sample vector x
    202           *              updated guard bit mask
    203           *
    204           * Return:      none
    205           *
    206           * Notes:       assume at least 1 GB in input
    207           *
    208           * TODO:        combine MPEG1/2 into one function (maybe)
    209           *              make sure all the mixed-block and IIP logic is right
    210           *                probably redo IIP logic to be simpler
    211           **************************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    212          void IntensityProcMPEG2(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
    213          						CriticalBandInfo *cbi, ScaleFactorJS *sfjs, int midSideFlag, int mixFlag, int mOut[2])
    214          {
   \                     xmp3_IntensityProcMPEG2:
   \   00000000   FD4F2DE9           PUSH     {R0,R2-R11,LR}
    215          	int i, j, k, n, r, cb, w;
    216          	int fl, fr, mOutL, mOutR, xl, xr;
    217          	int sampsLeft;
    218          	int isf, sfIdx, tmp, il[23];
    219          	int *isfTab;
    220          	int cbStartL, cbStartS, cbEndL, cbEndS;
    221          	
    222          	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
   \   00000004   AC539FE5           LDR      R5,??xmp3_IntensityProcMPEG2_0  ;; xmp3_ISFMpeg2
   \   00000008   70D04DE2           SUB      SP,SP,#+112
   \   0000000C   A4009DE5           LDR      R0,[SP, #+164]
   \   00000010   A8309DE5           LDR      R3,[SP, #+168]
   \   00000014   004090E5           LDR      R4,[R0, #+0]
    223          	mOutL = mOutR = 0;
   \   00000018   0060A0E3           MOV      R6,#+0
   \   0000001C   844385E0           ADD      R4,R5,R4, LSL #+7
   \   00000020   033384E0           ADD      R3,R4,R3, LSL #+6
   \   00000024   0C308DE5           STR      R3,[SP, #+12]
   \   00000028   0050A0E3           MOV      R5,#+0
    224          
    225          	/* fill buffer with illegal intensity positions (depending on slen) */
    226          	for (k = r = 0; r < 4; r++) {
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   0270A0E1           MOV      R7,R2
   \   00000034   0130A0E3           MOV      R3,#+1
    227          		tmp = (1 << sfjs->slen[r]) - 1;
   \                     ??xmp3_IntensityProcMPEG2_1:
   \   00000038   024180E0           ADD      R4,R0,R2, LSL #+2
   \   0000003C   048094E5           LDR      R8,[R4, #+4]
    228          		for (j = 0; j < sfjs->nr[r]; j++, k++) 
   \   00000040   14A094E5           LDR      R10,[R4, #+20]
   \   00000044   1388A0E1           LSL      R8,R3,R8
   \   00000048   019048E2           SUB      R9,R8,#+1
   \   0000004C   0080A0E3           MOV      R8,#+0
   \   00000050   01005AE3           CMP      R10,#+1
   \   00000054   040000AA           BGE      ??xmp3_IntensityProcMPEG2_2
   \   00000058   060000EA           B        ??xmp3_IntensityProcMPEG2_3
    229          			il[k] = tmp;
   \                     ??xmp3_IntensityProcMPEG2_4:
   \   0000005C   14A08DE2           ADD      R10,SP,#+20
   \   00000060   07918AE7           STR      R9,[R10, +R7, LSL #+2]
   \   00000064   018088E2           ADD      R8,R8,#+1
   \   00000068   017087E2           ADD      R7,R7,#+1
   \                     ??xmp3_IntensityProcMPEG2_2:
   \   0000006C   14A094E5           LDR      R10,[R4, #+20]
   \   00000070   0A0058E1           CMP      R8,R10
   \   00000074   F8FFFFBA           BLT      ??xmp3_IntensityProcMPEG2_4
    230          	}
   \                     ??xmp3_IntensityProcMPEG2_3:
   \   00000078   012082E2           ADD      R2,R2,#+1
   \   0000007C   040052E3           CMP      R2,#+4
   \   00000080   ECFFFFBA           BLT      ??xmp3_IntensityProcMPEG2_1
    231          
    232          	if (cbi[1].cbType == 0) {
   \   00000084   A8209DE5           LDR      R2,[SP, #+168]
   \   00000088   ........           LDR      R4,??DataTable3  ;; xmp3_ISFIIP
   \   0000008C   A0009DE5           LDR      R0,[SP, #+160]
   \   00000090   822184E0           ADD      R2,R4,R2, LSL #+3
   \   00000094   10208DE5           STR      R2,[SP, #+16]
   \   00000098   180090E5           LDR      R0,[R0, #+24]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   5F00001A           BNE      ??xmp3_IntensityProcMPEG2_5
    233          		/* long blocks */
    234          		il[21] = il[22] = 1;
    235          		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
   \   000000A4   A0009DE5           LDR      R0,[SP, #+160]
    236          		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
   \   000000A8   A0209DE5           LDR      R2,[SP, #+160]
   \   000000AC   6C308DE5           STR      R3,[SP, #+108]
   \   000000B0   68308DE5           STR      R3,[SP, #+104]
   \   000000B4   2C0090E5           LDR      R0,[R0, #+44]
   \   000000B8   142092E5           LDR      R2,[R2, #+20]
   \   000000BC   014080E2           ADD      R4,R0,#+1
    237          		i = fh->sfBand->l[cbStartL];
   \   000000C0   74009DE5           LDR      R0,[SP, #+116]
   \   000000C4   012082E2           ADD      R2,R2,#+1
   \   000000C8   04208DE5           STR      R2,[SP, #+4]
   \   000000CC   340090E5           LDR      R0,[R0, #+52]
   \   000000D0   840080E0           ADD      R0,R0,R4, LSL #+1
   \   000000D4   F070D0E1           LDRSH    R7,[R0, #+0]
    238          		sampsLeft = nSamps - i;
   \   000000D8   071041E0           SUB      R1,R1,R7
   \   000000DC   00108DE5           STR      R1,[SP, #+0]
    239          
    240          		for(cb = cbStartL; cb < cbEndL; cb++) {
   \   000000E0   210000EA           B        ??xmp3_IntensityProcMPEG2_6
    241          			sfIdx = sfis->l[cb];
    242          			if (sfIdx == il[cb]) {
    243          				fl = ISFIIP[midSideFlag][0];
    244          				fr = ISFIIP[midSideFlag][1];
    245          			} else {
    246          				isf = (sfis->l[cb] + 1) >> 1;
    247          				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
    248          				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
    249          			}
    250          			n = MIN(fh->sfBand->l[cb + 1] - fh->sfBand->l[cb], sampsLeft);
    251          
    252          			for(j = 0; j < n; j++, i++) {
    253          				xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
   \                     ??xmp3_IntensityProcMPEG2_7:
   \   000000E4   70009DE5           LDR      R0,[SP, #+112]
    254          				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
    255          			}
   \   000000E8   018088E2           ADD      R8,R8,#+1
   \   000000EC   07B180E0           ADD      R11,R0,R7, LSL #+2
   \   000000F0   00109BE5           LDR      R1,[R11, #+0]
   \   000000F4   0900A0E1           MOV      R0,R9
   \   000000F8   ........           _BLF     MULSHIFT32,??MULSHIFT32??rA
   \   000000FC   70109DE5           LDR      R1,[SP, #+112]
   \   00000100   0001A0E1           LSL      R0,R0,#+2
   \   00000104   071181E0           ADD      R1,R1,R7, LSL #+2
   \   00000108   000981E5           STR      R0,[R1, #+2304]
   \   0000010C   C01FA0E1           ASR      R1,R0,#+31
   \   00000110   000021E0           EOR      R0,R1,R0
   \   00000114   010040E0           SUB      R0,R0,R1
   \   00000118   00109BE5           LDR      R1,[R11, #+0]
   \   0000011C   055080E1           ORR      R5,R0,R5
   \   00000120   0A00A0E1           MOV      R0,R10
   \   00000124   ........           _BLF     MULSHIFT32,??MULSHIFT32??rA
   \   00000128   0001A0E1           LSL      R0,R0,#+2
   \   0000012C   00008BE5           STR      R0,[R11, #+0]
   \   00000130   C01FA0E1           ASR      R1,R0,#+31
   \   00000134   000021E0           EOR      R0,R1,R0
   \   00000138   010040E0           SUB      R0,R0,R1
   \   0000013C   066080E1           ORR      R6,R0,R6
   \   00000140   017087E2           ADD      R7,R7,#+1
   \                     ??xmp3_IntensityProcMPEG2_8:
   \   00000144   08009DE5           LDR      R0,[SP, #+8]
   \   00000148   000058E1           CMP      R8,R0
   \   0000014C   E4FFFFBA           BLT      ??xmp3_IntensityProcMPEG2_7
    256          
    257          			/* early exit once we've used all the non-zero samples */
    258          			sampsLeft -= n;
   \                     ??xmp3_IntensityProcMPEG2_9:
   \   00000150   00109DE5           LDR      R1,[SP, #+0]
   \   00000154   08209DE5           LDR      R2,[SP, #+8]
   \   00000158   021041E0           SUB      R1,R1,R2
   \   0000015C   00108DE5           STR      R1,[SP, #+0]
    259          			if (sampsLeft == 0)		
   \   00000160   000051E3           CMP      R1,#+0
   \   00000164   8D00000A           BEQ      ??xmp3_IntensityProcMPEG2_10
   \   00000168   014084E2           ADD      R4,R4,#+1
   \                     ??xmp3_IntensityProcMPEG2_6:
   \   0000016C   04009DE5           LDR      R0,[SP, #+4]
   \   00000170   000054E1           CMP      R4,R0
   \   00000174   890000AA           BGE      ??xmp3_IntensityProcMPEG2_10
   \   00000178   78009DE5           LDR      R0,[SP, #+120]
   \   0000017C   14108DE2           ADD      R1,SP,#+20
   \   00000180   D00094E1           LDRSB    R0,[R4, +R0]
   \   00000184   041191E7           LDR      R1,[R1, +R4, LSL #+2]
   \   00000188   010050E1           CMP      R0,R1
   \   0000018C   0500001A           BNE      ??xmp3_IntensityProcMPEG2_11
   \   00000190   A8009DE5           LDR      R0,[SP, #+168]
   \   00000194   ........           LDR      R1,??DataTable3  ;; xmp3_ISFIIP
   \   00000198   80A191E7           LDR      R10,[R1, +R0, LSL #+3]
   \   0000019C   10009DE5           LDR      R0,[SP, #+16]
   \   000001A0   049090E5           LDR      R9,[R0, #+4]
   \   000001A4   080000EA           B        ??xmp3_IntensityProcMPEG2_12
   \                     ??xmp3_IntensityProcMPEG2_11:
   \   000001A8   0C309DE5           LDR      R3,[SP, #+12]
   \   000001AC   011080E2           ADD      R1,R0,#+1
   \   000001B0   C110A0E1           ASR      R1,R1,#+1
   \   000001B4   010010E3           TST      R0,#0x1
   \   000001B8   0120A011           MOVNE    R2,R1
   \   000001BC   0020A003           MOVEQ    R2,#+0
   \   000001C0   02A193E7           LDR      R10,[R3, +R2, LSL #+2]
   \   000001C4   0010A013           MOVNE    R1,#+0
   \   000001C8   019193E7           LDR      R9,[R3, +R1, LSL #+2]
   \                     ??xmp3_IntensityProcMPEG2_12:
   \   000001CC   74009DE5           LDR      R0,[SP, #+116]
   \   000001D0   341090E5           LDR      R1,[R0, #+52]
   \   000001D4   840081E0           ADD      R0,R1,R4, LSL #+1
   \   000001D8   F030D0E1           LDRSH    R3,[R0, #+0]
   \   000001DC   841081E0           ADD      R1,R1,R4, LSL #+1
   \   000001E0   F220D1E1           LDRSH    R2,[R1, #+2]
   \   000001E4   032042E0           SUB      R2,R2,R3
   \   000001E8   00309DE5           LDR      R3,[SP, #+0]
   \   000001EC   030052E1           CMP      R2,R3
   \   000001F0   040000AA           BGE      ??xmp3_IntensityProcMPEG2_13
   \   000001F4   F210D1E1           LDRSH    R1,[R1, #+2]
   \   000001F8   F000D0E1           LDRSH    R0,[R0, #+0]
   \   000001FC   000041E0           SUB      R0,R1,R0
   \   00000200   08008DE5           STR      R0,[SP, #+8]
   \   00000204   010000EA           B        ??xmp3_IntensityProcMPEG2_14
   \                     ??xmp3_IntensityProcMPEG2_13:
   \   00000208   0310A0E1           MOV      R1,R3
   \   0000020C   08108DE5           STR      R1,[SP, #+8]
   \                     ??xmp3_IntensityProcMPEG2_14:
   \   00000210   08009DE5           LDR      R0,[SP, #+8]
   \   00000214   0080A0E3           MOV      R8,#+0
   \   00000218   010050E3           CMP      R0,#+1
   \   0000021C   C8FFFFAA           BGE      ??xmp3_IntensityProcMPEG2_8
   \   00000220   CAFFFFEA           B        ??xmp3_IntensityProcMPEG2_9
    260          				break;
    261          		}
    262          	} else {
    263          		/* short or mixed blocks */
    264          		il[12] = 1;
   \                     ??xmp3_IntensityProcMPEG2_5:
   \   00000224   44308DE5           STR      R3,[SP, #+68]
    265          
    266          		for(w = 0; w < 3; w++) {
   \   00000228   0010A0E3           MOV      R1,#+0
   \   0000022C   04108DE5           STR      R1,[SP, #+4]
    267          			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
   \                     ??xmp3_IntensityProcMPEG2_15:
   \   00000230   04009DE5           LDR      R0,[SP, #+4]
   \   00000234   A0109DE5           LDR      R1,[SP, #+160]
   \   00000238   000181E0           ADD      R0,R1,R0, LSL #+2
   \   0000023C   1C1090E5           LDR      R1,[R0, #+28]
    268          			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
   \   00000240   040090E5           LDR      R0,[R0, #+4]
   \   00000244   014081E2           ADD      R4,R1,#+1
   \   00000248   010080E2           ADD      R0,R0,#+1
   \   0000024C   00008DE5           STR      R0,[SP, #+0]
    269          			i = 3 * fh->sfBand->s[cbStartS] + w;
   \   00000250   74009DE5           LDR      R0,[SP, #+116]
   \   00000254   04109DE5           LDR      R1,[SP, #+4]
   \   00000258   340090E5           LDR      R0,[R0, #+52]
   \   0000025C   840080E0           ADD      R0,R0,R4, LSL #+1
   \   00000260   FE02D0E1           LDRSH    R0,[R0, #+46]
   \   00000264   800080E0           ADD      R0,R0,R0, LSL #+1
   \   00000268   007081E0           ADD      R7,R1,R0
    270          
    271          			/* skip through sample array by 3, so early-exit logic would be more tricky */
    272          			for(cb = cbStartS; cb < cbEndS; cb++) {
   \   0000026C   00009DE5           LDR      R0,[SP, #+0]
   \   00000270   000054E1           CMP      R4,R0
   \   00000274   440000AA           BGE      ??xmp3_IntensityProcMPEG2_16
    273          				sfIdx = sfis->s[cb][w];
   \                     ??xmp3_IntensityProcMPEG2_17:
   \   00000278   04109DE5           LDR      R1,[SP, #+4]
   \   0000027C   78209DE5           LDR      R2,[SP, #+120]
   \   00000280   840084E0           ADD      R0,R4,R4, LSL #+1
   \   00000284   021081E0           ADD      R1,R1,R2
   \   00000288   011080E0           ADD      R1,R0,R1
   \   0000028C   D701D1E1           LDRSB    R0,[R1, #+23]
    274          				if (sfIdx == il[cb]) {
   \   00000290   14208DE2           ADD      R2,SP,#+20
   \   00000294   042192E7           LDR      R2,[R2, +R4, LSL #+2]
   \   00000298   020050E1           CMP      R0,R2
   \   0000029C   0500001A           BNE      ??xmp3_IntensityProcMPEG2_18
    275          					fl = ISFIIP[midSideFlag][0];
   \   000002A0   A8009DE5           LDR      R0,[SP, #+168]
   \   000002A4   ........           LDR      R1,??DataTable3  ;; xmp3_ISFIIP
   \   000002A8   80A191E7           LDR      R10,[R1, +R0, LSL #+3]
    276          					fr = ISFIIP[midSideFlag][1];
   \   000002AC   10009DE5           LDR      R0,[SP, #+16]
   \   000002B0   049090E5           LDR      R9,[R0, #+4]
   \   000002B4   080000EA           B        ??xmp3_IntensityProcMPEG2_19
    277          				} else {
    278          					isf = (sfis->s[cb][w] + 1) >> 1;
    279          					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
   \                     ??xmp3_IntensityProcMPEG2_18:
   \   000002B8   0C309DE5           LDR      R3,[SP, #+12]
   \   000002BC   011080E2           ADD      R1,R0,#+1
   \   000002C0   C110A0E1           ASR      R1,R1,#+1
   \   000002C4   010010E3           TST      R0,#0x1
   \   000002C8   0120A011           MOVNE    R2,R1
   \   000002CC   0020A003           MOVEQ    R2,#+0
   \   000002D0   02A193E7           LDR      R10,[R3, +R2, LSL #+2]
    280          					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
   \   000002D4   0010A013           MOVNE    R1,#+0
   \   000002D8   019193E7           LDR      R9,[R3, +R1, LSL #+2]
    281          				}
    282          				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
   \                     ??xmp3_IntensityProcMPEG2_19:
   \   000002DC   74009DE5           LDR      R0,[SP, #+116]
   \   000002E0   012084E2           ADD      R2,R4,#+1
   \   000002E4   340090E5           LDR      R0,[R0, #+52]
    283          
    284          				for(j = 0; j < n; j++, i+=3) {
   \   000002E8   0080A0E3           MOV      R8,#+0
   \   000002EC   822080E0           ADD      R2,R0,R2, LSL #+1
   \   000002F0   FE22D2E1           LDRSH    R2,[R2, #+46]
   \   000002F4   840080E0           ADD      R0,R0,R4, LSL #+1
   \   000002F8   FE02D0E1           LDRSH    R0,[R0, #+46]
   \   000002FC   000042E0           SUB      R0,R2,R0
   \   00000300   08008DE5           STR      R0,[SP, #+8]
   \   00000304   010050E3           CMP      R0,#+1
   \   00000308   180000AA           BGE      ??xmp3_IntensityProcMPEG2_20
   \   0000030C   1A0000EA           B        ??xmp3_IntensityProcMPEG2_21
    285          					xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
   \                     ??xmp3_IntensityProcMPEG2_22:
   \   00000310   70009DE5           LDR      R0,[SP, #+112]
    286          					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
    287          				}
   \   00000314   018088E2           ADD      R8,R8,#+1
   \   00000318   07B180E0           ADD      R11,R0,R7, LSL #+2
   \   0000031C   00109BE5           LDR      R1,[R11, #+0]
   \   00000320   0900A0E1           MOV      R0,R9
   \   00000324   ........           _BLF     MULSHIFT32,??MULSHIFT32??rA
   \   00000328   70109DE5           LDR      R1,[SP, #+112]
   \   0000032C   0001A0E1           LSL      R0,R0,#+2
   \   00000330   071181E0           ADD      R1,R1,R7, LSL #+2
   \   00000334   000981E5           STR      R0,[R1, #+2304]
   \   00000338   C01FA0E1           ASR      R1,R0,#+31
   \   0000033C   000021E0           EOR      R0,R1,R0
   \   00000340   010040E0           SUB      R0,R0,R1
   \   00000344   00109BE5           LDR      R1,[R11, #+0]
   \   00000348   055080E1           ORR      R5,R0,R5
   \   0000034C   0A00A0E1           MOV      R0,R10
   \   00000350   ........           _BLF     MULSHIFT32,??MULSHIFT32??rA
   \   00000354   0001A0E1           LSL      R0,R0,#+2
   \   00000358   00008BE5           STR      R0,[R11, #+0]
   \   0000035C   C01FA0E1           ASR      R1,R0,#+31
   \   00000360   000021E0           EOR      R0,R1,R0
   \   00000364   010040E0           SUB      R0,R0,R1
   \   00000368   066080E1           ORR      R6,R0,R6
   \   0000036C   037087E2           ADD      R7,R7,#+3
   \                     ??xmp3_IntensityProcMPEG2_20:
   \   00000370   08009DE5           LDR      R0,[SP, #+8]
   \   00000374   000058E1           CMP      R8,R0
   \   00000378   E4FFFFBA           BLT      ??xmp3_IntensityProcMPEG2_22
    288          			}
   \                     ??xmp3_IntensityProcMPEG2_21:
   \   0000037C   00009DE5           LDR      R0,[SP, #+0]
   \   00000380   014084E2           ADD      R4,R4,#+1
   \   00000384   000054E1           CMP      R4,R0
   \   00000388   BAFFFFBA           BLT      ??xmp3_IntensityProcMPEG2_17
    289          		}
   \                     ??xmp3_IntensityProcMPEG2_16:
   \   0000038C   04109DE5           LDR      R1,[SP, #+4]
   \   00000390   011081E2           ADD      R1,R1,#+1
   \   00000394   04108DE5           STR      R1,[SP, #+4]
   \   00000398   030051E3           CMP      R1,#+3
   \   0000039C   A3FFFFBA           BLT      ??xmp3_IntensityProcMPEG2_15
    290          	}
    291          	mOut[0] = mOutL;
   \                     ??xmp3_IntensityProcMPEG2_10:
   \   000003A0   B0009DE5           LDR      R0,[SP, #+176]
   \   000003A4   006080E5           STR      R6,[R0, #+0]
    292          	mOut[1] = mOutR;
   \   000003A8   B0009DE5           LDR      R0,[SP, #+176]
   \   000003AC   045080E5           STR      R5,[R0, #+4]
    293          
    294          	return;
   \   000003B0   7CD08DE2           ADD      SP,SP,#+124
   \   000003B4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??xmp3_IntensityProcMPEG2_0:
   \   000003B8   ........           DC32     xmp3_ISFMpeg2
    295          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     xmp3_ISFIIP
    296          

   Maximum stack usage in bytes:

     Function                CSTACK
     --------                ------
     xmp3_IntensityProcMPEG1   116
     xmp3_IntensityProcMPEG2   160
     xmp3_MidSideProc           20


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     xmp3_MidSideProc         136
     xmp3_IntensityProcMPEG1 1028
     xmp3_IntensityProcMPEG2  956
     ??DataTable3               4
      Others                   24

 
 2 148 bytes in segment CODE
 
 2 124 bytes of CODE memory (+ 24 bytes shared)

Errors: none
Warnings: 1
