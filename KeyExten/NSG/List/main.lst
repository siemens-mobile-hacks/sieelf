##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/Jun/2010  15:34:25 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  F:\SVN\cn\KeyExten\main.c                            #
#    Command line    =  F:\SVN\cn\KeyExten\main.c -D NEWSGOLD -lC            #
#                       F:\SVN\cn\KeyExten\NSG\List\ -o                      #
#                       F:\SVN\cn\KeyExten\NSG\Obj\ -s9 --no_unroll          #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "F:\software\Embedded       #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "F:\software\Embedded Workbench 4.0                  #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  F:\SVN\cn\KeyExten\NSG\List\main.lst                 #
#    Object file     =  F:\SVN\cn\KeyExten\NSG\Obj\main.r79                  #
#                                                                            #
#                                                                            #
##############################################################################

F:\SVN\cn\KeyExten\main.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\cfg_items.h"
      3          #include "conf_loader.h"
      4          

   \                                 In segment DATA_Z, align 4, align-sorted
      5          CSM_DESC icsmd;
   \                     icsmd:
   \   00000000                      DS8 40
      6          //int (*old_icsm_onMessage)(CSM_RAM*,GBS_MSG*);
      7          //void (*old_icsm_onClose)(CSM_RAM*);

   \                                 In segment DATA_I, align 4, align-sorted
      8          int e=2;
   \                     e:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for e>`

   \                                 In segment DATA_C, align 4, align-sorted
      9          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     10          extern void kill_data(void *p, void (*func_p)(void *));
     11          
     12          typedef struct
     13          {
     14            CSM_RAM csm;
     15          }MAIN_CSM;
     16          
     17          extern const unsigned int K1ST;
     18          extern const unsigned int K1;
     19          extern const unsigned int K2ST;
     20          extern const unsigned int K2;
     21          extern const unsigned int K3ST;
     22          extern const unsigned int K3;
     23          extern const unsigned int K4ST;
     24          extern const unsigned int K4;
     25          extern const unsigned int K5ST;
     26          extern const unsigned int K5;
     27          extern const unsigned int K6ST;
     28          extern const unsigned int K6;
     29          extern const unsigned int KENTER;
     30          extern const unsigned int KSL;
     31          extern const unsigned int KSR;
     32          extern const unsigned int KG;
     33          extern const unsigned int KR;
     34          extern const unsigned int KUP;
     35          extern const unsigned int KDN;
     36          extern const unsigned int KL;
     37          extern const unsigned int KRI;
     38          extern const unsigned int K_1;
     39          extern const unsigned int K_2;
     40          extern const unsigned int K_3;
     41          extern const unsigned int K_4;
     42          extern const unsigned int K_5;
     43          extern const unsigned int K_6;
     44          extern const unsigned int K_7;
     45          extern const unsigned int K_8;
     46          extern const unsigned int K_9;
     47          extern const unsigned int KX;
     48          extern const unsigned int K_0;
     49          extern const unsigned int KJ;
     50          extern const unsigned int KVU;
     51          extern const unsigned int KVD;
     52          extern const unsigned int ENA_M_B;
     53          
     54          
     55          

   \                                 In segment CODE, align 4, keep-with-next
     56          int my_keyhook(int submsg, int msg)
     57          {
     58           extern const char *successed_config_filename;
     59           int MYKST[29]={0x1A,0x01,0x04,0x3B,0x3C,0x3D,0x3E,0x0C,K1ST,K2ST,K3ST,K4ST,0x0D,0x0E,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x0B,0x2A,0x23,K5ST,K6ST};
   \                     my_keyhook:
   \   00000000   DC329FE5           LDR      R3,??my_keyhook_0  ;; `?<Constant {26, 1, 4, 59, 60, 61, 62, 12, 0, 0`
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   E8D04DE2           SUB      SP,SP,#+232
   \   0000000C   74208DE2           ADD      R2,SP,#+116
   \   00000010   74C0A0E3           MOV      R12,#+116
   \                     ??my_keyhook_1:
   \   00000014   04C05CE2           SUBS     R12,R12,#+4
   \   00000018   0C4093E7           LDR      R4,[R3, R12]
   \   0000001C   0C4082E7           STR      R4,[R2, R12]
   \   00000020   FBFFFF1A           BNE      ??my_keyhook_1
   \   00000024   BC329FE5           LDR      R3,??my_keyhook_0+0x4  ;; K1ST
     60           int MYK[29]={KENTER,KSL,KSR,KUP,KDN,KL,KRI,KR,K1,K2,K3,K4,KVU,KVD,K_0,K_1,K_2,K_3,K_4,K_5,K_6,K_7,K_8,K_9,KG,KX,KJ,K5,K6};
     61           int i;
     62           WSHDR *ws;
     63           if (submsg==ENA_M_B)
   \   00000028   BC429FE5           LDR      R4,??my_keyhook_0+0x8  ;; ENA_M_B
   \   0000002C   003093E5           LDR      R3,[R3, #+0]
   \   00000030   B8229FE5           LDR      R2,??my_keyhook_0+0xC  ;; e
   \   00000034   004094E5           LDR      R4,[R4, #+0]
   \   00000038   94308DE5           STR      R3,[SP, #+148]
   \   0000003C   B0329FE5           LDR      R3,??my_keyhook_0+0x10  ;; K2ST
   \   00000040   040050E1           CMP      R0,R4
   \   00000044   003093E5           LDR      R3,[R3, #+0]
   \   00000048   98308DE5           STR      R3,[SP, #+152]
   \   0000004C   A4329FE5           LDR      R3,??my_keyhook_0+0x14  ;; K3ST
   \   00000050   003093E5           LDR      R3,[R3, #+0]
   \   00000054   9C308DE5           STR      R3,[SP, #+156]
   \   00000058   9C329FE5           LDR      R3,??my_keyhook_0+0x18  ;; K4ST
   \   0000005C   003093E5           LDR      R3,[R3, #+0]
   \   00000060   A0308DE5           STR      R3,[SP, #+160]
   \   00000064   94329FE5           LDR      R3,??my_keyhook_0+0x1C  ;; K5ST
   \   00000068   003093E5           LDR      R3,[R3, #+0]
   \   0000006C   E0308DE5           STR      R3,[SP, #+224]
   \   00000070   8C329FE5           LDR      R3,??my_keyhook_0+0x20  ;; K6ST
   \   00000074   003093E5           LDR      R3,[R3, #+0]
   \   00000078   E4308DE5           STR      R3,[SP, #+228]
   \   0000007C   84329FE5           LDR      R3,??my_keyhook_0+0x24  ;; KENTER
   \   00000080   003093E5           LDR      R3,[R3, #+0]
   \   00000084   00308DE5           STR      R3,[SP, #+0]
   \   00000088   7C329FE5           LDR      R3,??my_keyhook_0+0x28  ;; KSL
   \   0000008C   003093E5           LDR      R3,[R3, #+0]
   \   00000090   04308DE5           STR      R3,[SP, #+4]
   \   00000094   74329FE5           LDR      R3,??my_keyhook_0+0x2C  ;; KSR
   \   00000098   003093E5           LDR      R3,[R3, #+0]
   \   0000009C   08308DE5           STR      R3,[SP, #+8]
   \   000000A0   6C329FE5           LDR      R3,??my_keyhook_0+0x30  ;; KUP
   \   000000A4   003093E5           LDR      R3,[R3, #+0]
   \   000000A8   0C308DE5           STR      R3,[SP, #+12]
   \   000000AC   64329FE5           LDR      R3,??my_keyhook_0+0x34  ;; KDN
   \   000000B0   003093E5           LDR      R3,[R3, #+0]
   \   000000B4   10308DE5           STR      R3,[SP, #+16]
   \   000000B8   5C329FE5           LDR      R3,??my_keyhook_0+0x38  ;; KL
   \   000000BC   003093E5           LDR      R3,[R3, #+0]
   \   000000C0   14308DE5           STR      R3,[SP, #+20]
   \   000000C4   54329FE5           LDR      R3,??my_keyhook_0+0x3C  ;; KRI
   \   000000C8   003093E5           LDR      R3,[R3, #+0]
   \   000000CC   18308DE5           STR      R3,[SP, #+24]
   \   000000D0   4C329FE5           LDR      R3,??my_keyhook_0+0x40  ;; KR
   \   000000D4   003093E5           LDR      R3,[R3, #+0]
   \   000000D8   1C308DE5           STR      R3,[SP, #+28]
   \   000000DC   44329FE5           LDR      R3,??my_keyhook_0+0x44  ;; K1
   \   000000E0   003093E5           LDR      R3,[R3, #+0]
   \   000000E4   20308DE5           STR      R3,[SP, #+32]
   \   000000E8   3C329FE5           LDR      R3,??my_keyhook_0+0x48  ;; K2
   \   000000EC   003093E5           LDR      R3,[R3, #+0]
   \   000000F0   24308DE5           STR      R3,[SP, #+36]
   \   000000F4   34329FE5           LDR      R3,??my_keyhook_0+0x4C  ;; K3
   \   000000F8   003093E5           LDR      R3,[R3, #+0]
   \   000000FC   28308DE5           STR      R3,[SP, #+40]
   \   00000100   2C329FE5           LDR      R3,??my_keyhook_0+0x50  ;; K4
   \   00000104   003093E5           LDR      R3,[R3, #+0]
   \   00000108   2C308DE5           STR      R3,[SP, #+44]
   \   0000010C   24329FE5           LDR      R3,??my_keyhook_0+0x54  ;; KVU
   \   00000110   003093E5           LDR      R3,[R3, #+0]
   \   00000114   30308DE5           STR      R3,[SP, #+48]
   \   00000118   1C329FE5           LDR      R3,??my_keyhook_0+0x58  ;; KVD
   \   0000011C   003093E5           LDR      R3,[R3, #+0]
   \   00000120   34308DE5           STR      R3,[SP, #+52]
   \   00000124   14329FE5           LDR      R3,??my_keyhook_0+0x5C  ;; K_0
   \   00000128   003093E5           LDR      R3,[R3, #+0]
   \   0000012C   38308DE5           STR      R3,[SP, #+56]
   \   00000130   0C329FE5           LDR      R3,??my_keyhook_0+0x60  ;; K_1
   \   00000134   003093E5           LDR      R3,[R3, #+0]
   \   00000138   3C308DE5           STR      R3,[SP, #+60]
   \   0000013C   04329FE5           LDR      R3,??my_keyhook_0+0x64  ;; K_2
   \   00000140   003093E5           LDR      R3,[R3, #+0]
   \   00000144   40308DE5           STR      R3,[SP, #+64]
   \   00000148   FC319FE5           LDR      R3,??my_keyhook_0+0x68  ;; K_3
   \   0000014C   003093E5           LDR      R3,[R3, #+0]
   \   00000150   44308DE5           STR      R3,[SP, #+68]
   \   00000154   F4319FE5           LDR      R3,??my_keyhook_0+0x6C  ;; K_4
   \   00000158   003093E5           LDR      R3,[R3, #+0]
   \   0000015C   48308DE5           STR      R3,[SP, #+72]
   \   00000160   EC319FE5           LDR      R3,??my_keyhook_0+0x70  ;; K_5
   \   00000164   003093E5           LDR      R3,[R3, #+0]
   \   00000168   4C308DE5           STR      R3,[SP, #+76]
   \   0000016C   E4319FE5           LDR      R3,??my_keyhook_0+0x74  ;; K_6
   \   00000170   003093E5           LDR      R3,[R3, #+0]
   \   00000174   50308DE5           STR      R3,[SP, #+80]
   \   00000178   DC319FE5           LDR      R3,??my_keyhook_0+0x78  ;; K_7
   \   0000017C   003093E5           LDR      R3,[R3, #+0]
   \   00000180   54308DE5           STR      R3,[SP, #+84]
   \   00000184   D4319FE5           LDR      R3,??my_keyhook_0+0x7C  ;; K_8
   \   00000188   003093E5           LDR      R3,[R3, #+0]
   \   0000018C   58308DE5           STR      R3,[SP, #+88]
   \   00000190   CC319FE5           LDR      R3,??my_keyhook_0+0x80  ;; K_9
   \   00000194   003093E5           LDR      R3,[R3, #+0]
   \   00000198   5C308DE5           STR      R3,[SP, #+92]
   \   0000019C   C4319FE5           LDR      R3,??my_keyhook_0+0x84  ;; KG
   \   000001A0   003093E5           LDR      R3,[R3, #+0]
   \   000001A4   60308DE5           STR      R3,[SP, #+96]
   \   000001A8   BC319FE5           LDR      R3,??my_keyhook_0+0x88  ;; KX
   \   000001AC   003093E5           LDR      R3,[R3, #+0]
   \   000001B0   64308DE5           STR      R3,[SP, #+100]
   \   000001B4   B4319FE5           LDR      R3,??my_keyhook_0+0x8C  ;; KJ
   \   000001B8   003093E5           LDR      R3,[R3, #+0]
   \   000001BC   68308DE5           STR      R3,[SP, #+104]
   \   000001C0   AC319FE5           LDR      R3,??my_keyhook_0+0x90  ;; K5
   \   000001C4   003093E5           LDR      R3,[R3, #+0]
   \   000001C8   6C308DE5           STR      R3,[SP, #+108]
   \   000001CC   A4319FE5           LDR      R3,??my_keyhook_0+0x94  ;; K6
   \   000001D0   003093E5           LDR      R3,[R3, #+0]
   \   000001D4   70308DE5           STR      R3,[SP, #+112]
   \   000001D8   003092E5           LDR      R3,[R2, #+0]
   \   000001DC   1800001A           BNE      ??my_keyhook_2
     64           {
     65            switch(msg)
   \   000001E0   651F51E2           SUBS     R1,R1,#+404
   \   000001E4   0200000A           BEQ      ??my_keyhook_3
   \   000001E8   011051E2           SUBS     R1,R1,#+1
   \   000001EC   0300000A           BEQ      ??my_keyhook_4
   \   000001F0   380000EA           B        ??my_keyhook_5
     66            {
     67            case KEY_DOWN:
     68              break;
     69            case KEY_UP:
     70              e=e+1;
   \                     ??my_keyhook_3:
   \   000001F4   010083E2           ADD      R0,R3,#+1
   \   000001F8   000082E5           STR      R0,[R2, #+0]
   \   000001FC   350000EA           B        ??my_keyhook_5
     71              break;
     72            case LONG_PRESS:
     73              ws=AllocWS(150);
   \                     ??my_keyhook_4:
   \   00000200   9600A0E3           MOV      R0,#+150
   \   00000204   250100EF           SWI      +293
   \   00000208   0040A0E1           MOV      R4,R0
     74              str_2ws(ws,successed_config_filename, 128);
   \   0000020C   ........           LDR      R0,??DataTable1  ;; successed_config_filename
   \   00000210   8020A0E3           MOV      R2,#+128
   \   00000214   001090E5           LDR      R1,[R0, #+0]
   \   00000218   0400A0E1           MOV      R0,R4
   \   0000021C   6C0100EF           SWI      +364
     75              ExecuteFile(ws, 0, 0);
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0010A0E3           MOV      R1,#+0
   \   00000228   0400A0E1           MOV      R0,R4
   \   0000022C   940000EF           SWI      +148
     76              FreeWS(ws);
   \   00000230   0400A0E1           MOV      R0,R4
   \   00000234   290100EF           SWI      +297
     77              break;
     78            }
     79            return(2);
   \   00000238   0200A0E3           MOV      R0,#+2
   \   0000023C   E8D08DE2           ADD      SP,SP,#+232
   \   00000240   1080BDE8           POP      {R4,PC}          ;; return
     80           }
     81           if (e%2!=0) return(0);
   \                     ??my_keyhook_2:
   \   00000244   A32F83E0           ADD      R2,R3,R3, LSR #+31
   \   00000248   C220A0E1           ASR      R2,R2,#+1
   \   0000024C   822053E0           SUBS     R2,R3,R2, LSL #+1
   \   00000250   0400000A           BEQ      ??my_keyhook_6
   \                     ??my_keyhook_7:
   \   00000254   0000A0E3           MOV      R0,#+0
   \   00000258   1F0000EA           B        ??my_keyhook_8
     82           for(i=0;i<29;i++)
   \                     ??my_keyhook_9:
   \   0000025C   012082E2           ADD      R2,R2,#+1
   \   00000260   1D0052E3           CMP      R2,#+29
   \   00000264   FAFFFFAA           BGE      ??my_keyhook_7
     83           {
     84            if (submsg==MYK[i])
   \                     ??my_keyhook_6:
   \   00000268   0D30A0E1           MOV      R3,SP
   \   0000026C   023193E7           LDR      R3,[R3, +R2, LSL #+2]
   \   00000270   030050E1           CMP      R0,R3
   \   00000274   F8FFFF1A           BNE      ??my_keyhook_9
     85            {
     86             switch(msg)
   \   00000278   0900A0E3           MOV      R0,#+9
   \   0000027C   420C80E3           ORR      R0,R0,#0x4200
   \   00000280   9330A0E3           MOV      R3,#+147
   \   00000284   403F83E3           ORR      R3,R3,#0x100
   \   00000288   030051E1           CMP      R1,R3
   \   0000028C   0500000A           BEQ      ??my_keyhook_10
   \   00000290   650F51E3           CMP      R1,#+404
   \   00000294   0700000A           BEQ      ??my_keyhook_11
   \   00000298   023083E2           ADD      R3,R3,#+2
   \   0000029C   030051E1           CMP      R1,R3
   \   000002A0   0800000A           BEQ      ??my_keyhook_12
   \   000002A4   0B0000EA           B        ??my_keyhook_5
     87             {
     88            case KEY_DOWN:
     89              GBS_SendMessage(MMI_CEPID,KEY_DOWN,MYKST[i]);
   \                     ??my_keyhook_10:
   \   000002A8   74108DE2           ADD      R1,SP,#+116
   \   000002AC   022191E7           LDR      R2,[R1, +R2, LSL #+2]
   \   000002B0   0310A0E1           MOV      R1,R3
   \                     ??my_keyhook_13:
   \   000002B4   060000EA           B        ??my_keyhook_14
     90              break;
     91            case KEY_UP:
     92              GBS_SendMessage(MMI_CEPID,KEY_UP,MYKST[i]);
   \                     ??my_keyhook_11:
   \   000002B8   74108DE2           ADD      R1,SP,#+116
   \   000002BC   022191E7           LDR      R2,[R1, +R2, LSL #+2]
   \   000002C0   651FA0E3           MOV      R1,#+404
   \   000002C4   020000EA           B        ??my_keyhook_14
     93              break;
     94            case LONG_PRESS:
     95              GBS_SendMessage(MMI_CEPID,LONG_PRESS,MYKST[i]);
   \                     ??my_keyhook_12:
   \   000002C8   74108DE2           ADD      R1,SP,#+116
   \   000002CC   022191E7           LDR      R2,[R1, +R2, LSL #+2]
   \   000002D0   0310A0E1           MOV      R1,R3
   \                     ??my_keyhook_14:
   \   000002D4   000100EF           SWI      +256
   \                     ??my_keyhook_5:
   \   000002D8   0200A0E3           MOV      R0,#+2
   \                     ??my_keyhook_8:
   \   000002DC   E8D08DE2           ADD      SP,SP,#+232
   \   000002E0   1080BDE8           POP      {R4,PC}
   \                     ??my_keyhook_0:
   \   000002E4   ........           DC32     `?<Constant {26, 1, 4, 59, 60, 61, 62, 12, 0, 0`
   \   000002E8   ........           DC32     K1ST
   \   000002EC   ........           DC32     ENA_M_B
   \   000002F0   ........           DC32     e
   \   000002F4   ........           DC32     K2ST
   \   000002F8   ........           DC32     K3ST
   \   000002FC   ........           DC32     K4ST
   \   00000300   ........           DC32     K5ST
   \   00000304   ........           DC32     K6ST
   \   00000308   ........           DC32     KENTER
   \   0000030C   ........           DC32     KSL
   \   00000310   ........           DC32     KSR
   \   00000314   ........           DC32     KUP
   \   00000318   ........           DC32     KDN
   \   0000031C   ........           DC32     KL
   \   00000320   ........           DC32     KRI
   \   00000324   ........           DC32     KR
   \   00000328   ........           DC32     K1
   \   0000032C   ........           DC32     K2
   \   00000330   ........           DC32     K3
   \   00000334   ........           DC32     K4
   \   00000338   ........           DC32     KVU
   \   0000033C   ........           DC32     KVD
   \   00000340   ........           DC32     K_0
   \   00000344   ........           DC32     K_1
   \   00000348   ........           DC32     K_2
   \   0000034C   ........           DC32     K_3
   \   00000350   ........           DC32     K_4
   \   00000354   ........           DC32     K_5
   \   00000358   ........           DC32     K_6
   \   0000035C   ........           DC32     K_7
   \   00000360   ........           DC32     K_8
   \   00000364   ........           DC32     K_9
   \   00000368   ........           DC32     KG
   \   0000036C   ........           DC32     KX
   \   00000370   ........           DC32     KJ
   \   00000374   ........           DC32     K5
   \   00000378   ........           DC32     K6
     96              break;
     97             }
     98             return(2);
     99            }
    100           }
    101           return (0);
    102          }
    103          
    104          
    105          
    106          #pragma inline=forced
    107          int toupper(int c)
    108          {
    109            if ((c>='a')&&(c<='z')) c+='A'-'a';
    110            return(c);
    111          }
    112          

   \                                 In segment CODE, align 4, keep-with-next
    113          int strcmp_nocase(const char *s1,const char *s2)
    114          {
    115            int i;
    116            int c;
    117            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
   \                     strcmp_nocase:
   \                     ??strcmp_nocase_0:
   \   00000000   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000004   610052E3           CMP      R2,#+97
   \   00000008   010000BA           BLT      ??strcmp_nocase_1
   \   0000000C   7B0052E3           CMP      R2,#+123
   \   00000010   202042B2           SUBLT    R2,R2,#+32
   \                     ??strcmp_nocase_1:
   \   00000014   00C0D1E5           LDRB     R12,[R1, #+0]
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   0230A0E1           MOV      R3,R2
   \   00000020   61005CE3           CMP      R12,#+97
   \   00000024   010000BA           BLT      ??strcmp_nocase_2
   \   00000028   7B005CE3           CMP      R12,#+123
   \   0000002C   20C04CB2           SUBLT    R12,R12,#+32
   \                     ??strcmp_nocase_2:
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   0C2052E0           SUBS     R2,R2,R12
   \   00000038   0100001A           BNE      ??strcmp_nocase_3
   \   0000003C   000053E3           CMP      R3,#+0
   \   00000040   EEFFFF1A           BNE      ??strcmp_nocase_0
    118            return(i);
   \                     ??strcmp_nocase_3:
   \   00000044   0200A0E1           MOV      R0,R2
   \   00000048   1EFF2FE1           BX       LR               ;; return
    119          }
    120          
    121          /*
    122          int MyIDLECSM_onMessage(CSM_RAM* data,GBS_MSG* msg)
    123          {
    124           int csm_result;
    125           csm_result = old_icsm_onMessage(data, msg);
    126           
    127           if(msg->msg == MSG_RECONFIGURE_REQ) 
    128           {
    129            extern const char *successed_config_filename;
    130            if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
    131            {
    132             ShowMSG(1,(int)"KeyExten config updated!");
    133             InitConfig();
    134            }
    135           }
    136           return csm_result;
    137          }
    138          
    139          void MyIDLECSM_onClose(CSM_RAM *data)
    140          {
    141           extern void seqkill(void *data, void(*next_in_seq)(CSM_RAM *), void *data_to_kill, void *seqkiller);
    142           extern void *ELF_BEGIN;
    143           RemoveKeybMsgHook((void *)my_keyhook);
    144           seqkill(data,old_icsm_onClose,&ELF_BEGIN,SEQKILLER_ADR());
    145          }
    146          */

   \                                 In segment CODE, align 4, keep-with-next
    147          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
    148          {
   \                     maincsm_onmessage:
   \   00000000   00402DE9           PUSH     {LR}
    149            if(msg->msg == MSG_RECONFIGURE_REQ) 
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   AF20A0E3           MOV      R2,#+175
   \   0000000C   DE2C82E3           ORR      R2,R2,#0xDE00
   \   00000010   020050E1           CMP      R0,R2
   \   00000014   0900001A           BNE      ??maincsm_onmessage_0
    150            {
    151              extern const char *successed_config_filename;
    152              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
   \   00000018   ........           LDR      R0,??DataTable1  ;; successed_config_filename
   \   0000001C   0C1091E5           LDR      R1,[R1, #+12]
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   ........           BL       strcmp_nocase
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0300001A           BNE      ??maincsm_onmessage_0
    153              {
    154                ShowMSG(1,(int)"KeyExten config updated!");
   \   00000030   10109FE5           LDR      R1,??maincsm_onmessage_1  ;; `?<Constant "KeyExten config updated!">`
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   480100EF           SWI      +328
    155                InitConfig();
   \   0000003C   ........           _BLF     InitConfig,??InitConfig??rA
    156              }
    157            }
    158            return(1);
   \                     ??maincsm_onmessage_0:
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onmessage_1:
   \   00000048   ........           DC32     `?<Constant "KeyExten config updated!">`
    159          }
    160          

   \                                 In segment CODE, align 4, keep-with-next
    161          static void maincsm_oncreate(CSM_RAM *data)
    162          {
    163          }
   \                     maincsm_oncreate:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    164          

   \                                 In segment CODE, align 4, keep-with-next
    165          static void Killer(void)
    166          {
    167            extern void *ELF_BEGIN;
    168            //extern void seqkill(void *data, void(*next_in_seq)(CSM_RAM *), void *data_to_kill, void *seqkiller);
    169            RemoveKeybMsgHook((void *)my_keyhook);  
   \                     Killer:
   \   00000000   ........           LDR      R0,??DataTable3  ;; my_keyhook
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   2D0100EF           SWI      +301
    170            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   0000000C   158000EF           SWI      +32789
   \   00000010   0010A0E1           MOV      R1,R0
   \   00000014   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000018   0040BDE8           POP      {LR}             ;; Pop
   \   0000001C   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000020   ........           DC32     ELF_BEGIN
    171            //seqkill(data,old_icsm_onClose,&ELF_BEGIN,SEQKILLER_ADR());
    172          }
    173          

   \                                 In segment CODE, align 4, keep-with-next
    174          static void maincsm_onclose(CSM_RAM *csm)
    175          {
    176            SUBPROC((void *)Killer);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; Killer
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
    177          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     Killer
    178          

   \                                 In segment DATA_Z, align 4, align-sorted
    179          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    180          
    181          static const struct
    182          {
    183            CSM_DESC maincsm;
    184            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    185          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   280000000100       DC32 40, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
    186          {
    187            {
    188            maincsm_onmessage,
    189            maincsm_oncreate,
    190          #ifdef NEWSGOLD
    191            0,
    192            0,
    193            0,
    194            0,
    195          #endif
    196            maincsm_onclose,
    197            sizeof(MAIN_CSM),
    198            1,
    199            &minus11
    200            },
    201            {
    202              maincsm_name_body,
    203              NAMECSM_MAGIC1,
    204              NAMECSM_MAGIC2,
    205              0x0,
    206              139
    207            }
    208          };
    209          
    210          static void UpdateCSMname(void)
    211          {
    212            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"KeyExtern");
    213          }
    214          

   \                                 In segment CODE, align 4, keep-with-next
    215          int main(void)
    216          {
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    217            CSM_RAM *save_cmpc;
    218            char dummy[sizeof(MAIN_CSM)];
    219            InitConfig();
    220            UpdateCSMname();
   \   00000004   70409FE5           LDR      R4,??main_0      ;; MAINCSM
   \   00000008   28D04DE2           SUB      SP,SP,#+40
   \   0000000C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000010   68109FE5           LDR      R1,??main_0+0x4  ;; `?<Constant "KeyExtern">`
   \   00000014   280084E2           ADD      R0,R4,#+40
   \   00000018   240100EF           SWI      +292
    221            LockSched();
   \   0000001C   460100EF           SWI      +326
    222            
    223            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000020   068100EF           SWI      +33030
   \   00000024   080090E5           LDR      R0,[R0, #+8]
   \   00000028   045090E5           LDR      R5,[R0, #+4]
    224            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   0000002C   068100EF           SWI      +33030
   \   00000030   0060A0E1           MOV      R6,R0
   \   00000034   068100EF           SWI      +33030
   \   00000038   080090E5           LDR      R0,[R0, #+8]
   \   0000003C   081096E5           LDR      R1,[R6, #+8]
   \   00000040   080090E5           LDR      R0,[R0, #+8]
    225            CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   040081E5           STR      R0,[R1, #+4]
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   070100EF           SWI      +263
    226            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000058   068100EF           SWI      +33030
   \   0000005C   080090E5           LDR      R0,[R0, #+8]
   \   00000060   045080E5           STR      R5,[R0, #+4]
    227            AddKeybMsgHook((void *)my_keyhook);
   \   00000064   ........           LDR      R0,??DataTable3  ;; my_keyhook
   \   00000068   2B0100EF           SWI      +299
    228            
    229            UnlockSched();
   \   0000006C   470100EF           SWI      +327
    230            return 0;
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   28D08DE2           ADD      SP,SP,#+40
   \   00000078   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   0000007C   ........           DC32     MAINCSM
   \   00000080   ........           DC32     `?<Constant "KeyExtern">`
    231          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     successed_config_filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     my_keyhook

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for e>`:
   \   00000000   02000000           DC32 2

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {26, 1, 4, 59, 60, 61, 62, 12, 0, 0`:
   \   00000000   1A0000000100       DC32 26, 1, 4, 59, 60, 61, 62, 12, 0, 0, 0, 0, 13, 14, 48, 49, 50, 51
   \              000004000000
   \              3B0000003C00
   \              00003D000000
   \              3E0000000C00
   \              000000000000
   \              000000000000
   \              000000000000
   \              0D0000000E00
   \              000030000000
   \              310000003200
   \              000033000000
   \   00000048   340000003500       DC32 52, 53, 54, 55, 56, 57, 11, 42, 35, 0, 0
   \              000036000000
   \              370000003800
   \              000039000000
   \              0B0000002A00
   \              000023000000
   \              000000000000
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "KeyExten config updated!">`:
   \   00000000   4B6579457874       DC8 "KeyExten config updated!"
   \              656E20636F6E
   \              666967207570
   \              646174656421
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "KeyExtern">`:
   \   00000000   4B6579457874       DC8 "KeyExtern"
   \              65726E00    
   \   0000000A   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     Killer                4
     main                 56
     maincsm_onclose       4
     maincsm_oncreate      0
     maincsm_onmessage     4
     my_keyhook          240
     strcmp_nocase         0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     icsmd                            40
     e                                 4
     minus11                           4
     my_keyhook                      892
     ??strcmp_nocase_0                76
     maincsm_onmessage                76
     maincsm_oncreate                  4
     Killer                           36
     maincsm_onclose                  20
     maincsm_name_body               280
     MAINCSM                          60
     main                            132
     ??DataTable1                      4
     ??DataTable3                      4
     ?<Initializer for e>              4
     ?<Constant {26, 1, 4, 59, 60, 61, 62, 12, 0, 0
                                     116
     ?<Constant "KeyExten config updated!">
                                      28
     ?<Constant "KeyExtern">          12
      Others                          76

 
 1 296 bytes in segment CODE
   220 bytes in segment DATA_C
     4 bytes in segment DATA_I
     4 bytes in segment DATA_ID
   320 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 1 244 bytes of CODE  memory (+ 76 bytes shared)
   224 bytes of CONST memory
   324 bytes of DATA  memory

Errors: none
Warnings: none
